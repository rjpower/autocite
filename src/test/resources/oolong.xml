<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="0" size="22" family="Times" color="#000000"/>
	<fontspec id="1" size="14" family="Times" color="#000000"/>
	<fontspec id="2" size="15" family="Times" color="#000000"/>
	<fontspec id="3" size="12" family="Times" color="#000000"/>
	<fontspec id="4" size="8" family="Times" color="#000000"/>
	<fontspec id="5" size="8" family="Times" color="#000000"/>
<text top="110" left="175" width="568" height="23" font="0"><b>Oolong: Programming Asynchronous Distributed</b></text>
<text top="136" left="308" width="302" height="23" font="0"><b>Applications with Triggers</b></text>
<text top="170" left="183" width="143" height="15" font="1">Christopher Mitchell</text>
<text top="194" left="176" width="157" height="15" font="1">cmitchell@cs.nyu.edu</text>
<text top="170" left="408" width="102" height="15" font="1">Russell Power</text>
<text top="194" left="390" width="137" height="15" font="1">power@cs.nyu.edu</text>
<text top="170" left="627" width="72" height="15" font="1">Jinyang Li</text>
<text top="194" left="591" width="145" height="15" font="1">jinyang@cs.nyu.edu</text>
<text top="222" left="108" width="9" height="16" font="2">1</text>
<text top="222" left="135" width="97" height="16" font="2">Introduction</text>
<text top="244" left="126" width="315" height="13" font="3">With the increased popularity of cloud platforms</text>
<text top="262" left="108" width="333" height="13" font="3">such as EC2 and Azure, application programmers are</text>
<text top="280" left="108" width="333" height="13" font="3">turning to distributed computation. Existing program-</text>
<text top="298" left="108" width="333" height="13" font="3">ming frameworks provide useful abstractions for syn-</text>
<text top="316" left="108" width="333" height="13" font="3">chronous computation involving multiple rounds, for</text>
<text top="334" left="108" width="333" height="13" font="3">which most of a set of input data is examined in each</text>
<text top="352" left="108" width="333" height="13" font="3">round. For example, MapReduce and Dryad target ap-</text>
<text top="370" left="108" width="333" height="13" font="3">plications that stream an entire dataset for processing in</text>
<text top="388" left="108" width="333" height="13" font="3">each round. Piccolo [10] and Pregel [6] rely on global</text>
<text top="406" left="108" width="333" height="13" font="3">barriers to execute applications such as PageRank and</text>
<text top="423" left="108" width="333" height="13" font="3">k-means round by round. Asynchronous computation</text>
<text top="441" left="108" width="333" height="13" font="3">differs from synchronous computation in that the com-</text>
<text top="459" left="108" width="333" height="13" font="3">putation does not proceed in lockstep across rounds. In-</text>
<text top="477" left="108" width="333" height="13" font="3">stead, the result of past processing is immediately used</text>
<text top="495" left="108" width="285" height="13" font="3">to determine the course of current execution.</text>
<text top="495" left="406" width="35" height="13" font="3">Many</text>
<text top="513" left="108" width="333" height="13" font="3">problems are solved by efficient asynchronous compu-</text>
<text top="531" left="108" width="333" height="13" font="3">tation, e.g. single-source shortest path, asynchronous</text>
<text top="549" left="108" width="333" height="13" font="3">PageRank, web crawling etc. Unfortunately, such com-</text>
<text top="567" left="108" width="333" height="13" font="3">putation does not fit into existing programming frame-</text>
<text top="585" left="108" width="255" height="13" font="3">works that enforce global synchronization.</text>
<text top="603" left="126" width="315" height="13" font="3">We present Oolong, a framework designed to address</text>
<text top="621" left="108" width="251" height="13" font="3">the needs of asynchronous applications.</text>
<text top="621" left="373" width="68" height="13" font="3">In Oolong,</text>
<text top="639" left="108" width="333" height="13" font="3">application kernels running on different nodes modify</text>
<text top="657" left="108" width="333" height="13" font="3">shared state stored in distributed in-memory key-value</text>
<text top="675" left="108" width="333" height="13" font="3">tables [10]. Since asynchronous applications respond</text>
<text top="693" left="108" width="333" height="13" font="3">to state changes with further execution, Oolong offers</text>
<text top="711" left="108" width="333" height="13" font="3">a programming abstraction called the trigger, a section</text>
<text top="729" left="108" width="333" height="13" font="3">of code that is invoked when data is updated. Triggers</text>
<text top="747" left="108" width="333" height="13" font="3">can modify updates, insert or update any other state, and</text>
<text top="765" left="108" width="169" height="13" font="3">schedule additional triggers.</text>
<text top="783" left="126" width="315" height="13" font="3">Oolong's design is inspired by database triggers.</text>
<text top="801" left="108" width="333" height="13" font="3">However, unlike databases, which use triggers in the</text>
<text top="819" left="108" width="333" height="13" font="3">same transaction as the triggering update to maintain</text>
<text top="837" left="108" width="333" height="13" font="3">database invariants, Oolong uses triggers to support</text>
<text top="855" left="108" width="333" height="13" font="3">asynchronous computation, and faces a different set of</text>
<text top="873" left="108" width="333" height="13" font="3">challenges. To ensure prompt updates while still allow-</text>
<text top="891" left="108" width="333" height="13" font="3">ing potentially-blocking user code, Oolong offers two</text>
<text top="908" left="108" width="333" height="13" font="3">types of triggers that combined provide simple fast up-</text>
<text top="926" left="108" width="333" height="13" font="3">dates and complex trigger tasks. Normal triggers are</text>
<text top="944" left="108" width="333" height="13" font="3">fired and can run short arbitrary code segments when</text>
<text top="962" left="108" width="333" height="13" font="3">any key-value pair is updated, while long-running trig-</text>
<text top="980" left="108" width="333" height="13" font="3">gers asynchronously execute code that performs slow or</text>
<text top="998" left="108" width="333" height="13" font="3">repeated computations on a per-key basis. To ensure fast</text>
<text top="1016" left="108" width="333" height="13" font="3">recovery from failed nodes, we propose to implement</text>
<text top="1034" left="108" width="333" height="13" font="3">message replication that will allow single failed nodes</text>
<text top="1052" left="108" width="333" height="13" font="3">to be reverted to a previously-saved checkpoint on fail-</text>
<text top="1070" left="108" width="320" height="13" font="3">ure, rather than rolling the whole cluster back [10, 6].</text>
<text top="224" left="495" width="315" height="13" font="3">The rest of this WiP explains the design of Oolong in</text>
<text top="242" left="477" width="333" height="13" font="3">more detail, followed by a brief slice of related research.</text>
<text top="263" left="477" width="9" height="16" font="2">2</text>
<text top="263" left="504" width="52" height="16" font="2">Design</text>
<text top="285" left="495" width="315" height="13" font="3">Oolong is targeted at distributed applications with the</text>
<text top="303" left="477" width="151" height="13" font="3">following characteristics:</text>
<text top="320" left="477" width="333" height="14" font="3">� Asynchronous: Many problems are expressed most</text>
<text top="339" left="492" width="318" height="13" font="3">cleanly as a running queue of pending data to be pro-</text>
<text top="357" left="492" width="318" height="13" font="3">cessed. Data chosen for processing depends on data</text>
<text top="375" left="492" width="318" height="13" font="3">previously processed, and the execution terminates</text>
<text top="393" left="492" width="318" height="13" font="3">upon reaching some quiescent state. In these prob-</text>
<text top="411" left="492" width="318" height="13" font="3">lems, there is no concept of a synchronous round and</text>
<text top="429" left="492" width="244" height="13" font="3">reduced need for global synchronization.</text>
<text top="446" left="477" width="333" height="14" font="3">� Sparse execution: Instead of streaming and process-</text>
<text top="465" left="492" width="318" height="13" font="3">ing the entire dataset in synchronous rounds, the com-</text>
<text top="483" left="492" width="285" height="13" font="3">putation continuously examines subsets of data.</text>
<text top="500" left="477" width="333" height="14" font="3">� In-memory distributed state The intermediate state</text>
<text top="519" left="492" width="275" height="13" font="3">must fit in the aggregate memory of all nodes.</text>
<text top="537" left="495" width="315" height="13" font="3">An asynchronous application continuously modifies</text>
<text top="555" left="477" width="333" height="13" font="3">intermediate state, processing and generating updates</text>
<text top="573" left="477" width="333" height="13" font="3">until convergence. At a high level, Oolong stores such</text>
<text top="591" left="477" width="333" height="13" font="3">intermediate state in distributed in-memory tables. An</text>
<text top="609" left="477" width="333" height="13" font="3">application initiates the computation by invoking sec-</text>
<text top="627" left="477" width="333" height="13" font="3">tions of code called application kernels on one or more</text>
<text top="645" left="477" width="333" height="13" font="3">workers. In Oolong, application writers also provide</text>
<text top="663" left="477" width="333" height="13" font="3">sections of code called triggers, which are "fired" when</text>
<text top="680" left="477" width="333" height="13" font="3">an update to a key-value pair occurs, and allow, deny, or</text>
<text top="698" left="477" width="333" height="13" font="3">modify the update. An active application kernel returns</text>
<text top="716" left="477" width="333" height="13" font="3">only when all triggers have completed and no new up-</text>
<text top="734" left="477" width="333" height="13" font="3">dates are enqueued. In the example of the single-source</text>
<text top="752" left="477" width="333" height="13" font="3">shortest-path problem, the computation maintains each</text>
<text top="770" left="477" width="333" height="13" font="3">node's current best path as its intermediate state and</text>
<text top="788" left="477" width="333" height="13" font="3">kick-starts the processing with a single update on the</text>
<text top="806" left="477" width="333" height="13" font="3">graph's source vertex. The trigger for shortest-path cal-</text>
<text top="824" left="477" width="333" height="13" font="3">culation updates the current best path to a node and gen-</text>
<text top="842" left="477" width="259" height="13" font="3">erates new updates to the node's neighbors.</text>
<text top="860" left="495" width="315" height="13" font="3">Oolong offers two types of triggers. Short triggers</text>
<text top="878" left="477" width="333" height="13" font="3">execute quickly and can be viewed as a generalization</text>
<text top="896" left="477" width="333" height="13" font="3">of accumulators [10]. Short triggers comprise code to</text>
<text top="914" left="477" width="333" height="13" font="3">combine old and new values for a key into a new value</text>
<text top="932" left="477" width="333" height="13" font="3">so that concurrent updates to a key-value pair can oc-</text>
<text top="950" left="477" width="333" height="13" font="3">cur without synchronization. Additionally, these trig-</text>
<text top="968" left="477" width="333" height="13" font="3">gers can enqueue new updates to any table. Sample trig-</text>
<text top="986" left="477" width="333" height="13" font="3">ger pseudocode is shown below. Long-running triggers</text>
<text top="1010" left="477" width="288" height="8" font="4">def S S S P _ T r i g g e r ( node_ID , old_dist , n e w _ d i s t ) :</text>
<text top="1020" left="489" width="13" height="8" font="5"><b>if</b></text>
<text top="1020" left="509" width="124" height="8" font="4">n e w _ d i s t < o l d _ d i s t :</text>
<text top="1029" left="502" width="19" height="8" font="5"><b>for</b></text>
<text top="1029" left="528" width="206" height="8" font="4">targ et in nodes ( n o d e _ I D ) . t a r g e t s :</text>
<text top="1039" left="515" width="193" height="8" font="4">dists . upd ate ( target ,1+ n e w _ d i s t )</text>
<text top="1049" left="503" width="212" height="8" font="4">acce pt upd ate ( new_dist - > o l d _ d i s t )</text>
<text top="1058" left="489" width="25" height="8" font="5"><b>else</b></text>
<text top="1058" left="521" width="80" height="8" font="4">reje ct upd ate</text>
<text top="1077" left="494" width="299" height="13" font="3">Single-source shortest-path trigger pseudocode</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="6" size="6" family="Times" color="#000000"/>
<text top="113" left="108" width="333" height="13" font="3">execute code that might otherwise block or delay sub-</text>
<text top="131" left="108" width="333" height="13" font="3">sequent triggers. Long triggers run in one or more per-</text>
<text top="149" left="108" width="333" height="13" font="3">table threads, are associated with a key, and are period-</text>
<text top="167" left="108" width="333" height="13" font="3">ically asynchronously re-triggered. In typical usage, a</text>
<text top="185" left="108" width="333" height="13" font="3">short trigger may activate a long-running trigger to per-</text>
<text top="202" left="108" width="333" height="13" font="3">form a complex computation or wait for a condition.</text>
<text top="220" left="108" width="333" height="13" font="3">For example, a web crawler can use short triggers to en-</text>
<text top="238" left="108" width="333" height="13" font="3">queue links to be examined, and long triggers to perform</text>
<text top="256" left="108" width="333" height="13" font="3">the crawling. The long trigger could periodically check</text>
<text top="274" left="108" width="333" height="13" font="3">for the necessary robots.txt file to be retrieved for a site</text>
<text top="292" left="108" width="310" height="13" font="3">before completing or aborting the actual page fetch.</text>
<text top="311" left="126" width="315" height="13" font="3">Oolong offers standard failure recovery based on dis-</text>
<text top="329" left="108" width="333" height="13" font="3">tributed checkpointing [10, 6]. This strategy can be in-</text>
<text top="347" left="108" width="333" height="13" font="3">efficient because all nodes must roll back to the saved</text>
<text top="365" left="108" width="333" height="13" font="3">state upon a failure. Oolong therefore also provides</text>
<text top="383" left="108" width="333" height="13" font="3">finer-grained failure recovery by caching node commu-</text>
<text top="401" left="108" width="333" height="13" font="3">nication so that one or few failed nodes can be restarted</text>
<text top="419" left="108" width="333" height="13" font="3">without reverting other nodes. We are considering two</text>
<text top="437" left="108" width="333" height="13" font="3">designs, one that forwards updates to each worker to a</text>
<text top="455" left="108" width="333" height="13" font="3">slave worker, and a second in which workers cache out-</text>
<text top="473" left="108" width="333" height="13" font="3">going updates. In both cases, a recovered node can be</text>
<text top="491" left="108" width="333" height="13" font="3">brought up-to-date by replaying incoming updates and</text>
<text top="509" left="108" width="333" height="13" font="3">discarding duplicated outgoing updates. Such a design</text>
<text top="526" left="108" width="333" height="13" font="3">poses several questions about performance, overhead,</text>
<text top="544" left="108" width="239" height="13" font="3">and correctness that we are considering.</text>
<text top="569" left="108" width="9" height="16" font="2">3</text>
<text top="569" left="135" width="96" height="16" font="2">Applications</text>
<text top="592" left="126" width="315" height="13" font="3">We have built several applications to demonstrate the</text>
<text top="610" left="108" width="333" height="13" font="3">power of Oolong. Oolong has been tested on graph-</text>
<text top="628" left="108" width="333" height="13" font="3">derived problems such as bipartite matching and single-</text>
<text top="646" left="108" width="333" height="13" font="3">source shortest-paths. The Python web crawler demon-</text>
<text top="664" left="108" width="333" height="13" font="3">strated in [10] has been re-written with a simpler Oo-</text>
<text top="682" left="108" width="333" height="13" font="3">long implementation. Finally, we have coded an asyn-</text>
<text top="700" left="108" width="333" height="13" font="3">chronous PageRank implementation that is more ef-</text>
<text top="717" left="108" width="333" height="13" font="3">ficient than standard synchronous iterative PageRank.</text>
<text top="735" left="108" width="333" height="13" font="3">Qualitatively, our experience suggests that Oolong's mix</text>
<text top="753" left="108" width="333" height="13" font="3">of traditional synchronous kernels and asynchronous</text>
<text top="771" left="108" width="333" height="13" font="3">triggers offers a much more general and expressive</text>
<text top="789" left="108" width="333" height="13" font="3">toolset for application writers. Quantitively, code size</text>
<text top="807" left="108" width="333" height="13" font="3">between Piccolo and Oolong programs solving the same</text>
<text top="825" left="108" width="333" height="13" font="3">problem are similar, and the Oolong programs for bipar-</text>
<text top="843" left="108" width="333" height="13" font="3">tite matching and shortest-paths computation achieved</text>
<text top="861" left="108" width="333" height="13" font="3">a 2� to 4� speedup over their Piccolo counterparts</text>
<text top="879" left="108" width="333" height="13" font="3">by avoiding wasteful reiteration over already-converged</text>
<text top="897" left="108" width="31" height="13" font="3">state.</text>
<text top="921" left="108" width="9" height="16" font="2">4</text>
<text top="921" left="135" width="107" height="16" font="2">Related Work</text>
<text top="944" left="126" width="315" height="13" font="3">Oolong builds upon the work done for our previous</text>
<text top="962" left="108" width="333" height="13" font="3">project, Piccolo, which offers a framework on which</text>
<text top="980" left="108" width="333" height="13" font="3">to build fast, distributed applications centering on the</text>
<text top="998" left="108" width="333" height="13" font="3">concepts of data partitioning and locality [10]. Piccolo</text>
<text top="1016" left="108" width="333" height="13" font="3">compares favorably on many MapReduce tasks to the</text>
<text top="1034" left="108" width="333" height="13" font="3">Java framework Hadoop, over which it achieves signif-</text>
<text top="1052" left="108" width="333" height="13" font="3">icant speed benefits; it can process a wide range of par-</text>
<text top="1070" left="108" width="333" height="13" font="3">allel computation problems that cannot be cleanly or ef-</text>
<text top="113" left="477" width="333" height="13" font="3">ficiently adapted for MapReduce. Trigger concepts are</text>
<text top="131" left="477" width="333" height="13" font="3">applied extensively in database systems; McCarthy and</text>
<text top="149" left="477" width="333" height="13" font="3">Dayal [7] formally define such triggers. The Trigger-</text>
<text top="167" left="477" width="333" height="13" font="3">Man project exploits similarities between many closely-</text>
<text top="185" left="477" width="333" height="13" font="3">related triggers to reuse trigger code as much as pos-</text>
<text top="202" left="477" width="333" height="13" font="3">sible, reducing the storage and overhead necessary for</text>
<text top="220" left="477" width="333" height="13" font="3">many duplicates of the same procedure [3]. Recent sys-</text>
<text top="238" left="477" width="333" height="13" font="3">tems work has addressed active (event-triggered) proce-</text>
<text top="256" left="477" width="333" height="13" font="3">dures in distributed storage [2, 9]. Application-centric</text>
<text top="274" left="477" width="333" height="13" font="3">distributed systems have explored some of the problems</text>
<text top="292" left="477" width="333" height="13" font="3">that Oolong addresses with more specific approaches.</text>
<text top="310" left="477" width="333" height="13" font="3">GraphLab presents a parallel framework for machine</text>
<text top="328" left="477" width="333" height="13" font="3">learning applications, facilitating simple parallelization</text>
<text top="346" left="477" width="333" height="13" font="3">of such problems [5]. Network Datalog uses triggers</text>
<text top="364" left="477" width="333" height="13" font="3">to maintain routing rules in a distributed system, and</text>
<text top="382" left="477" width="333" height="13" font="3">is tailored for such problems, while Oolong uses trig-</text>
<text top="400" left="477" width="333" height="13" font="3">gers as first-class computation citizens [8]. The Linda</text>
<text top="418" left="477" width="333" height="13" font="3">system leaves framework details such as process coor-</text>
<text top="436" left="477" width="333" height="13" font="3">dination to be written by application coders but offers</text>
<text top="454" left="477" width="333" height="13" font="3">few native features [1]. Mace enables programmers to</text>
<text top="471" left="477" width="333" height="13" font="3">write network protocols such as Chord as distributed</text>
<text top="489" left="477" width="333" height="13" font="3">state machines, but is lower-level than optimal for a dis-</text>
<text top="507" left="477" width="333" height="13" font="3">tributed data-processing framework; Mace allows test-</text>
<text top="525" left="477" width="333" height="13" font="3">ing of a failure recovery protocol's details, for example,</text>
<text top="543" left="477" width="333" height="13" font="3">while Oolong exposes functions to save and load check-</text>
<text top="561" left="477" width="61" height="13" font="3">points [4].</text>
<text top="580" left="477" width="9" height="16" font="2">5</text>
<text top="580" left="504" width="83" height="16" font="2">References</text>
<text top="599" left="482" width="27" height="9" font="4">[1] A</text>
<text top="600" left="510" width="22" height="7" font="6">HUJA</text>
<text top="599" left="533" width="30" height="9" font="4">, S., C</text>
<text top="600" left="564" width="39" height="7" font="6">URRIERO</text>
<text top="599" left="604" width="21" height="9" font="4">, N.,</text>
<text top="600" left="629" width="19" height="7" font="6">AND</text>
<text top="599" left="652" width="8" height="9" font="4">G</text>
<text top="600" left="660" width="46" height="7" font="6">ELERNTER</text>
<text top="599" left="707" width="103" height="9" font="4">, D. Linda and friends.</text>
<text top="611" left="502" width="55" height="9" font="4">Computer 19</text>
<text top="610" left="557" width="75" height="9" font="4">, 8 (1986), 26�34.</text>
<text top="629" left="482" width="27" height="9" font="4">[2] G</text>
<text top="631" left="510" width="44" height="7" font="6">EAMBASU</text>
<text top="629" left="554" width="28" height="9" font="4">, R., L</text>
<text top="631" left="582" width="18" height="7" font="6">EVY</text>
<text top="629" left="600" width="43" height="9" font="4">, A. A., K</text>
<text top="631" left="643" width="26" height="7" font="6">OHNO</text>
<text top="629" left="669" width="27" height="9" font="4">, T., K</text>
<text top="631" left="697" width="72" height="7" font="6">RISHNAMURTHY</text>
<text top="629" left="769" width="19" height="9" font="4">, A.,</text>
<text top="631" left="790" width="19" height="7" font="6">AND</text>
<text top="641" left="502" width="6" height="9" font="4">L</text>
<text top="643" left="509" width="18" height="7" font="6">EVY</text>
<text top="641" left="526" width="284" height="9" font="4">, H. M. Comet: An Active Distributed Key-Value Store. In Proceed-</text>
<text top="653" left="502" width="308" height="9" font="4">ings of the 9th USENIX Symposium on Operating Systems Design and Im-</text>
<text top="665" left="502" width="55" height="9" font="4">plementation</text>
<text top="665" left="559" width="31" height="9" font="4">(2010).</text>
<text top="684" left="482" width="27" height="9" font="4">[3] H</text>
<text top="685" left="510" width="31" height="7" font="6">ANSON</text>
<text top="684" left="541" width="42" height="9" font="4">, E. N., C</text>
<text top="685" left="584" width="29" height="7" font="6">ARNES</text>
<text top="684" left="614" width="29" height="9" font="4">, C., H</text>
<text top="685" left="644" width="25" height="7" font="6">UANG</text>
<text top="684" left="670" width="29" height="9" font="4">, L., K</text>
<text top="685" left="699" width="37" height="7" font="6">ONYALA</text>
<text top="684" left="736" width="32" height="9" font="4">, M., N</text>
<text top="685" left="768" width="38" height="7" font="6">ORONHA</text>
<text top="684" left="807" width="3" height="9" font="4">,</text>
<text top="696" left="502" width="21" height="9" font="4">L., P</text>
<text top="697" left="523" width="73" height="7" font="6">ARTHASARATHY</text>
<text top="696" left="595" width="27" height="9" font="4">, S., P</text>
<text top="697" left="621" width="19" height="7" font="6">ARK</text>
<text top="696" left="640" width="16" height="9" font="4">, J.,</text>
<text top="697" left="659" width="19" height="7" font="6">AND</text>
<text top="696" left="681" width="8" height="9" font="4">V</text>
<text top="697" left="690" width="31" height="7" font="6">ERNON</text>
<text top="696" left="721" width="89" height="9" font="4">, A. Scalable Trigger</text>
<text top="708" left="502" width="308" height="9" font="4">Processing. In Proceedings of the 15th International Conference on Data</text>
<text top="720" left="502" width="52" height="9" font="4">Engineering</text>
<text top="720" left="556" width="31" height="9" font="4">(1999).</text>
<text top="738" left="482" width="27" height="9" font="4">[4] K</text>
<text top="740" left="510" width="30" height="7" font="6">ILLIAN</text>
<text top="738" left="541" width="31" height="9" font="4">, C., A</text>
<text top="740" left="573" width="43" height="7" font="6">NDERSON</text>
<text top="738" left="616" width="44" height="9" font="4">, J. W., B</text>
<text top="740" left="660" width="25" height="7" font="6">RAUD</text>
<text top="738" left="686" width="28" height="9" font="4">, R., J</text>
<text top="740" left="714" width="25" height="7" font="6">HALA</text>
<text top="738" left="739" width="20" height="9" font="4">, R.,</text>
<text top="740" left="763" width="19" height="7" font="6">AND</text>
<text top="738" left="786" width="8" height="9" font="4">V</text>
<text top="740" left="793" width="13" height="7" font="6">AH</text>
<text top="738" left="806" width="3" height="9" font="4">-</text>
<text top="752" left="502" width="17" height="7" font="6">DAT</text>
<text top="750" left="519" width="291" height="9" font="4">, A. Mace: Language support for building distributed systems. In</text>
<text top="762" left="502" width="308" height="9" font="4">In Proceedings of the ACM SIGPLAN Conference on Programming Lan-</text>
<text top="774" left="502" width="144" height="9" font="4">guage Design and Implementation</text>
<text top="774" left="648" width="31" height="9" font="4">(2007).</text>
<text top="793" left="482" width="26" height="9" font="4">[5] L</text>
<text top="794" left="509" width="14" height="7" font="6">OW</text>
<text top="793" left="523" width="30" height="9" font="4">, Y., G</text>
<text top="794" left="553" width="42" height="7" font="6">ONZALEZ</text>
<text top="793" left="595" width="28" height="9" font="4">, J., K</text>
<text top="794" left="623" width="31" height="7" font="6">YROLA</text>
<text top="793" left="654" width="31" height="9" font="4">, A., B</text>
<text top="794" left="685" width="34" height="7" font="6">ICKSON</text>
<text top="793" left="720" width="31" height="9" font="4">, D., G</text>
<text top="794" left="751" width="38" height="7" font="6">UESTRIN</text>
<text top="793" left="790" width="19" height="9" font="4">, C.,</text>
<text top="806" left="502" width="19" height="7" font="6">AND</text>
<text top="805" left="524" width="8" height="9" font="4">H</text>
<text top="806" left="532" width="54" height="7" font="6">ELLERSTEIN</text>
<text top="805" left="587" width="223" height="9" font="4">, J. M. Graphlab: A new framework for parallel ma-</text>
<text top="817" left="502" width="189" height="9" font="4">chine learning. CoRR abs/1006.4990 (2010).</text>
<text top="835" left="482" width="29" height="9" font="4">[6] M</text>
<text top="837" left="512" width="41" height="7" font="6">ALEWICZ</text>
<text top="835" left="553" width="30" height="9" font="4">, G., A</text>
<text top="837" left="583" width="35" height="7" font="6">USTERN</text>
<text top="835" left="618" width="44" height="9" font="4">, M. H., B</text>
<text top="837" left="663" width="9" height="7" font="6">IK</text>
<text top="835" left="673" width="40" height="9" font="4">, A. J., D</text>
<text top="837" left="713" width="35" height="7" font="6">EHNERT</text>
<text top="835" left="748" width="39" height="9" font="4">, J. C., H</text>
<text top="837" left="788" width="19" height="7" font="6">ORN</text>
<text top="835" left="807" width="3" height="9" font="4">,</text>
<text top="847" left="502" width="19" height="9" font="4">I., L</text>
<text top="849" left="521" width="25" height="7" font="6">EISER</text>
<text top="847" left="547" width="19" height="9" font="4">, N.,</text>
<text top="849" left="569" width="19" height="7" font="6">AND</text>
<text top="847" left="591" width="7" height="9" font="4">C</text>
<text top="849" left="599" width="51" height="7" font="6">ZAJKOWSKI</text>
<text top="847" left="651" width="159" height="9" font="4">, G. Pregel: A System for Large-Scale</text>
<text top="859" left="502" width="308" height="9" font="4">Graph Processing. In Proceedings of the 2010 International Conference</text>
<text top="871" left="502" width="102" height="9" font="4">on Management of Data</text>
<text top="871" left="606" width="31" height="9" font="4">(2010).</text>
<text top="890" left="482" width="29" height="9" font="4">[7] M</text>
<text top="891" left="512" width="6" height="7" font="6">C</text>
<text top="890" left="518" width="7" height="9" font="4">C</text>
<text top="891" left="525" width="30" height="7" font="6">ARTHY</text>
<text top="890" left="555" width="21" height="9" font="4">, D.,</text>
<text top="891" left="580" width="19" height="7" font="6">AND</text>
<text top="890" left="603" width="8" height="9" font="4">D</text>
<text top="891" left="611" width="23" height="7" font="6">AYAL</text>
<text top="890" left="634" width="176" height="9" font="4">, U. The Architecture of an Active Data</text>
<text top="902" left="502" width="308" height="9" font="4">Base Management System. In Proceedings of the 1989 ACM Sigmod In-</text>
<text top="914" left="502" width="201" height="9" font="4">ternational Conference on Management of Data</text>
<text top="914" left="706" width="31" height="9" font="4">(1989).</text>
<text top="933" left="482" width="27" height="9" font="4">[8] N</text>
<text top="934" left="510" width="24" height="7" font="6">IGAM</text>
<text top="933" left="534" width="28" height="9" font="4">, V., J</text>
<text top="934" left="562" width="6" height="7" font="6">A</text>
<text top="933" left="569" width="30" height="9" font="4">, L., L</text>
<text top="934" left="599" width="13" height="7" font="6">OO</text>
<text top="933" left="613" width="33" height="9" font="4">, B. T.,</text>
<text top="934" left="650" width="19" height="7" font="6">AND</text>
<text top="933" left="673" width="6" height="9" font="4">S</text>
<text top="934" left="679" width="36" height="7" font="6">CEDROV</text>
<text top="933" left="715" width="95" height="9" font="4">, A. Maintaining dis-</text>
<text top="944" left="502" width="308" height="9" font="4">tributed logic programs incrementally. In Proceedings of the 13th Interna-</text>
<text top="957" left="502" width="308" height="9" font="4">tional ACM SIGPLAN Symposium on Principles and Practice of Declara-</text>
<text top="968" left="502" width="76" height="9" font="4">tive Programming</text>
<text top="968" left="580" width="31" height="9" font="4">(2011).</text>
<text top="987" left="482" width="26" height="9" font="4">[9] P</text>
<text top="989" left="508" width="18" height="7" font="6">ENG</text>
<text top="987" left="527" width="21" height="9" font="4">, D.,</text>
<text top="989" left="552" width="19" height="7" font="6">AND</text>
<text top="987" left="575" width="8" height="9" font="4">D</text>
<text top="989" left="583" width="24" height="7" font="6">ABEK</text>
<text top="987" left="607" width="202" height="9" font="4">, F. Large-Scale Incremental Processing Using</text>
<text top="999" left="502" width="185" height="9" font="4">Distributed Transactions and Notifications.</text>
<text top="999" left="697" width="113" height="9" font="4">In Proceedings of the 9th</text>
<text top="1011" left="502" width="308" height="9" font="4">USENIX Symposium on Operating Systems Design and Implementation</text>
<text top="1023" left="502" width="31" height="9" font="4">(2010).</text>
<text top="1042" left="477" width="31" height="9" font="4">[10] P</text>
<text top="1043" left="508" width="26" height="7" font="6">OWER</text>
<text top="1042" left="535" width="20" height="9" font="4">, R.,</text>
<text top="1043" left="560" width="19" height="7" font="6">AND</text>
<text top="1042" left="583" width="6" height="9" font="4">L</text>
<text top="1043" left="590" width="3" height="7" font="6">I</text>
<text top="1042" left="593" width="217" height="9" font="4">, J. Piccolo: Building Fast, Distributed Programs</text>
<text top="1054" left="502" width="308" height="9" font="4">with Partitioned Tables. In Proceedings of the 9th USENIX Symposium on</text>
<text top="1066" left="502" width="197" height="9" font="4">Operating Systems Design and Implementation</text>
<text top="1066" left="702" width="31" height="9" font="4">(2010).</text>
</page>
</pdf2xml>
