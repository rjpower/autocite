<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="0" size="19" family="Times" color="#000000"/>
	<fontspec id="1" size="15" family="Times" color="#000000"/>
	<fontspec id="2" size="12" family="Times" color="#000000"/>
<text top="106" left="455" width="6" height="27" font="0"><b> </b></text>
<text top="158" left="145" width="5" height="17" font="1"> </text>
<text top="189" left="128" width="643" height="17" font="1">NOTICE: This is the author’s version of a work accepted for publication in The </text>
<text top="220" left="128" width="609" height="17" font="1">Computer Journal Published by Oxford University Press. All rights reserved. </text>
<text top="251" left="128" width="5" height="17" font="1"> </text>
<text top="282" left="128" width="643" height="17" font="1">Changes  resulting  from  the  publishing  process,  including  peer  review,  editing, </text>
<text top="313" left="128" width="643" height="17" font="1">corrections, structural formatting and other quality control mechanisms, may not </text>
<text top="344" left="128" width="643" height="17" font="1">be reflected in this document. A definitive version was subsequently published </text>
<text top="377" left="128" width="643" height="20" font="1">in  The  Computer  Journal,  Volume  54,  Issue  11,  pp.  1901−1924,  November </text>
<text top="408" left="128" width="50" height="17" font="1">2011. </text>
<text top="439" left="128" width="5" height="17" font="1"> </text>
<text top="477" left="145" width="4" height="19" font="2"> </text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="3" size="35" family="Times" color="#000000"/>
	<fontspec id="4" size="11" family="Times" color="#000000"/>
<text top="107" left="169" width="555" height="33" font="3">Type Inference to Optimize a Hybrid</text>
<text top="152" left="190" width="512" height="33" font="3">Statically and Dynamically Typed</text>
<text top="197" left="375" width="143" height="33" font="3">Language</text>
<text top="260" left="371" width="150" height="15" font="1">Francisco Ortin</text>
<text top="298" left="213" width="467" height="12" font="4">Computational Reﬂection Research Group, Department of Computer Science,</text>
<text top="315" left="328" width="237" height="12" font="4">Calvo Sotelo s/n, 33007, Oviedo, Spain</text>
<text top="333" left="368" width="157" height="12" font="4">Email: ortin@lsi.uniovi.es</text>
<text top="371" left="164" width="565" height="12" font="4">Dynamically typed languages are becoming increasingly popular for diﬀerent</text>
<text top="387" left="164" width="565" height="12" font="4">software development scenarios such as Web engineering, rapid prototyping,</text>
<text top="404" left="164" width="528" height="12" font="4">or the construction of applications that require runtime adaptiveness.</text>
<text top="404" left="714" width="15" height="12" font="4">In</text>
<text top="420" left="164" width="565" height="12" font="4">contrast, statically typed languages have undeniable advantages such as early</text>
<text top="437" left="164" width="516" height="12" font="4">type error detection and more opportunities for compiler optimizations.</text>
<text top="437" left="692" width="36" height="12" font="4">Since</text>
<text top="453" left="164" width="565" height="12" font="4">both approaches oﬀer diﬀerent beneﬁts, hybrid statically and dynamically typed</text>
<text top="469" left="164" width="565" height="12" font="4">programming languages have emerged, and some statically typed languages</text>
<text top="486" left="164" width="370" height="12" font="4">have also incorporated dynamic typing capabilities.</text>
<text top="486" left="548" width="180" height="12" font="4">In this paper we present</text>
<text top="502" left="164" width="565" height="12" font="4">the minimal core of StaDyn, a hybrid typing language that performs static</text>
<text top="519" left="164" width="485" height="12" font="4">type inference of both statically and dynamically typed references.</text>
<text top="519" left="663" width="66" height="12" font="4">The type</text>
<text top="535" left="164" width="565" height="12" font="4">information gathered by the compiler is used to generate eﬃcient .NET code,</text>
<text top="552" left="164" width="565" height="12" font="4">obtaining a signiﬁcant runtime performance improvement compared to C# 4.0</text>
<text top="568" left="375" width="142" height="12" font="4">and Visual Basic 10.</text>
<text top="599" left="174" width="545" height="12" font="4">Keywords: Hybrid Static and Dynamic Typing; Union Types; Intersection Types; Runtime</text>
<text top="615" left="363" width="167" height="12" font="4">Performance; Type Systems</text>
<text top="641" left="366" width="161" height="12" font="4">Received 15 February 2011</text>
<text top="708" left="70" width="13" height="13" font="2">1.</text>
<text top="708" left="100" width="141" height="13" font="2">INTRODUCTION</text>
<text top="744" left="70" width="359" height="13" font="2">Dynamically typed programming languages have re-</text>
<text top="762" left="70" width="359" height="13" font="2">cently turned out to be really suitable for speciﬁc sce-</text>
<text top="780" left="70" width="359" height="13" font="2">narios such as Web development, application frame-</text>
<text top="798" left="70" width="359" height="13" font="2">works, game scripting, interactive programming, rapid</text>
<text top="816" left="70" width="359" height="13" font="2">prototyping, dynamic aspect-oriented programming,</text>
<text top="834" left="70" width="359" height="13" font="2">and any kind of runtime adaptable or adaptive soft-</text>
<text top="852" left="70" width="359" height="13" font="2">ware. The main beneﬁt of these languages is the sim-</text>
<text top="870" left="70" width="359" height="13" font="2">plicity they oﬀer to model the dynamicity that is some-</text>
<text top="888" left="70" width="359" height="13" font="2">times required to build high context-dependent soft-</text>
<text top="906" left="70" width="359" height="13" font="2">ware. Common features of dynamic languages are meta-</text>
<text top="924" left="70" width="359" height="13" font="2">programming, reﬂection, mobility, and dynamic recon-</text>
<text top="942" left="70" width="178" height="13" font="2">ﬁguration and distribution.</text>
<text top="960" left="85" width="344" height="13" font="2">Taking the Web engineering area as an example,</text>
<text top="978" left="70" width="359" height="13" font="2">Ruby [1] has been successfully used together with</text>
<text top="996" left="70" width="359" height="13" font="2">the Ruby on Rails framework for creating database-</text>
<text top="1014" left="70" width="198" height="13" font="2">backed web applications [2].</text>
<text top="1014" left="289" width="139" height="13" font="2">This framework has</text>
<text top="1032" left="70" width="359" height="13" font="2">conﬁrmed the simplicity of implementing the DRY</text>
<text top="1050" left="70" width="359" height="13" font="2">(Don’t Repeat Yourself ) [3] and the Convention</text>
<text top="1068" left="70" width="359" height="13" font="2">over Conﬁguration [2] principles with this kind of</text>
<text top="1086" left="70" width="67" height="13" font="2">languages.</text>
<text top="1086" left="151" width="278" height="13" font="2">Nowadays, JavaScript [4] is being widely</text>
<text top="1103" left="70" width="359" height="13" font="2">employed to create interactive Web applications with</text>
<text top="1121" left="70" width="359" height="13" font="2">AJAX (Asynchronous JavaScript And XML) [5], while</text>
<text top="1139" left="70" width="359" height="13" font="2">PHP (PHP Hypertext Preprocessor ) is one of the</text>
<text top="1157" left="70" width="359" height="13" font="2">most popular languages to develop Web-based views.</text>
<text top="708" left="464" width="359" height="13" font="2">Python [6] is used for many diﬀerent purposes, being</text>
<text top="726" left="464" width="359" height="13" font="2">the Zope application server [7] (a framework for</text>
<text top="744" left="464" width="359" height="13" font="2">building content management systems, intranets and</text>
<text top="762" left="464" width="359" height="13" font="2">custom applications) and the Django Web application</text>
<text top="780" left="464" width="274" height="13" font="2">framework [8] two well-known examples.</text>
<text top="780" left="753" width="71" height="13" font="2">Due to its</text>
<text top="798" left="464" width="359" height="13" font="2">small size, portability and ease of integration, Lua</text>
<text top="816" left="464" width="359" height="13" font="2">[9] has gained great popularity for extending games</text>
<text top="834" left="464" width="359" height="13" font="2">[10]. Finally, a wide range of dynamic aspect-oriented</text>
<text top="852" left="464" width="359" height="13" font="2">tools has been built over dynamic languages [11, 12,</text>
<text top="870" left="464" width="359" height="13" font="2">1, 13], oﬀering a higher runtime adaptiveness than the</text>
<text top="888" left="464" width="133" height="13" font="2">common static ones.</text>
<text top="906" left="479" width="344" height="13" font="2">The beneﬁts oﬀered by dynamically typed program-</text>
<text top="924" left="464" width="359" height="13" font="2">ming languages have caused the recent addition of dy-</text>
<text top="942" left="464" width="334" height="13" font="2">namic typing to some statically typed languages.</text>
<text top="942" left="812" width="11" height="13" font="2">A</text>
<text top="960" left="464" width="359" height="14" font="2">clear example of this trend is the newly added dynamic</text>
<text top="978" left="464" width="359" height="13" font="2">type to the C# 4.0 programming language [14]. This</text>
<text top="996" left="464" width="359" height="13" font="2">new type instructs the compiler to postpone every static</text>
<text top="1013" left="464" width="359" height="13" font="2">type checking operation until runtime. With this new</text>
<text top="1031" left="464" width="359" height="13" font="2">characteristic, it is possible to develop more ﬂexible</text>
<text top="1049" left="464" width="359" height="13" font="2">code, even in the presence of the advanced C# static</text>
<text top="1067" left="464" width="359" height="13" font="2">type system. It is also possible to directly access dy-</text>
<text top="1085" left="464" width="359" height="13" font="2">namically typed programs written in IronPython, Iron-</text>
<text top="1103" left="464" width="359" height="13" font="2">Ruby and the JavaScript code used in Silverlight, ex-</text>
<text top="1121" left="464" width="359" height="13" font="2">ploiting the Dynamic Language Runtime (DLR) ser-</text>
<text top="1139" left="464" width="64" height="13" font="2">vices [15].</text>
<text top="1157" left="479" width="29" height="13" font="2">Java</text>
<text top="1157" left="522" width="25" height="13" font="2">also</text>
<text top="1157" left="560" width="38" height="13" font="2">seems</text>
<text top="1157" left="611" width="13" height="13" font="2">to</text>
<text top="1157" left="638" width="38" height="13" font="2">follow</text>
<text top="1157" left="689" width="24" height="13" font="2">this</text>
<text top="1157" left="727" width="39" height="13" font="2">trend.</text>
<text top="1157" left="797" width="26" height="13" font="2">The</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1262" width="892">
<text top="93" left="70" width="7" height="13" font="2">2</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="135" left="70" width="359" height="13" font="2">Java Speciﬁcation Request (JSR) 292 [16], expected</text>
<text top="153" left="70" width="359" height="13" font="2">to be included in Java 1.7, incorporates the new</text>
<text top="172" left="70" width="359" height="12" font="2">invokedynamic opcode to the Java Virtual Machine</text>
<text top="189" left="70" width="359" height="13" font="2">(JVM) in order to support the implementation of</text>
<text top="207" left="70" width="307" height="13" font="2">dynamically typed object-oriented languages.</text>
<text top="207" left="394" width="34" height="13" font="2">Since</text>
<text top="225" left="70" width="359" height="13" font="2">the computational model of dynamic languages requires</text>
<text top="243" left="70" width="220" height="13" font="2">extending the JVM semantics,</text>
<text top="243" left="303" width="125" height="13" font="2">Sun Microsystems</text>
<text top="261" left="70" width="359" height="13" font="2">launched the Da Vinci Machine project in January 2008</text>
<text top="279" left="70" width="359" height="13" font="2">[17]. This project is aimed at prototyping a number of</text>
<text top="297" left="70" width="359" height="13" font="2">enhancements to the JVM, so that it can run non-Java</text>
<text top="314" left="70" width="359" height="13" font="2">languages, especially dynamic ones, with a performance</text>
<text top="332" left="70" width="251" height="13" font="2">level comparable to that of Java itself.</text>
<text top="350" left="85" width="344" height="13" font="2">The great ﬂexibility of dynamic languages is,</text>
<text top="368" left="70" width="359" height="13" font="2">however, counteracted by limitations derived by the</text>
<text top="386" left="70" width="359" height="13" font="2">lack of static type checking. This deﬁciency implies two</text>
<text top="404" left="70" width="359" height="13" font="2">major drawbacks: no early detection of type errors, and</text>
<text top="422" left="70" width="359" height="13" font="2">commonly a considerable runtime performance penalty.</text>
<text top="440" left="70" width="359" height="13" font="2">Static typing oﬀers the programmer the detection of</text>
<text top="458" left="70" width="359" height="13" font="2">type errors at compile time, making it possible to</text>
<text top="476" left="70" width="359" height="13" font="2">ﬁx them immediately rather than discovering them</text>
<text top="494" left="70" width="359" height="13" font="2">at runtime –when the programmer’s eﬀorts might</text>
<text top="512" left="70" width="359" height="13" font="2">be aimed at some other task, or even after the</text>
<text top="530" left="70" width="359" height="13" font="2">program has been deployed [18]. Moreover, the runtime</text>
<text top="548" left="70" width="359" height="13" font="2">type inspection and type checking performed by</text>
<text top="566" left="70" width="359" height="13" font="2">dynamic type systems commonly involve a signiﬁcant</text>
<text top="583" left="70" width="137" height="13" font="2">performance penalty.</text>
<text top="601" left="85" width="344" height="13" font="2">Since both approaches oﬀer important beneﬁts, there</text>
<text top="619" left="70" width="359" height="13" font="2">have been former works on providing both typing</text>
<text top="637" left="70" width="359" height="13" font="2">approaches in the same language (see Section 6). Meijer</text>
<text top="655" left="70" width="359" height="13" font="2">and Drayton maintained that instead of providing</text>
<text top="673" left="70" width="359" height="13" font="2">programmers with a black or white choice between</text>
<text top="691" left="70" width="186" height="13" font="2">static or dynamic typing,</text>
<text top="691" left="269" width="159" height="13" font="2">it could be useful to</text>
<text top="709" left="70" width="247" height="13" font="2">strive for softer type systems [19].</text>
<text top="709" left="339" width="90" height="13" font="2">Static typing</text>
<text top="727" left="70" width="359" height="13" font="2">allows earlier detection of programming mistakes,</text>
<text top="745" left="70" width="359" height="13" font="2">better documentation, more opportunities for compiler</text>
<text top="763" left="70" width="359" height="13" font="2">optimizations, and increased runtime performance.</text>
<text top="781" left="70" width="359" height="13" font="2">Dynamic typing languages provide a solution to</text>
<text top="799" left="70" width="359" height="13" font="2">a kind of computational incompleteness inherent</text>
<text top="817" left="70" width="359" height="13" font="2">to statically-typed languages, oﬀering, for example,</text>
<text top="834" left="70" width="359" height="13" font="2">storage of persistent data, inter-process communication,</text>
<text top="852" left="70" width="359" height="13" font="2">dynamic program behavior customization, or generative</text>
<text top="870" left="70" width="124" height="13" font="2">programming [20].</text>
<text top="870" left="216" width="213" height="13" font="2">Hence, there are situations in</text>
<text top="888" left="70" width="359" height="13" font="2">programming when one would like to use dynamic types</text>
<text top="906" left="70" width="359" height="13" font="2">even in the presence of advanced static type systems</text>
<text top="924" left="70" width="27" height="13" font="2">[21].</text>
<text top="924" left="113" width="316" height="13" font="2">That is, static typing where possible, dynamic</text>
<text top="942" left="70" width="159" height="13" font="2">typing when needed [19].</text>
<text top="960" left="85" width="344" height="13" font="2">Our work breaks the programmers’ black or white</text>
<text top="978" left="70" width="284" height="13" font="2">choice between static or dynamic typing.</text>
<text top="978" left="370" width="59" height="13" font="2">We have</text>
<text top="996" left="70" width="359" height="13" font="2">designed a programming language, called StaDyn [22],</text>
<text top="1014" left="70" width="359" height="13" font="2">that supports both static and dynamic typing in</text>
<text top="1032" left="70" width="359" height="13" font="2">the very same programming language—an informal</text>
<text top="1050" left="70" width="359" height="13" font="2">description of the language can be consulted in [23].</text>
<text top="1068" left="70" width="359" height="13" font="2">Dynamic typing oﬀers higher ﬂexibility, whereas static</text>
<text top="1086" left="70" width="359" height="13" font="2">typing implies better robustness and performance.</text>
<text top="1103" left="70" width="359" height="13" font="2">The major contribution of our programming language,</text>
<text top="1121" left="70" width="359" height="13" font="2">compared to the existing hybrid typing languages,</text>
<text top="1139" left="70" width="359" height="13" font="2">is that the compiler keeps performing type checking</text>
<text top="1157" left="70" width="359" height="13" font="2">even over dynamic references. The type information</text>
<text top="135" left="464" width="359" height="13" font="2">gathered at compile time is used for both improving the</text>
<text top="153" left="464" width="359" height="13" font="2">runtime performance and the early type error detection</text>
<text top="171" left="464" width="196" height="13" font="2">of the programming language.</text>
<text top="189" left="479" width="344" height="13" font="2">In this paper we reduce the StaDyn programming</text>
<text top="207" left="464" width="359" height="13" font="2">language to its minimal core, making it easy to describe</text>
<text top="225" left="464" width="289" height="13" font="2">its type system and its erasure semantics.</text>
<text top="225" left="768" width="55" height="13" font="2">The key</text>
<text top="243" left="464" width="203" height="13" font="2">contributions of this paper are:</text>
<text top="272" left="467" width="7" height="14" font="2">•</text>
<text top="273" left="494" width="329" height="13" font="2">A type system to infer static type information</text>
<text top="291" left="494" width="248" height="13" font="2">of dynamic references (Section 3.2).</text>
<text top="291" left="760" width="63" height="13" font="2">The type</text>
<text top="308" left="494" width="329" height="13" font="2">system is ﬂow-sensitive [24] and interprets static</text>
<text top="326" left="494" width="329" height="13" font="2">information along the control ﬂow path, merging</text>
<text top="344" left="494" width="329" height="13" font="2">the type information of the incoming branches with</text>
<text top="362" left="494" width="329" height="13" font="2">union and intersection types [25]. This information</text>
<text top="380" left="494" width="329" height="13" font="2">is used to improve both the eﬃciency and the</text>
<text top="398" left="494" width="316" height="13" font="2">robustness of programs written in this language.</text>
<text top="415" left="467" width="7" height="14" font="2">•</text>
<text top="416" left="494" width="329" height="13" font="2">Its erasure semantics speciﬁcation by translating</text>
<text top="434" left="494" width="275" height="13" font="2">the StaDyn core to C# (Section 4).</text>
<text top="434" left="797" width="26" height="13" font="2">The</text>
<text top="452" left="494" width="329" height="13" font="2">translation scheme uses the static type information</text>
<text top="470" left="494" width="329" height="16" font="2">gathered by the compiler to generate eﬃcient .Net</text>
<text top="488" left="494" width="34" height="13" font="2">code.</text>
<text top="505" left="467" width="7" height="14" font="2">•</text>
<text top="506" left="494" width="329" height="13" font="2">A runtime performance assessment to measure the</text>
<text top="524" left="494" width="329" height="13" font="2">runtime performance of our proposal (Section 5.2).</text>
<text top="542" left="494" width="329" height="13" font="2">We compare runtime performance of the StaDyn</text>
<text top="560" left="494" width="329" height="13" font="2">core with that of the C# 4.0 and Visual Basic 10</text>
<text top="577" left="494" width="329" height="13" font="2">programming languages. For this evaluation, we</text>
<text top="595" left="494" width="329" height="13" font="2">have used two dynamically typed benchmarks, a</text>
<text top="613" left="494" width="329" height="13" font="2">hybrid statically and dynamically typed program,</text>
<text top="631" left="494" width="329" height="13" font="2">and a synthetic micro-benchmark that measures</text>
<text top="649" left="494" width="329" height="13" font="2">the relationship between execution time and type</text>
<text top="667" left="494" width="243" height="13" font="2">information inferred by the compiler.</text>
<text top="697" left="479" width="344" height="13" font="2">The rest of this paper is structured as follows. In the</text>
<text top="715" left="464" width="359" height="13" font="2">next section, we provide an informal overview of the</text>
<text top="733" left="464" width="359" height="13" font="2">StaDyn core to motivate our work. Section 3 formally</text>
<text top="751" left="464" width="359" height="13" font="2">describes the abstract syntax (Section 3.1) and the type</text>
<text top="769" left="464" width="281" height="13" font="2">system (Section 3.2) of the StaDyn core.</text>
<text top="769" left="761" width="62" height="13" font="2">Section 4</text>
<text top="787" left="464" width="359" height="13" font="2">presents its erasure semantics by translating it into C#,</text>
<text top="805" left="464" width="359" height="13" font="2">and a runtime performance assessment is detailed in</text>
<text top="823" left="464" width="359" height="13" font="2">Section 5. Related work is commented in Section 6 and,</text>
<text top="840" left="464" width="359" height="13" font="2">ﬁnally, Section 7 presents the conclusions and future</text>
<text top="858" left="464" width="36" height="13" font="2">work.</text>
<text top="897" left="464" width="13" height="13" font="2">2.</text>
<text top="897" left="495" width="328" height="13" font="2">AN INFORMAL OVERVIEW OF THE</text>
<text top="915" left="495" width="130" height="13" font="2">STADYN CORE</text>
<text top="942" left="464" width="359" height="14" font="2">Figure 1 shows an example use of the dynamic type</text>
<text top="960" left="464" width="204" height="13" font="2">recently included in C# 4.0.</text>
<text top="960" left="688" width="135" height="13" font="2">The ﬁrst beneﬁt is</text>
<text top="978" left="464" width="82" height="13" font="2">duck typing.</text>
<text top="978" left="564" width="260" height="13" font="2">Duck typing [1] is a property oﬀered</text>
<text top="996" left="464" width="359" height="13" font="2">by most dynamically typed languages that means that</text>
<text top="1014" left="464" width="359" height="13" font="2">an object is interchangeable with any other object</text>
<text top="1032" left="464" width="359" height="13" font="2">that implements the same dynamic interface, regardless</text>
<text top="1050" left="464" width="359" height="13" font="2">of whether those objects have a related inheritance</text>
<text top="1068" left="464" width="359" height="14" font="2">hierarchy or not. In line 33 (Figure 1) the x ﬁeld of</text>
<text top="1086" left="464" width="359" height="14" font="2">the data attribute in the l list is accessed regardless of</text>
<text top="1103" left="464" width="359" height="14" font="2">its type (list and l have been declared as dynamic).</text>
<text top="1121" left="464" width="359" height="14" font="2">This means that the ﬁrst parameter of the positiveX</text>
<text top="1139" left="464" width="359" height="14" font="2">method could be any linked list whose data objects</text>
<text top="1157" left="464" width="359" height="14" font="2">implement an x ﬁeld. These objects do not need to</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="5" size="8" family="Courier" color="#7e7e7e"/>
	<fontspec id="6" size="8" family="Helvetica" color="#7e7e7e"/>
	<fontspec id="7" size="8" family="Courier" color="#0000ff"/>
	<fontspec id="8" size="8" family="Courier" color="#000000"/>
	<fontspec id="9" size="8" family="Courier" color="#2a91af"/>
	<fontspec id="10" size="8" family="Courier" color="#007f00"/>
	<fontspec id="11" size="6" family="Courier" color="#000000"/>
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="816" width="7" height="13" font="2">3</text>
<text top="130" left="72" width="18" height="8" font="5">01:</text>
<text top="129" left="90" width="3" height="9" font="6"> </text>
<text top="130" left="96" width="31" height="8" font="7">using</text>
<text top="130" left="126" width="55" height="8" font="8"> System; </text>
<text top="141" left="72" width="18" height="8" font="5">02:</text>
<text top="140" left="90" width="3" height="9" font="6"> </text>
<text top="141" left="96" width="31" height="8" font="7">class</text>
<text top="141" left="126" width="6" height="8" font="8"> </text>
<text top="141" left="133" width="37" height="8" font="9">Points</text>
<text top="141" left="169" width="18" height="8" font="8"> { </text>
<text top="153" left="72" width="18" height="8" font="5">03:</text>
<text top="152" left="90" width="3" height="9" font="6"> </text>
<text top="153" left="96" width="12" height="8" font="8">  </text>
<text top="153" left="108" width="37" height="8" font="7">static</text>
<text top="153" left="145" width="6" height="8" font="8"> </text>
<text top="153" left="151" width="43" height="8" font="7">dynamic</text>
<text top="153" left="194" width="73" height="8" font="8"> createNode(</text>
<text top="153" left="267" width="43" height="8" font="7">dynamic</text>
<text top="153" left="310" width="43" height="8" font="8"> data, </text>
<text top="153" left="353" width="43" height="8" font="7">dynamic</text>
<text top="153" left="396" width="49" height="8" font="8"> next){ </text>
<text top="164" left="72" width="18" height="8" font="5">04:</text>
<text top="163" left="90" width="3" height="9" font="6"> </text>
<text top="164" left="96" width="24" height="8" font="8">    </text>
<text top="164" left="120" width="37" height="8" font="7">return</text>
<text top="164" left="157" width="6" height="8" font="8"> </text>
<text top="164" left="163" width="18" height="8" font="7">new</text>
<text top="164" left="182" width="190" height="8" font="8"> { data = data, next = next }; </text>
<text top="176" left="72" width="18" height="8" font="5">05:</text>
<text top="175" left="90" width="3" height="9" font="6"> </text>
<text top="176" left="96" width="24" height="8" font="8">  } </text>
<text top="187" left="72" width="18" height="8" font="5">06:</text>
<text top="186" left="90" width="3" height="9" font="6"> </text>
<text top="187" left="96" width="12" height="8" font="8">  </text>
<text top="187" left="108" width="37" height="8" font="7">static</text>
<text top="187" left="145" width="6" height="8" font="8"> </text>
<text top="187" left="151" width="43" height="8" font="7">dynamic</text>
<text top="187" left="194" width="80" height="8" font="8"> createPoint(</text>
<text top="187" left="273" width="18" height="8" font="7">int</text>
<text top="187" left="292" width="80" height="8" font="8"> dimensions, </text>
<text top="187" left="371" width="18" height="8" font="7">int</text>
<text top="187" left="390" width="31" height="8" font="8"> x,  </text>
<text top="199" left="96" width="177" height="8" font="8">                             </text>
<text top="199" left="273" width="18" height="8" font="7">int</text>
<text top="199" left="292" width="24" height="8" font="8"> y, </text>
<text top="199" left="316" width="18" height="8" font="7">int</text>
<text top="199" left="335" width="37" height="8" font="8"> z) { </text>
<text top="210" left="72" width="18" height="8" font="5">07:</text>
<text top="209" left="90" width="3" height="9" font="6"> </text>
<text top="210" left="96" width="24" height="8" font="8">    </text>
<text top="210" left="120" width="43" height="8" font="7">dynamic</text>
<text top="210" left="163" width="49" height="8" font="8"> point; </text>
<text top="222" left="72" width="18" height="8" font="5">08:</text>
<text top="221" left="90" width="3" height="9" font="6"> </text>
<text top="222" left="96" width="24" height="8" font="8">    </text>
<text top="222" left="120" width="12" height="8" font="7">if</text>
<text top="222" left="133" width="116" height="8" font="8"> (dimensions == 2) </text>
<text top="234" left="72" width="18" height="8" font="5">09:</text>
<text top="233" left="90" width="3" height="9" font="6"> </text>
<text top="234" left="96" width="86" height="8" font="8">      point = </text>
<text top="234" left="182" width="18" height="8" font="7">new</text>
<text top="234" left="200" width="233" height="8" font="8"> { x=x, y=y, dimensions=dimensions }; </text>
<text top="245" left="72" width="18" height="8" font="5">10:</text>
<text top="244" left="90" width="3" height="9" font="6"> </text>
<text top="245" left="96" width="24" height="8" font="8">    </text>
<text top="245" left="120" width="24" height="8" font="7">else</text>
<text top="245" left="145" width="6" height="8" font="8"> </text>
<text top="257" left="72" width="18" height="8" font="5">11:</text>
<text top="256" left="90" width="3" height="9" font="6"> </text>
<text top="257" left="96" width="86" height="8" font="8">      point = </text>
<text top="257" left="182" width="18" height="8" font="7">new</text>
<text top="257" left="200" width="208" height="8" font="8"> { x=x, y=y, z=z, dimensions=3 }; </text>
<text top="268" left="72" width="18" height="8" font="5">12:</text>
<text top="267" left="90" width="3" height="9" font="6"> </text>
<text top="268" left="96" width="24" height="8" font="8">    </text>
<text top="268" left="120" width="37" height="8" font="7">return</text>
<text top="268" left="157" width="49" height="8" font="8"> point; </text>
<text top="280" left="72" width="18" height="8" font="5">13:</text>
<text top="279" left="90" width="3" height="9" font="6"> </text>
<text top="280" left="96" width="24" height="8" font="8">  } </text>
<text top="291" left="72" width="18" height="8" font="5">14:</text>
<text top="290" left="90" width="3" height="9" font="6"> </text>
<text top="291" left="96" width="12" height="8" font="8">  </text>
<text top="291" left="108" width="37" height="8" font="7">static</text>
<text top="291" left="145" width="6" height="8" font="8"> </text>
<text top="291" left="151" width="43" height="8" font="7">dynamic</text>
<text top="291" left="194" width="86" height="8" font="8"> createPoints(</text>
<text top="291" left="279" width="18" height="8" font="7">int</text>
<text top="291" left="298" width="67" height="8" font="8"> number) { </text>
<text top="303" left="72" width="18" height="8" font="5">15:</text>
<text top="302" left="90" width="3" height="9" font="6"> </text>
<text top="303" left="96" width="24" height="8" font="8">    </text>
<text top="303" left="120" width="18" height="8" font="7">int</text>
<text top="303" left="139" width="24" height="8" font="8"> i; </text>
<text top="314" left="72" width="18" height="8" font="5">16:</text>
<text top="314" left="90" width="3" height="9" font="6"> </text>
<text top="314" left="96" width="24" height="8" font="8">    </text>
<text top="314" left="120" width="43" height="8" font="7">dynamic</text>
<text top="314" left="163" width="86" height="8" font="8"> list, point; </text>
<text top="326" left="72" width="18" height="8" font="5">17:</text>
<text top="325" left="90" width="3" height="9" font="6"> </text>
<text top="326" left="96" width="67" height="8" font="8">    i = 0; </text>
<text top="337" left="72" width="18" height="8" font="5">18:</text>
<text top="337" left="90" width="3" height="9" font="6"> </text>
<text top="337" left="96" width="67" height="8" font="8">    list = </text>
<text top="337" left="163" width="24" height="8" font="7">null</text>
<text top="337" left="188" width="12" height="8" font="8">; </text>
<text top="349" left="72" width="18" height="8" font="5">19:</text>
<text top="348" left="90" width="3" height="9" font="6"> </text>
<text top="349" left="96" width="24" height="8" font="8">    </text>
<text top="349" left="120" width="31" height="8" font="7">while</text>
<text top="349" left="151" width="98" height="8" font="8"> (i &lt; number) { </text>
<text top="361" left="72" width="18" height="8" font="5">20:</text>
<text top="360" left="90" width="3" height="9" font="6"> </text>
<text top="361" left="96" width="343" height="8" font="8">      point = createPoint(i%2 + 2, number/2 - i, i, i); </text>
<text top="372" left="72" width="18" height="8" font="5">21:</text>
<text top="371" left="90" width="3" height="9" font="6"> </text>
<text top="372" left="96" width="233" height="8" font="8">      list = createNode(point, list); </text>
<text top="384" left="72" width="18" height="8" font="5">22:</text>
<text top="383" left="90" width="3" height="9" font="6"> </text>
<text top="384" left="96" width="104" height="8" font="8">      i = i + 1; </text>
<text top="395" left="72" width="18" height="8" font="5">23:</text>
<text top="395" left="90" width="3" height="9" font="6"> </text>
<text top="395" left="96" width="37" height="8" font="8">    } </text>
<text top="407" left="72" width="18" height="8" font="5">24:</text>
<text top="406" left="90" width="3" height="9" font="6"> </text>
<text top="407" left="96" width="24" height="8" font="8">    </text>
<text top="407" left="120" width="37" height="8" font="7">return</text>
<text top="407" left="157" width="43" height="8" font="8"> list; </text>
<text top="418" left="72" width="18" height="8" font="5">25:</text>
<text top="418" left="90" width="3" height="9" font="6"> </text>
<text top="418" left="96" width="24" height="8" font="8">  } </text>
<text top="430" left="72" width="18" height="8" font="5">26:</text>
<text top="429" left="90" width="3" height="9" font="6"> </text>
<text top="430" left="96" width="12" height="8" font="8">  </text>
<text top="430" left="108" width="37" height="8" font="7">static</text>
<text top="430" left="145" width="6" height="8" font="8"> </text>
<text top="430" left="151" width="43" height="8" font="7">dynamic</text>
<text top="430" left="194" width="67" height="8" font="8"> positiveX(</text>
<text top="430" left="261" width="43" height="8" font="7">dynamic</text>
<text top="430" left="304" width="43" height="8" font="8"> list, </text>
<text top="430" left="347" width="18" height="8" font="7">int</text>
<text top="430" left="365" width="37" height="8" font="8"> n) { </text>
<text top="442" left="72" width="18" height="8" font="5">27:</text>
<text top="441" left="90" width="3" height="9" font="6"> </text>
<text top="442" left="96" width="24" height="8" font="8">    </text>
<text top="442" left="120" width="18" height="8" font="7">int</text>
<text top="442" left="139" width="24" height="8" font="8"> i; </text>
<text top="453" left="72" width="18" height="8" font="5">28:</text>
<text top="452" left="90" width="3" height="9" font="6"> </text>
<text top="453" left="96" width="24" height="8" font="8">    </text>
<text top="453" left="120" width="43" height="8" font="7">dynamic</text>
<text top="453" left="163" width="73" height="8" font="8"> l, result; </text>
<text top="465" left="72" width="18" height="8" font="5">29:</text>
<text top="464" left="90" width="3" height="9" font="6"> </text>
<text top="465" left="96" width="67" height="8" font="8">    i = 0; </text>
<text top="476" left="72" width="18" height="8" font="5">30:</text>
<text top="475" left="90" width="3" height="9" font="6"> </text>
<text top="476" left="96" width="80" height="8" font="8">    result = </text>
<text top="476" left="175" width="24" height="8" font="7">null</text>
<text top="476" left="200" width="12" height="8" font="8">; </text>
<text top="488" left="72" width="18" height="8" font="5">31:</text>
<text top="487" left="90" width="3" height="9" font="6"> </text>
<text top="488" left="96" width="86" height="8" font="8">    l = list; </text>
<text top="499" left="72" width="18" height="8" font="5">32:</text>
<text top="498" left="90" width="3" height="9" font="6"> </text>
<text top="499" left="96" width="24" height="8" font="8">    </text>
<text top="499" left="120" width="31" height="8" font="7">while</text>
<text top="499" left="151" width="67" height="8" font="8"> (i &lt; n) { </text>
<text top="511" left="72" width="18" height="8" font="5">33:</text>
<text top="510" left="90" width="3" height="9" font="6"> </text>
<text top="511" left="96" width="37" height="8" font="8">      </text>
<text top="511" left="133" width="12" height="8" font="7">if</text>
<text top="511" left="145" width="104" height="8" font="8"> (l.data.x &gt;= 0) </text>
<text top="523" left="72" width="18" height="8" font="5">34:</text>
<text top="522" left="90" width="3" height="9" font="6"> </text>
<text top="523" left="96" width="275" height="8" font="8">        result = createNode(l.data, result); </text>
<text top="534" left="72" width="18" height="8" font="5">35:</text>
<text top="533" left="90" width="3" height="9" font="6"> </text>
<text top="534" left="96" width="110" height="8" font="8">      l = l.next; </text>
<text top="546" left="72" width="18" height="8" font="5">36:</text>
<text top="545" left="90" width="3" height="9" font="6"> </text>
<text top="546" left="96" width="104" height="8" font="8">      i = i + 1; </text>
<text top="557" left="72" width="18" height="8" font="5">37:</text>
<text top="556" left="90" width="3" height="9" font="6"> </text>
<text top="557" left="96" width="49" height="8" font="8">      } </text>
<text top="569" left="72" width="18" height="8" font="5">38:</text>
<text top="568" left="90" width="3" height="9" font="6"> </text>
<text top="569" left="96" width="24" height="8" font="8">    </text>
<text top="569" left="120" width="37" height="8" font="7">return</text>
<text top="569" left="157" width="55" height="8" font="8"> result; </text>
<text top="580" left="72" width="18" height="8" font="5">39:</text>
<text top="579" left="90" width="3" height="9" font="6"> </text>
<text top="580" left="96" width="24" height="8" font="8">  } </text>
<text top="130" left="481" width="6" height="8" font="8"> </text>
<text top="141" left="457" width="18" height="8" font="5">40:</text>
<text top="140" left="475" width="3" height="9" font="6"> </text>
<text top="141" left="481" width="12" height="8" font="8">  </text>
<text top="141" left="493" width="37" height="8" font="7">static</text>
<text top="141" left="530" width="6" height="8" font="8"> </text>
<text top="141" left="536" width="37" height="8" font="7">double</text>
<text top="141" left="573" width="73" height="8" font="8"> distance3D(</text>
<text top="141" left="647" width="43" height="8" font="7">dynamic</text>
<text top="141" left="689" width="73" height="8" font="8"> point) {   </text>
<text top="153" left="457" width="18" height="8" font="5">41:</text>
<text top="152" left="475" width="3" height="9" font="6"> </text>
<text top="153" left="481" width="24" height="8" font="8">    </text>
<text top="153" left="506" width="37" height="8" font="7">double</text>
<text top="153" left="542" width="49" height="8" font="8"> value; </text>
<text top="164" left="457" width="18" height="8" font="5">42:</text>
<text top="163" left="475" width="3" height="9" font="6"> </text>
<text top="164" left="481" width="73" height="8" font="8">    value = </text>
<text top="164" left="555" width="37" height="8" font="9">Double</text>
<text top="164" left="591" width="67" height="8" font="8">.MaxValue; </text>
<text top="176" left="457" width="18" height="8" font="5">43:</text>
<text top="175" left="475" width="3" height="9" font="6"> </text>
<text top="176" left="481" width="24" height="8" font="8">    </text>
<text top="176" left="506" width="239" height="8" font="10">// point.center++; // No compiler error</text>
<text top="176" left="744" width="6" height="8" font="8"> </text>
<text top="187" left="457" width="18" height="8" font="5">44:</text>
<text top="186" left="475" width="3" height="9" font="6"> </text>
<text top="187" left="481" width="24" height="8" font="8">    </text>
<text top="187" left="506" width="12" height="8" font="7">if</text>
<text top="187" left="518" width="153" height="8" font="8"> (point.dimensions == 3) </text>
<text top="199" left="457" width="18" height="8" font="5">45:</text>
<text top="198" left="475" width="3" height="9" font="6"> </text>
<text top="199" left="481" width="86" height="8" font="8">      value = </text>
<text top="199" left="567" width="24" height="8" font="9">Math</text>
<text top="199" left="591" width="153" height="8" font="8">.Sqrt(point.x*point.x +  </text>
<text top="210" left="481" width="343" height="8" font="8">                     point.y*point.y + point.z*point.z);</text>
<text top="222" left="457" width="18" height="8" font="5">46:</text>
<text top="221" left="475" width="3" height="9" font="6"> </text>
<text top="222" left="481" width="24" height="8" font="8">    </text>
<text top="222" left="506" width="37" height="8" font="7">return</text>
<text top="222" left="542" width="49" height="8" font="8"> value; </text>
<text top="234" left="457" width="18" height="8" font="5">47:</text>
<text top="233" left="475" width="3" height="9" font="6"> </text>
<text top="234" left="481" width="24" height="8" font="8">  } </text>
<text top="245" left="457" width="18" height="8" font="5">48:</text>
<text top="244" left="475" width="3" height="9" font="6"> </text>
<text top="245" left="481" width="37" height="8" font="7">static</text>
<text top="245" left="518" width="6" height="8" font="8"> </text>
<text top="245" left="524" width="43" height="8" font="7">dynamic</text>
<text top="245" left="567" width="116" height="8" font="8"> closestToOrigin3D(</text>
<text top="245" left="683" width="43" height="8" font="7">dynamic</text>
<text top="245" left="726" width="43" height="8" font="8"> list, </text>
<text top="245" left="769" width="18" height="8" font="7">int</text>
<text top="245" left="787" width="37" height="8" font="8"> n) { </text>
<text top="257" left="457" width="18" height="8" font="5">49:</text>
<text top="256" left="475" width="3" height="9" font="6"> </text>
<text top="257" left="481" width="12" height="8" font="8">  </text>
<text top="257" left="493" width="18" height="8" font="7">int</text>
<text top="257" left="512" width="24" height="8" font="8"> i; </text>
<text top="268" left="457" width="18" height="8" font="5">50:</text>
<text top="267" left="475" width="3" height="9" font="6"> </text>
<text top="268" left="481" width="12" height="8" font="8">  </text>
<text top="268" left="493" width="37" height="8" font="7">double</text>
<text top="268" left="530" width="86" height="8" font="8"> minDistance; </text>
<text top="280" left="457" width="18" height="8" font="5">51:</text>
<text top="279" left="475" width="3" height="9" font="6"> </text>
<text top="280" left="481" width="12" height="8" font="8">  </text>
<text top="280" left="493" width="43" height="8" font="7">dynamic</text>
<text top="280" left="536" width="86" height="8" font="8"> l, point3D = </text>
<text top="280" left="622" width="24" height="8" font="7">null</text>
<text top="280" left="647" width="12" height="8" font="8">; </text>
<text top="291" left="457" width="18" height="8" font="5">52:</text>
<text top="290" left="475" width="3" height="9" font="6"> </text>
<text top="291" left="481" width="98" height="8" font="8">  minDistance = </text>
<text top="291" left="579" width="37" height="8" font="9">Double</text>
<text top="291" left="616" width="67" height="8" font="8">.MaxValue; </text>
<text top="303" left="457" width="18" height="8" font="5">53:</text>
<text top="302" left="475" width="3" height="9" font="6"> </text>
<text top="303" left="481" width="73" height="8" font="8">  l = list; </text>
<text top="314" left="457" width="18" height="8" font="5">54:</text>
<text top="314" left="475" width="3" height="9" font="6"> </text>
<text top="314" left="481" width="55" height="8" font="8">  i = 0; </text>
<text top="326" left="457" width="18" height="8" font="5">55:</text>
<text top="325" left="475" width="3" height="9" font="6"> </text>
<text top="326" left="481" width="12" height="8" font="8">  </text>
<text top="326" left="493" width="31" height="8" font="7">while</text>
<text top="326" left="524" width="67" height="8" font="8"> (i &lt; n) { </text>
<text top="337" left="457" width="18" height="8" font="5">56:</text>
<text top="337" left="475" width="3" height="9" font="6"> </text>
<text top="337" left="481" width="24" height="8" font="8">    </text>
<text top="337" left="506" width="12" height="8" font="7">if</text>
<text top="337" left="518" width="233" height="8" font="8"> (distance3D(l.data) &lt; minDistance) { </text>
<text top="349" left="457" width="18" height="8" font="5">57:</text>
<text top="348" left="475" width="3" height="9" font="6"> </text>
<text top="349" left="481" width="245" height="8" font="8">      minDistance = distance3D(l.data); </text>
<text top="361" left="457" width="18" height="8" font="5">58:</text>
<text top="360" left="475" width="3" height="9" font="6"> </text>
<text top="361" left="481" width="147" height="8" font="8">      point3D = l.data; </text>
<text top="372" left="457" width="18" height="8" font="5">59:</text>
<text top="371" left="475" width="3" height="9" font="6"> </text>
<text top="372" left="481" width="37" height="8" font="8">    } </text>
<text top="384" left="457" width="18" height="8" font="5">60:</text>
<text top="383" left="475" width="3" height="9" font="6"> </text>
<text top="384" left="481" width="98" height="8" font="8">    l = l.next; </text>
<text top="395" left="457" width="18" height="8" font="5">61:</text>
<text top="395" left="475" width="3" height="9" font="6"> </text>
<text top="395" left="481" width="92" height="8" font="8">    i = i + 1; </text>
<text top="407" left="457" width="18" height="8" font="5">62:</text>
<text top="406" left="475" width="3" height="9" font="6"> </text>
<text top="407" left="481" width="24" height="8" font="8">  } </text>
<text top="418" left="457" width="18" height="8" font="5">63:</text>
<text top="418" left="475" width="3" height="9" font="6"> </text>
<text top="418" left="481" width="12" height="8" font="8">  </text>
<text top="418" left="493" width="37" height="8" font="7">return</text>
<text top="418" left="530" width="61" height="8" font="8"> point3D; </text>
<text top="430" left="457" width="18" height="8" font="5">64:</text>
<text top="429" left="475" width="3" height="9" font="6"> </text>
<text top="430" left="481" width="24" height="8" font="8">  } </text>
<text top="442" left="457" width="18" height="8" font="5">65:</text>
<text top="441" left="475" width="3" height="9" font="6"> </text>
<text top="442" left="481" width="12" height="8" font="8">  </text>
<text top="442" left="493" width="37" height="8" font="7">static</text>
<text top="442" left="530" width="6" height="8" font="8"> </text>
<text top="442" left="536" width="24" height="8" font="7">void</text>
<text top="442" left="561" width="61" height="8" font="8"> Main() { </text>
<text top="453" left="457" width="18" height="8" font="5">66:</text>
<text top="452" left="475" width="3" height="9" font="6"> </text>
<text top="453" left="481" width="24" height="8" font="8">    </text>
<text top="453" left="506" width="18" height="8" font="7">int</text>
<text top="453" left="524" width="104" height="8" font="8"> numberOfPoints; </text>
<text top="465" left="457" width="18" height="8" font="5">67:</text>
<text top="464" left="475" width="3" height="9" font="6"> </text>
<text top="465" left="481" width="24" height="8" font="8">    </text>
<text top="465" left="506" width="43" height="8" font="7">dynamic</text>
<text top="465" left="549" width="147" height="8" font="8"> list, positive, point; </text>
<text top="476" left="457" width="18" height="8" font="5">68:</text>
<text top="475" left="475" width="3" height="9" font="6"> </text>
<text top="476" left="481" width="153" height="8" font="8">    numberOfPoints = 10; </text>
<text top="488" left="457" width="18" height="8" font="5">69:</text>
<text top="487" left="475" width="3" height="9" font="6"> </text>
<text top="488" left="481" width="251" height="8" font="8">    list = createPoints(numberOfPoints); </text>
<text top="499" left="457" width="18" height="8" font="5">70:</text>
<text top="498" left="475" width="3" height="9" font="6"> </text>
<text top="499" left="481" width="24" height="8" font="8">    </text>
<text top="499" left="506" width="239" height="8" font="10">// list.data = 10; // No compiler error</text>
<text top="499" left="744" width="6" height="8" font="8"> </text>
<text top="511" left="457" width="18" height="8" font="5">71:</text>
<text top="510" left="475" width="3" height="9" font="6"> </text>
<text top="511" left="481" width="294" height="8" font="8">    positive = positiveX(list, numberOfPoints); </text>
<text top="523" left="457" width="18" height="8" font="5">72:</text>
<text top="522" left="475" width="3" height="9" font="6"> </text>
<text top="523" left="481" width="324" height="8" font="8">    point = closestToOrigin3D(list, numberOfPoints); </text>
<text top="534" left="457" width="18" height="8" font="5">73:</text>
<text top="533" left="475" width="3" height="9" font="6"> </text>
<text top="534" left="481" width="24" height="8" font="8">  } </text>
<text top="546" left="457" width="18" height="8" font="5">74:</text>
<text top="545" left="475" width="3" height="9" font="6"> </text>
<text top="546" left="481" width="12" height="8" font="8">} </text>
<text top="557" left="481" width="5" height="7" font="11"> </text>
<text top="566" left="481" width="5" height="7" font="11"> </text>
<text top="614" left="234" width="425" height="12" font="4">FIGURE 1. Sample C# 4.0 code that makes use of dynamic typing.</text>
<text top="663" left="70" width="359" height="14" font="2">belong to a speciﬁc hierarchy deﬁning the shared x</text>
<text top="681" left="70" width="359" height="13" font="2">message, and they do not have to be instances of the</text>
<text top="699" left="70" width="119" height="13" font="2">same type either.</text>
<text top="699" left="206" width="222" height="13" font="2">An example of this ﬂexibility is</text>
<text top="717" left="70" width="359" height="14" font="2">shown in Figure 1, where the list reference passed</text>
<text top="735" left="70" width="359" height="14" font="2">to the positiveX method (line 71) holds a linked list</text>
<text top="753" left="70" width="359" height="13" font="2">with objects of two diﬀerent types (two and three</text>
<text top="771" left="70" width="359" height="13" font="2">dimensional points). The method returns another list</text>
<text top="788" left="70" width="359" height="14" font="2">containing those objects whose x ﬁeld value is positive,</text>
<text top="806" left="70" width="155" height="13" font="2">regardless of their type.</text>
<text top="829" left="85" width="58" height="13" font="2">Dynamic</text>
<text top="829" left="168" width="42" height="13" font="2">typing</text>
<text top="829" left="233" width="10" height="13" font="2">is</text>
<text top="829" left="268" width="25" height="13" font="2">also</text>
<text top="829" left="317" width="29" height="13" font="2">used</text>
<text top="829" left="371" width="12" height="13" font="2">in</text>
<text top="829" left="408" width="21" height="13" font="2">the</text>
<text top="849" left="70" width="133" height="12" font="2">closestToOrigin3D</text>
<text top="847" left="216" width="54" height="13" font="2">method.</text>
<text top="847" left="299" width="94" height="13" font="2">In this case,</text>
<text top="847" left="408" width="21" height="13" font="2">the</text>
<text top="865" left="70" width="359" height="14" font="2">ﬁrst parameter should be a linked list whose data is</text>
<text top="883" left="70" width="359" height="14" font="2">any object that implements a dimensions ﬁeld compa-</text>
<text top="901" left="70" width="359" height="13" font="2">rable with an integer. Moreover, those objects whose</text>
<text top="920" left="70" width="359" height="12" font="2">dimensions ﬁeld value is 3 must implement the x, y</text>
<text top="937" left="70" width="359" height="14" font="2">and z ﬁelds, and they must be subtypes of double</text>
<text top="955" left="70" width="359" height="14" font="2">(they are passed as parameters to the Math.Sqrt</text>
<text top="973" left="70" width="359" height="13" font="2">method). The returned object is the one that fulﬁlls</text>
<text top="991" left="70" width="359" height="13" font="2">these conditions, being that nearest to the origin of</text>
<text top="1009" left="70" width="359" height="13" font="2">coordinates. This example shows how the C# 4.0 type</text>
<text top="1027" left="70" width="266" height="13" font="2">system can consider dynamic conditions.</text>
<text top="1050" left="85" width="344" height="13" font="2">StaDyn is an object-oriented programming language</text>
<text top="1068" left="70" width="359" height="13" font="2">based on C# 3.0 that supports both dynamic and</text>
<text top="1086" left="70" width="359" height="13" font="2">static typing. Although the current implementation of</text>
<text top="1103" left="70" width="359" height="13" font="2">StaDyn oﬀers most of the features of C# 3.0 [22], its</text>
<text top="1121" left="70" width="359" height="13" font="2">minimal core is focused on formalizing how to include</text>
<text top="1139" left="70" width="359" height="13" font="2">dynamic and static typing in the same programming</text>
<text top="1157" left="70" width="61" height="13" font="2">language.</text>
<text top="1157" left="149" width="280" height="13" font="2">For that purpose, only its minimal core</text>
<text top="663" left="464" width="359" height="13" font="2">features are speciﬁed here: functions, objects (without</text>
<text top="681" left="464" width="359" height="13" font="2">methods), arrays, assignments, and integer and boolean</text>
<text top="699" left="464" width="359" height="13" font="2">expressions. Type variables are also included to oﬀer</text>
<text top="717" left="464" width="359" height="13" font="2">implicit type reconstruction by means of extending the</text>
<text top="735" left="464" width="359" height="14" font="2">usage of the var reserved word added in C# 3.0 [26].</text>
<text top="753" left="464" width="359" height="14" font="2">In the StaDyn core, var references can be set as static</text>
<text top="771" left="464" width="359" height="13" font="2">(by default) or dynamic, modifying how type-checking</text>
<text top="788" left="464" width="86" height="13" font="2">is performed.</text>
<text top="811" left="479" width="344" height="13" font="2">A formal speciﬁcation of the StaDyn core program-</text>
<text top="829" left="464" width="359" height="13" font="2">ming language is presented later in this paper: its ab-</text>
<text top="847" left="464" width="359" height="13" font="2">stract syntax is speciﬁed in Section 3.1; Section 3.2 de-</text>
<text top="865" left="464" width="359" height="13" font="2">tails the hybrid (static and dynamic) type system; and,</text>
<text top="883" left="464" width="359" height="13" font="2">based on the semantics of C#, Section 4 describes the</text>
<text top="901" left="464" width="359" height="13" font="2">erasure semantics of the minimal core of StaDyn, de-</text>
<text top="919" left="464" width="359" height="16" font="2">picting the translation templates used to generate .Net</text>
<text top="937" left="464" width="359" height="13" font="2">code optimized by means of the static type information</text>
<text top="955" left="464" width="168" height="13" font="2">gathered by the compiler.</text>
<text top="978" left="479" width="344" height="13" font="2">Figure 2 shows the StaDyn core version of the</text>
<text top="996" left="464" width="176" height="13" font="2">C# program in Figure 1.</text>
<text top="996" left="656" width="167" height="13" font="2">In the StaDyn core, the</text>
<text top="1014" left="464" width="359" height="14" font="2">dynamism of var references is explicitly stated with</text>
<text top="1032" left="464" width="157" height="14" font="2">the dyn reserved word.</text>
<text top="1032" left="637" width="186" height="13" font="2">The major beneﬁt of using</text>
<text top="1050" left="464" width="359" height="13" font="2">StaDyn is that static type checking is performed even</text>
<text top="1068" left="464" width="359" height="14" font="2">over dynamic references. For instance, the positiveX</text>
<text top="1086" left="464" width="359" height="14" font="2">function statically checks that each data object in list</text>
<text top="1103" left="464" width="176" height="14" font="2">provides a public x ﬁeld.</text>
<text top="1103" left="658" width="165" height="13" font="2">Unlike C#, the StaDyn</text>
<text top="1121" left="464" width="359" height="13" font="2">core prompts a compilation error in line 70 (function</text>
<text top="1139" left="464" width="359" height="13" font="2">invocation in Figure 2), if code in line 69 is commented</text>
<text top="1157" left="464" width="359" height="13" font="2">out. The error indicates that one of the elements in</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="12" size="9" family="Courier" color="#7e7e7e"/>
	<fontspec id="13" size="9" family="Helvetica" color="#7e7e7e"/>
	<fontspec id="14" size="9" family="Courier" color="#0000ff"/>
	<fontspec id="15" size="9" family="Courier" color="#000000"/>
	<fontspec id="16" size="9" family="Courier" color="#007f00"/>
	<fontspec id="17" size="8" family="Times" color="#000000"/>
<text top="93" left="70" width="7" height="13" font="2">4</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="130" left="70" width="20" height="9" font="12">01:</text>
<text top="129" left="90" width="3" height="10" font="13"> </text>
<text top="130" left="97" width="20" height="9" font="14">var</text>
<text top="130" left="116" width="79" height="9" font="15"> createNode(</text>
<text top="130" left="196" width="20" height="9" font="14">var</text>
<text top="130" left="216" width="46" height="9" font="15"> data, </text>
<text top="130" left="262" width="20" height="9" font="14">var</text>
<text top="130" left="282" width="59" height="9" font="15"> next) { </text>
<text top="142" left="70" width="20" height="9" font="12">02:</text>
<text top="141" left="90" width="3" height="10" font="13"> </text>
<text top="142" left="97" width="13" height="9" font="15">  </text>
<text top="142" left="110" width="40" height="9" font="14">return</text>
<text top="142" left="150" width="7" height="9" font="15"> </text>
<text top="142" left="156" width="20" height="9" font="14">new</text>
<text top="142" left="176" width="172" height="9" font="15"> { data=data, next=next}; </text>
<text top="155" left="70" width="20" height="9" font="12">03:</text>
<text top="154" left="90" width="3" height="10" font="13"> </text>
<text top="155" left="97" width="13" height="9" font="15">} </text>
<text top="167" left="70" width="20" height="9" font="12">04:</text>
<text top="166" left="90" width="3" height="10" font="13"> </text>
<text top="167" left="97" width="20" height="9" font="14">var</text>
<text top="167" left="116" width="86" height="9" font="15"> createPoint(</text>
<text top="167" left="202" width="20" height="9" font="14">int</text>
<text top="167" left="222" width="86" height="9" font="15"> dimensions, </text>
<text top="167" left="308" width="20" height="9" font="14">int</text>
<text top="167" left="328" width="20" height="9" font="15"> x,</text>
<text top="167" left="348" width="20" height="9" font="14">int</text>
<text top="167" left="368" width="20" height="9" font="15"> y,</text>
<text top="167" left="388" width="20" height="9" font="14">int</text>
<text top="167" left="407" width="40" height="9" font="15"> z) { </text>
<text top="180" left="70" width="20" height="9" font="12">05:</text>
<text top="179" left="90" width="3" height="10" font="13"> </text>
<text top="180" left="97" width="13" height="9" font="15">  </text>
<text top="180" left="110" width="20" height="9" font="14">var</text>
<text top="180" left="130" width="53" height="9" font="15"> point; </text>
<text top="192" left="70" width="20" height="9" font="12">06:</text>
<text top="191" left="90" width="3" height="10" font="13"> </text>
<text top="192" left="97" width="13" height="9" font="15">  </text>
<text top="192" left="110" width="13" height="9" font="14">if</text>
<text top="192" left="123" width="126" height="9" font="15"> (dimensions == 2) </text>
<text top="205" left="70" width="20" height="9" font="12">07:</text>
<text top="204" left="90" width="3" height="10" font="13"> </text>
<text top="205" left="97" width="79" height="9" font="15">    point = </text>
<text top="205" left="176" width="20" height="9" font="14">new</text>
<text top="205" left="196" width="238" height="9" font="15"> {x=x, y=y, dimensions=dimensions}; </text>
<text top="217" left="70" width="20" height="9" font="12">08:</text>
<text top="216" left="90" width="3" height="10" font="13"> </text>
<text top="217" left="97" width="13" height="9" font="15">  </text>
<text top="217" left="110" width="26" height="9" font="14">else</text>
<text top="217" left="136" width="7" height="9" font="15"> </text>
<text top="230" left="70" width="20" height="9" font="12">09:</text>
<text top="229" left="90" width="3" height="10" font="13"> </text>
<text top="230" left="97" width="79" height="9" font="15">    point = </text>
<text top="230" left="176" width="20" height="9" font="14">new</text>
<text top="230" left="196" width="212" height="9" font="15"> {x=x, y=y, z=z, dimensions=3}; </text>
<text top="242" left="70" width="20" height="9" font="12">10:</text>
<text top="241" left="90" width="3" height="10" font="13"> </text>
<text top="242" left="97" width="13" height="9" font="15">  </text>
<text top="242" left="110" width="40" height="9" font="14">return</text>
<text top="242" left="150" width="53" height="9" font="15"> point; </text>
<text top="255" left="70" width="20" height="9" font="12">11:</text>
<text top="254" left="90" width="3" height="10" font="13"> </text>
<text top="255" left="97" width="13" height="9" font="15">} </text>
<text top="267" left="70" width="20" height="9" font="12">12:</text>
<text top="266" left="90" width="3" height="10" font="13"> </text>
<text top="267" left="97" width="20" height="9" font="14">var</text>
<text top="267" left="116" width="93" height="9" font="15"> createPoints(</text>
<text top="267" left="209" width="20" height="9" font="14">int</text>
<text top="267" left="229" width="73" height="9" font="15"> number) { </text>
<text top="280" left="70" width="20" height="9" font="12">13:</text>
<text top="279" left="90" width="3" height="10" font="13"> </text>
<text top="280" left="97" width="13" height="9" font="15">  </text>
<text top="280" left="110" width="20" height="9" font="14">int</text>
<text top="280" left="130" width="26" height="9" font="15"> i; </text>
<text top="292" left="70" width="20" height="9" font="12">14:</text>
<text top="291" left="90" width="3" height="10" font="13"> </text>
<text top="292" left="97" width="13" height="9" font="15">  </text>
<text top="292" left="110" width="20" height="9" font="14">var</text>
<text top="292" left="130" width="93" height="9" font="15"> list, point; </text>
<text top="305" left="70" width="20" height="9" font="12">15:</text>
<text top="304" left="90" width="3" height="10" font="13"> </text>
<text top="305" left="97" width="59" height="9" font="15">  i = 1; </text>
<text top="317" left="70" width="20" height="9" font="12">16:</text>
<text top="316" left="90" width="3" height="10" font="13"> </text>
<text top="317" left="97" width="212" height="9" font="15">  point = createPoint(3,0,0,0); </text>
<text top="317" left="308" width="126" height="9" font="16">// Last node (null)</text>
<text top="317" left="434" width="7" height="9" font="15"> </text>
<text top="329" left="70" width="20" height="9" font="12">17:</text>
<text top="328" left="90" width="3" height="10" font="13"> </text>
<text top="329" left="97" width="212" height="9" font="15">  list = createNode(point, 0);  </text>
<text top="342" left="70" width="20" height="9" font="12">18:</text>
<text top="341" left="90" width="3" height="10" font="13"> </text>
<text top="342" left="97" width="13" height="9" font="15">  </text>
<text top="342" left="110" width="40" height="9" font="14">while </text>
<text top="342" left="150" width="99" height="9" font="15">(i &lt; number) { </text>
<text top="354" left="70" width="20" height="9" font="12">19:</text>
<text top="353" left="90" width="3" height="10" font="13"> </text>
<text top="354" left="97" width="344" height="9" font="15">    point = createPoint(i%2 + 2, number/2-i, i, i); </text>
<text top="367" left="70" width="20" height="9" font="12">20:</text>
<text top="366" left="90" width="3" height="10" font="13"> </text>
<text top="367" left="97" width="238" height="9" font="15">    list = createNode(point, list); </text>
<text top="380" left="70" width="20" height="9" font="12">21:</text>
<text top="379" left="90" width="3" height="10" font="13"> </text>
<text top="380" left="97" width="86" height="9" font="15">    i = i+1; </text>
<text top="392" left="70" width="20" height="9" font="12">22:</text>
<text top="391" left="90" width="3" height="10" font="13"> </text>
<text top="392" left="97" width="26" height="9" font="15">  } </text>
<text top="404" left="70" width="20" height="9" font="12">23:</text>
<text top="403" left="90" width="3" height="10" font="13"> </text>
<text top="404" left="97" width="13" height="9" font="15">  </text>
<text top="404" left="110" width="40" height="9" font="14">return</text>
<text top="404" left="150" width="46" height="9" font="15"> list; </text>
<text top="417" left="70" width="20" height="9" font="12">24:</text>
<text top="416" left="90" width="3" height="10" font="13"> </text>
<text top="417" left="97" width="13" height="9" font="15">} </text>
<text top="429" left="70" width="20" height="9" font="12">25:</text>
<text top="428" left="90" width="3" height="10" font="13"> </text>
<text top="429" left="97" width="20" height="9" font="14">var</text>
<text top="429" left="116" width="73" height="9" font="15"> positiveX(</text>
<text top="429" left="189" width="20" height="9" font="14">var</text>
<text top="429" left="209" width="46" height="9" font="15"> list, </text>
<text top="429" left="255" width="20" height="9" font="14">int</text>
<text top="429" left="275" width="40" height="9" font="15"> n) { </text>
<text top="442" left="70" width="20" height="9" font="12">26:</text>
<text top="441" left="90" width="3" height="10" font="13"> </text>
<text top="442" left="97" width="13" height="9" font="15">  </text>
<text top="442" left="110" width="20" height="9" font="14">int</text>
<text top="442" left="130" width="26" height="9" font="15"> i; </text>
<text top="454" left="70" width="20" height="9" font="12">27:</text>
<text top="453" left="90" width="3" height="10" font="13"> </text>
<text top="454" left="97" width="13" height="9" font="15">  </text>
<text top="454" left="110" width="20" height="9" font="14">var</text>
<text top="454" left="130" width="79" height="9" font="15"> l, result; </text>
<text top="467" left="70" width="20" height="9" font="12">28:</text>
<text top="466" left="90" width="3" height="10" font="13"> </text>
<text top="467" left="97" width="119" height="9" font="15">  result = i = 0; </text>
<text top="479" left="70" width="20" height="9" font="12">29:</text>
<text top="478" left="90" width="3" height="10" font="13"> </text>
<text top="479" left="97" width="79" height="9" font="15">  l = list; </text>
<text top="492" left="70" width="20" height="9" font="12">30:</text>
<text top="491" left="90" width="3" height="10" font="13"> </text>
<text top="492" left="97" width="13" height="9" font="15">  </text>
<text top="492" left="110" width="40" height="9" font="14">while </text>
<text top="492" left="150" width="66" height="9" font="15">(i &lt; n) { </text>
<text top="504" left="70" width="20" height="9" font="12">31:</text>
<text top="503" left="90" width="3" height="10" font="13"> </text>
<text top="504" left="97" width="26" height="9" font="15">    </text>
<text top="504" left="123" width="20" height="9" font="14">if </text>
<text top="504" left="143" width="106" height="9" font="15">(l.data.x &gt;= 0) </text>
<text top="517" left="70" width="20" height="9" font="12">32:</text>
<text top="516" left="90" width="3" height="10" font="13"> </text>
<text top="517" left="97" width="284" height="9" font="15">      result = createNode(l.data, result); </text>
<text top="529" left="70" width="20" height="9" font="12">33:</text>
<text top="528" left="90" width="3" height="10" font="13"> </text>
<text top="529" left="97" width="106" height="9" font="15">    l = l.next; </text>
<text top="542" left="70" width="20" height="9" font="12">34:</text>
<text top="541" left="90" width="3" height="10" font="13"> </text>
<text top="542" left="97" width="86" height="9" font="15">    i = i+1; </text>
<text top="554" left="70" width="20" height="9" font="12">35:</text>
<text top="553" left="90" width="3" height="10" font="13"> </text>
<text top="554" left="97" width="26" height="9" font="15">  } </text>
<text top="567" left="70" width="20" height="9" font="12">36:</text>
<text top="566" left="90" width="3" height="10" font="13"> </text>
<text top="567" left="97" width="13" height="9" font="15">  </text>
<text top="567" left="110" width="40" height="9" font="14">return</text>
<text top="567" left="150" width="59" height="9" font="15"> result; </text>
<text top="579" left="70" width="20" height="9" font="12">37:</text>
<text top="578" left="90" width="3" height="10" font="13"> </text>
<text top="579" left="97" width="13" height="9" font="15">} </text>
<text top="130" left="466" width="20" height="9" font="12">38:</text>
<text top="129" left="486" width="3" height="10" font="13"> </text>
<text top="130" left="492" width="20" height="9" font="14">int</text>
<text top="130" left="512" width="79" height="9" font="15"> distance3D(</text>
<text top="130" left="592" width="53" height="9" font="16">/*dyn*/ </text>
<text top="130" left="644" width="20" height="9" font="14">var</text>
<text top="130" left="664" width="66" height="9" font="15"> point) { </text>
<text top="142" left="466" width="20" height="9" font="12">39:</text>
<text top="141" left="486" width="3" height="10" font="13"> </text>
<text top="142" left="492" width="13" height="9" font="15">  </text>
<text top="142" left="506" width="20" height="9" font="14">int</text>
<text top="142" left="525" width="53" height="9" font="15"> value; </text>
<text top="155" left="466" width="20" height="9" font="12">40:</text>
<text top="154" left="486" width="3" height="10" font="13"> </text>
<text top="155" left="492" width="145" height="9" font="15">  value = 2147483647; </text>
<text top="167" left="466" width="20" height="9" font="12">41:</text>
<text top="166" left="486" width="3" height="10" font="13"> </text>
<text top="167" left="492" width="13" height="9" font="15">  </text>
<text top="167" left="506" width="225" height="9" font="16">// point.center; // Compiler error</text>
<text top="167" left="730" width="7" height="9" font="15"> </text>
<text top="180" left="466" width="20" height="9" font="12">42:</text>
<text top="179" left="486" width="3" height="10" font="13"> </text>
<text top="180" left="492" width="13" height="9" font="15">  </text>
<text top="180" left="506" width="13" height="9" font="14">if</text>
<text top="180" left="519" width="165" height="9" font="15"> (point.dimensions == 3) </text>
<text top="192" left="466" width="20" height="9" font="12">43:</text>
<text top="191" left="486" width="3" height="10" font="13"> </text>
<text top="192" left="492" width="311" height="9" font="15">    value = point.x*point.x + point.y*point.y  </text>
<text top="205" left="492" width="311" height="9" font="15">                            + point.z*point.z; </text>
<text top="217" left="466" width="20" height="9" font="12">44:</text>
<text top="216" left="486" width="3" height="10" font="13"> </text>
<text top="217" left="492" width="13" height="9" font="15">  </text>
<text top="217" left="506" width="40" height="9" font="14">return</text>
<text top="217" left="545" width="53" height="9" font="15"> value; </text>
<text top="230" left="466" width="20" height="9" font="12">45:</text>
<text top="229" left="486" width="3" height="10" font="13"> </text>
<text top="230" left="492" width="13" height="9" font="15">} </text>
<text top="242" left="466" width="20" height="9" font="12">46:</text>
<text top="241" left="486" width="3" height="10" font="13"> </text>
<text top="242" left="492" width="20" height="9" font="14">var</text>
<text top="242" left="512" width="126" height="9" font="15"> closestToOrigin3D(</text>
<text top="242" left="638" width="20" height="9" font="14">var</text>
<text top="242" left="658" width="46" height="9" font="15"> list, </text>
<text top="242" left="704" width="20" height="9" font="14">int</text>
<text top="242" left="724" width="40" height="9" font="15"> n) { </text>
<text top="255" left="466" width="20" height="9" font="12">47:</text>
<text top="254" left="486" width="3" height="10" font="13"> </text>
<text top="255" left="492" width="13" height="9" font="15">  </text>
<text top="255" left="506" width="20" height="9" font="14">int</text>
<text top="255" left="525" width="112" height="9" font="15"> i, minDistance; </text>
<text top="267" left="466" width="20" height="9" font="12">48:</text>
<text top="266" left="486" width="3" height="10" font="13"> </text>
<text top="267" left="492" width="13" height="9" font="15">  </text>
<text top="267" left="506" width="20" height="9" font="14">var</text>
<text top="267" left="525" width="86" height="9" font="15"> l, point3D; </text>
<text top="280" left="466" width="20" height="9" font="12">49:</text>
<text top="279" left="486" width="3" height="10" font="13"> </text>
<text top="280" left="492" width="185" height="9" font="15">  minDistance = 2147483647; </text>
<text top="292" left="466" width="20" height="9" font="12">50:</text>
<text top="291" left="486" width="3" height="10" font="13"> </text>
<text top="292" left="492" width="79" height="9" font="15">  l = list; </text>
<text top="305" left="466" width="20" height="9" font="12">51:</text>
<text top="304" left="486" width="3" height="10" font="13"> </text>
<text top="305" left="492" width="59" height="9" font="15">  i = 0; </text>
<text top="317" left="466" width="20" height="9" font="12">52:</text>
<text top="316" left="486" width="3" height="10" font="13"> </text>
<text top="317" left="492" width="13" height="9" font="15">  </text>
<text top="317" left="506" width="40" height="9" font="14">while </text>
<text top="317" left="545" width="79" height="9" font="15">(i &lt; n) {   </text>
<text top="329" left="466" width="20" height="9" font="12">53:</text>
<text top="328" left="486" width="3" height="10" font="13"> </text>
<text top="329" left="492" width="26" height="9" font="15">    </text>
<text top="329" left="519" width="20" height="9" font="14">if </text>
<text top="329" left="539" width="245" height="9" font="15">(distance3D(l.data) &lt; minDistance) { </text>
<text top="342" left="466" width="20" height="9" font="12">54:</text>
<text top="341" left="486" width="3" height="10" font="13"> </text>
<text top="342" left="492" width="265" height="9" font="15">      minDistance = distance3D(l.data); </text>
<text top="354" left="466" width="20" height="9" font="12">55:</text>
<text top="353" left="486" width="3" height="10" font="13"> </text>
<text top="354" left="492" width="159" height="9" font="15">      point3D = l.data; </text>
<text top="367" left="466" width="20" height="9" font="12">56:</text>
<text top="366" left="486" width="3" height="10" font="13"> </text>
<text top="367" left="492" width="40" height="9" font="15">    } </text>
<text top="380" left="466" width="20" height="9" font="12">57:</text>
<text top="379" left="486" width="3" height="10" font="13"> </text>
<text top="380" left="492" width="106" height="9" font="15">    l = l.next; </text>
<text top="392" left="466" width="20" height="9" font="12">58:</text>
<text top="391" left="486" width="3" height="10" font="13"> </text>
<text top="392" left="492" width="86" height="9" font="15">    i = i+1; </text>
<text top="404" left="466" width="20" height="9" font="12">59:</text>
<text top="403" left="486" width="3" height="10" font="13"> </text>
<text top="404" left="492" width="26" height="9" font="15">  } </text>
<text top="417" left="466" width="20" height="9" font="12">60:</text>
<text top="416" left="486" width="3" height="10" font="13"> </text>
<text top="417" left="492" width="13" height="9" font="15">  </text>
<text top="417" left="506" width="40" height="9" font="14">return</text>
<text top="417" left="545" width="79" height="9" font="15"> point3D;   </text>
<text top="429" left="466" width="20" height="9" font="12">61:</text>
<text top="428" left="486" width="3" height="10" font="13"> </text>
<text top="429" left="492" width="13" height="9" font="15">} </text>
<text top="442" left="466" width="20" height="9" font="12">62:</text>
<text top="441" left="486" width="3" height="10" font="13"> </text>
<text top="442" left="492" width="7" height="9" font="15"> </text>
<text top="454" left="466" width="20" height="9" font="12">63:</text>
<text top="453" left="486" width="3" height="10" font="13"> </text>
<text top="454" left="492" width="7" height="9" font="15"> </text>
<text top="467" left="466" width="20" height="9" font="12">64:</text>
<text top="466" left="486" width="3" height="10" font="13"> </text>
<text top="467" left="492" width="26" height="9" font="14">void</text>
<text top="467" left="519" width="66" height="9" font="15"> main() { </text>
<text top="479" left="466" width="20" height="9" font="12">65:</text>
<text top="478" left="486" width="3" height="10" font="13"> </text>
<text top="479" left="492" width="13" height="9" font="15">  </text>
<text top="479" left="506" width="20" height="9" font="14">int</text>
<text top="479" left="525" width="132" height="9" font="15"> i, numberOfPoints; </text>
<text top="492" left="466" width="20" height="9" font="12">66:</text>
<text top="491" left="486" width="3" height="10" font="13"> </text>
<text top="492" left="492" width="13" height="9" font="15">  </text>
<text top="492" left="506" width="20" height="9" font="14">var</text>
<text top="492" left="525" width="159" height="9" font="15"> list, positive, point; </text>
<text top="504" left="466" width="20" height="9" font="12">67:</text>
<text top="503" left="486" width="3" height="10" font="13"> </text>
<text top="504" left="492" width="152" height="9" font="15">  numberOfPoints = 10; </text>
<text top="517" left="466" width="20" height="9" font="12">68:</text>
<text top="516" left="486" width="3" height="10" font="13"> </text>
<text top="517" left="492" width="258" height="9" font="15">  list = createPoints(numberOfPoints); </text>
<text top="529" left="466" width="20" height="9" font="12">69:</text>
<text top="528" left="486" width="3" height="10" font="13"> </text>
<text top="529" left="492" width="13" height="9" font="15">  </text>
<text top="529" left="506" width="231" height="9" font="16">// list.data = 3; // Compiler error</text>
<text top="529" left="737" width="7" height="9" font="15"> </text>
<text top="542" left="466" width="20" height="9" font="12">70:</text>
<text top="541" left="486" width="3" height="10" font="13"> </text>
<text top="542" left="492" width="317" height="9" font="15">  positive = positiveX(list, numberOfPoints);   </text>
<text top="554" left="466" width="20" height="9" font="12">71:</text>
<text top="553" left="486" width="3" height="10" font="13"> </text>
<text top="554" left="492" width="337" height="9" font="15">  point = closestToOrigin3D(list, numberOfPoints); </text>
<text top="567" left="466" width="20" height="9" font="12">72:</text>
<text top="566" left="486" width="3" height="10" font="13"> </text>
<text top="567" left="492" width="13" height="9" font="15">} </text>
<text top="612" left="261" width="371" height="12" font="4">FIGURE 2. Example coded in the minimal core of StaDyn.</text>
<text top="662" left="70" width="359" height="14" font="2">the list (the integer) does not provide the x message.</text>
<text top="680" left="70" width="359" height="13" font="2">In contrast, C# 4.0 compiles the code and the error is</text>
<text top="697" left="70" width="276" height="13" font="2">produced at runtime (line 70 in Figure 1).</text>
<text top="721" left="85" width="344" height="13" font="2">Our compiler gathers type information at compile</text>
<text top="739" left="70" width="359" height="13" font="2">time in order to perform static type checking over</text>
<text top="757" left="70" width="359" height="13" font="2">dynamic references. One of the elements we have used</text>
<text top="775" left="70" width="325" height="13" font="2">for this purpose is union types [25]. A union type T</text>
<text top="780" left="395" width="6" height="9" font="17">1</text>
<text top="774" left="403" width="19" height="14" font="2">∨T</text>
<text top="780" left="422" width="6" height="9" font="17">2</text>
<text top="793" left="70" width="359" height="13" font="2">denotes the ordinary union of the set of values belonging</text>
<text top="811" left="70" width="32" height="13" font="2">to T</text>
<text top="816" left="102" width="6" height="9" font="17">1</text>
<text top="811" left="118" width="267" height="13" font="2">and the set of values belonging to T</text>
<text top="816" left="385" width="6" height="9" font="17">2</text>
<text top="811" left="401" width="27" height="13" font="2">[27],</text>
<text top="829" left="70" width="255" height="13" font="2">representing the least upper bound of T</text>
<text top="834" left="325" width="6" height="9" font="17">1</text>
<text top="829" left="336" width="37" height="13" font="2">and T</text>
<text top="834" left="373" width="6" height="9" font="17">2</text>
<text top="829" left="384" width="45" height="13" font="2">[28]. A</text>
<text top="847" left="70" width="359" height="13" font="2">union type holds all the possible types a reference may</text>
<text top="865" left="70" width="359" height="13" font="2">have. The set of operations (e.g., addition, ﬁeld access,</text>
<text top="883" left="70" width="359" height="13" font="2">assignment, invocation or indexing) that can be applied</text>
<text top="900" left="70" width="359" height="13" font="2">to a union type are those accepted by every type in the</text>
<text top="918" left="70" width="359" height="16" font="2">union type (inference rules of static union types are S-</text>
<text top="939" left="70" width="359" height="13" font="2">SUnionL and S-SUnionR in Figure 11). Union types</text>
<text top="954" left="70" width="359" height="13" font="2">were already included in object-oriented languages, in</text>
<text top="972" left="70" width="359" height="13" font="2">type systems where they were explicitly declared [29] or</text>
<text top="990" left="70" width="295" height="13" font="2">inferred from implicitly typed references [30].</text>
<text top="1014" left="85" width="344" height="14" font="2">In our example, the type inferred for list in line 68</text>
<text top="1032" left="70" width="359" height="14" font="2">(Figure 2) is a list of {x:int, y:int, dimensions:int} ∨</text>
<text top="1049" left="70" width="359" height="15" font="2">{x:int, y:int, z:int, dimensions:int}, meaning two or</text>
<text top="1068" left="70" width="172" height="13" font="2">three dimensional points.</text>
<text top="1068" left="259" width="169" height="13" font="2">In the invocation of the</text>
<text top="1087" left="70" width="359" height="12" font="2">positiveX function (line 70), it is statically checked</text>
<text top="1103" left="70" width="359" height="13" font="2">that the argument is a list of objects that provide an</text>
<text top="1123" left="70" width="359" height="12" font="2">x ﬁeld. Since this condition is statically fulﬁlled, the</text>
<text top="1139" left="70" width="359" height="13" font="2">program is compiled without errors (and the static type</text>
<text top="1157" left="70" width="359" height="13" font="2">information is used to optimize its execution). However,</text>
<text top="662" left="464" width="359" height="13" font="2">if we uncomment line 69, an error message will be</text>
<text top="680" left="464" width="44" height="13" font="2">shown.</text>
<text top="703" left="479" width="344" height="14" font="2">The closestToOrigin3D function imposes more</text>
<text top="721" left="464" width="359" height="14" font="2">constraints to the list parameter. Objects in list</text>
<text top="739" left="464" width="359" height="14" font="2">must provide the dimensions, x, y and z ﬁelds because</text>
<text top="757" left="464" width="359" height="14" font="2">of the invocation to distance3D. We represent these</text>
<text top="775" left="464" width="321" height="13" font="2">constraints by means of intersection types [25]. T</text>
<text top="780" left="785" width="6" height="9" font="17">1</text>
<text top="774" left="795" width="22" height="14" font="2">∧ T</text>
<text top="780" left="816" width="6" height="9" font="17">2</text>
<text top="793" left="464" width="272" height="13" font="2">denotes all the values belonging to both T</text>
<text top="798" left="736" width="6" height="9" font="17">1</text>
<text top="793" left="747" width="37" height="13" font="2">and T</text>
<text top="798" left="784" width="6" height="9" font="17">2</text>
<text top="793" left="796" width="27" height="13" font="2">[27],</text>
<text top="811" left="464" width="273" height="13" font="2">representing the greatest lower bound of T</text>
<text top="816" left="737" width="6" height="9" font="17">1</text>
<text top="811" left="748" width="37" height="13" font="2">and T</text>
<text top="816" left="785" width="6" height="9" font="17">2</text>
<text top="811" left="796" width="27" height="13" font="2">[28].</text>
<text top="829" left="464" width="359" height="13" font="2">A type promotes to a static intersection type only if it</text>
<text top="847" left="464" width="359" height="13" font="2">is a subtype of all the types collected by the intersection</text>
<text top="865" left="464" width="241" height="16" font="2">type (S-SInterR rule in Figure 11).</text>
<text top="888" left="479" width="14" height="13" font="2">In</text>
<text top="888" left="508" width="22" height="13" font="2">our</text>
<text top="888" left="544" width="58" height="13" font="2">example,</text>
<text top="888" left="618" width="21" height="13" font="2">the</text>
<text top="888" left="653" width="62" height="13" font="2">argument</text>
<text top="890" left="730" width="31" height="12" font="2">list</text>
<text top="888" left="776" width="12" height="13" font="2">of</text>
<text top="888" left="802" width="21" height="13" font="2">the</text>
<text top="907" left="464" width="359" height="12" font="2">closestToOrigin3D function must be a list of X type,</text>
<text top="924" left="464" width="176" height="14" font="2">being X ≤ [dimensions:X</text>
<text top="930" left="641" width="6" height="9" font="17">1</text>
<text top="924" left="648" width="50" height="14" font="2">] ∧ [x:X</text>
<text top="930" left="698" width="6" height="9" font="17">2</text>
<text top="924" left="705" width="50" height="14" font="2">] ∧ [y:X</text>
<text top="930" left="755" width="6" height="9" font="17">3</text>
<text top="924" left="762" width="50" height="14" font="2">] ∧ [z:X</text>
<text top="930" left="812" width="6" height="9" font="17">4</text>
<text top="924" left="819" width="4" height="13" font="2">]</text>
<text top="942" left="464" width="255" height="13" font="2">(an object with all these four ﬁelds).</text>
<text top="942" left="735" width="89" height="13" font="2">However, the</text>
<text top="960" left="464" width="359" height="13" font="2">invocation in line 71 produces a compilation error</text>
<text top="978" left="464" width="359" height="14" font="2">because list holds a union type of both two and three</text>
<text top="996" left="464" width="359" height="13" font="2">dimensional points, and the former do not provide the</text>
<text top="1015" left="464" width="48" height="12" font="2">z ﬁeld.</text>
<text top="1014" left="529" width="294" height="13" font="2">Our approach is to make the type system</text>
<text top="1032" left="464" width="359" height="13" font="2">more lenient, without renouncing static type checking.</text>
<text top="1050" left="464" width="359" height="14" font="2">The point parameter of the distance3D function can</text>
<text top="1068" left="464" width="359" height="14" font="2">be declared as dynamic (uncommenting the dyn type</text>
<text top="1086" left="464" width="255" height="13" font="2">qualiﬁcation in line 38 of Figure 2).</text>
<text top="1086" left="737" width="86" height="13" font="2">In this case,</text>
<text top="1103" left="464" width="359" height="13" font="2">the promotion to intersection types is more permissive:</text>
<text top="1121" left="464" width="359" height="13" font="2">the argument should be a subtype of at least one of</text>
<text top="1139" left="464" width="359" height="16" font="2">the types in the intersection type (rule S-DInterR in</text>
<text top="1157" left="464" width="359" height="13" font="2">Figure 11). Then, the program would generate no error</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="18" size="6" family="Times" color="#000000"/>
	<fontspec id="19" size="9" family="Times" color="#000000"/>
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="816" width="7" height="13" font="2">5</text>
<text top="130" left="168" width="52" height="12" font="4">Program</text>
<text top="130" left="278" width="9" height="12" font="4">P</text>
<text top="130" left="314" width="18" height="12" font="4">::=</text>
<text top="130" left="351" width="9" height="12" font="4">F</text>
<text top="127" left="361" width="6" height="8" font="18">∗</text>
<text top="130" left="372" width="11" height="12" font="4">D</text>
<text top="127" left="384" width="6" height="8" font="18">∗</text>
<text top="130" left="395" width="8" height="12" font="4">S</text>
<text top="127" left="404" width="8" height="8" font="18">+</text>
<text top="147" left="168" width="53" height="12" font="4">Function</text>
<text top="147" left="278" width="9" height="12" font="4">F</text>
<text top="147" left="314" width="18" height="12" font="4">::=</text>
<text top="147" left="351" width="142" height="12" font="4">(void|ST ) id ( (ST id )</text>
<text top="144" left="492" width="6" height="8" font="18">∗</text>
<text top="148" left="503" width="23" height="11" font="4">) D</text>
<text top="144" left="527" width="6" height="8" font="18">∗</text>
<text top="147" left="538" width="8" height="12" font="4">S</text>
<text top="144" left="547" width="6" height="8" font="18">∗</text>
<text top="147" left="558" width="10" height="12" font="4">R</text>
<text top="144" left="569" width="5" height="8" font="18">?</text>
<text top="163" left="168" width="70" height="12" font="4">Declaration</text>
<text top="163" left="277" width="10" height="12" font="4">D</text>
<text top="163" left="314" width="18" height="12" font="4">::=</text>
<text top="163" left="351" width="34" height="12" font="4">ST id</text>
<text top="179" left="168" width="62" height="12" font="4">Statement</text>
<text top="179" left="279" width="8" height="12" font="4">S</text>
<text top="179" left="314" width="18" height="12" font="4">::=</text>
<text top="179" left="351" width="67" height="12" font="4">E | if E S</text>
<text top="177" left="418" width="8" height="8" font="18">+</text>
<text top="179" left="432" width="8" height="12" font="4">S</text>
<text top="176" left="441" width="6" height="8" font="18">∗</text>
<text top="179" left="452" width="72" height="13" font="4">| while E S</text>
<text top="176" left="525" width="6" height="8" font="18">∗</text>
<text top="196" left="168" width="42" height="12" font="4">Return</text>
<text top="196" left="278" width="10" height="12" font="4">R</text>
<text top="196" left="314" width="18" height="12" font="4">::=</text>
<text top="197" left="351" width="56" height="11" font="4">return E</text>
<text top="212" left="168" width="65" height="12" font="4">Expression</text>
<text top="212" left="278" width="9" height="12" font="4">E</text>
<text top="212" left="314" width="18" height="12" font="4">::=</text>
<text top="212" left="351" width="65" height="12" font="4">id | id ( E</text>
<text top="209" left="416" width="6" height="8" font="18">∗</text>
<text top="213" left="427" width="281" height="11" font="4">) | E ⊕E | E ⊗E | E #E | E =E | E.id | E [E ] |</text>
<text top="230" left="351" width="78" height="11" font="4">new {(id =E )</text>
<text top="226" left="428" width="6" height="8" font="18">∗</text>
<text top="228" left="435" width="122" height="13" font="4">} | new ST [E ]([ ])</text>
<text top="226" left="557" width="6" height="8" font="18">∗</text>
<text top="228" left="568" width="155" height="13" font="4">| true | false | IntLiteral</text>
<text top="262" left="168" width="78" height="12" font="4">Syntax types</text>
<text top="262" left="274" width="18" height="12" font="4">ST</text>
<text top="262" left="314" width="18" height="12" font="4">::=</text>
<text top="263" left="351" width="211" height="11" font="4">int | bool | Array(ST ) | {(id :ST )</text>
<text top="259" left="562" width="6" height="8" font="18">∗</text>
<text top="261" left="568" width="40" height="13" font="4">} | TV</text>
<text top="279" left="168" width="83" height="12" font="4">Type variable</text>
<text top="279" left="272" width="20" height="12" font="4">TV</text>
<text top="279" left="314" width="18" height="12" font="4">::=</text>
<text top="279" left="351" width="27" height="12" font="4">Dyn</text>
<text top="276" left="378" width="5" height="8" font="18">?</text>
<text top="279" left="388" width="11" height="12" font="4">X</text>
<text top="283" left="400" width="4" height="8" font="18">i</text>
<text top="295" left="168" width="65" height="12" font="4">Dynamism</text>
<text top="295" left="270" width="25" height="12" font="4">Dyn</text>
<text top="295" left="314" width="18" height="12" font="4">::=</text>
<text top="296" left="351" width="55" height="11" font="4">sta | dyn</text>
<text top="311" left="168" width="84" height="12" font="4">Internal types</text>
<text top="311" left="277" width="10" height="12" font="4">T</text>
<text top="311" left="314" width="18" height="12" font="4">::=</text>
<text top="311" left="351" width="83" height="12" font="4">ST | [ (id :T )</text>
<text top="308" left="434" width="6" height="8" font="18">∗</text>
<text top="313" left="445" width="166" height="11" font="4">] | ST × . . . × ST → ST C</text>
<text top="308" left="611" width="6" height="8" font="18">∗</text>
<text top="311" left="626" width="58" height="13" font="4">| {(id :T )</text>
<text top="308" left="685" width="6" height="8" font="18">∗</text>
<text top="311" left="691" width="15" height="13" font="4">} |</text>
<text top="328" left="351" width="27" height="12" font="4">Dyn</text>
<text top="326" left="378" width="5" height="8" font="18">?</text>
<text top="328" left="388" width="107" height="12" font="4">T ∨ . . . ∨ T | Dyn</text>
<text top="326" left="496" width="5" height="8" font="18">?</text>
<text top="328" left="506" width="141" height="12" font="4">T ∧ . . . ∧ T | Array(T )</text>
<text top="361" left="168" width="70" height="12" font="4">Constraints</text>
<text top="361" left="277" width="10" height="12" font="4">C</text>
<text top="361" left="314" width="18" height="12" font="4">::=</text>
<text top="361" left="351" width="109" height="12" font="4">IT ≤ T | T V ← T</text>
<text top="392" left="265" width="363" height="12" font="4">FIGURE 3. Abstract Syntax of the StaDyn minimal core.</text>
<text top="441" left="70" width="359" height="14" font="2">because both types of points oﬀer a public dimensions</text>
<text top="459" left="70" width="359" height="13" font="2">ﬁeld. This relaxation of the subtyping relation when</text>
<text top="477" left="70" width="359" height="13" font="2">references are declared as dynamic is also applied to</text>
<text top="495" left="70" width="359" height="16" font="2">union types (S-DUnionL): the promotion should be</text>
<text top="513" left="70" width="355" height="13" font="2">fulﬁlled by at least one of the types in the union type.</text>
<text top="531" left="85" width="344" height="13" font="2">It is worth noting that type checking is still performed</text>
<text top="549" left="70" width="359" height="13" font="2">at compile type even when the programmer uses</text>
<text top="567" left="70" width="132" height="13" font="2">dynamic references.</text>
<text top="567" left="222" width="207" height="13" font="2">As an example, if line 41 in</text>
<text top="585" left="70" width="359" height="13" font="2">Figure 2 is uncommented, an error is shown even though</text>
<text top="604" left="70" width="359" height="12" font="2">point has been declared as dynamic (the center</text>
<text top="621" left="70" width="359" height="13" font="2">message is not accepted by either of the two possible</text>
<text top="639" left="70" width="359" height="13" font="2">points); whereas C# compiles the code, producing the</text>
<text top="657" left="70" width="311" height="13" font="2">type error at runtime (line 43 in Figure 1).</text>
<text top="657" left="399" width="29" height="13" font="2">This</text>
<text top="675" left="70" width="359" height="13" font="2">example informally shows the objective of StaDyn: to</text>
<text top="692" left="70" width="359" height="13" font="2">oﬀer both the ﬂexibility of dynamic typing and the</text>
<text top="710" left="70" width="270" height="13" font="2">robustness and eﬃciency of static typing.</text>
<text top="752" left="70" width="13" height="13" font="2">3.</text>
<text top="752" left="100" width="279" height="13" font="2">THE STADYN CORE LANGUAGE</text>
<text top="781" left="70" width="359" height="13" font="2">After an informal overview of the aim of the StaDyn</text>
<text top="799" left="70" width="359" height="13" font="2">core programming language, we describe its syntax</text>
<text top="817" left="70" width="117" height="13" font="2">and type system.</text>
<text top="817" left="201" width="228" height="13" font="2">Next section describes its erasure</text>
<text top="835" left="70" width="255" height="13" font="2">semantics by translating it into to C#.</text>
<text top="877" left="70" width="27" height="13" font="2">3.1.</text>
<text top="877" left="114" width="52" height="13" font="2">Syntax</text>
<text top="906" left="70" width="359" height="13" font="2">The ﬁrst part of Figure 3 shows the abstract syntax</text>
<text top="924" left="70" width="359" height="13" font="2">of the minimal core (the second and third parts are,</text>
<text top="942" left="70" width="243" height="13" font="2">respectively, types and constraints).</text>
<text top="942" left="328" width="101" height="13" font="2">EBNF is used,</text>
<text top="960" left="70" width="38" height="13" font="2">where</text>
<text top="958" left="116" width="9" height="9" font="17">+</text>
<text top="960" left="133" width="281" height="13" font="2">means repetition of at least one element,</text>
<text top="957" left="422" width="6" height="10" font="17">∗</text>
<text top="978" left="70" width="228" height="13" font="2">matches zero or more occurrences,</text>
<text top="976" left="304" width="6" height="9" font="17">?</text>
<text top="978" left="317" width="112" height="13" font="2">means optionally</text>
<text top="996" left="70" width="227" height="13" font="2">matching the previous element,</text>
<text top="996" left="310" width="118" height="13" font="2">and | represents</text>
<text top="1014" left="70" width="74" height="13" font="2">alternative.</text>
<text top="1032" left="85" width="344" height="13" font="2">A program (P ) is composed of a sequence of</text>
<text top="1050" left="70" width="155" height="13" font="2">function declarations (F</text>
<text top="1047" left="227" width="6" height="10" font="17">∗</text>
<text top="1050" left="233" width="195" height="13" font="2">) followed by the local variable</text>
<text top="1068" left="70" width="105" height="13" font="2">declarations (D</text>
<text top="1065" left="175" width="6" height="10" font="17">∗</text>
<text top="1068" left="182" width="140" height="13" font="2">) and statements (S</text>
<text top="1065" left="323" width="9" height="9" font="17">+</text>
<text top="1068" left="333" width="96" height="13" font="2">) of the main</text>
<text top="1086" left="70" width="58" height="13" font="2">function.</text>
<text top="1086" left="149" width="280" height="13" font="2">Although the programmer may use the</text>
<text top="1105" left="70" width="359" height="12" font="2">return statement the same way as in C#, it could</text>
<text top="1121" left="70" width="359" height="13" font="2">only be placed as the last statement of the abstract</text>
<text top="1139" left="70" width="359" height="13" font="2">syntax. This transformation is performed by the parser</text>
<text top="1157" left="70" width="359" height="13" font="2">to facilitate type inference in conditional and iterative</text>
<text top="441" left="464" width="219" height="13" font="2">control structures (Section 3.2.6).</text>
<text top="459" left="479" width="344" height="13" font="2">A statement can be any expression (including assign-</text>
<text top="477" left="464" width="359" height="14" font="2">ments), a conditional statement (if), or an iterative one</text>
<text top="495" left="464" width="359" height="14" font="2">(while). Since assignments are expressions, the parser</text>
<text top="513" left="464" width="359" height="13" font="2">annotates every expression node of the Abstract Syn-</text>
<text top="531" left="464" width="359" height="14" font="2">tax Tree (AST) with a boolean value (lhsAssign) that</text>
<text top="549" left="464" width="359" height="13" font="2">reveals whether or not it is a direct left child of an as-</text>
<text top="567" left="464" width="359" height="13" font="2">signment. This value will be used by the type system</text>
<text top="585" left="464" width="178" height="13" font="2">for type-checking purposes.</text>
<text top="603" left="479" width="344" height="13" font="2">The ⊕ operator represents arithmetic operations,</text>
<text top="620" left="464" width="359" height="14" font="2">⊗ logical ones and # symbolizes relational operators.</text>
<text top="639" left="464" width="359" height="13" font="2">Objects are created following the syntax of the C# 3.0</text>
<text top="656" left="464" width="359" height="13" font="2">feature of anonymous types [26]: between curly braces,</text>
<text top="674" left="464" width="359" height="13" font="2">there is listed a sequence of ﬁeld identiﬁers followed by</text>
<text top="692" left="464" width="359" height="13" font="2">the assignment operator and an expression representing</text>
<text top="710" left="464" width="359" height="13" font="2">their initial values (see lines 9 and 11 in Figure 1).</text>
<text top="728" left="464" width="359" height="14" font="2">The new expression for arrays creates one-dimensional</text>
<text top="746" left="464" width="359" height="13" font="2">arrays. Multidimensional arrays should be built in loops</text>
<text top="764" left="464" width="348" height="13" font="2">repeating the construction of one-dimensional arrays.</text>
<text top="803" left="464" width="27" height="13" font="2">3.2.</text>
<text top="803" left="508" width="98" height="13" font="2">Type System</text>
<text top="830" left="464" width="359" height="13" font="2">Types used to describe the StaDyn minimal core type</text>
<text top="848" left="464" width="359" height="13" font="2">system are shown in the second part of Figure 3. Syntax</text>
<text top="866" left="464" width="359" height="13" font="2">types (ST ) are those that may be directly written by the</text>
<text top="884" left="464" width="359" height="13" font="2">programmer, whereas internal types (T ) are internally</text>
<text top="902" left="464" width="359" height="13" font="2">used by the type system without the knowledge of the</text>
<text top="919" left="464" width="359" height="13" font="2">programmer. The point of avoiding the direct use of</text>
<text top="937" left="464" width="359" height="13" font="2">internal types is to oﬀer the programmer the greatest</text>
<text top="955" left="464" width="359" height="13" font="2">possible simplicity without losing the expressive power</text>
<text top="973" left="464" width="125" height="13" font="2">of the type system.</text>
<text top="991" left="479" width="344" height="13" font="2">Object types are speciﬁed describing a collection</text>
<text top="1009" left="464" width="359" height="13" font="2">of their ﬁelds between curly braces, not including</text>
<text top="1027" left="464" width="55" height="13" font="2">methods</text>
<text top="1025" left="520" width="6" height="9" font="17">1</text>
<text top="1027" left="526" width="297" height="13" font="2">. Methods can be represented by functions</text>
<text top="1045" left="464" width="244" height="14" font="2">where this is the ﬁrst parameter.</text>
<text top="1045" left="728" width="95" height="13" font="2">Although this</text>
<text top="1063" left="464" width="359" height="13" font="2">representation does not support method overriding, it</text>
<text top="1081" left="464" width="359" height="13" font="2">allows us to signiﬁcantly reduce the StaDyn core type</text>
<text top="1099" left="464" width="49" height="13" font="2">system.</text>
<text top="1099" left="528" width="295" height="13" font="2">StaDyn (the whole programming language)</text>
<text top="1117" left="464" width="359" height="13" font="2">does support method overriding by extending the</text>
<text top="1143" left="481" width="5" height="8" font="18">1</text>
<text top="1145" left="487" width="336" height="11" font="19">A class-based core like the one proposed in [31] would be more</text>
<text top="1159" left="464" width="274" height="11" font="19">appropriate to formalize methods and overriding.</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="20" size="6" family="Courier" color="#7f7f7f"/>
	<fontspec id="21" size="6" family="Courier" color="#0000ff"/>
	<fontspec id="22" size="6" family="Symbol" color="#7f7f7f"/>
	<fontspec id="23" size="3" family="Courier" color="#7f7f7f"/>
	<fontspec id="24" size="6" family="Times" color="#7f7f7f"/>
	<fontspec id="25" size="6" family="Courier" color="#007f00"/>
<text top="93" left="70" width="7" height="13" font="2">6</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="135" left="70" width="359" height="13" font="2">behavior described in [29]: when a message is passed</text>
<text top="153" left="70" width="359" height="13" font="2">to a dynamic union type, it is checked that at least for</text>
<text top="171" left="70" width="359" height="13" font="2">one possible signature, the actual argument types are</text>
<text top="189" left="70" width="359" height="13" font="2">subtypes of the corresponding formal parameters; the</text>
<text top="207" left="70" width="359" height="13" font="2">type of the method invocation expression is the union of</text>
<text top="225" left="70" width="359" height="13" font="2">the return types declared by those methods that satisfy</text>
<text top="243" left="70" width="150" height="13" font="2">the previous condition.</text>
<text top="261" left="85" width="344" height="14" font="2">Although the var keyword is part of the concrete</text>
<text top="279" left="70" width="359" height="13" font="2">syntax of type variables (included in C# 3.0 to</text>
<text top="297" left="70" width="359" height="13" font="2">allow avoiding type speciﬁcation of initialized local</text>
<text top="314" left="70" width="57" height="13" font="2">variables</text>
<text top="314" left="141" width="33" height="13" font="2">[26]),</text>
<text top="314" left="190" width="21" height="13" font="2">the</text>
<text top="314" left="225" width="40" height="13" font="2">parser</text>
<text top="314" left="279" width="45" height="13" font="2">assigns</text>
<text top="314" left="338" width="33" height="13" font="2">them</text>
<text top="314" left="385" width="44" height="13" font="2">unique</text>
<text top="332" left="70" width="150" height="13" font="2">sequential numbers (X</text>
<text top="338" left="220" width="4" height="9" font="17">i</text>
<text top="332" left="231" width="198" height="13" font="2">metavariables range over type</text>
<text top="350" left="70" width="359" height="13" font="2">variables). Type variables can be declared as dynamic</text>
<text top="368" left="70" width="359" height="14" font="2">(dyn) or, by default, static (sta). Only intersection and</text>
<text top="386" left="70" width="356" height="13" font="2">union types can also be qualiﬁed as dynamic or static.</text>
<text top="404" left="85" width="162" height="14" font="2">Member types ([(id :IT )</text>
<text top="401" left="247" width="6" height="10" font="17">∗</text>
<text top="405" left="254" width="174" height="12" font="2">]) represent the collection</text>
<text top="422" left="70" width="359" height="13" font="2">of ﬁelds an object may hold. Member types have been</text>
<text top="440" left="70" width="359" height="13" font="2">introduced in constraints to deﬁne structural width</text>
<text top="458" left="70" width="359" height="16" font="2">coercion of object types to member types (S-OMember</text>
<text top="476" left="70" width="359" height="13" font="2">rule in Figure 11), because objects in StaDyn do not</text>
<text top="494" left="70" width="359" height="16" font="2">deﬁne width subtyping (S-Object in Figure 11). This</text>
<text top="512" left="70" width="359" height="13" font="2">subtyping relation is used in the constraint resolution</text>
<text top="530" left="70" width="359" height="16" font="2">algorithm when function calls are type-checked (T-Inv</text>
<text top="548" left="70" width="90" height="13" font="2">in Figure 17).</text>
<text top="566" left="85" width="344" height="13" font="2">Type inference is speciﬁed with the general judgment</text>
<text top="583" left="70" width="27" height="13" font="2">Γ; Ω</text>
<text top="583" left="114" width="33" height="13" font="2">E : T</text>
<text top="583" left="165" width="264" height="13" font="2">C; Γ , meaning that under constraints C,</text>
<text top="601" left="70" width="359" height="13" font="2">environment Γ, and context Ω, expression E has type</text>
<text top="619" left="70" width="359" height="13" font="2">T , producing the output environment Γ . Environments</text>
<text top="637" left="70" width="359" height="13" font="2">(Γ) bind variables (identiﬁers) to types in the scope</text>
<text top="655" left="70" width="359" height="13" font="2">represented by Γ, and they also bind type variables to</text>
<text top="673" left="70" width="359" height="13" font="2">types (if type variables have been inferred). Γ holds</text>
<text top="691" left="70" width="359" height="13" font="2">the environment before the scope of E, and Γ stores</text>
<text top="709" left="70" width="359" height="13" font="2">the environment after typing E. Γ might diﬀer from</text>
<text top="727" left="70" width="359" height="13" font="2">Γ, containing inferred types of local variables and new</text>
<text top="745" left="70" width="359" height="13" font="2">types bound to type variables inferred in E. Output</text>
<text top="763" left="70" width="359" height="13" font="2">environments have already been used to deﬁne ﬂow-</text>
<text top="781" left="70" width="359" height="13" font="2">sensitive type systems [24], because type variables may</text>
<text top="799" left="70" width="352" height="13" font="2">change their types depending on the control ﬂow [32].</text>
<text top="817" left="85" width="344" height="13" font="2">A context (Ω) stores the information of the function</text>
<text top="834" left="70" width="359" height="13" font="2">being analyzed, in order to type-check its statements.</text>
<text top="852" left="70" width="15" height="13" font="2">Ω.</text>
<text top="858" left="85" width="38" height="9" font="17">params</text>
<text top="852" left="127" width="302" height="13" font="2">saves the parameter list of the current function,</text>
<text top="870" left="70" width="15" height="13" font="2">Ω.</text>
<text top="876" left="85" width="9" height="9" font="17">rt</text>
<text top="870" left="101" width="255" height="13" font="2">holds its declared return type, and Ω.</text>
<text top="876" left="356" width="18" height="9" font="17">tifp</text>
<text top="870" left="381" width="47" height="13" font="2">collects</text>
<text top="888" left="70" width="359" height="13" font="2">the types inferred from function parameters (see</text>
<text top="906" left="70" width="93" height="13" font="2">Section 3.2.2).</text>
<text top="924" left="85" width="344" height="13" font="2">Figure 4 shows another example program of our core</text>
<text top="942" left="70" width="359" height="13" font="2">language. Elements of the environment and generated</text>
<text top="960" left="70" width="359" height="13" font="2">constraints are shown in the right part of the ﬁgure.</text>
<text top="978" left="70" width="359" height="14" font="2">For example, in the scope of the main function in</text>
<text top="996" left="70" width="359" height="14" font="2">Figure 4, Γ holds the assumptions Γ(increment):int,</text>
<text top="1014" left="70" width="77" height="14" font="2">Γ(list1):X</text>
<text top="1019" left="147" width="12" height="9" font="17">18</text>
<text top="1014" left="159" width="177" height="13" font="2">, and, in line 16, Γ(X</text>
<text top="1019" left="336" width="12" height="9" font="17">18</text>
<text top="1014" left="349" width="63" height="13" font="2">):{data:X</text>
<text top="1019" left="412" width="12" height="9" font="17">20</text>
<text top="1014" left="424" width="4" height="13" font="2">,</text>
<text top="1032" left="70" width="46" height="13" font="2">next:X</text>
<text top="1037" left="116" width="12" height="9" font="17">21</text>
<text top="1031" left="129" width="12" height="14" font="2">},</text>
<text top="1032" left="155" width="28" height="13" font="2">Γ(X</text>
<text top="1037" left="183" width="12" height="9" font="17">20</text>
<text top="1032" left="196" width="119" height="14" font="2">):bool and Γ(X</text>
<text top="1037" left="314" width="12" height="9" font="17">21</text>
<text top="1032" left="327" width="38" height="14" font="2">):int.</text>
<text top="1032" left="394" width="34" height="13" font="2">Since</text>
<text top="1050" left="70" width="28" height="13" font="2">Γ(X</text>
<text top="1055" left="97" width="12" height="9" font="17">20</text>
<text top="1050" left="110" width="318" height="14" font="2">):bool in line 16, the statement in line 17 is</text>
<text top="1068" left="70" width="359" height="13" font="2">accepted by the type system. However in line 19 the</text>
<text top="1086" left="70" width="359" height="14" font="2">type of the object data ﬁeld is changed to int and,</text>
<text top="1103" left="70" width="359" height="13" font="2">hence, line 20 compiles without any error, whereas line</text>
<text top="1121" left="70" width="359" height="13" font="2">21 is now erroneous. This example shows how a variable</text>
<text top="1139" left="70" width="359" height="13" font="2">can hold diﬀerent types in the same scope, depending</text>
<text top="1157" left="70" width="150" height="13" font="2">on the execution ﬂow.</text>
<text top="1157" left="234" width="195" height="13" font="2">This is a common feature of</text>
<text top="129" left="465" width="21" height="7" font="20">01: </text>
<text top="129" left="489" width="16" height="7" font="21">var</text>
<text top="129" left="505" width="64" height="7" font="11"> createNode(</text>
<text top="129" left="569" width="16" height="7" font="21">var</text>
<text top="129" left="585" width="37" height="7" font="11"> data, </text>
<text top="129" left="622" width="16" height="7" font="21">var</text>
<text top="129" left="638" width="48" height="7" font="11"> next) { </text>
<text top="127" left="720" width="5" height="12" font="22">Γ</text>
<text top="130" left="725" width="43" height="7" font="20">(data):X</text>
<text top="134" left="767" width="7" height="5" font="23">10</text>
<text top="130" left="775" width="11" height="7" font="20">, </text>
<text top="127" left="785" width="5" height="12" font="22">Γ</text>
<text top="130" left="791" width="43" height="7" font="20">(next):X</text>
<text top="134" left="833" width="7" height="5" font="23">11</text>
<text top="130" left="840" width="5" height="7" font="20"> </text>
<text top="140" left="465" width="21" height="7" font="20">02: </text>
<text top="140" left="489" width="43" height="7" font="21">  return</text>
<text top="140" left="531" width="5" height="7" font="11"> </text>
<text top="140" left="537" width="16" height="7" font="21">new</text>
<text top="140" left="553" width="138" height="7" font="11"> { data=data, next=next}; </text>
<text top="140" left="840" width="5" height="7" font="20"> </text>
<text top="150" left="465" width="21" height="7" font="20">03: </text>
<text top="150" left="489" width="5" height="7" font="11">}</text>
<text top="150" left="494" width="5" height="7" font="21"> </text>
<text top="148" left="577" width="5" height="12" font="22">Γ</text>
<text top="152" left="582" width="74" height="7" font="20">(createNode):X</text>
<text top="155" left="657" width="7" height="5" font="23">10</text>
<text top="148" left="664" width="5" height="12" font="22">×</text>
<text top="152" left="669" width="5" height="7" font="20">X</text>
<text top="155" left="674" width="7" height="5" font="23">11</text>
<text top="148" left="681" width="9" height="12" font="22">→</text>
<text top="152" left="690" width="5" height="7" font="20">X</text>
<text top="155" left="695" width="7" height="5" font="23">12</text>
<text top="152" left="702" width="5" height="7" font="20"> </text>
<text top="151" left="708" width="5" height="9" font="24">║</text>
<text top="152" left="713" width="43" height="7" font="20"> {data:X</text>
<text top="155" left="755" width="7" height="5" font="23">10</text>
<text top="152" left="763" width="37" height="7" font="20">,next:X</text>
<text top="155" left="800" width="7" height="5" font="23">11</text>
<text top="152" left="807" width="11" height="7" font="20">} </text>
<text top="148" left="817" width="5" height="12" font="22">≤</text>
<text top="152" left="822" width="11" height="7" font="20"> X</text>
<text top="155" left="833" width="7" height="5" font="23">12</text>
<text top="152" left="840" width="5" height="7" font="20"> </text>
<text top="162" left="465" width="21" height="7" font="20">04: </text>
<text top="162" left="489" width="21" height="7" font="21">void</text>
<text top="162" left="510" width="48" height="7" font="11"> setData(</text>
<text top="162" left="558" width="16" height="7" font="21">var</text>
<text top="162" left="574" width="37" height="7" font="11"> node, </text>
<text top="162" left="611" width="16" height="7" font="21">var</text>
<text top="162" left="627" width="48" height="7" font="11"> data) { </text>
<text top="160" left="719" width="5" height="12" font="22">Γ</text>
<text top="164" left="725" width="43" height="7" font="20">(node):X</text>
<text top="167" left="767" width="7" height="5" font="23">13</text>
<text top="164" left="774" width="11" height="7" font="20">, </text>
<text top="160" left="785" width="5" height="12" font="22">Γ</text>
<text top="164" left="790" width="43" height="7" font="20">(data):X</text>
<text top="167" left="833" width="7" height="5" font="23">14</text>
<text top="164" left="840" width="5" height="7" font="20"> </text>
<text top="174" left="465" width="21" height="7" font="20">05: </text>
<text top="174" left="489" width="110" height="7" font="11">  node.data = data;  </text>
<text top="175" left="708" width="5" height="7" font="20">X</text>
<text top="179" left="713" width="7" height="5" font="23">13</text>
<text top="175" left="720" width="5" height="7" font="20"> </text>
<text top="172" left="725" width="5" height="12" font="22">≤</text>
<text top="175" left="730" width="43" height="7" font="20"> [data:X</text>
<text top="179" left="773" width="7" height="5" font="23">15</text>
<text top="175" left="780" width="21" height="7" font="20">], X</text>
<text top="179" left="801" width="7" height="5" font="23">15</text>
<text top="175" left="808" width="5" height="7" font="20"> </text>
<text top="172" left="813" width="9" height="12" font="22">←</text>
<text top="175" left="822" width="11" height="7" font="20"> X</text>
<text top="179" left="833" width="7" height="5" font="23">14</text>
<text top="175" left="840" width="5" height="7" font="20"> </text>
<text top="185" left="465" width="21" height="7" font="20">06: </text>
<text top="185" left="489" width="11" height="7" font="11">} </text>
<text top="183" left="568" width="5" height="12" font="22">Γ</text>
<text top="187" left="574" width="64" height="7" font="20">(setData): X</text>
<text top="190" left="637" width="7" height="5" font="23">13</text>
<text top="183" left="645" width="5" height="12" font="22">×</text>
<text top="187" left="649" width="5" height="7" font="20">X</text>
<text top="190" left="655" width="7" height="5" font="23">14</text>
<text top="183" left="662" width="9" height="12" font="22">→</text>
<text top="187" left="671" width="27" height="7" font="20">void </text>
<text top="185" left="697" width="5" height="9" font="24">║</text>
<text top="187" left="702" width="11" height="7" font="20"> X</text>
<text top="190" left="713" width="7" height="5" font="23">13</text>
<text top="187" left="720" width="5" height="7" font="20"> </text>
<text top="183" left="725" width="5" height="12" font="22">≤</text>
<text top="187" left="730" width="43" height="7" font="20"> [data:X</text>
<text top="190" left="773" width="7" height="5" font="23">15</text>
<text top="187" left="780" width="21" height="7" font="20">], X</text>
<text top="190" left="801" width="7" height="5" font="23">15</text>
<text top="187" left="808" width="5" height="7" font="20"> </text>
<text top="183" left="814" width="9" height="12" font="22">←</text>
<text top="187" left="822" width="11" height="7" font="20"> X</text>
<text top="190" left="833" width="7" height="5" font="23">14</text>
<text top="187" left="840" width="5" height="7" font="20"> </text>
<text top="197" left="465" width="21" height="7" font="20">07: </text>
<text top="197" left="489" width="21" height="7" font="21">void</text>
<text top="197" left="510" width="58" height="7" font="11"> clearList(</text>
<text top="197" left="569" width="16" height="7" font="21">var</text>
<text top="197" left="585" width="37" height="7" font="11"> list, </text>
<text top="197" left="622" width="21" height="7" font="21">bool</text>
<text top="197" left="643" width="53" height="7" font="11"> clear) { </text>
<text top="195" left="785" width="5" height="12" font="22">Γ</text>
<text top="198" left="791" width="43" height="7" font="20">(list):X</text>
<text top="202" left="833" width="7" height="5" font="23">16</text>
<text top="198" left="840" width="5" height="7" font="20"> </text>
<text top="208" left="465" width="21" height="7" font="20">08: </text>
<text top="208" left="489" width="11" height="7" font="11">  </text>
<text top="208" left="500" width="11" height="7" font="21">if</text>
<text top="208" left="510" width="48" height="7" font="11"> (clear) </text>
<text top="208" left="840" width="5" height="7" font="20"> </text>
<text top="218" left="465" width="21" height="7" font="20">09: </text>
<text top="218" left="489" width="101" height="7" font="11">    list.next = 0; </text>
<text top="220" left="699" width="5" height="7" font="20">X</text>
<text top="223" left="704" width="7" height="5" font="23">16</text>
<text top="220" left="711" width="5" height="7" font="20"> </text>
<text top="216" left="717" width="5" height="12" font="22">≤</text>
<text top="220" left="721" width="43" height="7" font="20"> [next:X</text>
<text top="223" left="764" width="7" height="5" font="23">17</text>
<text top="220" left="771" width="16" height="7" font="20">], </text>
<text top="216" left="787" width="5" height="12" font="22">Γ</text>
<text top="220" left="792" width="11" height="7" font="20">(X</text>
<text top="223" left="803" width="7" height="5" font="23">17</text>
<text top="220" left="810" width="5" height="7" font="20">)</text>
<text top="216" left="815" width="9" height="12" font="22">←</text>
<text top="220" left="824" width="21" height="7" font="20">int </text>
<text top="230" left="465" width="21" height="7" font="20">10: </text>
<text top="230" left="489" width="11" height="7" font="11">} </text>
<text top="228" left="613" width="5" height="12" font="22">Γ</text>
<text top="231" left="619" width="11" height="7" font="20">(X</text>
<text top="235" left="629" width="7" height="5" font="23">17</text>
<text top="231" left="636" width="16" height="7" font="20">):X</text>
<text top="235" left="652" width="7" height="5" font="23">17</text>
<text top="228" left="659" width="5" height="12" font="22">∨</text>
<text top="231" left="665" width="27" height="7" font="20">int, </text>
<text top="228" left="691" width="5" height="12" font="22">Γ</text>
<text top="231" left="697" width="69" height="7" font="20">(clearList):X</text>
<text top="235" left="766" width="7" height="5" font="23">16</text>
<text top="231" left="773" width="27" height="7" font="20">xbool</text>
<text top="228" left="800" width="9" height="12" font="22">→</text>
<text top="231" left="808" width="27" height="7" font="20">void </text>
<text top="230" left="835" width="5" height="9" font="24">║</text>
<text top="231" left="840" width="5" height="7" font="20"> </text>
<text top="243" left="681" width="5" height="7" font="20">X</text>
<text top="246" left="687" width="7" height="5" font="23">16</text>
<text top="243" left="694" width="5" height="7" font="20"> </text>
<text top="240" left="699" width="5" height="12" font="22">≤</text>
<text top="243" left="704" width="43" height="7" font="20"> [next:X</text>
<text top="246" left="746" width="7" height="5" font="23">17</text>
<text top="243" left="753" width="16" height="7" font="20">], </text>
<text top="240" left="769" width="5" height="12" font="22">Γ</text>
<text top="243" left="775" width="11" height="7" font="20">(X</text>
<text top="246" left="785" width="7" height="5" font="23">17</text>
<text top="243" left="792" width="5" height="7" font="20">)</text>
<text top="240" left="798" width="9" height="12" font="22">←</text>
<text top="243" left="806" width="5" height="7" font="20">X</text>
<text top="246" left="812" width="7" height="5" font="23">17</text>
<text top="240" left="819" width="5" height="12" font="22">∨</text>
<text top="243" left="824" width="21" height="7" font="20">int </text>
<text top="253" left="465" width="21" height="7" font="20">11: </text>
<text top="253" left="489" width="21" height="7" font="21">void</text>
<text top="253" left="510" width="53" height="7" font="11"> main() { </text>
<text top="253" left="840" width="5" height="7" font="20"> </text>
<text top="263" left="465" width="21" height="7" font="20">12: </text>
<text top="263" left="489" width="11" height="7" font="11">  </text>
<text top="263" left="500" width="16" height="7" font="21">var</text>
<text top="263" left="515" width="48" height="7" font="11"> list1;  </text>
<text top="261" left="780" width="5" height="12" font="22">Γ</text>
<text top="265" left="785" width="48" height="7" font="20">(list1):X</text>
<text top="268" left="833" width="7" height="5" font="23">18</text>
<text top="265" left="840" width="5" height="7" font="20"> </text>
<text top="275" left="465" width="21" height="7" font="20">13: </text>
<text top="275" left="489" width="11" height="7" font="11">  </text>
<text top="275" left="500" width="16" height="7" font="21">var</text>
<text top="275" left="515" width="48" height="7" font="11"> list2;  </text>
<text top="273" left="780" width="5" height="12" font="22">Γ</text>
<text top="276" left="785" width="48" height="7" font="20">(list2):X</text>
<text top="280" left="833" width="7" height="5" font="23">19</text>
<text top="276" left="840" width="5" height="7" font="20"> </text>
<text top="286" left="465" width="21" height="7" font="20">14: </text>
<text top="286" left="489" width="11" height="7" font="11">  </text>
<text top="286" left="500" width="16" height="7" font="21">int</text>
<text top="286" left="515" width="69" height="7" font="11"> increment;  </text>
<text top="284" left="755" width="5" height="12" font="22">Γ</text>
<text top="288" left="760" width="85" height="7" font="20">(increment):int </text>
<text top="298" left="465" width="21" height="7" font="20">15: </text>
<text top="298" left="489" width="11" height="7" font="11">  </text>
<text top="298" left="500" width="21" height="7" font="21">bool</text>
<text top="298" left="521" width="58" height="7" font="11"> boolean;  </text>
<text top="296" left="760" width="5" height="12" font="22">Γ</text>
<text top="299" left="766" width="80" height="7" font="20">(boolean):bool </text>
<text top="309" left="465" width="21" height="7" font="20">16: </text>
<text top="309" left="489" width="112" height="7" font="11">  list1 = createNode(</text>
<text top="309" left="601" width="21" height="7" font="21">true</text>
<text top="309" left="622" width="32" height="7" font="11">, 0); </text>
<text top="308" left="707" width="5" height="12" font="22">Γ</text>
<text top="311" left="712" width="11" height="7" font="20">(X</text>
<text top="314" left="723" width="7" height="5" font="23">18</text>
<text top="311" left="730" width="48" height="7" font="20">):{data:X</text>
<text top="314" left="778" width="7" height="5" font="23">20</text>
<text top="311" left="785" width="37" height="7" font="20">,next:X</text>
<text top="314" left="822" width="7" height="5" font="23">21</text>
<text top="311" left="829" width="16" height="7" font="20">}, </text>
<text top="319" left="725" width="5" height="12" font="22">Γ</text>
<text top="322" left="730" width="11" height="7" font="20">(X</text>
<text top="326" left="741" width="7" height="5" font="23">20</text>
<text top="322" left="748" width="43" height="7" font="20">):bool, </text>
<text top="319" left="790" width="5" height="12" font="22">Γ</text>
<text top="322" left="796" width="11" height="7" font="20">(X</text>
<text top="326" left="806" width="7" height="5" font="23">21</text>
<text top="322" left="813" width="32" height="7" font="20">):int </text>
<text top="332" left="465" width="21" height="7" font="20">17: </text>
<text top="332" left="489" width="128" height="7" font="11">  boolean = list1.data; </text>
<text top="332" left="840" width="5" height="7" font="20"> </text>
<text top="343" left="465" width="21" height="7" font="20">18: </text>
<text top="343" left="489" width="207" height="7" font="11">  list2 = createNode(boolean, list1);  </text>
<text top="341" left="707" width="5" height="12" font="22">Γ</text>
<text top="344" left="713" width="11" height="7" font="20">(X</text>
<text top="347" left="723" width="7" height="5" font="23">19</text>
<text top="344" left="730" width="48" height="7" font="20">):{data:X</text>
<text top="347" left="778" width="7" height="5" font="23">22</text>
<text top="344" left="785" width="37" height="7" font="20">,next:X</text>
<text top="347" left="822" width="7" height="5" font="23">18</text>
<text top="344" left="830" width="16" height="7" font="20">}, </text>
<text top="352" left="785" width="5" height="12" font="22">Γ</text>
<text top="356" left="791" width="11" height="7" font="20">(X</text>
<text top="359" left="801" width="7" height="5" font="23">22</text>
<text top="356" left="808" width="37" height="7" font="20">):bool </text>
<text top="366" left="465" width="21" height="7" font="20">19: </text>
<text top="366" left="489" width="117" height="7" font="11">  setData(list1, 3);  </text>
<text top="364" left="791" width="5" height="12" font="22">Γ</text>
<text top="367" left="796" width="11" height="7" font="20">(X</text>
<text top="371" left="806" width="7" height="5" font="23">20</text>
<text top="367" left="814" width="32" height="7" font="20">):int </text>
<text top="377" left="465" width="21" height="7" font="20">20: </text>
<text top="377" left="489" width="181" height="7" font="11">  increment = list2.next.data + 1;</text>
<text top="377" left="670" width="5" height="7" font="25"> </text>
<text top="377" left="840" width="5" height="7" font="20"> </text>
<text top="387" left="465" width="21" height="7" font="20">21: </text>
<text top="387" left="489" width="122" height="7" font="11">  boolean = list1.data;</text>
<text top="387" left="611" width="5" height="7" font="25"> </text>
<text top="387" left="646" width="90" height="7" font="25">// Compiler error</text>
<text top="387" left="736" width="5" height="7" font="11"> </text>
<text top="387" left="840" width="5" height="7" font="20"> </text>
<text top="397" left="465" width="21" height="7" font="20">22: </text>
<text top="397" left="489" width="101" height="7" font="11">  clearList(list2, </text>
<text top="397" left="590" width="27" height="7" font="21">false</text>
<text top="397" left="617" width="16" height="7" font="11">); </text>
<text top="395" left="686" width="5" height="12" font="22">Γ</text>
<text top="399" left="691" width="11" height="7" font="20">(X</text>
<text top="402" left="702" width="7" height="5" font="23">19</text>
<text top="399" left="709" width="48" height="7" font="20">):{data:X</text>
<text top="402" left="757" width="7" height="5" font="23">22</text>
<text top="399" left="764" width="37" height="7" font="20">,next:X</text>
<text top="402" left="801" width="7" height="5" font="23">18</text>
<text top="395" left="808" width="5" height="12" font="22">∨</text>
<text top="399" left="813" width="32" height="7" font="20">int}, </text>
<text top="407" left="713" width="5" height="12" font="22">Γ</text>
<text top="411" left="718" width="11" height="7" font="20">(X</text>
<text top="414" left="729" width="7" height="5" font="23">18</text>
<text top="411" left="736" width="48" height="7" font="20">):{data:X</text>
<text top="414" left="783" width="7" height="5" font="23">20</text>
<text top="411" left="791" width="37" height="7" font="20">,next:X</text>
<text top="414" left="828" width="7" height="5" font="23">21</text>
<text top="411" left="835" width="11" height="7" font="20">} </text>
<text top="420" left="465" width="21" height="7" font="20">23: </text>
<text top="420" left="489" width="11" height="7" font="11">} </text>
<text top="420" left="840" width="5" height="7" font="11"> </text>
<text top="452" left="517" width="254" height="12" font="4">FIGURE 4. Example concrete program.</text>
<text top="505" left="464" width="359" height="13" font="2">dynamically typed languages, but StaDyn oﬀers it in a</text>
<text top="523" left="464" width="359" height="13" font="2">statically typed way. This process has also been applied</text>
<text top="541" left="464" width="237" height="13" font="2">to control structures (Section 3.2.6).</text>
<text top="559" left="479" width="344" height="13" font="2">We also deﬁne two kinds of constraints (the last part</text>
<text top="577" left="464" width="359" height="13" font="2">of Figure 3). Subtyping constraints (T ≤ T ) require the</text>
<text top="595" left="464" width="359" height="13" font="2">type on the left to be a subtype of (promote to) the type</text>
<text top="613" left="464" width="359" height="13" font="2">on the right. Assignment constraints (T V ← T ) not</text>
<text top="631" left="464" width="359" height="13" font="2">only check that an assignment could be performed, but</text>
<text top="649" left="464" width="359" height="13" font="2">they are also used to infer types, binding a type variable</text>
<text top="667" left="464" width="359" height="13" font="2">to another type. Therefore, assignment constraints may</text>
<text top="684" left="464" width="359" height="13" font="2">modify type variable bindings in type environments,</text>
<text top="702" left="464" width="359" height="13" font="2">when function invocation expressions are checked. In</text>
<text top="720" left="464" width="359" height="13" font="2">line 5 of Figure 4, a subtyping constraint is generated</text>
<text top="738" left="464" width="359" height="14" font="2">for the node variable; it should be an object with a</text>
<text top="757" left="464" width="327" height="12" font="2">data ﬁeld, i.e., a subtype of a member type: X</text>
<text top="762" left="792" width="12" height="9" font="17">13</text>
<text top="755" left="811" width="12" height="14" font="2">≤</text>
<text top="774" left="464" width="50" height="13" font="2">[data:X</text>
<text top="780" left="514" width="12" height="9" font="17">15</text>
<text top="774" left="527" width="296" height="13" font="2">]. This constraint must be statically fulﬁlled</text>
<text top="792" left="464" width="359" height="14" font="2">wherever the function setData is called, e.g., line 19.</text>
<text top="810" left="464" width="359" height="13" font="2">Line 5 is also an example of an assignment constraint</text>
<text top="828" left="464" width="91" height="13" font="2">generation: X</text>
<text top="833" left="555" width="12" height="9" font="17">15</text>
<text top="827" left="572" width="31" height="14" font="2">← X</text>
<text top="833" left="604" width="12" height="9" font="17">14</text>
<text top="828" left="616" width="207" height="14" font="2">. When the setData function is</text>
<text top="846" left="464" width="317" height="14" font="2">invoked, the data type of the node argument X</text>
<text top="851" left="782" width="12" height="9" font="17">15</text>
<text top="846" left="800" width="23" height="13" font="2">will</text>
<text top="864" left="464" width="305" height="14" font="2">be assigned the type of the data parameter X</text>
<text top="869" left="769" width="12" height="9" font="17">14</text>
<text top="864" left="782" width="41" height="13" font="2">. This</text>
<text top="882" left="464" width="131" height="13" font="2">is the reason why X</text>
<text top="887" left="596" width="12" height="9" font="17">20</text>
<text top="882" left="613" width="207" height="14" font="2">is then bound to int in line 19.</text>
<text top="924" left="464" width="37" height="13" font="2">3.2.1.</text>
<text top="924" left="516" width="64" height="13" font="2">Functions</text>
<text top="942" left="464" width="47" height="13" font="2">We use</text>
<text top="942" left="529" width="294" height="13" font="2">to denote well-formedness. Inference rules in</text>
<text top="960" left="464" width="359" height="13" font="2">Figure 5 not only check well-formedness, but they also</text>
<text top="978" left="464" width="359" height="13" font="2">generate output environments and constraints that are</text>
<text top="996" left="464" width="359" height="13" font="2">used for type-checking subsequent expressions. As an</text>
<text top="1014" left="464" width="359" height="16" font="2">example, T-Func adds the identiﬁer of the function</text>
<text top="1032" left="464" width="306" height="13" font="2">being declared to the output environment.</text>
<text top="1032" left="794" width="29" height="13" font="2">This</text>
<text top="1050" left="464" width="152" height="13" font="2">identiﬁer type is now T</text>
<text top="1055" left="616" width="6" height="9" font="17">1</text>
<text top="1049" left="627" width="60" height="14" font="2">× . . . × T</text>
<text top="1055" left="686" width="7" height="9" font="17">n</text>
<text top="1049" left="699" width="28" height="14" font="2">→ T</text>
<text top="1050" left="745" width="78" height="13" font="2">C, denoting</text>
<text top="1068" left="464" width="359" height="13" font="2">that it is possible to type-check subsequent calls to</text>
<text top="1086" left="464" width="359" height="13" font="2">it. Function types include the constraint set (C) that</text>
<text top="1103" left="464" width="359" height="13" font="2">must be satisﬁed by the arguments at each invocation.</text>
<text top="1121" left="464" width="359" height="13" font="2">These constraints are those produced by the statements</text>
<text top="1139" left="464" width="359" height="13" font="2">within the function. For instance, the type expression</text>
<text top="1157" left="464" width="359" height="14" font="2">of the setData function in Figure 4 (line 6) has the two</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="26" size="5" family="Times" color="#000000"/>
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="816" width="7" height="13" font="2">7</text>
<text top="146" left="70" width="48" height="9" font="17">(T-Func)</text>
<text top="158" left="80" width="12" height="9" font="17">Ω.</text>
<text top="162" left="92" width="32" height="7" font="26">params</text>
<text top="158" left="128" width="23" height="9" font="17">= id</text>
<text top="162" left="151" width="5" height="7" font="26">1</text>
<text top="158" left="155" width="21" height="9" font="17">...id</text>
<text top="162" left="177" width="7" height="7" font="26">n</text>
<text top="158" left="184" width="18" height="9" font="17">, Ω.</text>
<text top="162" left="202" width="25" height="7" font="26">locals</text>
<text top="158" left="231" width="23" height="9" font="17">= id</text>
<text top="162" left="254" width="19" height="7" font="26">n+1</text>
<text top="158" left="272" width="21" height="9" font="17">...id</text>
<text top="162" left="293" width="23" height="7" font="26">n+m</text>
<text top="158" left="318" width="18" height="9" font="17">, Ω.</text>
<text top="162" left="335" width="8" height="7" font="26">rt</text>
<text top="158" left="348" width="38" height="9" font="17">= T , Ω.</text>
<text top="162" left="386" width="16" height="7" font="26">tifp</text>
<text top="158" left="406" width="20" height="9" font="17">= T</text>
<text top="162" left="426" width="5" height="7" font="26">1</text>
<text top="158" left="430" width="18" height="9" font="17">...T</text>
<text top="162" left="448" width="7" height="7" font="26">n</text>
<text top="170" left="235" width="21" height="9" font="17">id /</text>
<text top="169" left="249" width="51" height="10" font="17">∈ dom(Γ)</text>
<text top="182" left="124" width="21" height="9" font="17">Γ; Ω</text>
<text top="182" left="159" width="7" height="9" font="17">T</text>
<text top="185" left="166" width="5" height="7" font="26">1</text>
<text top="182" left="175" width="10" height="9" font="17">id</text>
<text top="185" left="186" width="5" height="7" font="26">1</text>
<text top="182" left="195" width="3" height="9" font="17">:</text>
<text top="181" left="221" width="19" height="10" font="17">∅; Γ</text>
<text top="185" left="240" width="5" height="7" font="26">1</text>
<text top="182" left="246" width="26" height="9" font="17">... Γ</text>
<text top="185" left="271" width="20" height="7" font="26">n−1</text>
<text top="182" left="292" width="14" height="9" font="17">; Ω</text>
<text top="182" left="320" width="7" height="9" font="17">T</text>
<text top="185" left="327" width="7" height="7" font="26">n</text>
<text top="182" left="338" width="10" height="9" font="17">id</text>
<text top="185" left="348" width="7" height="7" font="26">n</text>
<text top="182" left="359" width="3" height="9" font="17">:</text>
<text top="181" left="385" width="19" height="10" font="17">∅; Γ</text>
<text top="185" left="404" width="7" height="7" font="26">n</text>
<text top="194" left="72" width="7" height="9" font="17">Γ</text>
<text top="197" left="79" width="7" height="7" font="26">n</text>
<text top="194" left="86" width="14" height="9" font="17">; Ω</text>
<text top="194" left="115" width="7" height="9" font="17">T</text>
<text top="197" left="122" width="19" height="7" font="26">n+1</text>
<text top="194" left="145" width="10" height="9" font="17">id</text>
<text top="197" left="156" width="19" height="7" font="26">n+1</text>
<text top="194" left="179" width="3" height="9" font="17">:</text>
<text top="193" left="198" width="19" height="10" font="17">∅; Γ</text>
<text top="197" left="217" width="19" height="7" font="26">n+1</text>
<text top="194" left="237" width="26" height="9" font="17">... Γ</text>
<text top="197" left="263" width="37" height="7" font="26">n+m−1</text>
<text top="194" left="300" width="14" height="9" font="17">; Ω</text>
<text top="194" left="328" width="7" height="9" font="17">T</text>
<text top="197" left="335" width="23" height="7" font="26">n+m</text>
<text top="194" left="363" width="10" height="9" font="17">id</text>
<text top="197" left="373" width="23" height="7" font="26">n+m</text>
<text top="194" left="401" width="3" height="9" font="17">:</text>
<text top="193" left="420" width="19" height="10" font="17">∅; Γ</text>
<text top="197" left="439" width="23" height="7" font="26">n+m</text>
<text top="206" left="82" width="7" height="9" font="17">Γ</text>
<text top="209" left="89" width="23" height="7" font="26">n+m</text>
<text top="206" left="114" width="14" height="9" font="17">; Ω</text>
<text top="206" left="142" width="7" height="9" font="17">S</text>
<text top="209" left="149" width="5" height="7" font="26">1</text>
<text top="206" left="158" width="3" height="9" font="17">:</text>
<text top="206" left="184" width="9" height="9" font="17">C</text>
<text top="209" left="193" width="5" height="7" font="26">1</text>
<text top="206" left="199" width="13" height="9" font="17">; Γ</text>
<text top="209" left="211" width="36" height="7" font="26">n+m+1</text>
<text top="206" left="248" width="26" height="9" font="17">... Γ</text>
<text top="209" left="274" width="48" height="7" font="26">n+m+l−1</text>
<text top="206" left="322" width="14" height="9" font="17">; Ω</text>
<text top="206" left="351" width="7" height="9" font="17">S</text>
<text top="209" left="358" width="4" height="7" font="26">l</text>
<text top="206" left="366" width="3" height="9" font="17">:</text>
<text top="206" left="391" width="9" height="9" font="17">C</text>
<text top="209" left="400" width="4" height="7" font="26">l</text>
<text top="206" left="404" width="13" height="9" font="17">; Γ</text>
<text top="209" left="417" width="35" height="7" font="26">n+m+l</text>
<text top="218" left="169" width="7" height="9" font="17">Γ</text>
<text top="221" left="177" width="35" height="7" font="26">n+m+l</text>
<text top="218" left="212" width="14" height="9" font="17">; Ω</text>
<text top="218" left="240" width="16" height="9" font="17">R :</text>
<text top="218" left="279" width="9" height="9" font="17">C</text>
<text top="221" left="287" width="16" height="7" font="26">l+1</text>
<text top="218" left="304" width="13" height="9" font="17">; Γ</text>
<text top="221" left="317" width="47" height="7" font="26">n+m+l+1</text>
<text top="231" left="140" width="68" height="9" font="17">Γ = Γ, id : T</text>
<text top="234" left="208" width="5" height="7" font="26">1</text>
<text top="230" left="217" width="49" height="10" font="17">× . . . × T</text>
<text top="234" left="265" width="7" height="7" font="26">n</text>
<text top="230" left="276" width="22" height="10" font="17">→ T</text>
<text top="231" left="313" width="9" height="9" font="17">C</text>
<text top="234" left="321" width="5" height="7" font="26">1</text>
<text top="230" left="330" width="48" height="10" font="17">∪ . . . ∪ C</text>
<text top="234" left="378" width="16" height="7" font="26">l+1</text>
<text top="247" left="74" width="19" height="9" font="17">Γ; ∅</text>
<text top="247" left="107" width="34" height="9" font="17">T id(T</text>
<text top="251" left="141" width="5" height="7" font="26">1</text>
<text top="247" left="150" width="10" height="9" font="17">id</text>
<text top="251" left="161" width="5" height="7" font="26">1</text>
<text top="247" left="165" width="18" height="9" font="17">...T</text>
<text top="251" left="183" width="7" height="7" font="26">n</text>
<text top="247" left="194" width="10" height="9" font="17">id</text>
<text top="251" left="204" width="7" height="7" font="26">n</text>
<text top="247" left="211" width="15" height="9" font="17">) T</text>
<text top="251" left="226" width="19" height="7" font="26">n+1</text>
<text top="247" left="250" width="10" height="9" font="17">id</text>
<text top="251" left="260" width="19" height="7" font="26">n+1</text>
<text top="247" left="279" width="18" height="9" font="17">...T</text>
<text top="251" left="297" width="23" height="7" font="26">n+m</text>
<text top="247" left="324" width="10" height="9" font="17">id</text>
<text top="251" left="335" width="23" height="7" font="26">n+m</text>
<text top="247" left="362" width="7" height="9" font="17">S</text>
<text top="251" left="370" width="5" height="7" font="26">1</text>
<text top="247" left="374" width="18" height="9" font="17">...S</text>
<text top="251" left="392" width="4" height="7" font="26">l</text>
<text top="247" left="400" width="16" height="9" font="17">R :</text>
<text top="247" left="438" width="19" height="10" font="17">∅; Γ</text>
<text top="275" left="97" width="47" height="9" font="17">(T-Decl)</text>
<text top="286" left="122" width="21" height="9" font="17">id /</text>
<text top="286" left="136" width="51" height="10" font="17">∈ dom(Γ)</text>
<text top="299" left="119" width="68" height="9" font="17">Γ = Γ, id : T</text>
<text top="316" left="99" width="21" height="9" font="17">Γ; Ω</text>
<text top="316" left="135" width="29" height="9" font="17">T id :</text>
<text top="315" left="186" width="19" height="10" font="17">∅; Γ</text>
<text top="276" left="255" width="52" height="9" font="17">(T-Decls)</text>
<text top="287" left="267" width="21" height="9" font="17">Γ; Ω</text>
<text top="287" left="303" width="10" height="9" font="17">D</text>
<text top="291" left="312" width="5" height="7" font="26">1</text>
<text top="287" left="322" width="3" height="9" font="17">:</text>
<text top="287" left="347" width="19" height="10" font="17">∅; Γ</text>
<text top="291" left="366" width="5" height="7" font="26">1</text>
<text top="287" left="374" width="15" height="9" font="17">. . .</text>
<text top="299" left="264" width="7" height="9" font="17">Γ</text>
<text top="303" left="271" width="20" height="7" font="26">n−1</text>
<text top="299" left="292" width="14" height="9" font="17">; Ω</text>
<text top="299" left="320" width="10" height="9" font="17">D</text>
<text top="303" left="329" width="7" height="7" font="26">n</text>
<text top="299" left="340" width="3" height="9" font="17">:</text>
<text top="299" left="366" width="19" height="10" font="17">∅; Γ</text>
<text top="303" left="385" width="7" height="7" font="26">n</text>
<text top="315" left="257" width="21" height="9" font="17">Γ; Ω</text>
<text top="315" left="292" width="10" height="9" font="17">D</text>
<text top="319" left="302" width="5" height="7" font="26">1</text>
<text top="315" left="310" width="27" height="9" font="17">. . . D</text>
<text top="319" left="336" width="7" height="7" font="26">n</text>
<text top="315" left="347" width="3" height="9" font="17">:</text>
<text top="315" left="373" width="19" height="10" font="17">∅; Γ</text>
<text top="319" left="392" width="7" height="7" font="26">n</text>
<text top="344" left="178" width="53" height="9" font="17">(T-Funcs)</text>
<text top="355" left="189" width="21" height="9" font="17">Γ; Ω</text>
<text top="355" left="225" width="8" height="9" font="17">F</text>
<text top="359" left="232" width="5" height="7" font="26">1</text>
<text top="355" left="242" width="3" height="9" font="17">:</text>
<text top="354" left="268" width="19" height="10" font="17">∅; Γ</text>
<text top="359" left="286" width="5" height="7" font="26">1</text>
<text top="355" left="294" width="15" height="9" font="17">. . .</text>
<text top="367" left="186" width="7" height="9" font="17">Γ</text>
<text top="371" left="193" width="20" height="7" font="26">n−1</text>
<text top="367" left="214" width="14" height="9" font="17">; Ω</text>
<text top="367" left="242" width="8" height="9" font="17">F</text>
<text top="371" left="250" width="7" height="7" font="26">n</text>
<text top="367" left="260" width="3" height="9" font="17">:</text>
<text top="366" left="286" width="19" height="10" font="17">∅; Γ</text>
<text top="371" left="305" width="7" height="7" font="26">n</text>
<text top="383" left="180" width="21" height="9" font="17">Γ; Ω</text>
<text top="383" left="216" width="8" height="9" font="17">F</text>
<text top="386" left="223" width="5" height="7" font="26">1</text>
<text top="383" left="231" width="24" height="9" font="17">. . . F</text>
<text top="386" left="255" width="7" height="7" font="26">n</text>
<text top="383" left="266" width="3" height="9" font="17">:</text>
<text top="382" left="292" width="19" height="10" font="17">∅; Γ</text>
<text top="386" left="311" width="7" height="7" font="26">n</text>
<text top="425" left="94" width="311" height="12" font="4">FIGURE 5. Program, declarations and functions.</text>
<text top="472" left="70" width="88" height="13" font="2">constraints X</text>
<text top="478" left="158" width="12" height="9" font="17">13</text>
<text top="471" left="175" width="65" height="14" font="2">≤ [data:X</text>
<text top="478" left="240" width="12" height="9" font="17">15</text>
<text top="472" left="253" width="50" height="13" font="2">] and X</text>
<text top="478" left="302" width="12" height="9" font="17">15</text>
<text top="471" left="319" width="31" height="14" font="2">← X</text>
<text top="478" left="351" width="12" height="9" font="17">14</text>
<text top="472" left="363" width="65" height="13" font="2">. The rest</text>
<text top="490" left="70" width="359" height="13" font="2">of the rules in Figure 5 generate no constraint at all, and</text>
<text top="508" left="70" width="359" height="13" font="2">output environments become the input of the following</text>
<text top="526" left="70" width="309" height="13" font="2">terms, obtaining a ﬂow-sensitive type checking.</text>
<text top="564" left="70" width="37" height="13" font="2">3.2.2.</text>
<text top="564" left="122" width="50" height="13" font="2">Context</text>
<text top="582" left="70" width="359" height="13" font="2">It is necessary to store information regarding a function</text>
<text top="600" left="70" width="359" height="13" font="2">in order to subsequently perform type checking of</text>
<text top="617" left="70" width="227" height="13" font="2">the terms in the function scope.</text>
<text top="617" left="315" width="114" height="13" font="2">This information</text>
<text top="635" left="70" width="359" height="16" font="2">is saved in the function context (Ω) by means of T-</text>
<text top="656" left="70" width="359" height="13" font="2">Func (Figure 5) and the rules shown in Figure 6.</text>
<text top="671" left="70" width="359" height="16" font="2">At function declaration (T-Func), local variables are</text>
<text top="689" left="70" width="75" height="13" font="2">stored in Ω.</text>
<text top="695" left="145" width="33" height="9" font="17">locals</text>
<text top="689" left="179" width="116" height="13" font="2">, parameters in Ω.</text>
<text top="695" left="295" width="33" height="9" font="17">params</text>
<text top="689" left="329" width="51" height="13" font="2">, and Ω.</text>
<text top="695" left="380" width="11" height="9" font="17">rt</text>
<text top="689" left="396" width="33" height="13" font="2">saves</text>
<text top="707" left="70" width="359" height="13" font="2">the return type speciﬁed in the function declaration.</text>
<text top="725" left="70" width="359" height="13" font="2">The types inferred from the type parameters are stored</text>
<text top="743" left="70" width="31" height="13" font="2">in Ω.</text>
<text top="749" left="101" width="22" height="9" font="17">tifp</text>
<text top="743" left="128" width="300" height="13" font="2">(it will be described later why this information</text>
<text top="761" left="70" width="359" height="13" font="2">is necessary to perform type-checking of assignments,</text>
<text top="779" left="70" width="243" height="13" font="2">ﬁeld accessing and array indexing).</text>
<text top="779" left="329" width="100" height="16" font="2">First, T-Func</text>
<text top="797" left="70" width="250" height="13" font="2">(Figure 5) adds parameter types to Ω.</text>
<text top="803" left="320" width="22" height="9" font="17">tifp</text>
<text top="797" left="343" width="85" height="13" font="2">; in Figure 6,</text>
<text top="815" left="70" width="15" height="13" font="2">Ω.</text>
<text top="822" left="85" width="22" height="9" font="17">tifp</text>
<text top="817" left="108" width="209" height="13" font="2">-Field inserts ﬁeld types in Ω.</text>
<text top="821" left="317" width="22" height="9" font="17">tifp</text>
<text top="815" left="346" width="83" height="13" font="2">whenever an</text>
<text top="833" left="70" width="130" height="13" font="2">object type is in Ω.</text>
<text top="839" left="200" width="22" height="9" font="17">tifp</text>
<text top="833" left="223" width="26" height="13" font="2">; Ω.</text>
<text top="840" left="249" width="22" height="9" font="17">tifp</text>
<text top="835" left="271" width="104" height="13" font="2">-Array and Ω.</text>
<text top="840" left="376" width="22" height="9" font="17">tifp</text>
<text top="835" left="398" width="30" height="13" font="2">-Inv</text>
<text top="851" left="70" width="359" height="13" font="2">do the same with arrays and function calls, respectively.</text>
<text top="869" left="85" width="344" height="13" font="2">Notice that not only type variables are inserted in</text>
<text top="886" left="70" width="15" height="13" font="2">Ω.</text>
<text top="893" left="85" width="22" height="9" font="17">tifp</text>
<text top="886" left="108" width="4" height="13" font="2">.</text>
<text top="886" left="132" width="297" height="13" font="2">Objects are also added because they may</text>
<text top="904" left="70" width="359" height="13" font="2">indirectly hold type variables in their ﬁelds. The same</text>
<text top="922" left="70" width="359" height="13" font="2">happens with arrays, whose elements could be type</text>
<text top="940" left="70" width="61" height="13" font="2">variables.</text>
<text top="978" left="70" width="37" height="13" font="2">3.2.3.</text>
<text top="978" left="122" width="117" height="13" font="2">Basic Expressions</text>
<text top="996" left="70" width="359" height="13" font="2">This subsection describes the type-checking of variables,</text>
<text top="1014" left="70" width="359" height="13" font="2">object ﬁeld access, vector indexing, arithmetic, rela-</text>
<text top="1032" left="70" width="359" height="13" font="2">tional and logical expressions. Although assignments</text>
<text top="1050" left="70" width="359" height="13" font="2">and function calls are also expressions, they will be de-</text>
<text top="1068" left="70" width="311" height="13" font="2">scribed in Sections 3.2.5 and 3.2.7, respectively.</text>
<text top="1086" left="85" width="344" height="13" font="2">Figure 7 shows inference rules that type-check</text>
<text top="1103" left="70" width="61" height="13" font="2">variables.</text>
<text top="1103" left="146" width="283" height="14" font="2">The tv predicate tests whether a type is</text>
<text top="1121" left="70" width="359" height="14" font="2">a type variable or not, and the ftv function returns</text>
<text top="1139" left="70" width="359" height="13" font="2">the set of unbound type variables in an environment.</text>
<text top="1160" left="70" width="359" height="13" font="2">T-Var types a variable previously declared, when its</text>
<text top="146" left="534" width="17" height="9" font="17">(Ω.</text>
<text top="149" left="551" width="15" height="6" font="26">tifp</text>
<text top="146" left="566" width="37" height="9" font="17">-Field)</text>
<text top="159" left="536" width="21" height="9" font="17">Γ; Ω</text>
<text top="159" left="571" width="36" height="9" font="17">E : {id</text>
<text top="163" left="607" width="5" height="7" font="26">1</text>
<text top="159" left="617" width="14" height="9" font="17">: T</text>
<text top="163" left="630" width="5" height="7" font="26">1</text>
<text top="159" left="636" width="38" height="9" font="17">, . . . , id</text>
<text top="163" left="675" width="7" height="7" font="26">n</text>
<text top="159" left="685" width="14" height="9" font="17">: T</text>
<text top="163" left="699" width="7" height="7" font="26">n</text>
<text top="158" left="707" width="6" height="10" font="17">}</text>
<text top="159" left="726" width="22" height="9" font="17">C; Γ</text>
<text top="170" left="561" width="17" height="10" font="17">{id</text>
<text top="175" left="578" width="5" height="7" font="26">1</text>
<text top="171" left="587" width="14" height="9" font="17">: T</text>
<text top="175" left="601" width="5" height="7" font="26">1</text>
<text top="171" left="606" width="38" height="9" font="17">, . . . , id</text>
<text top="175" left="645" width="7" height="7" font="26">n</text>
<text top="171" left="656" width="14" height="9" font="17">: T</text>
<text top="175" left="669" width="7" height="7" font="26">n</text>
<text top="170" left="677" width="33" height="10" font="17">} ∈ Ω.</text>
<text top="175" left="710" width="16" height="7" font="26">tifp</text>
<text top="187" left="578" width="48" height="9" font="17">include T</text>
<text top="190" left="625" width="5" height="7" font="26">1</text>
<text top="187" left="633" width="24" height="9" font="17">. . . T</text>
<text top="190" left="657" width="7" height="7" font="26">n</text>
<text top="187" left="668" width="25" height="9" font="17">in Ω.</text>
<text top="190" left="693" width="16" height="7" font="26">tifp</text>
<text top="214" left="509" width="17" height="9" font="17">(Ω.</text>
<text top="217" left="526" width="15" height="6" font="26">tifp</text>
<text top="214" left="542" width="42" height="9" font="17">-Array)</text>
<text top="227" left="511" width="21" height="9" font="17">Γ; Ω</text>
<text top="227" left="547" width="71" height="9" font="17">E : Array(T )</text>
<text top="227" left="631" width="22" height="9" font="17">C; Γ</text>
<text top="227" left="681" width="79" height="9" font="17">Array(T ) ∈ Ω.</text>
<text top="231" left="760" width="16" height="7" font="26">tifp</text>
<text top="243" left="596" width="78" height="9" font="17">include T in Ω.</text>
<text top="246" left="674" width="16" height="7" font="26">tifp</text>
<text top="270" left="489" width="17" height="9" font="17">(Ω.</text>
<text top="273" left="506" width="15" height="6" font="26">tifp</text>
<text top="270" left="521" width="26" height="9" font="17">-Inv)</text>
<text top="282" left="491" width="21" height="9" font="17">Γ; Ω</text>
<text top="282" left="527" width="9" height="9" font="17">E</text>
<text top="285" left="535" width="5" height="7" font="26">1</text>
<text top="282" left="545" width="14" height="9" font="17">: T</text>
<text top="285" left="558" width="5" height="7" font="26">1</text>
<text top="282" left="577" width="9" height="9" font="17">C</text>
<text top="285" left="586" width="5" height="7" font="26">1</text>
<text top="282" left="592" width="13" height="9" font="17">; Γ</text>
<text top="285" left="604" width="5" height="7" font="26">1</text>
<text top="282" left="612" width="15" height="9" font="17">. . .</text>
<text top="282" left="651" width="7" height="9" font="17">Γ</text>
<text top="285" left="658" width="20" height="7" font="26">n−1</text>
<text top="282" left="679" width="14" height="9" font="17">; Ω</text>
<text top="282" left="707" width="9" height="9" font="17">E</text>
<text top="285" left="716" width="7" height="7" font="26">n</text>
<text top="282" left="726" width="14" height="9" font="17">: T</text>
<text top="285" left="740" width="7" height="7" font="26">n</text>
<text top="282" left="760" width="9" height="9" font="17">C</text>
<text top="285" left="769" width="7" height="7" font="26">n</text>
<text top="282" left="776" width="13" height="9" font="17">; Γ</text>
<text top="285" left="789" width="7" height="7" font="26">n</text>
<text top="294" left="535" width="7" height="9" font="17">Γ</text>
<text top="297" left="543" width="7" height="7" font="26">n</text>
<text top="294" left="550" width="14" height="9" font="17">; Ω</text>
<text top="294" left="578" width="25" height="10" font="17">id(E</text>
<text top="297" left="603" width="5" height="7" font="26">1</text>
<text top="294" left="609" width="37" height="9" font="17">, . . . , E</text>
<text top="297" left="646" width="7" height="7" font="26">n</text>
<text top="295" left="653" width="23" height="9" font="17">) : T</text>
<text top="294" left="690" width="9" height="9" font="17">C</text>
<text top="297" left="699" width="19" height="7" font="26">n+1</text>
<text top="294" left="719" width="13" height="9" font="17">; Γ</text>
<text top="297" left="732" width="19" height="7" font="26">n+1</text>
<text top="305" left="584" width="71" height="10" font="17">∃ i ∈ [1, n], T</text>
<text top="309" left="655" width="4" height="7" font="26">i</text>
<text top="305" left="663" width="24" height="10" font="17">∈ Ω.</text>
<text top="309" left="687" width="16" height="7" font="26">tifp</text>
<text top="322" left="596" width="78" height="9" font="17">include T in Ω.</text>
<text top="325" left="674" width="16" height="7" font="26">tifp</text>
<text top="364" left="536" width="215" height="12" font="4">FIGURE 6. Inference rules for Ω.</text>
<text top="413" left="516" width="41" height="9" font="17">(T-Var)</text>
<text top="424" left="543" width="44" height="9" font="17">Γ(id) : T</text>
<text top="436" left="547" width="37" height="10" font="17">¬tv(T )</text>
<text top="452" left="517" width="21" height="9" font="17">Γ; Ω</text>
<text top="452" left="553" width="28" height="9" font="17">id : T</text>
<text top="452" left="595" width="19" height="10" font="17">∅; Γ</text>
<text top="413" left="671" width="49" height="9" font="17">(T-BVar)</text>
<text top="424" left="698" width="47" height="9" font="17">Γ(id) : X</text>
<text top="436" left="699" width="45" height="9" font="17">Γ(X) : T</text>
<text top="452" left="673" width="21" height="9" font="17">Γ; Ω</text>
<text top="452" left="709" width="28" height="9" font="17">id : T</text>
<text top="452" left="751" width="19" height="10" font="17">∅; Γ</text>
<text top="480" left="488" width="49" height="9" font="17">(T-PVar)</text>
<text top="491" left="489" width="47" height="9" font="17">Γ(id) : X</text>
<text top="491" left="561" width="60" height="9" font="17">X ∈ f tv(Γ)</text>
<text top="503" left="520" width="37" height="9" font="17">id ∈ Ω.</text>
<text top="507" left="558" width="32" height="7" font="26">params</text>
<text top="515" left="514" width="82" height="10" font="17">¬lhsAssign(id)</text>
<text top="531" left="506" width="21" height="9" font="17">Γ; Ω</text>
<text top="531" left="541" width="30" height="9" font="17">id : X</text>
<text top="530" left="586" width="19" height="10" font="17">∅; Γ</text>
<text top="480" left="664" width="49" height="9" font="17">(T-AVar)</text>
<text top="491" left="666" width="47" height="9" font="17">Γ(id) : X</text>
<text top="491" left="738" width="60" height="9" font="17">X ∈ f tv(Γ)</text>
<text top="503" left="697" width="21" height="9" font="17">id /</text>
<text top="503" left="711" width="24" height="10" font="17">∈ Ω.</text>
<text top="507" left="734" width="32" height="7" font="26">params</text>
<text top="515" left="695" width="74" height="9" font="17">lhsAssign(id)</text>
<text top="531" left="683" width="21" height="9" font="17">Γ; Ω</text>
<text top="531" left="718" width="30" height="9" font="17">id : X</text>
<text top="530" left="763" width="19" height="10" font="17">∅; Γ</text>
<text top="573" left="570" width="147" height="12" font="4">FIGURE 7. Variables.</text>
<text top="623" left="464" width="193" height="13" font="2">type is not a type variable.</text>
<text top="623" left="674" width="149" height="13" font="2">When the type of an</text>
<text top="641" left="464" width="359" height="13" font="2">identiﬁer is a type variable and it is bound to another</text>
<text top="659" left="464" width="359" height="16" font="2">type, T-BVar types the identiﬁer to the type bound</text>
<text top="677" left="464" width="147" height="13" font="2">to the type variable.</text>
<text top="677" left="631" width="192" height="13" font="2">This happens, for instance,</text>
<text top="695" left="464" width="359" height="13" font="2">in line 17 of Figure 4, where the type variable of</text>
<text top="714" left="464" width="63" height="12" font="2">list1 (X</text>
<text top="718" left="528" width="12" height="9" font="17">18</text>
<text top="712" left="541" width="283" height="13" font="2">) was previously bound to the object type</text>
<text top="730" left="464" width="53" height="14" font="2">{data:X</text>
<text top="736" left="517" width="12" height="9" font="17">20</text>
<text top="730" left="530" width="51" height="13" font="2">,next:X</text>
<text top="736" left="581" width="12" height="9" font="17">21</text>
<text top="730" left="593" width="77" height="14" font="2">} in line 16.</text>
<text top="748" left="479" width="344" height="16" font="2">Both T-PVar and T-AVar type-check identiﬁers</text>
<text top="766" left="464" width="359" height="13" font="2">when their types are free type variables (not bound to</text>
<text top="784" left="464" width="359" height="13" font="2">any other type). In the ﬁrst case, the variable can be</text>
<text top="802" left="464" width="359" height="13" font="2">used when it is a parameter (thus, it has a value) and</text>
<text top="820" left="464" width="292" height="13" font="2">it is not the left-hand side of an assignment</text>
<text top="818" left="757" width="6" height="9" font="17">2</text>
<text top="820" left="763" width="60" height="13" font="2">. On the</text>
<text top="838" left="464" width="359" height="16" font="2">other hand, T-AVar allows a free type variable that</text>
<text top="856" left="464" width="359" height="13" font="2">is not a parameter to be used as an expression as long</text>
<text top="874" left="464" width="359" height="13" font="2">as it is the left-hand side of an assignment (because</text>
<text top="892" left="464" width="359" height="13" font="2">the type variable will be then bound to a type in the</text>
<text top="910" left="464" width="156" height="13" font="2">subsequent expression).</text>
<text top="910" left="634" width="189" height="13" font="2">For example, the utilization</text>
<text top="928" left="464" width="359" height="14" font="2">of the data parameter in line 2 of Figure 4 is allowed</text>
<text top="946" left="464" width="336" height="13" font="2">because, despite its type is a free type variable (X</text>
<text top="951" left="800" width="12" height="9" font="17">10</text>
<text top="946" left="813" width="10" height="13" font="2">),</text>
<text top="964" left="464" width="127" height="13" font="2">it is contained in Ω.</text>
<text top="969" left="592" width="38" height="9" font="17">params</text>
<text top="964" left="630" width="193" height="14" font="2">. list1 can be used in line 16</text>
<text top="982" left="464" width="193" height="13" font="2">because, although its type (X</text>
<text top="987" left="657" width="12" height="9" font="17">18</text>
<text top="982" left="670" width="83" height="13" font="2">) is not in Ω.</text>
<text top="987" left="753" width="18" height="9" font="17">tifp</text>
<text top="982" left="772" width="51" height="13" font="2">, it is in</text>
<text top="1000" left="464" width="233" height="13" font="2">the left-hand side of an assignment.</text>
<text top="1018" left="479" width="344" height="16" font="2">Figure 8 shows the T-Arith inference rule of</text>
<text top="1036" left="464" width="359" height="13" font="2">arithmetic expressions (for the sake of brevity, relational</text>
<text top="1053" left="464" width="276" height="13" font="2">and logical expressions are not shown).</text>
<text top="1053" left="760" width="63" height="13" font="2">Operands</text>
<text top="1086" left="481" width="5" height="8" font="18">2</text>
<text top="1088" left="487" width="336" height="11" font="19">The StaDyn core does not allow assigning values to function</text>
<text top="1103" left="464" width="311" height="11" font="19">parameters in order to make type-checking easier.</text>
<text top="1103" left="798" width="25" height="11" font="19">This</text>
<text top="1117" left="464" width="359" height="11" font="19">feature could be obtained by a syntactical transformation where</text>
<text top="1131" left="464" width="359" height="11" font="19">parameters are assigned to local variables, because parameters</text>
<text top="1145" left="464" width="359" height="11" font="19">in C# are passed by value—by default, when no ref and out</text>
<text top="1159" left="464" width="160" height="11" font="19">keywords are explicitly used.</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="27" size="7" family="Courier" color="#7f7f7f"/>
	<fontspec id="28" size="7" family="Courier" color="#0000ff"/>
	<fontspec id="29" size="7" family="Courier" color="#000000"/>
	<fontspec id="30" size="7" family="Symbol" color="#7f7f7f"/>
	<fontspec id="31" size="4" family="Courier" color="#7f7f7f"/>
	<fontspec id="32" size="7" family="Courier" color="#007f00"/>
	<fontspec id="33" size="7" family="Times" color="#7f7f7f"/>
<text top="93" left="70" width="7" height="13" font="2">8</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="146" left="104" width="52" height="9" font="17">(T-Arith)</text>
<text top="159" left="119" width="21" height="9" font="17">Γ; Ω</text>
<text top="159" left="155" width="9" height="9" font="17">E</text>
<text top="163" left="163" width="5" height="7" font="26">1</text>
<text top="159" left="173" width="14" height="9" font="17">: T</text>
<text top="163" left="187" width="5" height="7" font="26">1</text>
<text top="159" left="205" width="9" height="9" font="17">C</text>
<text top="163" left="214" width="5" height="7" font="26">1</text>
<text top="159" left="220" width="13" height="9" font="17">; Γ</text>
<text top="159" left="260" width="7" height="9" font="17">Γ</text>
<text top="159" left="286" width="7" height="9" font="17">T</text>
<text top="163" left="293" width="5" height="7" font="26">1</text>
<text top="158" left="302" width="29" height="10" font="17">≤ int</text>
<text top="159" left="345" width="9" height="9" font="17">C</text>
<text top="163" left="353" width="5" height="7" font="26">2</text>
<text top="159" left="359" width="13" height="9" font="17">; Γ</text>
<text top="172" left="106" width="29" height="9" font="17">Γ ; Ω</text>
<text top="172" left="148" width="9" height="9" font="17">E</text>
<text top="176" left="157" width="5" height="7" font="26">2</text>
<text top="172" left="167" width="14" height="9" font="17">: T</text>
<text top="176" left="180" width="5" height="7" font="26">2</text>
<text top="172" left="199" width="9" height="9" font="17">C</text>
<text top="176" left="208" width="5" height="7" font="26">3</text>
<text top="172" left="214" width="13" height="9" font="17">; Γ</text>
<text top="172" left="261" width="7" height="9" font="17">Γ</text>
<text top="172" left="293" width="7" height="9" font="17">T</text>
<text top="176" left="300" width="5" height="7" font="26">2</text>
<text top="171" left="309" width="29" height="10" font="17">≤ int</text>
<text top="172" left="352" width="9" height="9" font="17">C</text>
<text top="176" left="360" width="5" height="7" font="26">4</text>
<text top="172" left="366" width="13" height="9" font="17">; Γ</text>
<text top="189" left="127" width="21" height="9" font="17">Γ; Ω</text>
<text top="189" left="163" width="9" height="9" font="17">E</text>
<text top="192" left="171" width="5" height="7" font="26">1</text>
<text top="188" left="180" width="21" height="10" font="17">⊕ E</text>
<text top="192" left="201" width="5" height="7" font="26">2</text>
<text top="189" left="210" width="23" height="10" font="17">: int</text>
<text top="189" left="246" width="9" height="9" font="17">C</text>
<text top="192" left="255" width="5" height="7" font="26">1</text>
<text top="188" left="264" width="19" height="10" font="17">∪ C</text>
<text top="192" left="283" width="5" height="7" font="26">2</text>
<text top="188" left="291" width="19" height="10" font="17">∪ C</text>
<text top="192" left="311" width="5" height="7" font="26">3</text>
<text top="188" left="319" width="19" height="10" font="17">∪ C</text>
<text top="192" left="339" width="5" height="7" font="26">4</text>
<text top="189" left="345" width="13" height="9" font="17">; Γ</text>
<text top="216" left="70" width="67" height="9" font="17">(T-NObject)</text>
<text top="228" left="116" width="21" height="9" font="17">Γ; Ω</text>
<text top="228" left="152" width="9" height="9" font="17">E</text>
<text top="231" left="161" width="5" height="7" font="26">1</text>
<text top="228" left="170" width="14" height="9" font="17">: T</text>
<text top="231" left="184" width="5" height="7" font="26">1</text>
<text top="228" left="203" width="9" height="9" font="17">C</text>
<text top="231" left="211" width="5" height="7" font="26">1</text>
<text top="228" left="217" width="13" height="9" font="17">; Γ</text>
<text top="231" left="230" width="5" height="7" font="26">1</text>
<text top="228" left="236" width="21" height="9" font="17">... Γ</text>
<text top="231" left="257" width="20" height="7" font="26">n−1</text>
<text top="228" left="278" width="14" height="9" font="17">; Ω</text>
<text top="228" left="306" width="9" height="9" font="17">E</text>
<text top="231" left="315" width="7" height="7" font="26">n</text>
<text top="228" left="325" width="14" height="9" font="17">: T</text>
<text top="231" left="339" width="7" height="7" font="26">n</text>
<text top="228" left="359" width="9" height="9" font="17">C</text>
<text top="231" left="368" width="7" height="7" font="26">n</text>
<text top="228" left="375" width="13" height="9" font="17">; Γ</text>
<text top="231" left="388" width="7" height="7" font="26">n</text>
<text top="243" left="72" width="21" height="9" font="17">Γ; Ω</text>
<text top="244" left="107" width="37" height="9" font="17">new {id</text>
<text top="247" left="144" width="5" height="7" font="26">1</text>
<text top="243" left="150" width="18" height="9" font="17">=E</text>
<text top="247" left="168" width="5" height="7" font="26">1</text>
<text top="243" left="173" width="32" height="9" font="17">, ..., id</text>
<text top="247" left="206" width="7" height="7" font="26">n</text>
<text top="243" left="213" width="18" height="9" font="17">=E</text>
<text top="247" left="231" width="7" height="7" font="26">n</text>
<text top="243" left="238" width="26" height="10" font="17">}:{id</text>
<text top="247" left="264" width="5" height="7" font="26">1</text>
<text top="243" left="270" width="10" height="9" font="17">:T</text>
<text top="247" left="281" width="5" height="7" font="26">1</text>
<text top="243" left="287" width="32" height="9" font="17">, ..., id</text>
<text top="247" left="319" width="7" height="7" font="26">n</text>
<text top="243" left="326" width="10" height="9" font="17">:T</text>
<text top="247" left="337" width="7" height="7" font="26">n</text>
<text top="243" left="344" width="6" height="10" font="17">}</text>
<text top="243" left="363" width="9" height="9" font="17">C</text>
<text top="247" left="372" width="5" height="7" font="26">1</text>
<text top="243" left="377" width="35" height="10" font="17">∪...∪C</text>
<text top="247" left="413" width="7" height="7" font="26">n</text>
<text top="243" left="420" width="13" height="9" font="17">; Γ</text>
<text top="247" left="433" width="7" height="7" font="26">n</text>
<text top="271" left="70" width="63" height="9" font="17">(T-NArray)</text>
<text top="284" left="127" width="21" height="9" font="17">Γ; Ω</text>
<text top="284" left="163" width="27" height="9" font="17">E : T</text>
<text top="287" left="189" width="5" height="7" font="26">e</text>
<text top="284" left="208" width="9" height="9" font="17">C</text>
<text top="287" left="216" width="5" height="7" font="26">1</text>
<text top="284" left="222" width="13" height="9" font="17">; Γ</text>
<text top="284" left="263" width="7" height="9" font="17">Γ</text>
<text top="284" left="289" width="7" height="9" font="17">T</text>
<text top="287" left="296" width="5" height="7" font="26">e</text>
<text top="283" left="305" width="29" height="10" font="17">≤ int</text>
<text top="284" left="347" width="9" height="9" font="17">C</text>
<text top="287" left="356" width="5" height="7" font="26">2</text>
<text top="284" left="362" width="13" height="9" font="17">; Γ</text>
<text top="300" left="72" width="21" height="9" font="17">Γ; Ω</text>
<text top="301" left="107" width="55" height="9" font="17">new T [E][ ]</text>
<text top="304" left="162" width="5" height="7" font="26">1</text>
<text top="300" left="168" width="21" height="9" font="17">...[ ]</text>
<text top="304" left="189" width="7" height="7" font="26">n</text>
<text top="300" left="200" width="40" height="9" font="17">: Array</text>
<text top="304" left="240" width="5" height="7" font="26">1</text>
<text top="300" left="246" width="49" height="9" font="17">(...Array</text>
<text top="304" left="294" width="7" height="7" font="26">n</text>
<text top="300" left="301" width="66" height="9" font="17">(Array(T )))</text>
<text top="300" left="380" width="9" height="9" font="17">C</text>
<text top="304" left="389" width="5" height="7" font="26">1</text>
<text top="300" left="394" width="17" height="10" font="17">∪C</text>
<text top="304" left="411" width="5" height="7" font="26">2</text>
<text top="300" left="417" width="13" height="9" font="17">; Γ</text>
<text top="328" left="82" width="50" height="9" font="17">(T-Field)</text>
<text top="340" left="84" width="21" height="9" font="17">Γ; Ω</text>
<text top="340" left="119" width="27" height="9" font="17">E : T</text>
<text top="340" left="161" width="9" height="9" font="17">C</text>
<text top="344" left="169" width="5" height="7" font="26">1</text>
<text top="340" left="175" width="13" height="9" font="17">; Γ</text>
<text top="340" left="216" width="39" height="9" font="17">X fresh</text>
<text top="340" left="279" width="7" height="9" font="17">Γ</text>
<text top="340" left="304" width="63" height="9" font="17">T ≤ [id : X]</text>
<text top="340" left="380" width="9" height="9" font="17">C</text>
<text top="344" left="389" width="5" height="7" font="26">2</text>
<text top="340" left="394" width="13" height="9" font="17">; Γ</text>
<text top="353" left="129" width="102" height="9" font="17">X ∈ f tv(Γ ) ∧ X /</text>
<text top="353" left="224" width="24" height="10" font="17">∈ Ω.</text>
<text top="357" left="247" width="16" height="7" font="26">tifp</text>
<text top="353" left="267" width="103" height="10" font="17">⇒ lhsAssign(E.id)</text>
<text top="370" left="172" width="21" height="9" font="17">Γ; Ω</text>
<text top="370" left="207" width="43" height="9" font="17">E.id : X</text>
<text top="370" left="264" width="9" height="9" font="17">C</text>
<text top="373" left="273" width="5" height="7" font="26">1</text>
<text top="369" left="281" width="19" height="10" font="17">∪ C</text>
<text top="373" left="301" width="5" height="7" font="26">2</text>
<text top="370" left="307" width="13" height="9" font="17">; Γ</text>
<text top="397" left="104" width="55" height="9" font="17">(T-Array)</text>
<text top="410" left="190" width="21" height="9" font="17">Γ; Ω</text>
<text top="410" left="226" width="9" height="9" font="17">E</text>
<text top="414" left="235" width="5" height="7" font="26">1</text>
<text top="410" left="244" width="14" height="9" font="17">: T</text>
<text top="414" left="258" width="5" height="7" font="26">1</text>
<text top="410" left="277" width="9" height="9" font="17">C</text>
<text top="414" left="285" width="5" height="7" font="26">1</text>
<text top="410" left="291" width="13" height="9" font="17">; Γ</text>
<text top="423" left="140" width="39" height="9" font="17">X fresh</text>
<text top="423" left="203" width="7" height="9" font="17">Γ</text>
<text top="423" left="228" width="7" height="9" font="17">T</text>
<text top="427" left="235" width="5" height="7" font="26">1</text>
<text top="422" left="245" width="66" height="10" font="17">≤ Array(X)</text>
<text top="423" left="324" width="9" height="9" font="17">C</text>
<text top="427" left="333" width="5" height="7" font="26">2</text>
<text top="423" left="338" width="13" height="9" font="17">; Γ</text>
<text top="436" left="106" width="29" height="9" font="17">Γ ; Ω</text>
<text top="436" left="148" width="9" height="9" font="17">E</text>
<text top="440" left="157" width="5" height="7" font="26">2</text>
<text top="436" left="167" width="14" height="9" font="17">: T</text>
<text top="440" left="180" width="5" height="7" font="26">2</text>
<text top="436" left="199" width="9" height="9" font="17">C</text>
<text top="440" left="208" width="5" height="7" font="26">3</text>
<text top="436" left="214" width="13" height="9" font="17">; Γ</text>
<text top="436" left="261" width="7" height="9" font="17">Γ</text>
<text top="436" left="293" width="7" height="9" font="17">T</text>
<text top="440" left="300" width="5" height="7" font="26">2</text>
<text top="435" left="309" width="29" height="10" font="17">≤ int</text>
<text top="436" left="352" width="9" height="9" font="17">C</text>
<text top="440" left="360" width="5" height="7" font="26">4</text>
<text top="436" left="366" width="13" height="9" font="17">; Γ</text>
<text top="449" left="119" width="55" height="9" font="17">X ∈ f tv(Γ</text>
<text top="449" left="188" width="40" height="9" font="17">) ∧ X /</text>
<text top="448" left="221" width="24" height="10" font="17">∈ Ω.</text>
<text top="453" left="244" width="16" height="7" font="26">tifp</text>
<text top="448" left="264" width="83" height="10" font="17">⇒ lhsAssign(E</text>
<text top="453" left="347" width="5" height="7" font="26">1</text>
<text top="449" left="353" width="12" height="9" font="17">[E</text>
<text top="453" left="365" width="5" height="7" font="26">2</text>
<text top="449" left="371" width="8" height="9" font="17">])</text>
<text top="466" left="134" width="21" height="9" font="17">Γ; Ω</text>
<text top="466" left="170" width="9" height="9" font="17">E</text>
<text top="469" left="178" width="5" height="7" font="26">1</text>
<text top="466" left="184" width="12" height="9" font="17">[E</text>
<text top="469" left="196" width="5" height="7" font="26">2</text>
<text top="466" left="202" width="23" height="9" font="17">] : X</text>
<text top="466" left="239" width="9" height="9" font="17">C</text>
<text top="469" left="248" width="5" height="7" font="26">1</text>
<text top="465" left="257" width="19" height="10" font="17">∪ C</text>
<text top="469" left="276" width="5" height="7" font="26">2</text>
<text top="465" left="284" width="19" height="10" font="17">∪ C</text>
<text top="469" left="304" width="5" height="7" font="26">3</text>
<text top="465" left="312" width="19" height="10" font="17">∪ C</text>
<text top="469" left="332" width="5" height="7" font="26">4</text>
<text top="466" left="338" width="13" height="9" font="17">; Γ</text>
<text top="508" left="151" width="195" height="12" font="4">FIGURE 8. Basic expressions.</text>
<text top="565" left="70" width="359" height="13" font="2">of arithmetic and relational expressions must be</text>
<text top="583" left="70" width="359" height="14" font="2">subtypes of int; logical expressions should promote</text>
<text top="601" left="70" width="60" height="14" font="2">to bool.</text>
<text top="601" left="155" width="274" height="13" font="2">Output environments are used as the</text>
<text top="619" left="70" width="359" height="13" font="2">input environments of the subsequent expressions, the</text>
<text top="636" left="70" width="359" height="13" font="2">one returned by the whole expression being the last</text>
<text top="654" left="70" width="85" height="13" font="2">environment.</text>
<text top="654" left="171" width="257" height="13" font="2">The constraint set generated by each</text>
<text top="672" left="70" width="359" height="13" font="2">expression is the union of all the constraints produced</text>
<text top="690" left="70" width="255" height="13" font="2">by each of the four premise judgments.</text>
<text top="709" left="85" width="344" height="16" font="2">The new object expression (T-NObject) infers an</text>
<text top="727" left="70" width="359" height="13" font="2">object type comprising the ﬁeld labels and types of</text>
<text top="744" left="70" width="359" height="13" font="2">the corresponding expressions. Line 2 in Figure 4 is</text>
<text top="762" left="70" width="359" height="13" font="2">an example of this inference rule, where the type of</text>
<text top="780" left="70" width="174" height="13" font="2">the expression is {data:X</text>
<text top="786" left="244" width="12" height="9" font="17">10</text>
<text top="780" left="256" width="53" height="13" font="2">, next:X</text>
<text top="786" left="309" width="12" height="9" font="17">11</text>
<text top="779" left="322" width="12" height="14" font="2">}.</text>
<text top="780" left="348" width="81" height="13" font="2">In a similar</text>
<text top="798" left="70" width="359" height="16" font="2">way, the T-NArray rule types the array construction</text>
<text top="816" left="70" width="359" height="13" font="2">expressions. The expression that speciﬁes the array size</text>
<text top="834" left="70" width="359" height="13" font="2">must promote to integer. Only one-dimensional arrays</text>
<text top="852" left="70" width="359" height="13" font="2">can be constructed at a time, and the type returned</text>
<text top="870" left="70" width="359" height="13" font="2">is an array of the same dimensions as pairs of square</text>
<text top="888" left="70" width="359" height="14" font="2">brackets. The type of the new expression in line 11,</text>
<text top="906" left="70" width="143" height="13" font="2">Figure 9, is Array(X</text>
<text top="911" left="213" width="12" height="9" font="17">34</text>
<text top="906" left="226" width="29" height="13" font="2">), X</text>
<text top="911" left="255" width="12" height="9" font="17">34</text>
<text top="906" left="274" width="154" height="13" font="2">being a new fresh type</text>
<text top="924" left="70" width="55" height="13" font="2">variable.</text>
<text top="942" left="85" width="344" height="16" font="2">When accessing object ﬁelds (T-Field), the object</text>
<text top="960" left="70" width="359" height="13" font="2">should promote to the member type [id : X], X being a</text>
<text top="978" left="70" width="359" height="13" font="2">new fresh type variable. A member type is an internal</text>
<text top="996" left="70" width="359" height="13" font="2">type that denotes the set of ﬁelds an object should</text>
<text top="1014" left="70" width="32" height="13" font="2">hold.</text>
<text top="1014" left="120" width="309" height="13" font="2">Therefore, an object promotes to a member</text>
<text top="1032" left="70" width="359" height="13" font="2">type following the same rules as structural subtyping</text>
<text top="1050" left="70" width="359" height="16" font="2">for objects described in [33] (rule S-OMember in</text>
<text top="1068" left="70" width="359" height="13" font="2">Figure 11). Moreover, if the object ﬁeld is a free type</text>
<text top="1086" left="70" width="359" height="13" font="2">variable not inferred from the parameters, i.e., not in</text>
<text top="1103" left="70" width="15" height="13" font="2">Ω.</text>
<text top="1109" left="85" width="18" height="9" font="17">tifp</text>
<text top="1103" left="104" width="325" height="13" font="2">, it must be a direct left child of an assignment</text>
<text top="1121" left="70" width="71" height="13" font="2">expression.</text>
<text top="1121" left="156" width="273" height="13" font="2">Line 42 in Figure 2 is an example of a</text>
<text top="1139" left="70" width="87" height="13" font="2">correct term.</text>
<text top="1139" left="171" width="257" height="14" font="2">Although the dimensions ﬁeld of the</text>
<text top="1159" left="70" width="359" height="12" font="2">point object is a free type variable and it is not the</text>
<text top="129" left="465" width="23" height="8" font="27">01: </text>
<text top="129" left="491" width="23" height="8" font="28">void</text>
<text top="129" left="514" width="46" height="8" font="29"> vector(</text>
<text top="129" left="561" width="17" height="8" font="28">var</text>
<text top="129" left="578" width="52" height="8" font="29">[] w) {  </text>
<text top="127" left="756" width="6" height="13" font="30">Γ</text>
<text top="131" left="762" width="64" height="8" font="27">(w):Array(X</text>
<text top="135" left="826" width="8" height="5" font="31">30</text>
<text top="131" left="834" width="12" height="8" font="27">) </text>
<text top="142" left="465" width="23" height="8" font="27">02: </text>
<text top="142" left="491" width="12" height="8" font="29">  </text>
<text top="142" left="503" width="17" height="8" font="28">var</text>
<text top="142" left="520" width="41" height="8" font="29">[] v;  </text>
<text top="140" left="756" width="6" height="13" font="30">Γ</text>
<text top="144" left="762" width="64" height="8" font="27">(v):Array(X</text>
<text top="147" left="826" width="8" height="5" font="31">31</text>
<text top="144" left="834" width="12" height="8" font="27">) </text>
<text top="154" left="465" width="23" height="8" font="27">03: </text>
<text top="154" left="491" width="12" height="8" font="29">  </text>
<text top="154" left="503" width="17" height="8" font="28">int</text>
<text top="154" left="520" width="23" height="8" font="29"> a; </text>
<text top="154" left="839" width="6" height="8" font="27"> </text>
<text top="165" left="465" width="23" height="8" font="27">04: </text>
<text top="165" left="491" width="35" height="8" font="29">  v = </text>
<text top="165" left="526" width="41" height="8" font="28">new var</text>
<text top="165" left="566" width="29" height="8" font="29">[2]; </text>
<text top="164" left="789" width="6" height="13" font="30">Γ</text>
<text top="167" left="795" width="12" height="8" font="27">(X</text>
<text top="171" left="807" width="8" height="5" font="31">31</text>
<text top="167" left="814" width="17" height="8" font="27">):X</text>
<text top="171" left="832" width="8" height="5" font="31">32</text>
<text top="167" left="839" width="6" height="8" font="27"> </text>
<text top="178" left="465" width="23" height="8" font="27">05: </text>
<text top="178" left="491" width="70" height="8" font="29">  a = v[3]; </text>
<text top="178" left="561" width="104" height="8" font="32">// Compiler error </text>
<text top="178" left="839" width="6" height="8" font="27"> </text>
<text top="189" left="465" width="23" height="8" font="27">06: </text>
<text top="189" left="491" width="110" height="8" font="29">  v[0] = w[0] = 0; </text>
<text top="187" left="700" width="6" height="13" font="30">Γ</text>
<text top="191" left="706" width="12" height="8" font="27">(X</text>
<text top="194" left="718" width="8" height="5" font="31">32</text>
<text top="191" left="726" width="41" height="8" font="27">):int, </text>
<text top="187" left="766" width="6" height="13" font="30">Γ</text>
<text top="191" left="772" width="12" height="8" font="27">(X</text>
<text top="194" left="783" width="8" height="5" font="31">30</text>
<text top="191" left="791" width="17" height="8" font="27">):X</text>
<text top="194" left="809" width="8" height="5" font="31">30</text>
<text top="187" left="816" width="6" height="13" font="30">∨</text>
<text top="191" left="822" width="23" height="8" font="27">int </text>
<text top="202" left="465" width="23" height="8" font="27">07: </text>
<text top="202" left="491" width="93" height="8" font="29">  v[1] = w[1] = </text>
<text top="202" left="584" width="23" height="8" font="28">true</text>
<text top="202" left="607" width="12" height="8" font="29">; </text>
<text top="200" left="643" width="6" height="13" font="30">Γ</text>
<text top="203" left="648" width="12" height="8" font="27">(X</text>
<text top="207" left="660" width="8" height="5" font="31">32</text>
<text top="203" left="668" width="29" height="8" font="27">):int</text>
<text top="200" left="697" width="6" height="13" font="30">∨</text>
<text top="203" left="702" width="35" height="8" font="27">bool, </text>
<text top="200" left="737" width="6" height="13" font="30">Γ</text>
<text top="203" left="743" width="12" height="8" font="27">(X</text>
<text top="207" left="755" width="8" height="5" font="31">30</text>
<text top="203" left="762" width="17" height="8" font="27">):X</text>
<text top="207" left="780" width="8" height="5" font="31">30</text>
<text top="200" left="787" width="6" height="13" font="30">∨</text>
<text top="203" left="793" width="17" height="8" font="27">int</text>
<text top="200" left="811" width="6" height="13" font="30">∨</text>
<text top="203" left="816" width="29" height="8" font="27">bool </text>
<text top="214" left="465" width="23" height="8" font="27">08: </text>
<text top="214" left="491" width="17" height="8" font="29">}  </text>
<text top="214" left="839" width="6" height="8" font="27"> </text>
<text top="225" left="465" width="23" height="8" font="27">09: </text>
<text top="225" left="491" width="23" height="8" font="28">void</text>
<text top="225" left="514" width="58" height="8" font="29"> main() { </text>
<text top="225" left="839" width="6" height="8" font="27"> </text>
<text top="236" left="465" width="23" height="8" font="27">10: </text>
<text top="236" left="491" width="12" height="8" font="29">  </text>
<text top="236" left="503" width="17" height="8" font="28">var</text>
<text top="236" left="520" width="41" height="8" font="29">[] ve; </text>
<text top="234" left="751" width="6" height="13" font="30">Γ</text>
<text top="238" left="756" width="70" height="8" font="27">(ve):Array(X</text>
<text top="241" left="826" width="8" height="5" font="31">33</text>
<text top="238" left="834" width="12" height="8" font="27">) </text>
<text top="249" left="465" width="23" height="8" font="27">11: </text>
<text top="249" left="491" width="41" height="8" font="29">  ve = </text>
<text top="249" left="532" width="41" height="8" font="28">new var</text>
<text top="249" left="572" width="29" height="8" font="29">[3]; </text>
<text top="247" left="789" width="6" height="13" font="30">Γ</text>
<text top="250" left="795" width="12" height="8" font="27">(X</text>
<text top="254" left="807" width="8" height="5" font="31">33</text>
<text top="250" left="814" width="17" height="8" font="27">):X</text>
<text top="254" left="832" width="8" height="5" font="31">34</text>
<text top="250" left="839" width="2" height="9" font="33"> </text>
<text top="261" left="465" width="23" height="8" font="27">12: </text>
<text top="261" left="491" width="58" height="8" font="29">  ve[2] = </text>
<text top="261" left="549" width="17" height="8" font="28">new</text>
<text top="261" left="566" width="116" height="8" font="29"> { attribute = 3 }; </text>
<text top="259" left="716" width="6" height="13" font="30">Γ</text>
<text top="263" left="722" width="12" height="8" font="27">(X</text>
<text top="267" left="733" width="8" height="5" font="31">34</text>
<text top="263" left="741" width="104" height="8" font="27">):{attribute:int} </text>
<text top="274" left="465" width="23" height="8" font="27">13: </text>
<text top="274" left="491" width="81" height="8" font="29">  vector(ve); </text>
<text top="272" left="664" width="6" height="13" font="30">Γ</text>
<text top="276" left="670" width="12" height="8" font="27">(X</text>
<text top="279" left="681" width="8" height="5" font="31">34</text>
<text top="276" left="689" width="98" height="8" font="27">):{attribute:int}</text>
<text top="272" left="787" width="6" height="13" font="30">∨</text>
<text top="276" left="793" width="17" height="8" font="27">int</text>
<text top="272" left="811" width="6" height="13" font="30">∨</text>
<text top="276" left="816" width="29" height="8" font="27">bool </text>
<text top="287" left="465" width="23" height="8" font="27">14: </text>
<text top="287" left="491" width="12" height="8" font="29">} </text>
<text top="287" left="839" width="6" height="8" font="29"> </text>
<text top="318" left="531" width="225" height="12" font="4">FIGURE 9. Example use of arrays.</text>
<text top="366" left="464" width="314" height="13" font="2">left-hand side of an assignment, its type is in Ω.</text>
<text top="371" left="779" width="18" height="9" font="17">tifp</text>
<text top="366" left="798" width="4" height="13" font="2">.</text>
<text top="387" left="479" width="344" height="13" font="2">T-Array requires the ﬁrst expression to be a</text>
<text top="402" left="464" width="359" height="13" font="2">subtype of an array, and the index to be an integer.</text>
<text top="420" left="464" width="359" height="13" font="2">As with objects, if the calculated type is a free</text>
<text top="438" left="464" width="359" height="13" font="2">type variable, it should be the left-hand side of an</text>
<text top="456" left="464" width="76" height="13" font="2">assignment.</text>
<text top="456" left="557" width="266" height="13" font="2">This predicate generates a compilation</text>
<text top="474" left="464" width="359" height="13" font="2">error in line 5 of Figure 9. The type of the elements</text>
<text top="492" left="464" width="261" height="14" font="2">of the v array is the free type variable X</text>
<text top="497" left="725" width="12" height="9" font="17">32</text>
<text top="492" left="738" width="85" height="13" font="2">, not inferred</text>
<text top="510" left="464" width="359" height="14" font="2">from the parameters (v is a local variable), producing</text>
<text top="528" left="464" width="359" height="13" font="2">a compilation error because no value has been assigned</text>
<text top="545" left="464" width="32" height="13" font="2">to it.</text>
<text top="583" left="464" width="37" height="13" font="2">3.2.4.</text>
<text top="583" left="516" width="63" height="13" font="2">Subtyping</text>
<text top="601" left="464" width="220" height="13" font="2">Judgments in subtyping rules (Γ</text>
<text top="601" left="707" width="9" height="13" font="2">T</text>
<text top="607" left="716" width="6" height="9" font="17">1</text>
<text top="601" left="730" width="27" height="14" font="2">≤ T</text>
<text top="607" left="757" width="6" height="9" font="17">2</text>
<text top="601" left="785" width="38" height="13" font="2">C; Γ )</text>
<text top="619" left="464" width="359" height="13" font="2">require an input environment (Γ) and generate a set of</text>
<text top="637" left="464" width="359" height="13" font="2">constraints (C) and an output environment (Γ ). The</text>
<text top="655" left="464" width="359" height="13" font="2">input environment is used to know the type variables</text>
<text top="673" left="464" width="359" height="16" font="2">that might be bound to other types. In eﬀect, the T-</text>
<text top="694" left="464" width="359" height="13" font="2">TVBS rule in Figure 10 types any expression to the</text>
<text top="709" left="464" width="342" height="13" font="2">type which is bound to the expression type variable.</text>
<text top="727" left="479" width="344" height="13" font="2">The output environment is used to bind a type</text>
<text top="745" left="464" width="359" height="13" font="2">variable to a type when the type variable must be</text>
<text top="763" left="464" width="223" height="13" font="2">a subtype of a particular type.</text>
<text top="763" left="708" width="115" height="13" font="2">This is precisely</text>
<text top="781" left="464" width="359" height="16" font="2">the behavior of the S-FTVL and S-FTVR rules in</text>
<text top="799" left="464" width="359" height="13" font="2">Figure 11 that, in addition, generate a subtyping</text>
<text top="817" left="464" width="359" height="16" font="2">constraint. An example expression where the S-FTVL</text>
<text top="834" left="464" width="359" height="14" font="2">rule is applied is node.data in Figure 4, line 5. The</text>
<text top="855" left="464" width="316" height="13" font="2">T-Field rule requires the type of node (the X</text>
<text top="858" left="781" width="12" height="9" font="17">13</text>
<text top="852" left="799" width="24" height="13" font="2">free</text>
<text top="870" left="464" width="359" height="13" font="2">type variable), to be a subtype of the member type</text>
<text top="888" left="464" width="52" height="14" font="2">[data:X</text>
<text top="894" left="516" width="12" height="9" font="17">15</text>
<text top="888" left="529" width="31" height="13" font="2">]—X</text>
<text top="894" left="561" width="12" height="9" font="17">15</text>
<text top="888" left="577" width="246" height="13" font="2">being a new fresh type variable. Then,</text>
<text top="906" left="464" width="252" height="16" font="2">the S-FTVL rule generates a new X</text>
<text top="912" left="716" width="12" height="9" font="17">13</text>
<text top="905" left="736" width="71" height="15" font="2">≤ [data:X</text>
<text top="912" left="806" width="12" height="9" font="17">15</text>
<text top="906" left="819" width="4" height="13" font="2">]</text>
<text top="924" left="464" width="195" height="14" font="2">constraint and binds [data:X</text>
<text top="930" left="659" width="12" height="9" font="17">15</text>
<text top="924" left="672" width="42" height="13" font="2">] to X</text>
<text top="930" left="714" width="12" height="9" font="17">13</text>
<text top="924" left="733" width="90" height="13" font="2">in the output</text>
<text top="942" left="464" width="104" height="13" font="2">environment Γ .</text>
<text top="963" left="479" width="344" height="13" font="2">S-FTVR oﬀers the same functionality when a</text>
<text top="978" left="464" width="359" height="13" font="2">concrete type must promote to a free type variable.</text>
<text top="996" left="464" width="359" height="14" font="2">This rule is used in return statements inside functions</text>
<text top="1014" left="464" width="359" height="13" font="2">that return a type variable (e.g., line 2 in Figure 4).</text>
<text top="1032" left="464" width="359" height="13" font="2">When both type variables are not bound to any type,</text>
<text top="1050" left="464" width="359" height="16" font="2">only a subtyping constraint is produced (S-FTVs in</text>
<text top="1068" left="464" width="72" height="13" font="2">Figure 11).</text>
<text top="1086" left="479" width="344" height="16" font="2">The arrays (S-Array) and objects (S-Object) type</text>
<text top="1103" left="464" width="241" height="13" font="2">constructors are invariant. Array(T</text>
<text top="1109" left="705" width="6" height="9" font="17">1</text>
<text top="1103" left="712" width="111" height="13" font="2">) is a subtype of</text>
<text top="1121" left="464" width="56" height="13" font="2">Array(T</text>
<text top="1127" left="520" width="6" height="9" font="17">2</text>
<text top="1121" left="527" width="65" height="13" font="2">) when T</text>
<text top="1127" left="592" width="6" height="9" font="17">1</text>
<text top="1121" left="606" width="41" height="13" font="2">and T</text>
<text top="1127" left="647" width="6" height="9" font="17">2</text>
<text top="1121" left="662" width="98" height="13" font="2">are equivalent.</text>
<text top="1121" left="776" width="9" height="13" font="2">T</text>
<text top="1127" left="784" width="6" height="9" font="17">1</text>
<text top="1121" left="799" width="24" height="13" font="2">and</text>
<text top="1139" left="464" width="9" height="13" font="2">T</text>
<text top="1145" left="473" width="6" height="9" font="17">2</text>
<text top="1139" left="488" width="335" height="13" font="2">are equivalent under the subtype relation, when</text>
<text top="1157" left="464" width="9" height="13" font="2">T</text>
<text top="1163" left="473" width="6" height="9" font="17">1</text>
<text top="1156" left="485" width="25" height="14" font="2">≤ T</text>
<text top="1163" left="510" width="6" height="9" font="17">2</text>
<text top="1157" left="522" width="38" height="13" font="2">and T</text>
<text top="1163" left="560" width="6" height="9" font="17">2</text>
<text top="1156" left="571" width="25" height="14" font="2">≤ T</text>
<text top="1163" left="596" width="6" height="9" font="17">1</text>
<text top="1157" left="608" width="215" height="16" font="2">(E-Types). An object promotes</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1262" width="892">
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="816" width="7" height="13" font="2">9</text>
<text top="146" left="158" width="52" height="9" font="17">(T-TVBS)</text>
<text top="159" left="160" width="21" height="9" font="17">Γ; Ω</text>
<text top="159" left="195" width="29" height="9" font="17">E : X</text>
<text top="159" left="238" width="22" height="9" font="17">C; Γ</text>
<text top="159" left="288" width="49" height="9" font="17">Γ (X) : T</text>
<text top="176" left="198" width="21" height="9" font="17">Γ; Ω</text>
<text top="176" left="233" width="27" height="9" font="17">E : T</text>
<text top="176" left="274" width="22" height="9" font="17">C; Γ</text>
<text top="218" left="95" width="309" height="12" font="4">FIGURE 10. Type variable binding substitution.</text>
<text top="277" left="70" width="359" height="13" font="2">to another one when both have the same number of</text>
<text top="295" left="70" width="359" height="13" font="2">ﬁelds and equal ﬁeld labels, and the corresponding types</text>
<text top="313" left="70" width="180" height="16" font="2">are equivalent (S-Object).</text>
<text top="331" left="85" width="344" height="13" font="2">Member types were introduced for structural subtyp-</text>
<text top="349" left="70" width="359" height="13" font="2">ing of objects. An object type is a subtype of a member</text>
<text top="367" left="70" width="359" height="13" font="2">type when the former has all the members of the latter,</text>
<text top="385" left="70" width="359" height="13" font="2">and their corresponding types are structurally equiva-</text>
<text top="403" left="70" width="359" height="16" font="2">lent (S-OMember). This rule is necessary in the ful-</text>
<text top="421" left="70" width="359" height="13" font="2">ﬁllment of subtyping constraints of function invocation</text>
<text top="439" left="70" width="359" height="14" font="2">(Section 3.2.7). As an example, the setData function</text>
<text top="457" left="70" width="144" height="13" font="2">in Figure 4 has the X</text>
<text top="462" left="214" width="12" height="9" font="17">13</text>
<text top="456" left="231" width="76" height="14" font="2">≤ [data : X</text>
<text top="462" left="307" width="12" height="9" font="17">15</text>
<text top="457" left="319" width="109" height="13" font="2">] constraint (line</text>
<text top="475" left="70" width="359" height="13" font="2">6). When the function is called in line 19 passing the</text>
<text top="492" left="70" width="65" height="14" font="2">{data : X</text>
<text top="498" left="135" width="12" height="9" font="17">20</text>
<text top="493" left="147" width="65" height="13" font="2">, next : X</text>
<text top="498" left="212" width="12" height="9" font="17">21</text>
<text top="492" left="225" width="204" height="14" font="2">} object as the ﬁrst argument,</text>
<text top="511" left="70" width="359" height="16" font="2">the S-OMember subtyping rule conﬁrms that the ar-</text>
<text top="529" left="70" width="233" height="13" font="2">gument promotes to the parameter.</text>
<text top="547" left="85" width="344" height="13" font="2">Subtyping rules for union and intersection types are</text>
<text top="565" left="70" width="359" height="13" font="2">an enhancement of the ones deﬁned by other authors</text>
<text top="583" left="70" width="359" height="16" font="2">such as [25] and [34] (S-SUnionL, S-SUnionR, S-</text>
<text top="604" left="70" width="359" height="13" font="2">SInterR and S-SInterL), adding new dynamic typing</text>
<text top="619" left="70" width="359" height="16" font="2">rules (S-DUnionL and S-DInterR)—[35] details this</text>
<text top="637" left="70" width="359" height="13" font="2">new interpretation of union and intersection types. If</text>
<text top="655" left="70" width="359" height="13" font="2">the type variable bound to a union type has been</text>
<text top="673" left="70" width="359" height="13" font="2">declared as static, the set of operations that can be</text>
<text top="691" left="70" width="359" height="13" font="2">applied to that union type are those accepted by every</text>
<text top="708" left="70" width="359" height="16" font="2">type in the union type (S-SUnionL). However, if the</text>
<text top="726" left="70" width="359" height="13" font="2">reference is dynamic, type-checking is more permissive.</text>
<text top="744" left="70" width="359" height="13" font="2">In that case, it is possible to perform an operation</text>
<text top="762" left="70" width="359" height="13" font="2">when it is accepted by at least one of the types in</text>
<text top="780" left="70" width="359" height="16" font="2">the union type (S-DUnionL)—in the conclusion of</text>
<text top="798" left="70" width="83" height="13" font="2">the rule, ∪Γ</text>
<text top="803" left="153" width="4" height="9" font="17">i</text>
<text top="798" left="165" width="52" height="13" font="2">and ∪C</text>
<text top="803" left="217" width="4" height="9" font="17">i</text>
<text top="798" left="229" width="200" height="13" font="2">represent the union of all the</text>
<text top="816" left="70" width="9" height="13" font="2">Γ</text>
<text top="821" left="79" width="4" height="9" font="17">i</text>
<text top="816" left="93" width="43" height="13" font="2">and C</text>
<text top="821" left="136" width="4" height="9" font="17">i</text>
<text top="816" left="149" width="279" height="13" font="2">that fulﬁll the predicate in the premise.</text>
<text top="834" left="70" width="359" height="13" font="2">If the operation cannot be applied to any type, a</text>
<text top="852" left="70" width="359" height="13" font="2">type error will be generated even if the reference is</text>
<text top="870" left="70" width="359" height="13" font="2">dynamic. This behavior can be seen in lines 18 and 19</text>
<text top="888" left="70" width="359" height="14" font="2">of Figure 12. The type of both sta and din variables</text>
<text top="906" left="70" width="359" height="14" font="2">is int∨bool, but sta is static whereas din is dynamic.</text>
<text top="924" left="70" width="359" height="13" font="2">This diﬀerence prevents the arithmetic operation in line</text>
<text top="942" left="70" width="359" height="13" font="2">18 from compiling (the plus operator cannot be applied</text>
<text top="960" left="70" width="359" height="14" font="2">to a bool), while it is correct in line 19 (addition is</text>
<text top="977" left="70" width="135" height="13" font="2">deﬁned for integers).</text>
<text top="996" left="85" width="344" height="13" font="2">In parallel, a type promotes to a static intersection</text>
<text top="1014" left="70" width="359" height="13" font="2">type only if it is a subtype of all the types collected by</text>
<text top="1032" left="70" width="359" height="16" font="2">the intersection type (rule S-SInterR). Similarly, we</text>
<text top="1050" left="70" width="359" height="13" font="2">have deﬁned the dynamic behavior to be more lenient,</text>
<text top="1068" left="70" width="359" height="13" font="2">accepting the promotion when a type promotes to at</text>
<text top="1086" left="70" width="359" height="13" font="2">least one of the types in the intersection type (rule</text>
<text top="1106" left="70" width="359" height="13" font="2">S-DInterR). An example is the function call in line</text>
<text top="1121" left="70" width="359" height="14" font="2">71 of Figure 2: data of the list argument must be a</text>
<text top="1139" left="70" width="168" height="13" font="2">subtype of [dimensions:X</text>
<text top="1145" left="238" width="6" height="9" font="17">1</text>
<text top="1139" left="245" width="44" height="13" font="2">]∧[x:X</text>
<text top="1145" left="289" width="6" height="9" font="17">2</text>
<text top="1139" left="296" width="43" height="13" font="2">]∧[y:X</text>
<text top="1145" left="339" width="6" height="9" font="17">3</text>
<text top="1139" left="346" width="43" height="13" font="2">]∧[z:X</text>
<text top="1145" left="389" width="6" height="9" font="17">4</text>
<text top="1139" left="395" width="33" height="13" font="2">]; the</text>
<text top="1157" left="70" width="359" height="14" font="2">program is compiled only when the point parameter in</text>
<text top="146" left="509" width="46" height="9" font="17">(S-Bool)</text>
<text top="158" left="509" width="7" height="9" font="17">Γ</text>
<text top="159" left="531" width="61" height="9" font="17">bool ≤ bool</text>
<text top="157" left="604" width="19" height="10" font="17">∅; Γ</text>
<text top="146" left="675" width="36" height="9" font="17">(S-Int)</text>
<text top="158" left="675" width="7" height="9" font="17">Γ</text>
<text top="159" left="697" width="49" height="9" font="17">int ≤ int</text>
<text top="157" left="759" width="19" height="10" font="17">∅; Γ</text>
<text top="186" left="470" width="51" height="9" font="17">(S-FTVL)</text>
<text top="197" left="477" width="60" height="9" font="17">X ∈ f tv(Γ)</text>
<text top="197" left="561" width="19" height="9" font="17">T /</text>
<text top="196" left="573" width="46" height="10" font="17">∈ f tv(Γ)</text>
<text top="210" left="471" width="59" height="9" font="17">C = X ≤ T</text>
<text top="210" left="556" width="68" height="9" font="17">Γ = Γ, X : T</text>
<text top="227" left="500" width="7" height="9" font="17">Γ</text>
<text top="227" left="522" width="34" height="9" font="17">X ≤ T</text>
<text top="227" left="570" width="22" height="9" font="17">C; Γ</text>
<text top="186" left="660" width="52" height="9" font="17">(S-FTVR)</text>
<text top="197" left="668" width="60" height="9" font="17">X ∈ f tv(Γ)</text>
<text top="197" left="752" width="19" height="9" font="17">T /</text>
<text top="196" left="764" width="46" height="10" font="17">∈ f tv(Γ)</text>
<text top="210" left="662" width="60" height="9" font="17">C = T ≤ X</text>
<text top="210" left="746" width="68" height="9" font="17">Γ = Γ, X : T</text>
<text top="227" left="691" width="7" height="9" font="17">Γ</text>
<text top="227" left="712" width="35" height="9" font="17">T ≤ X</text>
<text top="227" left="761" width="22" height="9" font="17">C; Γ</text>
<text top="254" left="517" width="48" height="9" font="17">(S-FTVs)</text>
<text top="266" left="518" width="10" height="9" font="17">X</text>
<text top="269" left="528" width="5" height="7" font="26">1</text>
<text top="265" left="537" width="46" height="10" font="17">∈ f tv(Γ)</text>
<text top="266" left="607" width="10" height="9" font="17">X</text>
<text top="269" left="617" width="5" height="7" font="26">2</text>
<text top="265" left="626" width="46" height="10" font="17">∈ f tv(Γ)</text>
<text top="266" left="696" width="35" height="9" font="17">C = X</text>
<text top="269" left="731" width="5" height="7" font="26">1</text>
<text top="265" left="741" width="23" height="10" font="17">≤ X</text>
<text top="269" left="763" width="5" height="7" font="26">2</text>
<text top="282" left="592" width="7" height="9" font="17">Γ</text>
<text top="282" left="613" width="10" height="9" font="17">X</text>
<text top="285" left="623" width="5" height="7" font="26">1</text>
<text top="281" left="632" width="23" height="10" font="17">≤ X</text>
<text top="285" left="655" width="5" height="7" font="26">2</text>
<text top="282" left="674" width="22" height="9" font="17">C; Γ</text>
<text top="309" left="519" width="52" height="9" font="17">(E-Types)</text>
<text top="322" left="520" width="7" height="9" font="17">Γ</text>
<text top="322" left="542" width="7" height="9" font="17">T</text>
<text top="325" left="549" width="5" height="7" font="26">1</text>
<text top="321" left="558" width="20" height="10" font="17">≤ T</text>
<text top="325" left="578" width="5" height="7" font="26">2</text>
<text top="322" left="597" width="9" height="9" font="17">C</text>
<text top="325" left="605" width="5" height="7" font="26">1</text>
<text top="322" left="611" width="13" height="9" font="17">; Γ</text>
<text top="322" left="652" width="7" height="9" font="17">Γ</text>
<text top="322" left="678" width="7" height="9" font="17">T</text>
<text top="325" left="685" width="5" height="7" font="26">2</text>
<text top="321" left="694" width="20" height="10" font="17">≤ T</text>
<text top="325" left="714" width="5" height="7" font="26">1</text>
<text top="322" left="732" width="9" height="9" font="17">C</text>
<text top="325" left="741" width="5" height="7" font="26">2</text>
<text top="322" left="747" width="13" height="9" font="17">; Γ</text>
<text top="338" left="574" width="7" height="9" font="17">Γ</text>
<text top="338" left="596" width="7" height="9" font="17">T</text>
<text top="342" left="603" width="5" height="7" font="26">1</text>
<text top="338" left="612" width="20" height="10" font="17">≡ T</text>
<text top="342" left="632" width="5" height="7" font="26">2</text>
<text top="338" left="651" width="9" height="9" font="17">C</text>
<text top="342" left="659" width="5" height="7" font="26">1</text>
<text top="338" left="668" width="19" height="10" font="17">∪ C</text>
<text top="342" left="687" width="5" height="7" font="26">2</text>
<text top="338" left="693" width="13" height="9" font="17">; Γ</text>
<text top="366" left="548" width="53" height="9" font="17">(S-Array)</text>
<text top="378" left="592" width="7" height="9" font="17">Γ</text>
<text top="378" left="614" width="7" height="9" font="17">T</text>
<text top="382" left="621" width="5" height="7" font="26">1</text>
<text top="378" left="630" width="20" height="10" font="17">≡ T</text>
<text top="382" left="650" width="5" height="7" font="26">2</text>
<text top="378" left="669" width="22" height="9" font="17">C; Γ</text>
<text top="395" left="549" width="7" height="9" font="17">Γ</text>
<text top="395" left="571" width="45" height="9" font="17">Array(T</text>
<text top="398" left="616" width="5" height="7" font="26">1</text>
<text top="395" left="622" width="66" height="9" font="17">) ≤ Array(T</text>
<text top="398" left="688" width="5" height="7" font="26">2</text>
<text top="395" left="694" width="5" height="9" font="17">)</text>
<text top="395" left="712" width="22" height="9" font="17">C; Γ</text>
<text top="423" left="468" width="57" height="9" font="17">(S-Object)</text>
<text top="435" left="501" width="7" height="9" font="17">Γ</text>
<text top="435" left="522" width="7" height="9" font="17">T</text>
<text top="439" left="529" width="5" height="7" font="26">1</text>
<text top="434" left="539" width="20" height="10" font="17">≡ T</text>
<text top="440" left="558" width="5" height="7" font="26">1</text>
<text top="435" left="577" width="9" height="9" font="17">C</text>
<text top="439" left="586" width="5" height="7" font="26">1</text>
<text top="435" left="592" width="13" height="9" font="17">; Γ</text>
<text top="439" left="604" width="5" height="7" font="26">1</text>
<text top="435" left="612" width="15" height="9" font="17">. . .</text>
<text top="435" left="651" width="7" height="9" font="17">Γ</text>
<text top="439" left="658" width="20" height="7" font="26">n−1</text>
<text top="435" left="693" width="7" height="9" font="17">T</text>
<text top="439" left="700" width="7" height="7" font="26">n</text>
<text top="434" left="711" width="20" height="10" font="17">≡ T</text>
<text top="440" left="730" width="7" height="7" font="26">n</text>
<text top="435" left="751" width="9" height="9" font="17">C</text>
<text top="439" left="759" width="7" height="7" font="26">n</text>
<text top="435" left="767" width="13" height="9" font="17">; Γ</text>
<text top="439" left="779" width="7" height="7" font="26">n</text>
<text top="452" left="470" width="7" height="9" font="17">Γ</text>
<text top="451" left="492" width="17" height="10" font="17">{id</text>
<text top="455" left="508" width="5" height="7" font="26">1</text>
<text top="452" left="514" width="10" height="9" font="17">:T</text>
<text top="455" left="525" width="5" height="7" font="26">1</text>
<text top="452" left="530" width="32" height="9" font="17">, ..., id</text>
<text top="455" left="563" width="7" height="7" font="26">n</text>
<text top="452" left="570" width="10" height="9" font="17">:T</text>
<text top="455" left="580" width="7" height="7" font="26">n</text>
<text top="451" left="588" width="39" height="10" font="17">} ≤ {id</text>
<text top="455" left="627" width="5" height="7" font="26">1</text>
<text top="452" left="632" width="10" height="9" font="17">:T</text>
<text top="457" left="643" width="5" height="7" font="26">1</text>
<text top="452" left="649" width="32" height="9" font="17">, ..., id</text>
<text top="455" left="681" width="7" height="7" font="26">n</text>
<text top="452" left="688" width="10" height="9" font="17">:T</text>
<text top="457" left="699" width="7" height="7" font="26">n</text>
<text top="451" left="706" width="6" height="10" font="17">}</text>
<text top="452" left="725" width="9" height="9" font="17">C</text>
<text top="455" left="734" width="5" height="7" font="26">1</text>
<text top="451" left="742" width="48" height="10" font="17">∪ . . . ∪ C</text>
<text top="455" left="790" width="7" height="7" font="26">n</text>
<text top="452" left="797" width="13" height="9" font="17">; Γ</text>
<text top="455" left="810" width="7" height="7" font="26">n</text>
<text top="479" left="464" width="70" height="9" font="17">(S-OMember)</text>
<text top="491" left="488" width="143" height="10" font="17">∀ i ∈ [1, m], ∃ j ∈ [1, n], id</text>
<text top="497" left="631" width="4" height="7" font="26">i</text>
<text top="492" left="639" width="23" height="9" font="17">= id</text>
<text top="495" left="662" width="4" height="7" font="26">j</text>
<text top="492" left="668" width="16" height="9" font="17">, Γ</text>
<text top="495" left="684" width="17" height="7" font="26">i−1</text>
<text top="492" left="717" width="7" height="9" font="17">T</text>
<text top="497" left="724" width="4" height="7" font="26">i</text>
<text top="491" left="733" width="20" height="10" font="17">≡ T</text>
<text top="495" left="752" width="4" height="7" font="26">j</text>
<text top="492" left="771" width="9" height="9" font="17">C</text>
<text top="495" left="780" width="4" height="7" font="26">i</text>
<text top="492" left="784" width="13" height="9" font="17">; Γ</text>
<text top="495" left="797" width="4" height="7" font="26">i</text>
<text top="508" left="466" width="7" height="9" font="17">Γ</text>
<text top="512" left="474" width="5" height="7" font="26">0</text>
<text top="508" left="494" width="17" height="10" font="17">{id</text>
<text top="512" left="510" width="5" height="7" font="26">1</text>
<text top="508" left="516" width="10" height="9" font="17">:T</text>
<text top="512" left="526" width="5" height="7" font="26">1</text>
<text top="508" left="532" width="32" height="9" font="17">, ..., id</text>
<text top="512" left="565" width="7" height="7" font="26">n</text>
<text top="508" left="572" width="10" height="9" font="17">:T</text>
<text top="512" left="582" width="7" height="7" font="26">n</text>
<text top="508" left="590" width="36" height="10" font="17">} ≤ [id</text>
<text top="513" left="626" width="5" height="7" font="26">1</text>
<text top="508" left="632" width="10" height="9" font="17">:T</text>
<text top="513" left="642" width="5" height="7" font="26">1</text>
<text top="508" left="648" width="32" height="9" font="17">, ..., id</text>
<text top="513" left="680" width="9" height="7" font="26">m</text>
<text top="508" left="690" width="10" height="9" font="17">:T</text>
<text top="513" left="701" width="9" height="7" font="26">m</text>
<text top="508" left="710" width="3" height="9" font="17">]</text>
<text top="508" left="727" width="9" height="9" font="17">C</text>
<text top="512" left="735" width="5" height="7" font="26">1</text>
<text top="508" left="744" width="48" height="10" font="17">∪ . . . ∪ C</text>
<text top="512" left="791" width="9" height="7" font="26">m</text>
<text top="508" left="801" width="13" height="9" font="17">; Γ</text>
<text top="512" left="814" width="9" height="7" font="26">m</text>
<text top="536" left="494" width="64" height="9" font="17">(S-SUnionL)</text>
<text top="547" left="562" width="68" height="10" font="17">∀ i ∈ [1, n], Γ</text>
<text top="547" left="645" width="7" height="9" font="17">T</text>
<text top="551" left="652" width="4" height="7" font="26">i</text>
<text top="547" left="660" width="20" height="10" font="17">≤ T</text>
<text top="547" left="694" width="9" height="9" font="17">C</text>
<text top="551" left="703" width="4" height="7" font="26">i</text>
<text top="547" left="707" width="13" height="9" font="17">; Γ</text>
<text top="551" left="720" width="4" height="7" font="26">i</text>
<text top="563" left="496" width="7" height="9" font="17">Γ</text>
<text top="564" left="518" width="27" height="9" font="17">sta T</text>
<text top="567" left="545" width="5" height="7" font="26">1</text>
<text top="563" left="553" width="46" height="10" font="17">∨ . . . ∨ T</text>
<text top="567" left="599" width="7" height="7" font="26">n</text>
<text top="563" left="610" width="20" height="10" font="17">≤ T</text>
<text top="563" left="644" width="9" height="9" font="17">C</text>
<text top="567" left="653" width="5" height="7" font="26">1</text>
<text top="563" left="661" width="48" height="10" font="17">∪ . . . ∪ C</text>
<text top="567" left="709" width="7" height="7" font="26">n</text>
<text top="563" left="716" width="13" height="9" font="17">; Γ</text>
<text top="567" left="729" width="5" height="7" font="26">1</text>
<text top="563" left="738" width="46" height="10" font="17">∪ . . . ∪ Γ</text>
<text top="567" left="784" width="7" height="7" font="26">n</text>
<text top="591" left="542" width="65" height="9" font="17">(S-SUnionR)</text>
<text top="604" left="542" width="7" height="9" font="17">Γ</text>
<text top="604" left="567" width="7" height="9" font="17">T</text>
<text top="601" left="578" width="30" height="7" font="26">i∈1..n</text>
<text top="609" left="574" width="4" height="7" font="26">i</text>
<text top="604" left="612" width="40" height="10" font="17">≤ sta T</text>
<text top="608" left="652" width="5" height="7" font="26">1</text>
<text top="604" left="661" width="46" height="10" font="17">∨ . . . ∨ T</text>
<text top="608" left="707" width="7" height="7" font="26">n</text>
<text top="604" left="727" width="19" height="10" font="17">∅; Γ</text>
<text top="632" left="542" width="66" height="9" font="17">(S-DUnionL)</text>
<text top="643" left="562" width="68" height="10" font="17">∃ i ∈ [1, n], Γ</text>
<text top="643" left="645" width="7" height="9" font="17">T</text>
<text top="647" left="652" width="4" height="7" font="26">i</text>
<text top="643" left="660" width="20" height="10" font="17">≤ T</text>
<text top="643" left="694" width="9" height="9" font="17">C</text>
<text top="647" left="703" width="4" height="7" font="26">i</text>
<text top="643" left="707" width="13" height="9" font="17">; Γ</text>
<text top="647" left="720" width="4" height="7" font="26">i</text>
<text top="659" left="543" width="7" height="9" font="17">Γ</text>
<text top="660" left="565" width="27" height="9" font="17">dyn T</text>
<text top="663" left="592" width="5" height="7" font="26">1</text>
<text top="659" left="601" width="46" height="10" font="17">∨ . . . ∨ T</text>
<text top="663" left="647" width="7" height="7" font="26">n</text>
<text top="659" left="657" width="20" height="10" font="17">≤ T</text>
<text top="659" left="694" width="19" height="10" font="17">∪ C</text>
<text top="663" left="714" width="4" height="7" font="26">i</text>
<text top="659" left="719" width="21" height="9" font="17">; ∪Γ</text>
<text top="663" left="739" width="4" height="7" font="26">i</text>
<text top="687" left="542" width="62" height="9" font="17">(S-SInterL)</text>
<text top="700" left="542" width="7" height="9" font="17">Γ</text>
<text top="701" left="563" width="27" height="9" font="17">sta T</text>
<text top="704" left="590" width="5" height="7" font="26">1</text>
<text top="700" left="599" width="46" height="10" font="17">∧ . . . ∧ T</text>
<text top="704" left="645" width="7" height="7" font="26">n</text>
<text top="700" left="656" width="23" height="10" font="17">≤ T</text>
<text top="697" left="684" width="30" height="7" font="26">i∈1..n</text>
<text top="705" left="679" width="4" height="7" font="26">i</text>
<text top="700" left="727" width="19" height="10" font="17">∅; Γ</text>
<text top="728" left="494" width="63" height="9" font="17">(S-SInterR)</text>
<text top="739" left="562" width="68" height="10" font="17">∀ i ∈ [1, n], Γ</text>
<text top="739" left="645" width="32" height="9" font="17">T ≤ T</text>
<text top="743" left="676" width="4" height="7" font="26">i</text>
<text top="739" left="694" width="9" height="9" font="17">C</text>
<text top="743" left="703" width="4" height="7" font="26">i</text>
<text top="739" left="707" width="13" height="9" font="17">; Γ</text>
<text top="743" left="720" width="4" height="7" font="26">i</text>
<text top="755" left="496" width="7" height="9" font="17">Γ</text>
<text top="755" left="518" width="52" height="10" font="17">T ≤ sta T</text>
<text top="759" left="570" width="5" height="7" font="26">1</text>
<text top="754" left="578" width="46" height="10" font="17">∧ . . . ∧ T</text>
<text top="759" left="624" width="7" height="7" font="26">n</text>
<text top="755" left="644" width="9" height="9" font="17">C</text>
<text top="759" left="653" width="5" height="7" font="26">1</text>
<text top="754" left="661" width="48" height="10" font="17">∪ . . . ∪ C</text>
<text top="759" left="709" width="7" height="7" font="26">n</text>
<text top="755" left="716" width="13" height="9" font="17">; Γ</text>
<text top="759" left="729" width="5" height="7" font="26">1</text>
<text top="754" left="738" width="46" height="10" font="17">∪ . . . ∪ Γ</text>
<text top="759" left="784" width="7" height="7" font="26">n</text>
<text top="783" left="542" width="65" height="9" font="17">(S-DInterR)</text>
<text top="794" left="562" width="68" height="10" font="17">∃ i ∈ [1, n], Γ</text>
<text top="794" left="645" width="32" height="9" font="17">T ≤ T</text>
<text top="798" left="676" width="4" height="7" font="26">i</text>
<text top="794" left="694" width="9" height="9" font="17">C</text>
<text top="798" left="703" width="4" height="7" font="26">i</text>
<text top="794" left="707" width="13" height="9" font="17">; Γ</text>
<text top="798" left="720" width="4" height="7" font="26">i</text>
<text top="810" left="543" width="7" height="9" font="17">Γ</text>
<text top="810" left="565" width="52" height="10" font="17">T ≤ dyn T</text>
<text top="814" left="617" width="5" height="7" font="26">1</text>
<text top="809" left="625" width="46" height="10" font="17">∧ . . . ∧ T</text>
<text top="814" left="671" width="7" height="7" font="26">n</text>
<text top="809" left="694" width="19" height="10" font="17">∪ C</text>
<text top="814" left="714" width="4" height="7" font="26">i</text>
<text top="810" left="719" width="21" height="9" font="17">; ∪Γ</text>
<text top="814" left="739" width="4" height="7" font="26">i</text>
<text top="852" left="498" width="292" height="12" font="4">FIGURE 11. Subtyping and type equivalence.</text>
<text top="906" left="464" width="359" height="13" font="2">line 38 is dynamic (two and three dimensional points</text>
<text top="924" left="464" width="359" height="14" font="2">provide dimensions, x, and y ﬁelds), producing an error</text>
<text top="942" left="464" width="359" height="14" font="2">in case it is static (the z ﬁeld is not implemented by two</text>
<text top="960" left="464" width="132" height="13" font="2">dimensional points).</text>
<text top="978" left="479" width="344" height="13" font="2">It is worth noting that the deﬁnition of subtyping</text>
<text top="996" left="464" width="359" height="13" font="2">is not complete for union and intersection types. We</text>
<text top="1014" left="464" width="359" height="13" font="2">include inference rules for neither dynamic union types</text>
<text top="1032" left="464" width="359" height="13" font="2">on the right-hand side (supertypes), nor dynamic</text>
<text top="1050" left="464" width="359" height="13" font="2">intersection types on the left-hand side (subtypes). This</text>
<text top="1068" left="464" width="359" height="13" font="2">is because the StaDyn core type system never type-</text>
<text top="1086" left="464" width="359" height="13" font="2">checks whether a dynamic intersection type is a subtype</text>
<text top="1103" left="464" width="359" height="13" font="2">of another type—they always appear in the right-hand</text>
<text top="1121" left="464" width="359" height="13" font="2">side of subtyping constraints—or any type promotes to</text>
<text top="1139" left="464" width="359" height="13" font="2">a dynamic union type—they are always checked to be</text>
<text top="1157" left="464" width="167" height="13" font="2">subtypes of another type.</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="34" size="10" family="Courier" color="#7e7e7e"/>
	<fontspec id="35" size="10" family="Helvetica" color="#7e7e7e"/>
	<fontspec id="36" size="10" family="Courier" color="#0000ff"/>
	<fontspec id="37" size="10" family="Courier" color="#000000"/>
	<fontspec id="38" size="10" family="Courier" color="#007f00"/>
<text top="93" left="70" width="15" height="13" font="2">10</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="130" left="71" width="22" height="10" font="34">01:</text>
<text top="129" left="93" width="3" height="12" font="35"> </text>
<text top="130" left="108" width="22" height="10" font="36">var</text>
<text top="130" left="131" width="90" height="10" font="37"> getElement(</text>
<text top="130" left="221" width="22" height="10" font="36">var</text>
<text top="130" left="243" width="52" height="10" font="37"> list, </text>
<text top="130" left="295" width="22" height="10" font="36">var</text>
<text top="130" left="318" width="97" height="10" font="37"> fstOrSnd) { </text>
<text top="144" left="71" width="22" height="10" font="34">02:</text>
<text top="143" left="93" width="3" height="12" font="35"> </text>
<text top="144" left="108" width="15" height="10" font="37">  </text>
<text top="144" left="123" width="22" height="10" font="36">var</text>
<text top="144" left="146" width="82" height="10" font="37"> element;  </text>
<text top="158" left="71" width="22" height="10" font="34">03:</text>
<text top="157" left="93" width="3" height="12" font="35"> </text>
<text top="158" left="108" width="15" height="10" font="37">  </text>
<text top="158" left="123" width="15" height="10" font="36">if</text>
<text top="158" left="138" width="97" height="10" font="37"> (fstOrSnd)  </text>
<text top="172" left="71" width="22" height="10" font="34">04:</text>
<text top="171" left="93" width="3" height="12" font="35"> </text>
<text top="172" left="108" width="195" height="10" font="37">    element = list.data;  </text>
<text top="186" left="71" width="22" height="10" font="34">05:</text>
<text top="185" left="93" width="3" height="12" font="35"> </text>
<text top="186" left="108" width="15" height="10" font="37">  </text>
<text top="186" left="123" width="30" height="10" font="36">else</text>
<text top="186" left="153" width="7" height="10" font="37"> </text>
<text top="201" left="71" width="22" height="10" font="34">06:</text>
<text top="199" left="93" width="3" height="12" font="35"> </text>
<text top="201" left="108" width="232" height="10" font="37">    element = list.next.data;  </text>
<text top="215" left="71" width="22" height="10" font="34">07:</text>
<text top="213" left="93" width="3" height="12" font="35"> </text>
<text top="215" left="108" width="15" height="10" font="37">  </text>
<text top="215" left="123" width="45" height="10" font="36">return</text>
<text top="215" left="168" width="75" height="10" font="37"> element; </text>
<text top="229" left="71" width="22" height="10" font="34">08:</text>
<text top="228" left="93" width="3" height="12" font="35"> </text>
<text top="229" left="108" width="15" height="10" font="37">} </text>
<text top="243" left="71" width="22" height="10" font="34">09:</text>
<text top="242" left="93" width="3" height="12" font="35"> </text>
<text top="243" left="108" width="22" height="10" font="36">int</text>
<text top="243" left="131" width="82" height="10" font="37"> increment(</text>
<text top="243" left="213" width="22" height="10" font="36">int</text>
<text top="243" left="235" width="75" height="10" font="37"> value) { </text>
<text top="257" left="71" width="22" height="10" font="34">10:</text>
<text top="256" left="93" width="3" height="12" font="35"> </text>
<text top="257" left="108" width="7" height="10" font="36"> </text>
<text top="257" left="116" width="7" height="10" font="37"> </text>
<text top="257" left="123" width="45" height="10" font="36">return</text>
<text top="257" left="168" width="97" height="10" font="37"> value + 1;  </text>
<text top="271" left="71" width="22" height="10" font="34">11:</text>
<text top="270" left="93" width="3" height="12" font="35"> </text>
<text top="271" left="108" width="15" height="10" font="37">} </text>
<text top="130" left="434" width="22" height="10" font="34">12:</text>
<text top="129" left="456" width="3" height="12" font="35"> </text>
<text top="130" left="471" width="30" height="10" font="36">void</text>
<text top="130" left="501" width="75" height="10" font="37"> main() { </text>
<text top="144" left="434" width="22" height="10" font="34">13:</text>
<text top="143" left="456" width="3" height="12" font="35"> </text>
<text top="144" left="471" width="15" height="10" font="37">  </text>
<text top="144" left="486" width="22" height="10" font="36">int</text>
<text top="144" left="509" width="75" height="10" font="37"> integer; </text>
<text top="158" left="434" width="22" height="10" font="34">14:</text>
<text top="157" left="456" width="3" height="12" font="35"> </text>
<text top="158" left="471" width="15" height="10" font="37">  </text>
<text top="158" left="486" width="22" height="10" font="36">var</text>
<text top="158" left="509" width="127" height="10" font="37"> listOfTwo, sta; </text>
<text top="172" left="434" width="22" height="10" font="34">15:</text>
<text top="171" left="456" width="3" height="12" font="35"> </text>
<text top="172" left="471" width="15" height="10" font="37">  </text>
<text top="172" left="486" width="52" height="10" font="36">dyn var</text>
<text top="172" left="539" width="45" height="10" font="37"> din; </text>
<text top="186" left="434" width="22" height="10" font="34">16:</text>
<text top="185" left="456" width="3" height="12" font="35"> </text>
<text top="186" left="471" width="285" height="10" font="37">  listOfTwo = createNode(1,createNode(</text>
<text top="186" left="756" width="30" height="10" font="36">true</text>
<text top="186" left="786" width="37" height="10" font="37">,0));</text>
<text top="201" left="434" width="22" height="10" font="34">17:</text>
<text top="199" left="456" width="3" height="12" font="35"> </text>
<text top="201" left="471" width="322" height="10" font="37">  din = sta = getElement(listOfTwo, true); </text>
<text top="215" left="434" width="22" height="10" font="34">18:</text>
<text top="213" left="456" width="3" height="12" font="35"> </text>
<text top="215" left="471" width="157" height="10" font="37">  integer = sta + 1; </text>
<text top="215" left="655" width="142" height="10" font="38">// Compiler error  </text>
<text top="229" left="434" width="22" height="10" font="34">19:</text>
<text top="228" left="456" width="3" height="12" font="35"> </text>
<text top="229" left="471" width="150" height="10" font="37">  integer = din + 1;</text>
<text top="229" left="621" width="7" height="10" font="38"> </text>
<text top="243" left="434" width="22" height="10" font="34">20:</text>
<text top="242" left="456" width="3" height="12" font="35"> </text>
<text top="243" left="471" width="127" height="10" font="37">  increment(din);</text>
<text top="243" left="599" width="7" height="10" font="38"> </text>
<text top="243" left="655" width="142" height="10" font="38">// Compiler error  </text>
<text top="257" left="434" width="22" height="10" font="34">21:</text>
<text top="256" left="456" width="3" height="12" font="35"> </text>
<text top="257" left="471" width="7" height="10" font="37">}</text>
<text top="257" left="479" width="7" height="10" font="38"> </text>
<text top="271" left="434" width="7" height="10" font="37"> </text>
<text top="307" left="259" width="375" height="12" font="4">FIGURE 12. Example use of dynamic and static references.</text>
<text top="357" left="85" width="344" height="13" font="2">Since StaDyn does not yet support higher-order</text>
<text top="374" left="70" width="359" height="13" font="2">functions (delegates in C# terminology), we do not</text>
<text top="392" left="70" width="359" height="13" font="2">specify subtyping of the function type constructor.</text>
<text top="410" left="70" width="359" height="13" font="2">Subtyping is not deﬁned between member types either,</text>
<text top="428" left="70" width="359" height="13" font="2">because they only appear in constraints. Therefore, the</text>
<text top="446" left="70" width="359" height="13" font="2">current deﬁnition of the subtyping relation is neither</text>
<text top="464" left="70" width="151" height="13" font="2">reﬂexive nor transitive.</text>
<text top="510" left="70" width="37" height="13" font="2">3.2.5.</text>
<text top="510" left="122" width="82" height="13" font="2">Assignments</text>
<text top="529" left="70" width="359" height="13" font="2">The abstract syntax in Figure 3 allows any expression</text>
<text top="547" left="70" width="359" height="13" font="2">to be the left-hand side of an assignment. The type</text>
<text top="564" left="70" width="359" height="13" font="2">system rejects all those expressions that cannot be used</text>
<text top="582" left="70" width="359" height="13" font="2">in that context. Only identiﬁers, array indexing and</text>
<text top="600" left="70" width="359" height="13" font="2">ﬁeld access expressions can be the left-hand side of an</text>
<text top="618" left="70" width="359" height="13" font="2">assignment. For the sake of brevity, we do not show</text>
<text top="636" left="70" width="74" height="13" font="2">those rules.</text>
<text top="654" left="85" width="344" height="13" font="2">The four inference rules in Figure 13 describe</text>
<text top="672" left="70" width="157" height="13" font="2">assignment expressions.</text>
<text top="675" left="241" width="188" height="13" font="2">T-Assign types assignment</text>
<text top="690" left="70" width="359" height="13" font="2">expressions when the left-hand side expression type is</text>
<text top="708" left="70" width="137" height="13" font="2">not a type variable.</text>
<text top="708" left="222" width="206" height="13" font="2">This straightforward rule only</text>
<text top="726" left="70" width="359" height="13" font="2">requires the right-hand side to be a subtype of the left-</text>
<text top="744" left="70" width="359" height="13" font="2">hand side. In case the left-hand side is a type variable,</text>
<text top="762" left="70" width="359" height="13" font="2">it will from now on be bound to the type of the right-</text>
<text top="780" left="70" width="244" height="16" font="2">hand side expression (T-TVAssign).</text>
<text top="801" left="85" width="344" height="13" font="2">T-FAssign types the assignment of an object ﬁeld</text>
<text top="816" left="70" width="359" height="16" font="2">when it is a type variable. As with the T-Field rule,</text>
<text top="834" left="70" width="359" height="13" font="2">the object should be a subtype of a member type with</text>
<text top="852" left="70" width="359" height="13" font="2">the speciﬁc ﬁeld label. The new ﬁeld type will be the</text>
<text top="870" left="70" width="359" height="13" font="2">type of the right-hand side expression, regardless of</text>
<text top="888" left="70" width="359" height="13" font="2">its previous type. Finally, if the ﬁeld type has been</text>
<text top="906" left="70" width="359" height="13" font="2">inferred from a parameter, a new assignment constraint</text>
<text top="924" left="70" width="359" height="13" font="2">will be generated. This constraint will cause changing</text>
<text top="942" left="70" width="359" height="13" font="2">the ﬁeld type of the argument when the function is</text>
<text top="960" left="70" width="359" height="13" font="2">called. An example of this kind of assignment constraint</text>
<text top="978" left="70" width="359" height="14" font="2">generation is shown in the setData function in Figure 4</text>
<text top="996" left="70" width="18" height="13" font="2">(X</text>
<text top="1001" left="88" width="12" height="9" font="17">15</text>
<text top="995" left="106" width="33" height="14" font="2">← X</text>
<text top="1001" left="139" width="12" height="9" font="17">14</text>
<text top="996" left="152" width="277" height="13" font="2">). Calling this function with an object as</text>
<text top="1013" left="70" width="359" height="13" font="2">the ﬁrst argument (line 19) changes the type of the</text>
<text top="1031" left="70" width="359" height="14" font="2">argument’s data to the type of the second argument</text>
<text top="1049" left="70" width="307" height="14" font="2">(int), making the statement in line 20 correct.</text>
<text top="1068" left="85" width="344" height="13" font="2">For an array type whose elements are type variables</text>
<text top="1086" left="70" width="359" height="16" font="2">(T-AAssign), the new type of its elements will be a</text>
<text top="1103" left="70" width="359" height="13" font="2">union type comprising its previous type and the type</text>
<text top="1121" left="70" width="154" height="13" font="2">of the right-hand side.</text>
<text top="1121" left="239" width="190" height="14" font="2">Therefore, the type of v in</text>
<text top="1139" left="70" width="359" height="13" font="2">line 8 of Figure 9 is an array of integers or booleans</text>
<text top="1157" left="70" width="359" height="14" font="2">(int∨bool) because it holds both. If the type variable</text>
<text top="368" left="497" width="56" height="9" font="17">(T-Assign)</text>
<text top="380" left="553" width="21" height="9" font="17">Γ; Ω</text>
<text top="380" left="588" width="9" height="9" font="17">E</text>
<text top="384" left="597" width="5" height="7" font="26">1</text>
<text top="380" left="606" width="14" height="9" font="17">: T</text>
<text top="384" left="620" width="5" height="7" font="26">1</text>
<text top="380" left="639" width="9" height="9" font="17">C</text>
<text top="384" left="647" width="5" height="7" font="26">1</text>
<text top="380" left="653" width="13" height="9" font="17">; Γ</text>
<text top="380" left="694" width="31" height="10" font="17">¬tv(T</text>
<text top="384" left="724" width="5" height="7" font="26">1</text>
<text top="380" left="730" width="5" height="9" font="17">)</text>
<text top="393" left="499" width="25" height="9" font="17">Γ ; Ω</text>
<text top="393" left="538" width="9" height="9" font="17">E</text>
<text top="397" left="547" width="5" height="7" font="26">2</text>
<text top="393" left="556" width="14" height="9" font="17">: T</text>
<text top="397" left="570" width="5" height="7" font="26">2</text>
<text top="393" left="589" width="9" height="9" font="17">C</text>
<text top="397" left="597" width="5" height="7" font="26">2</text>
<text top="393" left="603" width="13" height="9" font="17">; Γ</text>
<text top="393" left="647" width="7" height="9" font="17">Γ</text>
<text top="394" left="676" width="27" height="9" font="17">sta T</text>
<text top="397" left="703" width="5" height="7" font="26">2</text>
<text top="393" left="712" width="20" height="10" font="17">≤ T</text>
<text top="397" left="732" width="5" height="7" font="26">1</text>
<text top="393" left="751" width="9" height="9" font="17">C</text>
<text top="397" left="760" width="5" height="7" font="26">3</text>
<text top="393" left="765" width="13" height="9" font="17">; Γ</text>
<text top="410" left="539" width="21" height="9" font="17">Γ; Ω</text>
<text top="410" left="574" width="9" height="9" font="17">E</text>
<text top="414" left="583" width="5" height="7" font="26">1</text>
<text top="410" left="592" width="21" height="9" font="17">= E</text>
<text top="414" left="613" width="5" height="7" font="26">2</text>
<text top="410" left="623" width="14" height="9" font="17">: T</text>
<text top="414" left="637" width="5" height="7" font="26">1</text>
<text top="410" left="655" width="9" height="9" font="17">C</text>
<text top="414" left="664" width="5" height="7" font="26">1</text>
<text top="409" left="672" width="19" height="10" font="17">∪ C</text>
<text top="414" left="692" width="5" height="7" font="26">2</text>
<text top="409" left="700" width="19" height="10" font="17">∪ C</text>
<text top="414" left="720" width="5" height="7" font="26">3</text>
<text top="410" left="725" width="13" height="9" font="17">; Γ</text>
<text top="438" left="528" width="71" height="9" font="17">(T-TVAssign)</text>
<text top="450" left="586" width="21" height="9" font="17">Γ; Ω</text>
<text top="450" left="622" width="9" height="9" font="17">E</text>
<text top="454" left="630" width="5" height="7" font="26">1</text>
<text top="450" left="640" width="17" height="9" font="17">: X</text>
<text top="450" left="670" width="9" height="9" font="17">C</text>
<text top="454" left="679" width="5" height="7" font="26">1</text>
<text top="450" left="684" width="13" height="9" font="17">; Γ</text>
<text top="463" left="530" width="25" height="9" font="17">Γ ; Ω</text>
<text top="463" left="569" width="9" height="9" font="17">E</text>
<text top="467" left="578" width="5" height="7" font="26">2</text>
<text top="463" left="587" width="14" height="9" font="17">: T</text>
<text top="463" left="616" width="9" height="9" font="17">C</text>
<text top="467" left="624" width="5" height="7" font="26">2</text>
<text top="463" left="630" width="13" height="9" font="17">; Γ</text>
<text top="463" left="674" width="7" height="9" font="17">Γ</text>
<text top="463" left="695" width="61" height="9" font="17">= Γ , X : T</text>
<text top="480" left="555" width="21" height="9" font="17">Γ; Ω</text>
<text top="480" left="590" width="9" height="9" font="17">E</text>
<text top="483" left="599" width="5" height="7" font="26">1</text>
<text top="480" left="608" width="21" height="9" font="17">= E</text>
<text top="483" left="629" width="5" height="7" font="26">2</text>
<text top="480" left="639" width="14" height="9" font="17">: T</text>
<text top="480" left="667" width="9" height="9" font="17">C</text>
<text top="483" left="676" width="5" height="7" font="26">1</text>
<text top="479" left="684" width="19" height="10" font="17">∪ C</text>
<text top="483" left="704" width="5" height="7" font="26">2</text>
<text top="480" left="709" width="13" height="9" font="17">; Γ</text>
<text top="507" left="480" width="62" height="9" font="17">(T-FAssign)</text>
<text top="520" left="482" width="21" height="9" font="17">Γ; Ω</text>
<text top="520" left="517" width="9" height="9" font="17">E</text>
<text top="523" left="526" width="5" height="7" font="26">1</text>
<text top="520" left="535" width="14" height="9" font="17">: T</text>
<text top="523" left="549" width="5" height="7" font="26">1</text>
<text top="520" left="568" width="9" height="9" font="17">C</text>
<text top="523" left="576" width="5" height="7" font="26">1</text>
<text top="520" left="582" width="13" height="9" font="17">; Γ</text>
<text top="520" left="623" width="39" height="9" font="17">X fresh</text>
<text top="520" left="686" width="7" height="9" font="17">Γ</text>
<text top="520" left="711" width="7" height="9" font="17">T</text>
<text top="523" left="718" width="5" height="7" font="26">1</text>
<text top="519" left="728" width="51" height="10" font="17">≤ [id : X]</text>
<text top="520" left="791" width="9" height="9" font="17">C</text>
<text top="523" left="800" width="5" height="7" font="26">2</text>
<text top="533" left="525" width="25" height="9" font="17">Γ ; Ω</text>
<text top="533" left="565" width="9" height="9" font="17">E</text>
<text top="536" left="574" width="5" height="7" font="26">2</text>
<text top="533" left="583" width="14" height="9" font="17">: T</text>
<text top="536" left="597" width="5" height="7" font="26">2</text>
<text top="533" left="616" width="9" height="9" font="17">C</text>
<text top="536" left="624" width="5" height="7" font="26">3</text>
<text top="533" left="630" width="13" height="9" font="17">; Γ</text>
<text top="533" left="674" width="7" height="9" font="17">Γ</text>
<text top="533" left="695" width="61" height="9" font="17">= Γ , X : T</text>
<text top="536" left="756" width="5" height="7" font="26">2</text>
<text top="546" left="522" width="22" height="9" font="17">if T</text>
<text top="548" left="544" width="5" height="7" font="26">1</text>
<text top="544" left="553" width="24" height="10" font="17">∈ Ω.</text>
<text top="548" left="577" width="16" height="7" font="26">tifp</text>
<text top="545" left="593" width="40" height="10" font="17">, then C</text>
<text top="548" left="633" width="5" height="7" font="26">4</text>
<text top="545" left="642" width="49" height="9" font="17">= X ← T</text>
<text top="548" left="691" width="5" height="7" font="26">2</text>
<text top="545" left="697" width="40" height="10" font="17">, else C</text>
<text top="548" left="737" width="5" height="7" font="26">4</text>
<text top="545" left="746" width="19" height="9" font="17">= ∅</text>
<text top="561" left="518" width="21" height="9" font="17">Γ; Ω</text>
<text top="561" left="553" width="9" height="9" font="17">E</text>
<text top="565" left="562" width="5" height="7" font="26">1</text>
<text top="561" left="568" width="39" height="9" font="17">.id = E</text>
<text top="565" left="606" width="5" height="7" font="26">2</text>
<text top="561" left="616" width="14" height="9" font="17">: T</text>
<text top="565" left="630" width="5" height="7" font="26">2</text>
<text top="561" left="648" width="9" height="9" font="17">C</text>
<text top="565" left="657" width="5" height="7" font="26">1</text>
<text top="561" left="665" width="19" height="10" font="17">∪ C</text>
<text top="565" left="685" width="5" height="7" font="26">2</text>
<text top="561" left="693" width="19" height="10" font="17">∪ C</text>
<text top="565" left="713" width="5" height="7" font="26">3</text>
<text top="561" left="721" width="19" height="10" font="17">∪ C</text>
<text top="565" left="741" width="5" height="7" font="26">4</text>
<text top="561" left="746" width="13" height="9" font="17">; Γ</text>
<text top="589" left="488" width="64" height="9" font="17">(T-AAssign)</text>
<text top="601" left="575" width="21" height="9" font="17">Γ; Ω</text>
<text top="601" left="611" width="9" height="9" font="17">E</text>
<text top="605" left="620" width="5" height="7" font="26">1</text>
<text top="601" left="626" width="12" height="9" font="17">[E</text>
<text top="605" left="638" width="5" height="7" font="26">2</text>
<text top="601" left="644" width="23" height="9" font="17">] : X</text>
<text top="601" left="681" width="9" height="9" font="17">C</text>
<text top="605" left="689" width="5" height="7" font="26">1</text>
<text top="601" left="695" width="13" height="9" font="17">; Γ</text>
<text top="614" left="506" width="25" height="9" font="17">Γ ; Ω</text>
<text top="614" left="545" width="9" height="9" font="17">E</text>
<text top="618" left="554" width="5" height="7" font="26">3</text>
<text top="614" left="563" width="14" height="9" font="17">: T</text>
<text top="614" left="592" width="9" height="9" font="17">C</text>
<text top="618" left="600" width="5" height="7" font="26">2</text>
<text top="614" left="606" width="13" height="9" font="17">; Γ</text>
<text top="614" left="650" width="7" height="9" font="17">Γ</text>
<text top="614" left="671" width="109" height="9" font="17">= Γ , X : Γ (X) ∨ T</text>
<text top="628" left="490" width="52" height="9" font="17">if X ∈ Ω.</text>
<text top="631" left="542" width="16" height="7" font="26">tifp</text>
<text top="627" left="559" width="40" height="10" font="17">, then C</text>
<text top="631" left="598" width="5" height="7" font="26">3</text>
<text top="627" left="608" width="162" height="10" font="17">= X ← X ∨ Γ (X) ∨ T , else C</text>
<text top="631" left="770" width="5" height="7" font="26">3</text>
<text top="627" left="779" width="19" height="9" font="17">= ∅</text>
<text top="644" left="530" width="21" height="9" font="17">Γ; Ω</text>
<text top="644" left="566" width="9" height="9" font="17">E</text>
<text top="648" left="574" width="5" height="7" font="26">1</text>
<text top="644" left="580" width="12" height="9" font="17">[E</text>
<text top="648" left="592" width="5" height="7" font="26">2</text>
<text top="644" left="598" width="28" height="9" font="17">] = E</text>
<text top="648" left="626" width="5" height="7" font="26">3</text>
<text top="644" left="635" width="14" height="9" font="17">: T</text>
<text top="644" left="664" width="9" height="9" font="17">C</text>
<text top="648" left="672" width="5" height="7" font="26">1</text>
<text top="643" left="681" width="19" height="10" font="17">∪ C</text>
<text top="648" left="700" width="5" height="7" font="26">2</text>
<text top="643" left="709" width="19" height="10" font="17">∪ C</text>
<text top="648" left="728" width="5" height="7" font="26">3</text>
<text top="644" left="734" width="13" height="9" font="17">; Γ</text>
<text top="686" left="556" width="175" height="12" font="4">FIGURE 13. Assignments.</text>
<text top="738" left="464" width="359" height="13" font="2">has been inferred from the function parameters, a</text>
<text top="756" left="464" width="359" height="13" font="2">new assignment constraint will be generated including</text>
<text top="774" left="464" width="359" height="13" font="2">the own type variable in the right-hand side of the</text>
<text top="792" left="464" width="359" height="14" font="2">assignment. This is the case of the w variable in the</text>
<text top="811" left="464" width="359" height="12" font="2">vector function (line 8 in Figure 9). Unlike the type</text>
<text top="828" left="464" width="164" height="14" font="2">of v, the type of w (X</text>
<text top="833" left="629" width="12" height="9" font="17">30</text>
<text top="828" left="641" width="182" height="13" font="2">) is included in the union</text>
<text top="846" left="464" width="52" height="13" font="2">type (X</text>
<text top="851" left="516" width="12" height="9" font="17">30</text>
<text top="845" left="532" width="291" height="15" font="2">∨ int ∨ bool), denoting that the type of the</text>
<text top="864" left="464" width="359" height="13" font="2">actual parameter in the invocation will be included in</text>
<text top="882" left="464" width="359" height="13" font="2">the union type. Therefore, the type of the elements</text>
<text top="900" left="464" width="359" height="14" font="2">of ve when the function vector is called in line 13 is</text>
<text top="917" left="464" width="192" height="15" font="2">{attribute:int}∨int∨bool.</text>
<text top="960" left="464" width="37" height="13" font="2">3.2.6.</text>
<text top="960" left="516" width="71" height="13" font="2">Statements</text>
<text top="978" left="464" width="359" height="14" font="2">The minimal core includes the return, if and while</text>
<text top="996" left="464" width="359" height="14" font="2">statements (Figure 14). For the return statement, the</text>
<text top="1014" left="464" width="359" height="13" font="2">expression type to be returned must be a subtype of the</text>
<text top="1032" left="464" width="228" height="16" font="2">declared return type (T-Return).</text>
<text top="1050" left="479" width="344" height="14" font="2">Control-ﬂow branches of if and while statements are</text>
<text top="1068" left="464" width="359" height="13" font="2">taken into consideration to keep the ﬂow-sensitiveness</text>
<text top="1086" left="464" width="359" height="14" font="2">of our type system. The join of constraints and the</text>
<text top="1103" left="464" width="359" height="13" font="2">union of type environments take into consideration</text>
<text top="1121" left="464" width="359" height="13" font="2">this diﬃculty, taking the type information obtained on</text>
<text top="1139" left="464" width="359" height="13" font="2">each execution path and combining both into a single</text>
<text top="1157" left="464" width="359" height="13" font="2">constraint list and type environment. Each parameter</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1262" width="892">
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="808" width="15" height="13" font="2">11</text>
<text top="135" left="70" width="359" height="13" font="2">represents the type information of an exclusive control</text>
<text top="153" left="70" width="359" height="14" font="2">ﬂow. Since it might happen that the while body is not</text>
<text top="171" left="70" width="359" height="13" font="2">executed at runtime (it is not exclusive), the empty</text>
<text top="189" left="70" width="359" height="16" font="2">set is passed as its second argument (T-While). An</text>
<text top="207" left="70" width="359" height="14" font="2">example use of the join function is the type of the</text>
<text top="226" left="70" width="39" height="12" font="2">point</text>
<text top="225" left="127" width="51" height="13" font="2">variable</text>
<text top="225" left="196" width="233" height="14" font="2">({x:int, y:int, dimensions:int} ∨</text>
<text top="242" left="70" width="291" height="15" font="2">{x:int, y:int, z:int, dimensions:int})—line</text>
<text top="243" left="414" width="15" height="13" font="2">10</text>
<text top="261" left="70" width="359" height="13" font="2">in Figure 2—that is created from its types in</text>
<text top="279" left="70" width="29" height="13" font="2">lines</text>
<text top="279" left="117" width="7" height="13" font="2">7</text>
<text top="279" left="143" width="217" height="14" font="2">({x:int, y:int, dimensions:int})</text>
<text top="279" left="379" width="24" height="13" font="2">and</text>
<text top="279" left="421" width="7" height="13" font="2">9</text>
<text top="297" left="70" width="263" height="14" font="2">({x:int, y:int, z:int, dimensions:int}).</text>
<text top="297" left="359" width="70" height="13" font="2">The same</text>
<text top="314" left="70" width="175" height="13" font="2">happens with constraints:</text>
<text top="314" left="259" width="169" height="13" font="2">the joined constraint for</text>
<text top="332" left="70" width="359" height="14" font="2">the point parameter of the distance3D function</text>
<text top="350" left="70" width="18" height="13" font="2">(X</text>
<text top="356" left="88" width="6" height="9" font="17">1</text>
<text top="349" left="106" width="121" height="14" font="2">≤ [dimensions:X</text>
<text top="356" left="227" width="6" height="9" font="17">2</text>
<text top="350" left="233" width="56" height="13" font="2">] ∧ [x:X</text>
<text top="356" left="289" width="6" height="9" font="17">3</text>
<text top="350" left="296" width="55" height="13" font="2">] ∧ [y:X</text>
<text top="356" left="351" width="6" height="9" font="17">4</text>
<text top="350" left="357" width="55" height="13" font="2">] ∧ [z:X</text>
<text top="356" left="412" width="6" height="9" font="17">5</text>
<text top="350" left="419" width="10" height="13" font="2">])</text>
<text top="368" left="70" width="10" height="13" font="2">is</text>
<text top="368" left="101" width="56" height="13" font="2">obtained</text>
<text top="368" left="179" width="30" height="13" font="2">from</text>
<text top="368" left="231" width="21" height="13" font="2">the</text>
<text top="368" left="273" width="71" height="13" font="2">constraints</text>
<text top="368" left="365" width="63" height="13" font="2">generated</text>
<text top="386" left="70" width="12" height="13" font="2">in</text>
<text top="386" left="97" width="29" height="13" font="2">lines</text>
<text top="386" left="140" width="15" height="13" font="2">42</text>
<text top="386" left="170" width="18" height="13" font="2">(X</text>
<text top="392" left="188" width="6" height="9" font="17">1</text>
<text top="385" left="214" width="12" height="14" font="2">≤</text>
<text top="386" left="246" width="98" height="13" font="2">[dimensions:X</text>
<text top="392" left="344" width="6" height="9" font="17">2</text>
<text top="386" left="351" width="10" height="13" font="2">])</text>
<text top="386" left="375" width="24" height="13" font="2">and</text>
<text top="386" left="414" width="15" height="13" font="2">43</text>
<text top="404" left="70" width="18" height="13" font="2">(X</text>
<text top="409" left="88" width="6" height="9" font="17">1</text>
<text top="403" left="99" width="45" height="14" font="2">≤ [x:X</text>
<text top="409" left="144" width="6" height="9" font="17">3</text>
<text top="404" left="151" width="49" height="13" font="2">] ∧ [y:X</text>
<text top="409" left="200" width="6" height="9" font="17">4</text>
<text top="404" left="207" width="49" height="13" font="2">] ∧ [z:X</text>
<text top="409" left="256" width="6" height="9" font="17">5</text>
<text top="404" left="262" width="14" height="13" font="2">]).</text>
<text top="422" left="85" width="344" height="13" font="2">The union of environments used in Figure 14</text>
<text top="440" left="70" width="359" height="14" font="2">is also based on the join function described in</text>
<text top="458" left="70" width="359" height="13" font="2">Figure 15: variable bindings must be the same in both</text>
<text top="476" left="70" width="359" height="13" font="2">environments, and the resulting type variable binding</text>
<text top="494" left="70" width="359" height="14" font="2">set is the join of the type variable binding sets of each</text>
<text top="512" left="70" width="65" height="13" font="2">ﬂow path.</text>
<text top="564" left="122" width="61" height="9" font="17">(T-Return)</text>
<text top="577" left="124" width="21" height="9" font="17">Γ; Ω</text>
<text top="577" left="159" width="27" height="9" font="17">E : T</text>
<text top="577" left="201" width="9" height="9" font="17">C</text>
<text top="581" left="209" width="5" height="7" font="26">1</text>
<text top="577" left="215" width="13" height="9" font="17">; Γ</text>
<text top="577" left="256" width="7" height="9" font="17">Γ</text>
<text top="577" left="281" width="37" height="9" font="17">T ≤ Ω.</text>
<text top="581" left="318" width="8" height="7" font="26">rt</text>
<text top="577" left="340" width="9" height="9" font="17">C</text>
<text top="581" left="349" width="5" height="7" font="26">2</text>
<text top="577" left="354" width="13" height="9" font="17">; Γ</text>
<text top="594" left="161" width="21" height="9" font="17">Γ; Ω</text>
<text top="594" left="197" width="55" height="9" font="17">return E :</text>
<text top="594" left="274" width="9" height="9" font="17">C</text>
<text top="597" left="283" width="5" height="7" font="26">1</text>
<text top="593" left="292" width="19" height="10" font="17">∪ C</text>
<text top="597" left="311" width="5" height="7" font="26">2</text>
<text top="594" left="317" width="13" height="9" font="17">; Γ</text>
<text top="621" left="70" width="31" height="9" font="17">(T-If)</text>
<text top="634" left="132" width="21" height="9" font="17">Γ; Ω</text>
<text top="634" left="167" width="27" height="9" font="17">E : T</text>
<text top="634" left="208" width="26" height="9" font="17">C ; Γ</text>
<text top="634" left="262" width="7" height="9" font="17">Γ</text>
<text top="634" left="288" width="47" height="10" font="17">T ≤ bool</text>
<text top="634" left="348" width="29" height="9" font="17">C ; Γ</text>
<text top="647" left="120" width="29" height="9" font="17">Γ ; Ω</text>
<text top="647" left="163" width="7" height="9" font="17">S</text>
<text top="650" left="170" width="5" height="7" font="26">1</text>
<text top="647" left="179" width="3" height="9" font="17">:</text>
<text top="647" left="205" width="9" height="9" font="17">C</text>
<text top="650" left="214" width="5" height="7" font="26">1</text>
<text top="647" left="220" width="13" height="9" font="17">; Γ</text>
<text top="650" left="232" width="5" height="7" font="26">1</text>
<text top="647" left="240" width="28" height="9" font="17">. . . Γ</text>
<text top="650" left="268" width="20" height="7" font="26">n−1</text>
<text top="647" left="288" width="14" height="9" font="17">; Ω</text>
<text top="647" left="317" width="7" height="9" font="17">S</text>
<text top="650" left="324" width="7" height="7" font="26">n</text>
<text top="647" left="335" width="3" height="9" font="17">:</text>
<text top="647" left="360" width="9" height="9" font="17">C</text>
<text top="650" left="369" width="7" height="7" font="26">n</text>
<text top="647" left="376" width="13" height="9" font="17">; Γ</text>
<text top="650" left="389" width="7" height="7" font="26">n</text>
<text top="660" left="72" width="29" height="9" font="17">Γ ; Ω</text>
<text top="660" left="115" width="7" height="9" font="17">S</text>
<text top="663" left="122" width="19" height="7" font="26">n+1</text>
<text top="660" left="145" width="3" height="9" font="17">:</text>
<text top="660" left="164" width="9" height="9" font="17">C</text>
<text top="663" left="173" width="19" height="7" font="26">n+1</text>
<text top="660" left="193" width="13" height="9" font="17">; Γ</text>
<text top="663" left="206" width="19" height="7" font="26">n+1</text>
<text top="660" left="228" width="28" height="9" font="17">. . . Γ</text>
<text top="663" left="256" width="37" height="7" font="26">n+m−1</text>
<text top="660" left="293" width="14" height="9" font="17">; Ω</text>
<text top="660" left="321" width="7" height="9" font="17">S</text>
<text top="663" left="328" width="23" height="7" font="26">n+m</text>
<text top="660" left="356" width="3" height="9" font="17">:</text>
<text top="660" left="375" width="9" height="9" font="17">C</text>
<text top="663" left="384" width="23" height="7" font="26">n+m</text>
<text top="660" left="408" width="13" height="9" font="17">; Γ</text>
<text top="663" left="421" width="23" height="7" font="26">n+m</text>
<text top="675" left="148" width="21" height="9" font="17">Γ; Ω</text>
<text top="676" left="184" width="35" height="9" font="17">if E S</text>
<text top="679" left="218" width="5" height="7" font="26">1</text>
<text top="675" left="226" width="24" height="9" font="17">. . . S</text>
<text top="679" left="250" width="7" height="7" font="26">n</text>
<text top="675" left="261" width="7" height="9" font="17">S</text>
<text top="679" left="269" width="19" height="7" font="26">n+1</text>
<text top="675" left="291" width="24" height="9" font="17">. . . S</text>
<text top="679" left="315" width="23" height="7" font="26">n+m</text>
<text top="675" left="342" width="3" height="9" font="17">:</text>
<text top="688" left="84" width="35" height="9" font="17">C ∪ C</text>
<text top="688" left="130" width="47" height="10" font="17">∪ join(C</text>
<text top="692" left="177" width="5" height="7" font="26">1</text>
<text top="688" left="186" width="43" height="10" font="17">∪ ... ∪ C</text>
<text top="692" left="229" width="7" height="7" font="26">n</text>
<text top="688" left="237" width="14" height="9" font="17">, C</text>
<text top="692" left="251" width="19" height="7" font="26">n+1</text>
<text top="688" left="274" width="43" height="10" font="17">∪ ... ∪ C</text>
<text top="692" left="317" width="23" height="7" font="26">n+m</text>
<text top="688" left="341" width="45" height="9" font="17">); join(Γ</text>
<text top="692" left="387" width="7" height="7" font="26">n</text>
<text top="688" left="394" width="13" height="9" font="17">, Γ</text>
<text top="692" left="407" width="23" height="7" font="26">n+m</text>
<text top="688" left="431" width="5" height="9" font="17">)</text>
<text top="716" left="70" width="54" height="9" font="17">(T-While)</text>
<text top="728" left="124" width="21" height="9" font="17">Γ; Ω</text>
<text top="728" left="160" width="27" height="9" font="17">E : T</text>
<text top="728" left="201" width="26" height="9" font="17">C ; Γ</text>
<text top="728" left="255" width="7" height="9" font="17">Γ</text>
<text top="728" left="281" width="47" height="10" font="17">T ≤ bool</text>
<text top="728" left="341" width="29" height="9" font="17">C ; Γ</text>
<text top="741" left="113" width="29" height="9" font="17">Γ ; Ω</text>
<text top="741" left="156" width="7" height="9" font="17">S</text>
<text top="745" left="163" width="5" height="7" font="26">1</text>
<text top="741" left="172" width="3" height="9" font="17">:</text>
<text top="741" left="198" width="9" height="9" font="17">C</text>
<text top="745" left="207" width="5" height="7" font="26">1</text>
<text top="741" left="212" width="13" height="9" font="17">; Γ</text>
<text top="745" left="225" width="5" height="7" font="26">1</text>
<text top="741" left="233" width="28" height="9" font="17">. . . Γ</text>
<text top="745" left="261" width="20" height="7" font="26">n−1</text>
<text top="741" left="281" width="14" height="9" font="17">; Ω</text>
<text top="741" left="309" width="7" height="9" font="17">S</text>
<text top="745" left="317" width="7" height="7" font="26">n</text>
<text top="741" left="327" width="3" height="9" font="17">:</text>
<text top="741" left="353" width="9" height="9" font="17">C</text>
<text top="745" left="362" width="7" height="7" font="26">n</text>
<text top="741" left="369" width="13" height="9" font="17">; Γ</text>
<text top="745" left="382" width="7" height="7" font="26">n</text>
<text top="758" left="72" width="21" height="9" font="17">Γ; Ω</text>
<text top="759" left="107" width="51" height="9" font="17">while E S</text>
<text top="761" left="158" width="5" height="7" font="26">1</text>
<text top="758" left="164" width="18" height="9" font="17">...S</text>
<text top="761" left="182" width="7" height="7" font="26">n</text>
<text top="758" left="193" width="3" height="9" font="17">:</text>
<text top="758" left="219" width="82" height="9" font="17">C ∪C ∪join(C</text>
<text top="761" left="301" width="5" height="7" font="26">1</text>
<text top="757" left="307" width="35" height="10" font="17">∪...∪C</text>
<text top="761" left="342" width="7" height="7" font="26">n</text>
<text top="758" left="350" width="57" height="9" font="17">, ∅); join(Γ</text>
<text top="761" left="407" width="7" height="7" font="26">n</text>
<text top="758" left="414" width="16" height="9" font="17">, ∅)</text>
<text top="800" left="166" width="167" height="12" font="4">FIGURE 14. Statements.</text>
<text top="834" left="85" width="344" height="13" font="2">Figure 15 shows the algorithm used to implement</text>
<text top="852" left="70" width="359" height="14" font="2">the join function. Each set holds either constraints</text>
<text top="870" left="70" width="359" height="13" font="2">(subtyping and assignment) or type variable bindings</text>
<text top="888" left="70" width="164" height="13" font="2">(X:T in environments).</text>
<text top="888" left="257" width="172" height="13" font="2">The algorithm has been</text>
<text top="906" left="70" width="359" height="14" font="2">deﬁned employing the compare and union operations</text>
<text top="924" left="70" width="248" height="13" font="2">deﬁned by the axioms in Figure 16.</text>
<text top="924" left="332" width="96" height="13" font="2">The algorithm</text>
<text top="942" left="70" width="359" height="13" font="2">takes elements of both sets, adding new union and</text>
<text top="960" left="70" width="290" height="13" font="2">intersection types [25] to the return set.</text>
<text top="960" left="382" width="47" height="13" font="2">It ﬁrst</text>
<text top="978" left="70" width="359" height="13" font="2">processes the elements in the ﬁrst set, and then those</text>
<text top="996" left="70" width="357" height="13" font="2">included in the second set but not in the ﬁrst one (÷).</text>
<text top="1014" left="85" width="344" height="13" font="2">As Figure 16 shows, comparisons between constraints</text>
<text top="1032" left="70" width="359" height="13" font="2">are based on the type in the constraint’s left-hand side.</text>
<text top="1050" left="70" width="359" height="13" font="2">This is because constraints are always generated with</text>
<text top="1068" left="70" width="359" height="13" font="2">a free type variable in its left-hand side. Deﬁnitions</text>
<text top="1086" left="70" width="359" height="14" font="2">of the compare and union operations in Figure 16</text>
<text top="1103" left="70" width="359" height="13" font="2">ensure that every constraint set will never have two</text>
<text top="1121" left="70" width="359" height="13" font="2">diﬀerent constraints with the same left-hand side type</text>
<text top="1139" left="70" width="359" height="13" font="2">variable. The only statement that generates subtyping</text>
<text top="1157" left="70" width="359" height="13" font="2">constraints with a particular type on the left-hand side</text>
<text top="141" left="464" width="46" height="9" font="17">join(Set</text>
<text top="144" left="510" width="5" height="7" font="26">1</text>
<text top="141" left="516" width="24" height="9" font="17">, Set</text>
<text top="144" left="540" width="5" height="7" font="26">2</text>
<text top="141" left="546" width="56" height="10" font="17">) ≡ Set in</text>
<text top="153" left="476" width="43" height="9" font="17">Set ← ∅</text>
<text top="164" left="476" width="36" height="10" font="17">∀ elem</text>
<text top="168" left="512" width="5" height="7" font="26">1</text>
<text top="164" left="521" width="30" height="10" font="17">∈ Set</text>
<text top="168" left="551" width="5" height="7" font="26">1</text>
<text top="177" left="488" width="50" height="9" font="17">if ∃ elem</text>
<text top="180" left="539" width="5" height="7" font="26">2</text>
<text top="176" left="548" width="30" height="10" font="17">∈ Set</text>
<text top="180" left="577" width="5" height="7" font="26">2</text>
<text top="176" left="583" width="82" height="9" font="17">, compare(elem</text>
<text top="180" left="665" width="5" height="7" font="26">1</text>
<text top="176" left="671" width="31" height="9" font="17">, elem</text>
<text top="180" left="703" width="5" height="7" font="26">2</text>
<text top="176" left="708" width="5" height="9" font="17">)</text>
<text top="188" left="500" width="131" height="9" font="17">Set ← Set ∪ union(elem</text>
<text top="192" left="631" width="5" height="7" font="26">1</text>
<text top="188" left="637" width="31" height="9" font="17">, elem</text>
<text top="192" left="668" width="5" height="7" font="26">2</text>
<text top="188" left="674" width="5" height="9" font="17">)</text>
<text top="201" left="488" width="22" height="9" font="17">else</text>
<text top="212" left="500" width="131" height="9" font="17">Set ← Set ∪ union(elem</text>
<text top="216" left="631" width="5" height="7" font="26">1</text>
<text top="212" left="637" width="5" height="9" font="17">)</text>
<text top="224" left="476" width="69" height="10" font="17">∀ elem ∈ Set</text>
<text top="228" left="545" width="5" height="7" font="26">2</text>
<text top="224" left="554" width="30" height="10" font="17">÷ Set</text>
<text top="228" left="584" width="5" height="7" font="26">1</text>
<text top="236" left="488" width="135" height="9" font="17">Set ← Set ∪ union(elem)</text>
<text top="260" left="464" width="18" height="9" font="17">Set</text>
<text top="264" left="482" width="5" height="7" font="26">1</text>
<text top="260" left="491" width="30" height="10" font="17">÷ Set</text>
<text top="264" left="521" width="5" height="7" font="26">2</text>
<text top="260" left="530" width="48" height="10" font="17">≡ Set in</text>
<text top="272" left="476" width="43" height="9" font="17">Set ← ∅</text>
<text top="283" left="476" width="36" height="10" font="17">∀ elem</text>
<text top="288" left="512" width="5" height="7" font="26">1</text>
<text top="283" left="521" width="30" height="10" font="17">∈ Set</text>
<text top="288" left="551" width="5" height="7" font="26">1</text>
<text top="297" left="488" width="11" height="9" font="17">if</text>
<text top="295" left="510" width="36" height="10" font="17">∃ elem</text>
<text top="300" left="545" width="5" height="7" font="26">2</text>
<text top="295" left="555" width="30" height="10" font="17">∈ Set</text>
<text top="300" left="584" width="5" height="7" font="26">2</text>
<text top="296" left="590" width="82" height="9" font="17">, compare(elem</text>
<text top="300" left="672" width="5" height="7" font="26">1</text>
<text top="296" left="678" width="31" height="9" font="17">, elem</text>
<text top="300" left="709" width="5" height="7" font="26">2</text>
<text top="296" left="715" width="5" height="9" font="17">)</text>
<text top="308" left="500" width="94" height="9" font="17">Set ← Set ∪ elem</text>
<text top="312" left="594" width="5" height="7" font="26">1</text>
<text top="349" left="537" width="213" height="12" font="4">FIGURE 15. The join algorithm.</text>
<text top="406" left="484" width="65" height="9" font="17">(J-Compare)</text>
<text top="417" left="484" width="60" height="9" font="17">compare(X</text>
<text top="421" left="545" width="5" height="7" font="26">1</text>
<text top="416" left="551" width="19" height="10" font="17">←T</text>
<text top="421" left="570" width="5" height="7" font="26">1</text>
<text top="417" left="576" width="15" height="9" font="17">, X</text>
<text top="421" left="591" width="5" height="7" font="26">1</text>
<text top="416" left="597" width="19" height="10" font="17">←T</text>
<text top="421" left="616" width="5" height="7" font="26">2</text>
<text top="417" left="622" width="5" height="9" font="17">)</text>
<text top="417" left="666" width="60" height="9" font="17">compare(X</text>
<text top="421" left="727" width="5" height="7" font="26">1</text>
<text top="416" left="733" width="16" height="10" font="17">≤T</text>
<text top="421" left="749" width="5" height="7" font="26">1</text>
<text top="417" left="755" width="15" height="9" font="17">, X</text>
<text top="421" left="770" width="5" height="7" font="26">1</text>
<text top="416" left="776" width="16" height="10" font="17">≤T</text>
<text top="421" left="792" width="5" height="7" font="26">2</text>
<text top="417" left="798" width="5" height="9" font="17">)</text>
<text top="456" left="467" width="60" height="9" font="17">compare(X</text>
<text top="460" left="528" width="5" height="7" font="26">1</text>
<text top="456" left="534" width="10" height="9" font="17">:T</text>
<text top="460" left="544" width="5" height="7" font="26">1</text>
<text top="456" left="550" width="15" height="9" font="17">, X</text>
<text top="460" left="565" width="5" height="7" font="26">1</text>
<text top="456" left="571" width="10" height="9" font="17">:T</text>
<text top="460" left="582" width="5" height="7" font="26">2</text>
<text top="456" left="587" width="5" height="9" font="17">)</text>
<text top="445" left="623" width="50" height="9" font="17">(J-Union)</text>
<text top="456" left="623" width="66" height="9" font="17">union(X←T</text>
<text top="460" left="690" width="5" height="7" font="26">1</text>
<text top="456" left="695" width="35" height="9" font="17">, X←T</text>
<text top="460" left="731" width="5" height="7" font="26">2</text>
<text top="456" left="736" width="57" height="9" font="17">) = X ← T</text>
<text top="460" left="793" width="5" height="7" font="26">1</text>
<text top="456" left="799" width="15" height="10" font="17">∨T</text>
<text top="460" left="814" width="5" height="7" font="26">2</text>
<text top="482" left="519" width="84" height="10" font="17">union(sta X≤T</text>
<text top="486" left="603" width="5" height="7" font="26">1</text>
<text top="482" left="609" width="53" height="10" font="17">, sta X≤T</text>
<text top="486" left="661" width="5" height="7" font="26">2</text>
<text top="482" left="667" width="75" height="10" font="17">) = X ≤ sta T</text>
<text top="486" left="742" width="5" height="7" font="26">1</text>
<text top="482" left="747" width="15" height="10" font="17">∧T</text>
<text top="486" left="763" width="5" height="7" font="26">2</text>
<text top="509" left="519" width="84" height="10" font="17">union(dyn X≤T</text>
<text top="512" left="603" width="5" height="7" font="26">1</text>
<text top="509" left="609" width="53" height="10" font="17">, dyn X≤T</text>
<text top="512" left="661" width="5" height="7" font="26">2</text>
<text top="509" left="667" width="75" height="10" font="17">) = X ≤ dyn T</text>
<text top="512" left="742" width="5" height="7" font="26">1</text>
<text top="508" left="747" width="15" height="10" font="17">∧T</text>
<text top="512" left="763" width="5" height="7" font="26">2</text>
<text top="535" left="472" width="58" height="9" font="17">union(X:T</text>
<text top="538" left="530" width="5" height="7" font="26">1</text>
<text top="535" left="536" width="27" height="9" font="17">, X:T</text>
<text top="538" left="562" width="5" height="7" font="26">2</text>
<text top="535" left="568" width="49" height="9" font="17">) = X : T</text>
<text top="538" left="617" width="5" height="7" font="26">1</text>
<text top="534" left="622" width="15" height="10" font="17">∨T</text>
<text top="538" left="637" width="5" height="7" font="26">2</text>
<text top="535" left="677" width="137" height="9" font="17">union(X←T ) = X←X∨T</text>
<text top="561" left="489" width="153" height="10" font="17">union(sta X≤T ) = sta X≤T</text>
<text top="561" left="686" width="112" height="10" font="17">union(dyn X≤T ) = ∅</text>
<text top="587" left="580" width="126" height="9" font="17">union(X:T ) = X : X∨T</text>
<text top="633" left="492" width="304" height="12" font="4">FIGURE 16. Comparison and union operations.</text>
<text top="690" left="464" width="173" height="14" font="2">is the return statement.</text>
<text top="690" left="656" width="167" height="13" font="2">However, this statement</text>
<text top="708" left="464" width="359" height="13" font="2">cannot appear in a control ﬂow statement because of</text>
<text top="726" left="464" width="322" height="13" font="2">the AST transformation described in Section 3.1.</text>
<text top="744" left="479" width="344" height="13" font="2">Joins of assignment constraints and type variable</text>
<text top="762" left="464" width="359" height="13" font="2">bindings create a union type consisting of the two types</text>
<text top="780" left="464" width="359" height="13" font="2">in each execution path. However, subtyping constraints</text>
<text top="798" left="464" width="268" height="13" font="2">are joined in a new intersection type.</text>
<text top="798" left="752" width="72" height="13" font="2">If a static</text>
<text top="816" left="464" width="194" height="13" font="2">reference should promote to T</text>
<text top="822" left="659" width="6" height="9" font="17">1</text>
<text top="816" left="670" width="153" height="13" font="2">in one ﬂow path and be</text>
<text top="834" left="464" width="93" height="13" font="2">a subtype of T</text>
<text top="839" left="558" width="6" height="9" font="17">2</text>
<text top="834" left="569" width="254" height="13" font="2">in the other, it must then be a subtype</text>
<text top="852" left="464" width="276" height="13" font="2">of both (subtype of the intersection type).</text>
<text top="870" left="479" width="344" height="14" font="2">The union function is also deﬁned for constraints</text>
<text top="888" left="464" width="359" height="13" font="2">or type variable bindings generated in only one of the</text>
<text top="906" left="464" width="359" height="13" font="2">optional execution paths (last four axioms in Figure 16).</text>
<text top="924" left="464" width="359" height="13" font="2">The union of a single static subtyping constraint is the</text>
<text top="942" left="464" width="359" height="13" font="2">own constraint, because static typing must check every</text>
<text top="960" left="464" width="359" height="13" font="2">possible ﬂow of execution. However, if the type variable</text>
<text top="978" left="464" width="359" height="13" font="2">is dynamic, there is no resulting constraint because it</text>
<text top="996" left="464" width="359" height="13" font="2">has been produced in a single optional execution path</text>
<text top="1014" left="464" width="359" height="13" font="2">and, since it is dynamic, the constraint fulﬁllment is</text>
<text top="1032" left="464" width="103" height="13" font="2">not mandatory.</text>
<text top="1032" left="583" width="241" height="13" font="2">In assignment constraints and type</text>
<text top="1050" left="464" width="359" height="13" font="2">variable bindings, the type to be bound is included in</text>
<text top="1068" left="464" width="359" height="13" font="2">the right-hand side of the assignment. This means that</text>
<text top="1086" left="464" width="359" height="13" font="2">the type variable will be bound to a new union type</text>
<text top="1103" left="464" width="359" height="13" font="2">including the type it was previously bound to, because</text>
<text top="1121" left="464" width="359" height="13" font="2">a new type could be assigned to the existing one in an</text>
<text top="1139" left="464" width="359" height="14" font="2">optional control ﬂow. As an example, the next ﬁeld of</text>
<text top="1157" left="464" width="139" height="14" font="2">the list variable (X</text>
<text top="1163" left="604" width="12" height="9" font="17">17</text>
<text top="1157" left="616" width="113" height="13" font="2">) has the type X</text>
<text top="1163" left="729" width="12" height="9" font="17">17</text>
<text top="1156" left="742" width="81" height="15" font="2">∨int in line</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1262" width="892">
<text top="93" left="70" width="15" height="13" font="2">12</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="146" left="76" width="38" height="9" font="17">(T-Inv)</text>
<text top="158" left="143" width="90" height="9" font="17">shif t(Γ(id)) : T p</text>
<text top="162" left="233" width="5" height="7" font="26">1</text>
<text top="157" left="242" width="56" height="10" font="17">× . . . × T p</text>
<text top="162" left="298" width="7" height="7" font="26">n</text>
<text top="157" left="309" width="22" height="10" font="17">→ T</text>
<text top="158" left="346" width="9" height="9" font="17">C</text>
<text top="169" left="78" width="68" height="10" font="17">∀ i ∈ [1, n], Γ</text>
<text top="173" left="146" width="4" height="7" font="26">i</text>
<text top="170" left="165" width="9" height="9" font="17">E</text>
<text top="173" left="174" width="4" height="7" font="26">i</text>
<text top="170" left="182" width="14" height="9" font="17">: T</text>
<text top="173" left="196" width="4" height="7" font="26">i</text>
<text top="170" left="213" width="9" height="9" font="17">C</text>
<text top="173" left="222" width="4" height="7" font="26">i</text>
<text top="170" left="227" width="13" height="9" font="17">; Γ</text>
<text top="173" left="240" width="17" height="7" font="26">i+1</text>
<text top="169" left="281" width="68" height="10" font="17">∀ i ∈ [1, n], T</text>
<text top="173" left="349" width="4" height="7" font="26">i</text>
<text top="170" left="358" width="6" height="9" font="17">/</text>
<text top="169" left="357" width="41" height="10" font="17">∈ f tv(Γ</text>
<text top="173" left="398" width="17" height="7" font="26">i+1</text>
<text top="170" left="416" width="5" height="9" font="17">)</text>
<text top="181" left="122" width="68" height="10" font="17">∀ i ∈ [1, n], Γ</text>
<text top="185" left="190" width="18" height="7" font="26">n+i</text>
<text top="183" left="223" width="27" height="9" font="17">sta T</text>
<text top="185" left="251" width="4" height="7" font="26">i</text>
<text top="181" left="259" width="28" height="10" font="17">≤ T p</text>
<text top="185" left="286" width="4" height="7" font="26">i</text>
<text top="182" left="304" width="9" height="9" font="17">C</text>
<text top="185" left="313" width="18" height="7" font="26">n+i</text>
<text top="182" left="332" width="13" height="9" font="17">; Γ</text>
<text top="185" left="344" width="31" height="7" font="26">n+i+1</text>
<text top="194" left="202" width="7" height="9" font="17">Γ</text>
<text top="197" left="209" width="24" height="7" font="26">2n+2</text>
<text top="194" left="250" width="22" height="9" font="17">C; Γ</text>
<text top="197" left="272" width="24" height="7" font="26">2n+1</text>
<text top="210" left="106" width="7" height="9" font="17">Γ</text>
<text top="213" left="114" width="5" height="7" font="26">1</text>
<text top="210" left="134" width="24" height="9" font="17">id(E</text>
<text top="213" left="158" width="5" height="7" font="26">1</text>
<text top="210" left="166" width="26" height="9" font="17">. . . E</text>
<text top="213" left="191" width="7" height="7" font="26">n</text>
<text top="210" left="199" width="22" height="9" font="17">) : Γ</text>
<text top="213" left="221" width="24" height="7" font="26">2n+2</text>
<text top="210" left="246" width="18" height="9" font="17">(T )</text>
<text top="210" left="277" width="9" height="9" font="17">C</text>
<text top="213" left="285" width="5" height="7" font="26">1</text>
<text top="209" left="294" width="48" height="10" font="17">∪ . . . ∪ C</text>
<text top="213" left="342" width="12" height="7" font="26">2n</text>
<text top="210" left="354" width="13" height="9" font="17">; Γ</text>
<text top="213" left="367" width="24" height="7" font="26">2n+2</text>
<text top="237" left="76" width="63" height="9" font="17">(T-FTVInv)</text>
<text top="249" left="143" width="90" height="9" font="17">shif t(Γ(id)) : T p</text>
<text top="252" left="233" width="5" height="7" font="26">1</text>
<text top="248" left="242" width="56" height="10" font="17">× . . . × T p</text>
<text top="252" left="298" width="7" height="7" font="26">n</text>
<text top="248" left="309" width="22" height="10" font="17">→ T</text>
<text top="249" left="346" width="9" height="9" font="17">C</text>
<text top="260" left="78" width="68" height="10" font="17">∀ i ∈ [1, n], Γ</text>
<text top="264" left="146" width="4" height="7" font="26">i</text>
<text top="261" left="165" width="9" height="9" font="17">E</text>
<text top="264" left="174" width="4" height="7" font="26">i</text>
<text top="261" left="182" width="14" height="9" font="17">: T</text>
<text top="264" left="196" width="4" height="7" font="26">i</text>
<text top="261" left="213" width="9" height="9" font="17">C</text>
<text top="264" left="222" width="4" height="7" font="26">i</text>
<text top="261" left="227" width="13" height="9" font="17">; Γ</text>
<text top="264" left="240" width="17" height="7" font="26">i+1</text>
<text top="260" left="281" width="68" height="10" font="17">∃ i ∈ [1, n], T</text>
<text top="264" left="349" width="4" height="7" font="26">i</text>
<text top="260" left="357" width="41" height="10" font="17">∈ f tv(Γ</text>
<text top="264" left="398" width="17" height="7" font="26">i+1</text>
<text top="261" left="416" width="5" height="9" font="17">)</text>
<text top="272" left="122" width="68" height="10" font="17">∀ i ∈ [1, n], Γ</text>
<text top="276" left="190" width="18" height="7" font="26">n+i</text>
<text top="274" left="223" width="27" height="9" font="17">sta T</text>
<text top="276" left="251" width="4" height="7" font="26">i</text>
<text top="272" left="259" width="28" height="10" font="17">≤ T p</text>
<text top="276" left="286" width="4" height="7" font="26">i</text>
<text top="273" left="304" width="9" height="9" font="17">C</text>
<text top="276" left="313" width="18" height="7" font="26">n+i</text>
<text top="273" left="332" width="13" height="9" font="17">; Γ</text>
<text top="276" left="344" width="31" height="7" font="26">n+i+1</text>
<text top="289" left="116" width="7" height="9" font="17">Γ</text>
<text top="292" left="123" width="5" height="7" font="26">1</text>
<text top="289" left="143" width="24" height="9" font="17">id(E</text>
<text top="292" left="167" width="5" height="7" font="26">1</text>
<text top="289" left="175" width="26" height="9" font="17">. . . E</text>
<text top="292" left="201" width="7" height="7" font="26">n</text>
<text top="289" left="208" width="22" height="9" font="17">) : T</text>
<text top="289" left="245" width="31" height="9" font="17">C ∪ C</text>
<text top="292" left="276" width="5" height="7" font="26">1</text>
<text top="288" left="284" width="48" height="10" font="17">∪ . . . ∪ C</text>
<text top="292" left="332" width="12" height="7" font="26">2n</text>
<text top="289" left="344" width="13" height="9" font="17">; Γ</text>
<text top="292" left="357" width="24" height="7" font="26">2n+1</text>
<text top="331" left="140" width="219" height="12" font="4">FIGURE 17. Function invocation.</text>
<text top="378" left="70" width="359" height="14" font="2">10 of Figure 4. This implies that the type of list2 in</text>
<text top="396" left="70" width="225" height="13" font="2">line 22 is converted from {data:X</text>
<text top="402" left="295" width="12" height="9" font="17">22</text>
<text top="396" left="308" width="53" height="13" font="2">, next:X</text>
<text top="402" left="361" width="12" height="9" font="17">18</text>
<text top="395" left="374" width="55" height="14" font="2">} (being</text>
<text top="414" left="70" width="28" height="13" font="2">Γ(X</text>
<text top="419" left="97" width="12" height="9" font="17">18</text>
<text top="414" left="110" width="63" height="13" font="2">):{data:X</text>
<text top="419" left="173" width="12" height="9" font="17">20</text>
<text top="414" left="186" width="53" height="13" font="2">, next:X</text>
<text top="419" left="239" width="12" height="9" font="17">21</text>
<text top="413" left="251" width="88" height="14" font="2">}) to {data:X</text>
<text top="419" left="339" width="12" height="9" font="17">22</text>
<text top="414" left="352" width="53" height="13" font="2">, next:X</text>
<text top="419" left="405" width="12" height="9" font="17">18</text>
<text top="413" left="419" width="10" height="14" font="2">∨</text>
<text top="433" left="70" width="35" height="12" font="2">int}.</text>
<text top="432" left="121" width="307" height="14" font="2">The result is that the next ﬁeld is changed</text>
<text top="450" left="70" width="359" height="14" font="2">because one possible ﬂow of execution in the clearList</text>
<text top="468" left="70" width="241" height="14" font="2">function may change its type to int.</text>
<text top="508" left="70" width="37" height="13" font="2">3.2.7.</text>
<text top="508" left="122" width="130" height="13" font="2">Function Invocation</text>
<text top="526" left="70" width="359" height="13" font="2">Figure 17 shows the two inference rules of function</text>
<text top="544" left="70" width="359" height="13" font="2">invocation. The diﬀerence is in the existence of free</text>
<text top="562" left="70" width="359" height="16" font="2">type variable arguments (T-Inv if there is no free type</text>
<text top="579" left="70" width="359" height="16" font="2">variable argument, and T-FTVInv otherwise). In both</text>
<text top="597" left="70" width="359" height="14" font="2">cases, the shift function takes a function type and</text>
<text top="615" left="70" width="359" height="13" font="2">returns an equivalent one, renaming the numbers of</text>
<text top="633" left="70" width="359" height="13" font="2">type variables to new fresh type variables. This process</text>
<text top="651" left="70" width="359" height="13" font="2">permits multiple invocations of the same function,</text>
<text top="669" left="70" width="359" height="13" font="2">creating new type variables for each function invocation.</text>
<text top="687" left="70" width="359" height="13" font="2">On each invocation, the types of the arguments are</text>
<text top="705" left="70" width="308" height="13" font="2">checked to be subtypes of the parameter types.</text>
<text top="723" left="85" width="344" height="13" font="2">If no argument is a free type variable, constraints</text>
<text top="741" left="70" width="262" height="13" font="2">resolution is performed. The judgment Γ</text>
<text top="746" left="332" width="6" height="9" font="17">s</text>
<text top="741" left="357" width="71" height="13" font="2">C, Γ means</text>
<text top="759" left="70" width="264" height="13" font="2">that under the Γ input environment, Γ</text>
<text top="764" left="334" width="6" height="9" font="17">s</text>
<text top="759" left="347" width="82" height="13" font="2">is a solution</text>
<text top="777" left="70" width="89" height="13" font="2">for C; i.e., Γ</text>
<text top="782" left="159" width="6" height="9" font="17">s</text>
<text top="777" left="173" width="255" height="13" font="2">holds all the substitutions to fulﬁll C</text>
<text top="795" left="70" width="175" height="13" font="2">under the Γ environment.</text>
<text top="795" left="258" width="170" height="13" font="2">In that case, the type of</text>
<text top="813" left="70" width="257" height="13" font="2">the function call is the substitution Γ</text>
<text top="818" left="327" width="28" height="9" font="17">2n+2</text>
<text top="813" left="356" width="72" height="13" font="2">(T ), where</text>
<text top="831" left="70" width="9" height="13" font="2">Γ</text>
<text top="836" left="79" width="28" height="9" font="17">2n+2</text>
<text top="831" left="114" width="314" height="13" font="2">is a solution for C. Under these circumstances,</text>
<text top="848" left="70" width="359" height="13" font="2">the C constraint set is solved and, hence, it is not</text>
<text top="866" left="70" width="359" height="13" font="2">included in the constraints generated by the function</text>
<text top="884" left="70" width="359" height="13" font="2">call. This shows how constraint resolution is part of</text>
<text top="902" left="70" width="359" height="13" font="2">the type inference process (it is not global, i.e., it</text>
<text top="920" left="70" width="359" height="13" font="2">is not performed after traversing the whole AST). If</text>
<text top="938" left="70" width="359" height="13" font="2">any argument is a free type variable, C is added to</text>
<text top="956" left="70" width="359" height="13" font="2">the constraint set produced by a function invocation</text>
<text top="974" left="70" width="164" height="16" font="2">expression (T-FTVInv).</text>
<text top="992" left="85" width="344" height="13" font="2">The constraint resolution algorithm implemented</text>
<text top="1010" left="70" width="359" height="13" font="2">is an adaptation of the algorithm deﬁned by Aiken</text>
<text top="1028" left="70" width="359" height="13" font="2">and Wimmers [28] that performs inclusion constraint</text>
<text top="1046" left="70" width="321" height="13" font="2">resolution using union and intersection types.</text>
<text top="1046" left="411" width="17" height="13" font="2">Its</text>
<text top="1064" left="70" width="292" height="13" font="2">detailed description can be consulted in [36].</text>
<text top="1103" left="70" width="37" height="13" font="2">3.2.8.</text>
<text top="1103" left="122" width="242" height="13" font="2">Converting Implicit to Explicit Types</text>
<text top="1121" left="70" width="359" height="13" font="2">Our language deﬁnes an automatic conversion of</text>
<text top="1139" left="70" width="359" height="13" font="2">dynamic implicitly typed union types to explicit</text>
<text top="1157" left="70" width="359" height="13" font="2">(particular) types (in assignments and function calls).</text>
<text top="135" left="464" width="359" height="13" font="2">When the union type is static, the subtyping rules</text>
<text top="153" left="464" width="359" height="13" font="2">described in Section 3.2.4 require types in the union</text>
<text top="171" left="464" width="359" height="13" font="2">type to promote to the explicit type. However, if the</text>
<text top="189" left="464" width="359" height="13" font="2">implicit type is dynamic, the conversion is too lenient</text>
<text top="207" left="464" width="359" height="13" font="2">because only one single promotion is necessary to allow</text>
<text top="225" left="464" width="359" height="13" font="2">the conversion. This is why a static promotion is forced</text>
<text top="243" left="464" width="359" height="16" font="2">in both assignments (rule T-Assign in Figure 13) and</text>
<text top="261" left="464" width="359" height="16" font="2">function invocations (rules T-Inv and T-FTVInv in</text>
<text top="279" left="464" width="359" height="14" font="2">Figure 17). As an example, the din variable (typed</text>
<text top="298" left="464" width="359" height="12" font="2">dyn int∨bool in line 20 of Figure 12) is passed as</text>
<text top="314" left="464" width="359" height="14" font="2">an argument to the increment function that explicitly</text>
<text top="332" left="464" width="276" height="14" font="2">requires its value parameter to be int.</text>
<text top="332" left="756" width="67" height="13" font="2">Therefore,</text>
<text top="350" left="464" width="359" height="13" font="2">a compilation error is generated even though the</text>
<text top="368" left="464" width="359" height="14" font="2">argument is dynamic, because the value parameter is</text>
<text top="386" left="464" width="237" height="13" font="2">explicitly typed (and, hence, static).</text>
<text top="428" left="464" width="13" height="13" font="2">4.</text>
<text top="428" left="495" width="217" height="13" font="2">ERASURE TRANSLATION</text>
<text top="458" left="464" width="281" height="13" font="2">The objective of this section is twofold.</text>
<text top="458" left="764" width="59" height="13" font="2">First, to</text>
<text top="476" left="464" width="359" height="13" font="2">describe the translation templates used to generate</text>
<text top="494" left="464" width="359" height="16" font="2">code for the .Net platform employing the static type</text>
<text top="512" left="464" width="359" height="13" font="2">information gathered by the compiler. Second, based</text>
<text top="530" left="464" width="359" height="13" font="2">on the semantics of C# [37], to describe the erasure</text>
<text top="547" left="464" width="269" height="13" font="2">semantics of the minimal core of StaDyn.</text>
<text top="566" left="479" width="344" height="13" font="2">The StaDyn core may be translated into C# following</text>
<text top="583" left="464" width="248" height="13" font="2">either of two implementation styles:</text>
<text top="583" left="726" width="97" height="13" font="2">ﬁrst, by type-</text>
<text top="601" left="464" width="359" height="13" font="2">passing, augmenting the runtime system to carry</text>
<text top="619" left="464" width="359" height="13" font="2">information about type parameters; second, by erasure,</text>
<text top="637" left="464" width="359" height="13" font="2">removing all information about type parameters at</text>
<text top="655" left="464" width="88" height="13" font="2">runtime [31].</text>
<text top="655" left="571" width="252" height="13" font="2">We have used the second approach,</text>
<text top="673" left="464" width="359" height="13" font="2">giving an erasure mapping from the StaDyn minimal</text>
<text top="691" left="464" width="359" height="13" font="2">core into C#. This style corresponds to the current</text>
<text top="709" left="464" width="359" height="13" font="2">implementation of StaDyn, which is compiled into</text>
<text top="727" left="464" width="359" height="16" font="2">the .Net platform by generating IL code (before the</text>
<text top="745" left="464" width="359" height="13" font="2">executable ﬁles), maintaining no information about</text>
<text top="763" left="464" width="359" height="13" font="2">type parameters at runtime—here we describe the</text>
<text top="781" left="464" width="359" height="13" font="2">translation to C# for simplicity. Figure 18 shows an</text>
<text top="799" left="464" width="359" height="13" font="2">example translation that will be used throughout this</text>
<text top="817" left="464" width="359" height="13" font="2">section. The StaDyn core source code is shown on the</text>
<text top="834" left="464" width="359" height="13" font="2">left, while the corresponding output C# program is</text>
<text top="852" left="464" width="147" height="13" font="2">displayed on the right.</text>
<text top="871" left="479" width="344" height="13" font="2">The translation is performed traversing the AST.</text>
<text top="888" left="464" width="359" height="13" font="2">This traversal is performed after type checking, where</text>
<text top="906" left="464" width="359" height="13" font="2">the AST nodes were annotated with their types and</text>
<text top="924" left="464" width="359" height="13" font="2">a copy of the state of the type environment (Γ) and</text>
<text top="942" left="464" width="359" height="13" font="2">context (Ω) in the conclusion of each typing rule</text>
<text top="960" left="464" width="67" height="13" font="2">(written Γ</text>
<text top="966" left="532" width="25" height="9" font="17">node</text>
<text top="960" left="563" width="40" height="13" font="2">and Ω</text>
<text top="966" left="603" width="25" height="9" font="17">node</text>
<text top="960" left="629" width="10" height="13" font="2">).</text>
<text top="1002" left="464" width="27" height="13" font="2">4.1.</text>
<text top="1002" left="508" width="102" height="13" font="2">Type Erasure</text>
<text top="1032" left="464" width="359" height="13" font="2">The erasure of a type in the StaDyn core is the</text>
<text top="1050" left="464" width="359" height="13" font="2">corresponding C# type that we will use in the code</text>
<text top="1068" left="464" width="128" height="13" font="2">generation process.</text>
<text top="1068" left="610" width="213" height="13" font="2">Since type erasures depend on</text>
<text top="1086" left="464" width="204" height="13" font="2">environments (Γ), we write |T |</text>
<text top="1091" left="669" width="7" height="9" font="17">Γ</text>
<text top="1086" left="682" width="141" height="13" font="2">for the erasure of the</text>
<text top="1103" left="464" width="359" height="13" font="2">type T with respect to the environment Γ. Translation</text>
<text top="1121" left="464" width="359" height="13" font="2">rules insert type casts when necessary using the type</text>
<text top="1139" left="464" width="359" height="13" font="2">information obtained by the compiler, and omitting</text>
<text top="1157" left="464" width="359" height="13" font="2">them when it is trivially safe to do so, e.g., when the</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="39" size="9" family="Courier" color="#7f7f7f"/>
	<fontspec id="40" size="9" family="Courier" color="#2a91af"/>
	<fontspec id="41" size="9" family="Times" color="#7f7f7f"/>
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="808" width="15" height="13" font="2">13</text>
<text top="131" left="73" width="7" height="9" font="15"> </text>
<text top="131" left="343" width="27" height="9" font="39">01: </text>
<text top="131" left="367" width="34" height="9" font="14">using</text>
<text top="131" left="401" width="54" height="9" font="15"> System </text>
<text top="144" left="73" width="7" height="9" font="15"> </text>
<text top="144" left="343" width="27" height="9" font="39">02: </text>
<text top="144" left="367" width="34" height="9" font="14">class</text>
<text top="144" left="401" width="7" height="9" font="15"> </text>
<text top="144" left="407" width="95" height="9" font="40">AC_int_x_int_y</text>
<text top="144" left="502" width="20" height="9" font="15"> { </text>
<text top="156" left="73" width="7" height="9" font="15"> </text>
<text top="156" left="343" width="27" height="9" font="39">03: </text>
<text top="156" left="367" width="14" height="9" font="15">  </text>
<text top="156" left="380" width="41" height="9" font="14">public</text>
<text top="156" left="421" width="7" height="9" font="15"> </text>
<text top="156" left="428" width="20" height="9" font="14">int</text>
<text top="156" left="448" width="20" height="9" font="15"> x;</text>
<text top="156" left="469" width="41" height="9" font="14">public</text>
<text top="156" left="509" width="7" height="9" font="15"> </text>
<text top="156" left="516" width="20" height="9" font="14">int</text>
<text top="156" left="536" width="20" height="9" font="15"> y;</text>
<text top="156" left="557" width="14" height="9" font="14">  </text>
<text top="169" left="73" width="7" height="9" font="15"> </text>
<text top="169" left="343" width="27" height="9" font="39">04: </text>
<text top="169" left="367" width="7" height="9" font="15">}</text>
<text top="169" left="373" width="7" height="9" font="14"> </text>
<text top="182" left="73" width="7" height="9" font="15"> </text>
<text top="182" left="343" width="27" height="9" font="39">05: </text>
<text top="182" left="367" width="34" height="9" font="14">class</text>
<text top="182" left="401" width="7" height="9" font="15"> </text>
<text top="182" left="407" width="136" height="9" font="40">AC_int_x_int_y_int_z</text>
<text top="182" left="543" width="27" height="9" font="15"> {  </text>
<text top="195" left="73" width="7" height="9" font="15"> </text>
<text top="195" left="343" width="27" height="9" font="39">06: </text>
<text top="195" left="367" width="14" height="9" font="15">  </text>
<text top="195" left="380" width="41" height="9" font="14">public</text>
<text top="195" left="421" width="7" height="9" font="15"> </text>
<text top="195" left="428" width="20" height="9" font="14">int</text>
<text top="195" left="448" width="27" height="9" font="15"> x; </text>
<text top="195" left="475" width="41" height="9" font="14">public</text>
<text top="195" left="516" width="7" height="9" font="15"> </text>
<text top="195" left="523" width="20" height="9" font="14">int</text>
<text top="195" left="543" width="27" height="9" font="15"> y; </text>
<text top="195" left="570" width="41" height="9" font="14">public</text>
<text top="195" left="611" width="7" height="9" font="15"> </text>
<text top="195" left="618" width="20" height="9" font="14">int</text>
<text top="195" left="638" width="34" height="9" font="15"> z;  </text>
<text top="207" left="73" width="7" height="9" font="15"> </text>
<text top="207" left="343" width="27" height="9" font="39">07: </text>
<text top="207" left="367" width="14" height="9" font="15">} </text>
<text top="220" left="73" width="7" height="9" font="15"> </text>
<text top="220" left="343" width="27" height="9" font="39">08: </text>
<text top="220" left="367" width="41" height="9" font="14">public</text>
<text top="220" left="407" width="7" height="9" font="15"> </text>
<text top="220" left="414" width="34" height="9" font="14">class</text>
<text top="220" left="448" width="7" height="9" font="15"> </text>
<text top="220" left="455" width="61" height="9" font="40">MainClass</text>
<text top="220" left="516" width="20" height="9" font="15"> { </text>
<text top="233" left="73" width="48" height="9" font="14">dyn var</text>
<text top="233" left="120" width="61" height="9" font="15"> point2D(</text>
<text top="233" left="181" width="20" height="9" font="14">int</text>
<text top="233" left="202" width="27" height="9" font="15"> x, </text>
<text top="233" left="229" width="20" height="9" font="14">int</text>
<text top="233" left="249" width="41" height="9" font="15"> y) { </text>
<text top="233" left="343" width="27" height="9" font="39">09: </text>
<text top="233" left="367" width="14" height="9" font="15">  </text>
<text top="233" left="380" width="41" height="9" font="14">static</text>
<text top="233" left="421" width="163" height="9" font="15"> AC_int_x_int_y point2D(</text>
<text top="233" left="584" width="20" height="9" font="14">int</text>
<text top="233" left="604" width="27" height="9" font="15"> x, </text>
<text top="233" left="631" width="20" height="9" font="14">int</text>
<text top="233" left="652" width="41" height="9" font="15"> y) { </text>
<text top="246" left="73" width="7" height="9" font="15"> </text>
<text top="246" left="343" width="27" height="9" font="39">10: </text>
<text top="246" left="367" width="27" height="9" font="15">    </text>
<text top="246" left="394" width="41" height="9" font="14">object</text>
<text top="246" left="435" width="54" height="9" font="15"> _temp; </text>
<text top="259" left="73" width="14" height="9" font="15">  </text>
<text top="259" left="86" width="41" height="9" font="14">return</text>
<text top="259" left="127" width="7" height="9" font="15"> </text>
<text top="259" left="134" width="20" height="9" font="14">new</text>
<text top="259" left="154" width="95" height="9" font="15"> { x=x, y=y}; </text>
<text top="259" left="343" width="27" height="9" font="39">11: </text>
<text top="259" left="367" width="27" height="9" font="15">    </text>
<text top="259" left="394" width="41" height="9" font="14">return</text>
<text top="259" left="435" width="7" height="9" font="15"> </text>
<text top="259" left="441" width="20" height="9" font="14">new</text>
<text top="259" left="462" width="190" height="9" font="15"> AC_int_x_int_y {x=x, y=y}; </text>
<text top="272" left="73" width="14" height="9" font="15">} </text>
<text top="272" left="343" width="27" height="9" font="39">12: </text>
<text top="272" left="367" width="27" height="9" font="15">  } </text>
<text top="284" left="73" width="48" height="9" font="14">dyn var</text>
<text top="284" left="120" width="61" height="9" font="15"> point3D(</text>
<text top="284" left="181" width="20" height="9" font="14">int</text>
<text top="284" left="202" width="27" height="9" font="15"> x, </text>
<text top="284" left="229" width="20" height="9" font="14">int</text>
<text top="284" left="249" width="27" height="9" font="15"> y, </text>
<text top="284" left="276" width="20" height="9" font="14">int</text>
<text top="284" left="297" width="41" height="9" font="15"> z) { </text>
<text top="284" left="343" width="27" height="9" font="39">13: </text>
<text top="284" left="367" width="54" height="9" font="14">  static</text>
<text top="284" left="421" width="204" height="9" font="15"> AC_int_x_int_y_int_z point3D(</text>
<text top="284" left="624" width="20" height="9" font="14">int</text>
<text top="284" left="645" width="27" height="9" font="15"> x, </text>
<text top="284" left="672" width="20" height="9" font="14">int</text>
<text top="284" left="692" width="27" height="9" font="15"> y, </text>
<text top="284" left="719" width="20" height="9" font="14">int</text>
<text top="284" left="740" width="41" height="9" font="15"> z) { </text>
<text top="297" left="73" width="7" height="9" font="15"> </text>
<text top="297" left="343" width="27" height="9" font="39">14: </text>
<text top="297" left="367" width="27" height="9" font="15">    </text>
<text top="297" left="394" width="41" height="9" font="14">object</text>
<text top="297" left="435" width="54" height="9" font="15"> _temp; </text>
<text top="310" left="73" width="14" height="9" font="15">  </text>
<text top="310" left="86" width="41" height="9" font="14">return</text>
<text top="310" left="127" width="7" height="9" font="15"> </text>
<text top="310" left="134" width="20" height="9" font="14">new</text>
<text top="310" left="154" width="129" height="9" font="15"> { x=x, y=y, z=z}; </text>
<text top="310" left="343" width="27" height="9" font="39">15: </text>
<text top="310" left="367" width="27" height="9" font="15">    </text>
<text top="310" left="394" width="41" height="9" font="14">return</text>
<text top="310" left="435" width="7" height="9" font="15"> </text>
<text top="310" left="441" width="20" height="9" font="14">new</text>
<text top="310" left="462" width="265" height="9" font="15"> AC_int_x_int_y_int_z {x=x, y=y, z=z}; </text>
<text top="323" left="73" width="14" height="9" font="15">} </text>
<text top="323" left="343" width="27" height="9" font="39">16: </text>
<text top="323" left="367" width="27" height="9" font="15">  } </text>
<text top="335" left="73" width="48" height="9" font="14">dyn var</text>
<text top="335" left="120" width="47" height="9" font="15"> point(</text>
<text top="335" left="168" width="47" height="9" font="14">dyn var</text>
<text top="335" left="215" width="41" height="9" font="15"> dim, </text>
<text top="335" left="256" width="47" height="9" font="14">dyn var</text>
<text top="335" left="303" width="27" height="9" font="15"> x, </text>
<text top="348" left="73" width="142" height="9" font="14">              dyn var</text>
<text top="348" left="215" width="27" height="9" font="15"> y, </text>
<text top="348" left="242" width="48" height="9" font="14">dyn var</text>
<text top="348" left="290" width="41" height="9" font="15"> z) { </text>
<text top="335" left="343" width="27" height="9" font="39">17: </text>
<text top="335" left="367" width="54" height="9" font="14">  static</text>
<text top="335" left="421" width="7" height="9" font="15"> </text>
<text top="335" left="428" width="41" height="9" font="14">object</text>
<text top="335" left="469" width="47" height="9" font="15"> point(</text>
<text top="335" left="516" width="20" height="9" font="14">int</text>
<text top="335" left="536" width="41" height="9" font="15"> dim, </text>
<text top="335" left="577" width="20" height="9" font="14">int</text>
<text top="335" left="597" width="27" height="9" font="15"> x, </text>
<text top="335" left="624" width="20" height="9" font="14">int</text>
<text top="335" left="645" width="27" height="9" font="15"> y, </text>
<text top="335" left="672" width="20" height="9" font="14">int</text>
<text top="335" left="692" width="41" height="9" font="15"> z) { </text>
<text top="361" left="73" width="7" height="9" font="15"> </text>
<text top="361" left="343" width="27" height="9" font="39">18: </text>
<text top="361" left="367" width="27" height="9" font="15">    </text>
<text top="361" left="394" width="41" height="9" font="14">object</text>
<text top="361" left="435" width="54" height="9" font="15"> _temp; </text>
<text top="374" left="73" width="14" height="9" font="15">  </text>
<text top="374" left="86" width="47" height="9" font="14">dyn var</text>
<text top="374" left="134" width="61" height="9" font="15"> result; </text>
<text top="374" left="343" width="27" height="9" font="39">19: </text>
<text top="374" left="367" width="27" height="9" font="15">    </text>
<text top="374" left="394" width="41" height="9" font="14">object</text>
<text top="374" left="435" width="61" height="9" font="15"> result; </text>
<text top="387" left="73" width="14" height="9" font="15">  </text>
<text top="387" left="86" width="14" height="9" font="14">if</text>
<text top="387" left="100" width="68" height="9" font="15"> (dim==2) </text>
<text top="387" left="343" width="27" height="9" font="39">20: </text>
<text top="387" left="367" width="27" height="9" font="15">    </text>
<text top="387" left="394" width="14" height="9" font="14">if</text>
<text top="387" left="407" width="81" height="9" font="15"> (dim == 2) </text>
<text top="400" left="73" width="183" height="9" font="15">    result = point2D(x,y); </text>
<text top="400" left="343" width="27" height="9" font="39">21: </text>
<text top="400" left="367" width="203" height="9" font="15">      result = point2D(x, y); </text>
<text top="412" left="73" width="14" height="9" font="15">  </text>
<text top="412" left="86" width="34" height="9" font="14">else </text>
<text top="412" left="343" width="27" height="9" font="39">22: </text>
<text top="412" left="367" width="27" height="9" font="15">    </text>
<text top="412" left="394" width="27" height="9" font="14">else</text>
<text top="412" left="421" width="7" height="9" font="15"> </text>
<text top="425" left="73" width="197" height="9" font="15">    result = point3D(x,y,z); </text>
<text top="425" left="343" width="27" height="9" font="39">23: </text>
<text top="425" left="367" width="224" height="9" font="15">      result = point3D(x, y, z); </text>
<text top="438" left="73" width="14" height="9" font="15">  </text>
<text top="438" left="86" width="41" height="9" font="14">return</text>
<text top="438" left="127" width="61" height="9" font="15"> result; </text>
<text top="438" left="343" width="27" height="9" font="39">24: </text>
<text top="438" left="367" width="68" height="9" font="14">    return</text>
<text top="438" left="435" width="61" height="9" font="15"> result; </text>
<text top="451" left="73" width="14" height="9" font="15">} </text>
<text top="451" left="343" width="27" height="9" font="39">25: </text>
<text top="451" left="367" width="27" height="9" font="15">  } </text>
<text top="464" left="73" width="27" height="9" font="14">void</text>
<text top="464" left="100" width="68" height="9" font="15"> main() { </text>
<text top="464" left="343" width="27" height="9" font="39">26: </text>
<text top="464" left="367" width="14" height="9" font="15">  </text>
<text top="464" left="380" width="41" height="9" font="14">public</text>
<text top="464" left="421" width="7" height="9" font="15"> </text>
<text top="464" left="428" width="41" height="9" font="14">static</text>
<text top="464" left="469" width="7" height="9" font="15"> </text>
<text top="464" left="475" width="27" height="9" font="14">void</text>
<text top="464" left="502" width="68" height="9" font="15"> Main() { </text>
<text top="476" left="73" width="7" height="9" font="15"> </text>
<text top="476" left="343" width="27" height="9" font="39">27: </text>
<text top="476" left="367" width="27" height="9" font="15">    </text>
<text top="476" left="394" width="41" height="9" font="14">object</text>
<text top="476" left="435" width="54" height="9" font="15"> _temp; </text>
<text top="489" left="73" width="14" height="9" font="15">  </text>
<text top="489" left="86" width="20" height="9" font="14">var</text>
<text top="489" left="107" width="41" height="9" font="15"> sta; </text>
<text top="489" left="343" width="27" height="9" font="39">28: </text>
<text top="489" left="367" width="27" height="9" font="15">    </text>
<text top="489" left="394" width="41" height="9" font="14">object</text>
<text top="489" left="435" width="41" height="9" font="15"> sta; </text>
<text top="502" left="73" width="14" height="9" font="15">  </text>
<text top="502" left="86" width="47" height="9" font="14">dyn var</text>
<text top="502" left="134" width="41" height="9" font="15"> din; </text>
<text top="502" left="343" width="27" height="9" font="39">29: </text>
<text top="502" left="367" width="27" height="9" font="15">    </text>
<text top="502" left="394" width="41" height="9" font="14">object</text>
<text top="502" left="435" width="41" height="9" font="15"> din; </text>
<text top="515" left="73" width="183" height="9" font="15">  sta = point(2, 0, 4, 3); </text>
<text top="515" left="343" width="27" height="9" font="39">30: </text>
<text top="515" left="367" width="197" height="9" font="15">    sta = point(2, 0, 4, 3); </text>
<text top="528" left="73" width="183" height="9" font="15">  din = point(3, 0, 4, 3); </text>
<text top="528" left="343" width="27" height="9" font="39">31: </text>
<text top="528" left="367" width="197" height="9" font="15">    din = point(3, 0, 4, 3); </text>
<text top="541" left="73" width="68" height="9" font="15">  sta.x + </text>
<text top="541" left="343" width="27" height="9" font="39">32: </text>
<text top="541" left="367" width="305" height="9" font="15">    _temp = ((_temp=sta) is AC_int_x_int_y ? </text>
<text top="553" left="367" width="346" height="9" font="15">                (int)(((AC_int_x_int_y)_temp).x) : </text>
<text top="566" left="367" width="380" height="9" font="15">            (int)(((AC_int_x_int_y_int_z)_temp).x) ) +  </text>
<text top="579" left="73" width="116" height="9" font="15">          din.y  </text>
<text top="579" left="343" width="27" height="9" font="39">33: </text>
<text top="579" left="367" width="312" height="9" font="15">            ((_temp=din) is AC_int_x_int_y ?  </text>
<text top="592" left="367" width="353" height="9" font="15">                (int)(((AC_int_x_int_y)_temp).y) :  </text>
<text top="605" left="367" width="305" height="9" font="15">            _temp is AC_int_x_int_y_int_z ?  </text>
<text top="617" left="367" width="387" height="9" font="15">                (int)(((AC_int_x_int_y_int_z)_temp).y) : </text>
<text top="630" left="367" width="461" height="9" font="15">            (int)(_temp.GetType().GetField(&#34;y&#34;).GetValue(_temp))) * </text>
<text top="643" left="73" width="170" height="9" font="15">                * din.z; </text>
<text top="643" left="343" width="27" height="9" font="39">34: </text>
<text top="643" left="367" width="285" height="9" font="15">            ((AC_int_x_int_y_int_z)din).z;</text>
<text top="642" left="652" width="4" height="11" font="19"> </text>
<text top="656" left="73" width="7" height="9" font="15">}</text>
<text top="654" left="80" width="4" height="11" font="19"> </text>
<text top="656" left="343" width="27" height="9" font="39">35: </text>
<text top="656" left="367" width="20" height="9" font="15">  }</text>
<text top="654" left="387" width="4" height="11" font="19"> </text>
<text top="669" left="206" width="4" height="11" font="19"> </text>
<text top="669" left="343" width="27" height="9" font="39">36: </text>
<text top="669" left="367" width="7" height="9" font="15">}</text>
<text top="667" left="373" width="4" height="11" font="19"> </text>
<text top="682" left="146" width="125" height="11" font="19">StaDyn core (source) </text>
<text top="682" left="353" width="4" height="11" font="41"> </text>
<text top="682" left="560" width="98" height="11" font="19">C# (destination) </text>
<text top="696" left="73" width="7" height="9" font="39"> </text>
<text top="720" left="258" width="377" height="12" font="4">FIGURE 18. Example translation from StaDyn core to C#.</text>
<text top="770" left="70" width="359" height="14" font="2">top type in C#, object, is the erased type that an</text>
<text top="788" left="70" width="153" height="13" font="2">expression should have.</text>
<text top="847" left="70" width="29" height="13" font="4">|int|</text>
<text top="852" left="99" width="7" height="8" font="18">Γ</text>
<text top="848" left="110" width="36" height="12" font="4">= int</text>
<text top="847" left="164" width="36" height="13" font="4">|bool|</text>
<text top="852" left="200" width="7" height="8" font="18">Γ</text>
<text top="848" left="212" width="43" height="12" font="4">= bool</text>
<text top="847" left="273" width="36" height="13" font="4">|void|</text>
<text top="852" left="309" width="7" height="8" font="18">Γ</text>
<text top="848" left="320" width="43" height="12" font="4">= void</text>
<text top="871" left="70" width="67" height="13" font="4">|Array(T )|</text>
<text top="876" left="137" width="7" height="8" font="18">Γ</text>
<text top="872" left="148" width="32" height="12" font="4">= |T |</text>
<text top="876" left="180" width="7" height="8" font="18">Γ</text>
<text top="873" left="188" width="18" height="11" font="4">[ ]</text>
<text top="896" left="194" width="69" height="12" font="4">X ∈ f tv(Γ)</text>
<text top="913" left="136" width="45" height="13" font="4">|sta X|</text>
<text top="918" left="181" width="7" height="8" font="18">Γ</text>
<text top="914" left="193" width="60" height="12" font="4">= |dyn X|</text>
<text top="918" left="252" width="7" height="8" font="18">Γ</text>
<text top="914" left="264" width="57" height="12" font="4">= object</text>
<text top="938" left="195" width="51" height="12" font="4">Γ(X) : T</text>
<text top="955" left="138" width="45" height="13" font="4">|sta X|</text>
<text top="960" left="183" width="7" height="8" font="18">Γ</text>
<text top="955" left="195" width="60" height="12" font="4">= |dyn X|</text>
<text top="960" left="255" width="7" height="8" font="18">Γ</text>
<text top="955" left="266" width="32" height="12" font="4">= |T |</text>
<text top="960" left="298" width="7" height="8" font="18">Γ</text>
<text top="979" left="70" width="37" height="13" font="4">|sta T</text>
<text top="984" left="107" width="5" height="8" font="18">1</text>
<text top="979" left="116" width="52" height="13" font="4">∨ . . . ∨ T</text>
<text top="984" left="168" width="7" height="8" font="18">n</text>
<text top="979" left="176" width="4" height="13" font="4">|</text>
<text top="984" left="179" width="7" height="8" font="18">Γ</text>
<text top="979" left="191" width="52" height="12" font="4">= |dyn T</text>
<text top="984" left="242" width="5" height="8" font="18">1</text>
<text top="979" left="252" width="52" height="13" font="4">∨ . . . ∨ T</text>
<text top="984" left="303" width="7" height="8" font="18">n</text>
<text top="979" left="311" width="4" height="13" font="4">|</text>
<text top="984" left="315" width="7" height="8" font="18">Γ</text>
<text top="979" left="326" width="57" height="12" font="4">= object</text>
<text top="1003" left="70" width="45" height="13" font="4">|sta [id</text>
<text top="1008" left="114" width="5" height="8" font="18">1</text>
<text top="1003" left="121" width="12" height="12" font="4">:T</text>
<text top="1008" left="133" width="5" height="8" font="18">1</text>
<text top="1003" left="139" width="43" height="12" font="4">, . . . , id</text>
<text top="1008" left="181" width="7" height="8" font="18">n</text>
<text top="1003" left="189" width="12" height="12" font="4">:T</text>
<text top="1008" left="201" width="7" height="8" font="18">n</text>
<text top="1003" left="209" width="8" height="12" font="4">]|</text>
<text top="1008" left="216" width="7" height="8" font="18">Γ</text>
<text top="1003" left="228" width="59" height="12" font="4">= |dyn [id</text>
<text top="1008" left="287" width="5" height="8" font="18">1</text>
<text top="1003" left="297" width="16" height="12" font="4">: T</text>
<text top="1008" left="313" width="5" height="8" font="18">1</text>
<text top="1003" left="319" width="43" height="12" font="4">, . . . , id</text>
<text top="1008" left="361" width="7" height="8" font="18">n</text>
<text top="1003" left="373" width="16" height="12" font="4">: T</text>
<text top="1008" left="389" width="7" height="8" font="18">n</text>
<text top="1003" left="396" width="8" height="12" font="4">]|</text>
<text top="1008" left="404" width="7" height="8" font="18">Γ</text>
<text top="1020" left="228" width="57" height="12" font="4">= object</text>
<text top="1043" left="70" width="48" height="13" font="4">|sta {id</text>
<text top="1048" left="118" width="5" height="8" font="18">1</text>
<text top="1044" left="124" width="12" height="12" font="4">:T</text>
<text top="1048" left="136" width="5" height="8" font="18">1</text>
<text top="1044" left="142" width="43" height="12" font="4">, . . . , id</text>
<text top="1048" left="185" width="7" height="8" font="18">n</text>
<text top="1044" left="192" width="12" height="12" font="4">:T</text>
<text top="1048" left="204" width="7" height="8" font="18">n</text>
<text top="1043" left="212" width="11" height="13" font="4">}|</text>
<text top="1048" left="222" width="7" height="8" font="18">Γ</text>
<text top="1044" left="234" width="62" height="12" font="4">= |dyn {id</text>
<text top="1048" left="296" width="5" height="8" font="18">1</text>
<text top="1044" left="302" width="12" height="12" font="4">:T</text>
<text top="1048" left="314" width="5" height="8" font="18">1</text>
<text top="1044" left="320" width="43" height="12" font="4">, . . . , id</text>
<text top="1048" left="363" width="7" height="8" font="18">n</text>
<text top="1044" left="371" width="12" height="12" font="4">:T</text>
<text top="1048" left="383" width="7" height="8" font="18">n</text>
<text top="1043" left="390" width="11" height="13" font="4">}|</text>
<text top="1048" left="401" width="7" height="8" font="18">Γ</text>
<text top="1060" left="234" width="46" height="12" font="4">= AC |T</text>
<text top="1065" left="280" width="5" height="8" font="18">1</text>
<text top="1059" left="286" width="4" height="13" font="4">|</text>
<text top="1065" left="290" width="7" height="8" font="18">Γ</text>
<text top="1060" left="302" width="12" height="12" font="4">id</text>
<text top="1065" left="314" width="5" height="8" font="18">1</text>
<text top="1060" left="327" width="35" height="12" font="4">. . . |T</text>
<text top="1065" left="363" width="7" height="8" font="18">n</text>
<text top="1059" left="370" width="4" height="13" font="4">|</text>
<text top="1065" left="374" width="7" height="8" font="18">Γ</text>
<text top="1060" left="387" width="12" height="12" font="4">id</text>
<text top="1065" left="399" width="7" height="8" font="18">n</text>
<text top="1084" left="70" width="53" height="12" font="4">where id</text>
<text top="1089" left="123" width="5" height="8" font="18">1</text>
<text top="1084" left="132" width="30" height="12" font="4">. . . id</text>
<text top="1089" left="162" width="7" height="8" font="18">n</text>
<text top="1084" left="174" width="204" height="12" font="4">are lexicographically ordered, and</text>
<text top="1100" left="111" width="47" height="12" font="4">in AC |T</text>
<text top="1105" left="158" width="5" height="8" font="18">1</text>
<text top="1100" left="165" width="4" height="13" font="4">|</text>
<text top="1105" left="169" width="7" height="8" font="18">Γ</text>
<text top="1100" left="181" width="12" height="12" font="4">id</text>
<text top="1105" left="193" width="5" height="8" font="18">1</text>
<text top="1100" left="206" width="35" height="12" font="4">. . . |T</text>
<text top="1105" left="242" width="7" height="8" font="18">n</text>
<text top="1100" left="249" width="4" height="13" font="4">|</text>
<text top="1105" left="253" width="7" height="8" font="18">Γ</text>
<text top="1100" left="266" width="12" height="12" font="4">id</text>
<text top="1105" left="278" width="7" height="8" font="18">n</text>
<text top="1100" left="285" width="4" height="12" font="4">,</text>
<text top="1117" left="111" width="22" height="12" font="4">T [ ]</text>
<text top="1121" left="133" width="5" height="8" font="18">1</text>
<text top="1117" left="141" width="30" height="12" font="4">. . . [ ]</text>
<text top="1121" left="171" width="7" height="8" font="18">n</text>
<text top="1117" left="184" width="123" height="12" font="4">is replaced with T n</text>
<text top="1156" left="129" width="240" height="12" font="4">FIGURE 19. Type erasure deﬁnition.</text>
<text top="770" left="479" width="344" height="13" font="2">Figure 19 shows type erasures of the StaDyn minimal</text>
<text top="788" left="464" width="359" height="13" font="2">core. Function and intersection type erasures are not</text>
<text top="806" left="464" width="359" height="13" font="2">used in our translation rules, because our language does</text>
<text top="824" left="464" width="359" height="13" font="2">not support high-order functions, and intersection types</text>
<text top="841" left="464" width="359" height="13" font="2">only appear in constraints (no code is generated for</text>
<text top="859" left="464" width="43" height="13" font="2">them).</text>
<text top="897" left="464" width="27" height="13" font="2">4.2.</text>
<text top="897" left="508" width="148" height="13" font="2">Anonymous Classes</text>
<text top="924" left="464" width="17" height="13" font="2">As</text>
<text top="924" left="497" width="40" height="13" font="2">shown</text>
<text top="924" left="552" width="12" height="13" font="2">in</text>
<text top="924" left="580" width="42" height="13" font="2">Figure</text>
<text top="924" left="637" width="19" height="13" font="2">19,</text>
<text top="924" left="674" width="16" height="13" font="2">an</text>
<text top="924" left="705" width="73" height="13" font="2">anonymous</text>
<text top="924" left="793" width="30" height="13" font="2">class</text>
<text top="942" left="464" width="40" height="14" font="2">(AC |T</text>
<text top="947" left="504" width="6" height="9" font="17">1</text>
<text top="941" left="511" width="4" height="14" font="2">|</text>
<text top="947" left="515" width="7" height="9" font="17">Γ</text>
<text top="942" left="529" width="13" height="13" font="2">id</text>
<text top="947" left="541" width="6" height="9" font="17">1</text>
<text top="942" left="556" width="38" height="13" font="2">. . . |T</text>
<text top="947" left="594" width="7" height="9" font="17">n</text>
<text top="941" left="602" width="4" height="14" font="2">|</text>
<text top="947" left="607" width="7" height="9" font="17">Γ</text>
<text top="942" left="620" width="13" height="13" font="2">id</text>
<text top="947" left="633" width="7" height="9" font="17">n</text>
<text top="942" left="641" width="182" height="13" font="2">) is the type erasure of each</text>
<text top="960" left="464" width="359" height="13" font="2">diﬀerent object structure. Since subtyping rules in our</text>
<text top="978" left="464" width="359" height="13" font="2">language require two objects to have the same struc-</text>
<text top="996" left="464" width="359" height="13" font="2">ture (S-Object), we create a unique anonymous class for</text>
<text top="1014" left="464" width="359" height="13" font="2">each object structure. To do so, the name of the anony-</text>
<text top="1032" left="464" width="359" height="13" font="2">mous class is the concatenation of each ﬁeld name (lex-</text>
<text top="1050" left="464" width="359" height="13" font="2">icographically ordered) followed by its type erasure—</text>
<text top="1068" left="464" width="67" height="13" font="2">arrays T [ ]</text>
<text top="1073" left="531" width="6" height="9" font="17">1</text>
<text top="1068" left="541" width="32" height="13" font="2">. . . [ ]</text>
<text top="1073" left="573" width="7" height="9" font="17">n</text>
<text top="1068" left="585" width="238" height="13" font="2">are replaced with T n because square</text>
<text top="1086" left="464" width="277" height="13" font="2">brackets are not allowed in C# identiﬁers.</text>
<text top="1103" left="479" width="344" height="13" font="2">These anonymous classes are generated in the ﬁrst</text>
<text top="1121" left="464" width="70" height="13" font="2">traversal (</text>
<text top="1127" left="555" width="17" height="9" font="17">AC</text>
<text top="1121" left="573" width="250" height="13" font="2">), after type-checking the AST. The</text>
<text top="1139" left="464" width="359" height="13" font="2">visit of each AST node receives the set of classes that</text>
<text top="1157" left="464" width="188" height="13" font="2">have already been declared.</text>
<text top="1157" left="666" width="157" height="13" font="2">Starting from the AST</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="15" position="absolute" top="0" left="0" height="1262" width="892">
<text top="93" left="70" width="15" height="13" font="2">14</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="135" left="70" width="359" height="13" font="2">root node (P ), this set is passed from each node to</text>
<text top="153" left="70" width="359" height="13" font="2">their descendants. The only nodes that generate a new</text>
<text top="171" left="70" width="359" height="14" font="2">class declaration are the object type and the new object</text>
<text top="189" left="70" width="359" height="13" font="2">expression. The following translation template shows</text>
<text top="207" left="70" width="337" height="13" font="2">the anonymous class generation for the latter node.</text>
<text top="237" left="139" width="37" height="12" font="4">AC |T</text>
<text top="241" left="176" width="5" height="8" font="18">1</text>
<text top="236" left="182" width="4" height="13" font="4">|</text>
<text top="241" left="186" width="7" height="8" font="18">Γ</text>
<text top="237" left="198" width="12" height="12" font="4">id</text>
<text top="241" left="210" width="5" height="8" font="18">1</text>
<text top="237" left="224" width="35" height="12" font="4">. . . |T</text>
<text top="241" left="259" width="7" height="8" font="18">n</text>
<text top="236" left="267" width="4" height="13" font="4">|</text>
<text top="241" left="271" width="7" height="8" font="18">Γ</text>
<text top="237" left="283" width="12" height="12" font="4">id</text>
<text top="241" left="295" width="7" height="8" font="18">n</text>
<text top="237" left="308" width="7" height="12" font="4">/</text>
<text top="236" left="306" width="56" height="13" font="4">∈ classes</text>
<text top="263" left="89" width="73" height="12" font="4">E = new {id</text>
<text top="268" left="162" width="5" height="8" font="18">1</text>
<text top="264" left="169" width="17" height="11" font="4">=E</text>
<text top="268" left="186" width="5" height="8" font="18">1</text>
<text top="263" left="192" width="43" height="12" font="4">, . . . , id</text>
<text top="268" left="235" width="7" height="8" font="18">n</text>
<text top="264" left="242" width="17" height="11" font="4">=E</text>
<text top="268" left="260" width="7" height="8" font="18">n</text>
<text top="262" left="267" width="7" height="13" font="4">}</text>
<text top="268" left="280" width="16" height="8" font="18">AC</text>
<text top="263" left="296" width="54" height="12" font="4">(classes)</text>
<text top="279" left="125" width="144" height="12" font="4">classes ← classes ∪ AC</text>
<text top="279" left="274" width="12" height="13" font="4">|T</text>
<text top="284" left="286" width="5" height="8" font="18">1</text>
<text top="279" left="292" width="4" height="13" font="4">|</text>
<text top="284" left="296" width="7" height="8" font="18">Γ</text>
<text top="287" left="302" width="8" height="7" font="26">E</text>
<text top="279" left="317" width="12" height="12" font="4">id</text>
<text top="284" left="329" width="5" height="8" font="18">1</text>
<text top="279" left="342" width="35" height="12" font="4">. . . |T</text>
<text top="284" left="378" width="7" height="8" font="18">n</text>
<text top="279" left="385" width="4" height="13" font="4">|</text>
<text top="284" left="389" width="7" height="8" font="18">Γ</text>
<text top="287" left="396" width="8" height="7" font="26">E</text>
<text top="279" left="410" width="12" height="12" font="4">id</text>
<text top="284" left="422" width="7" height="8" font="18">n</text>
<text top="297" left="125" width="73" height="11" font="4">class AC |T</text>
<text top="301" left="199" width="5" height="8" font="18">1</text>
<text top="295" left="205" width="4" height="13" font="4">|</text>
<text top="301" left="209" width="7" height="8" font="18">Γ</text>
<text top="304" left="215" width="8" height="7" font="26">E</text>
<text top="296" left="230" width="12" height="12" font="4">id</text>
<text top="301" left="242" width="5" height="8" font="18">1</text>
<text top="296" left="255" width="35" height="12" font="4">. . . |T</text>
<text top="301" left="291" width="7" height="8" font="18">n</text>
<text top="295" left="299" width="4" height="13" font="4">|</text>
<text top="301" left="302" width="7" height="8" font="18">Γ</text>
<text top="304" left="309" width="8" height="7" font="26">E</text>
<text top="296" left="324" width="12" height="12" font="4">id</text>
<text top="301" left="335" width="7" height="8" font="18">n</text>
<text top="295" left="350" width="7" height="13" font="4">{</text>
<text top="313" left="153" width="59" height="11" font="4">public |T</text>
<text top="317" left="212" width="5" height="8" font="18">1</text>
<text top="312" left="218" width="4" height="13" font="4">|</text>
<text top="317" left="222" width="7" height="8" font="18">Γ</text>
<text top="320" left="229" width="8" height="7" font="26">E</text>
<text top="312" left="242" width="16" height="13" font="4">|id</text>
<text top="317" left="257" width="5" height="8" font="18">1</text>
<text top="312" left="264" width="4" height="13" font="4">|</text>
<text top="317" left="268" width="7" height="8" font="18">Γ</text>
<text top="320" left="274" width="8" height="7" font="26">E</text>
<text top="313" left="288" width="7" height="11" font="4">;</text>
<text top="329" left="153" width="16" height="12" font="4">. . .</text>
<text top="346" left="153" width="59" height="11" font="4">public |T</text>
<text top="350" left="212" width="7" height="8" font="18">n</text>
<text top="344" left="219" width="4" height="13" font="4">|</text>
<text top="350" left="223" width="7" height="8" font="18">Γ</text>
<text top="353" left="230" width="8" height="7" font="26">E</text>
<text top="344" left="243" width="16" height="13" font="4">|id</text>
<text top="350" left="259" width="7" height="8" font="18">n</text>
<text top="344" left="267" width="4" height="13" font="4">|</text>
<text top="350" left="270" width="7" height="8" font="18">Γ</text>
<text top="353" left="277" width="8" height="7" font="26">E</text>
<text top="346" left="291" width="7" height="11" font="4">;</text>
<text top="361" left="125" width="7" height="13" font="4">}</text>
<text top="378" left="84" width="50" height="12" font="4">where Γ</text>
<text top="383" left="134" width="8" height="8" font="18">E</text>
<text top="385" left="142" width="5" height="7" font="26">1</text>
<text top="378" left="148" width="16" height="12" font="4">; Ω</text>
<text top="383" left="165" width="8" height="8" font="18">E</text>
<text top="385" left="173" width="5" height="7" font="26">1</text>
<text top="378" left="195" width="10" height="12" font="4">E</text>
<text top="383" left="206" width="5" height="8" font="18">1</text>
<text top="378" left="216" width="16" height="12" font="4">: T</text>
<text top="383" left="231" width="5" height="8" font="18">1</text>
<text top="378" left="244" width="31" height="12" font="4">. . . Γ</text>
<text top="383" left="275" width="8" height="8" font="18">E</text>
<text top="385" left="283" width="7" height="7" font="26">n</text>
<text top="378" left="291" width="16" height="12" font="4">; Ω</text>
<text top="383" left="307" width="8" height="8" font="18">E</text>
<text top="385" left="315" width="7" height="7" font="26">n</text>
<text top="378" left="339" width="10" height="12" font="4">E</text>
<text top="383" left="349" width="7" height="8" font="18">n</text>
<text top="378" left="361" width="16" height="12" font="4">: T</text>
<text top="383" left="377" width="7" height="8" font="18">n</text>
<text top="378" left="384" width="4" height="12" font="4">,</text>
<text top="395" left="125" width="12" height="12" font="4">id</text>
<text top="399" left="137" width="5" height="8" font="18">1</text>
<text top="395" left="146" width="30" height="12" font="4">. . . id</text>
<text top="399" left="176" width="7" height="8" font="18">n</text>
<text top="395" left="188" width="204" height="12" font="4">are lexicographically ordered, and</text>
<text top="411" left="125" width="36" height="12" font="4">in AC</text>
<text top="410" left="166" width="12" height="13" font="4">|T</text>
<text top="416" left="178" width="5" height="8" font="18">1</text>
<text top="410" left="184" width="4" height="13" font="4">|</text>
<text top="416" left="188" width="7" height="8" font="18">Γ</text>
<text top="411" left="201" width="12" height="12" font="4">id</text>
<text top="416" left="213" width="5" height="8" font="18">1</text>
<text top="411" left="226" width="35" height="12" font="4">. . . |T</text>
<text top="416" left="261" width="7" height="8" font="18">n</text>
<text top="410" left="269" width="4" height="13" font="4">|</text>
<text top="416" left="273" width="7" height="8" font="18">Γ</text>
<text top="411" left="285" width="12" height="12" font="4">id</text>
<text top="416" left="297" width="7" height="8" font="18">n</text>
<text top="411" left="305" width="4" height="12" font="4">,</text>
<text top="427" left="125" width="21" height="12" font="4">T [ ]</text>
<text top="432" left="147" width="5" height="8" font="18">1</text>
<text top="427" left="155" width="30" height="12" font="4">. . . [ ]</text>
<text top="432" left="185" width="7" height="8" font="18">n</text>
<text top="427" left="197" width="123" height="12" font="4">is replaced with T n</text>
<text top="456" left="85" width="344" height="12" font="4">Figure 18 shows how two anonymous classes (lines 2 to 7</text>
<text top="473" left="70" width="359" height="12" font="4">of the C# code on the right) are created in the traversal of</text>
<text top="489" left="70" width="359" height="12" font="4">two new object nodes (lines 11 and 15 of the StaDyn core</text>
<text top="506" left="70" width="104" height="12" font="4">code on the left).</text>
<text top="522" left="85" width="344" height="12" font="4">The second scenario where an anonymous class declara-</text>
<text top="539" left="70" width="359" height="12" font="4">tion is generated is when an object type is used and its class</text>
<text top="555" left="70" width="202" height="12" font="4">has not been previously declared.</text>
<text top="584" left="139" width="20" height="12" font="4">AC</text>
<text top="583" left="164" width="12" height="13" font="4">|T</text>
<text top="589" left="176" width="5" height="8" font="18">1</text>
<text top="583" left="182" width="4" height="13" font="4">|</text>
<text top="589" left="186" width="7" height="8" font="18">Γ</text>
<text top="584" left="198" width="12" height="12" font="4">id</text>
<text top="589" left="210" width="5" height="8" font="18">1</text>
<text top="584" left="224" width="35" height="12" font="4">. . . |T</text>
<text top="589" left="259" width="7" height="8" font="18">n</text>
<text top="583" left="267" width="4" height="13" font="4">|</text>
<text top="589" left="271" width="7" height="8" font="18">Γ</text>
<text top="584" left="283" width="12" height="12" font="4">id</text>
<text top="589" left="295" width="7" height="8" font="18">n</text>
<text top="584" left="308" width="7" height="12" font="4">/</text>
<text top="583" left="306" width="56" height="13" font="4">∈ classes</text>
<text top="610" left="89" width="47" height="12" font="4">T = {id</text>
<text top="615" left="136" width="5" height="8" font="18">1</text>
<text top="610" left="143" width="12" height="12" font="4">:T</text>
<text top="615" left="155" width="5" height="8" font="18">1</text>
<text top="610" left="161" width="43" height="12" font="4">, . . . , id</text>
<text top="615" left="203" width="7" height="8" font="18">n</text>
<text top="610" left="211" width="12" height="12" font="4">:T</text>
<text top="615" left="223" width="7" height="8" font="18">n</text>
<text top="609" left="231" width="7" height="13" font="4">}</text>
<text top="615" left="243" width="16" height="8" font="18">AC</text>
<text top="610" left="259" width="54" height="12" font="4">(classes)</text>
<text top="627" left="125" width="161" height="12" font="4">classes ← classes ∪ AC |T</text>
<text top="631" left="286" width="5" height="8" font="18">1</text>
<text top="626" left="292" width="4" height="13" font="4">|</text>
<text top="631" left="296" width="7" height="8" font="18">Γ</text>
<text top="634" left="302" width="6" height="7" font="26">T</text>
<text top="627" left="316" width="12" height="12" font="4">id</text>
<text top="631" left="328" width="5" height="8" font="18">1</text>
<text top="627" left="342" width="35" height="12" font="4">. . . |T</text>
<text top="631" left="377" width="7" height="8" font="18">n</text>
<text top="626" left="385" width="4" height="13" font="4">|</text>
<text top="631" left="389" width="7" height="8" font="18">Γ</text>
<text top="634" left="395" width="6" height="7" font="26">T</text>
<text top="627" left="409" width="12" height="12" font="4">id</text>
<text top="631" left="421" width="7" height="8" font="18">n</text>
<text top="644" left="125" width="73" height="11" font="4">class AC |T</text>
<text top="648" left="199" width="5" height="8" font="18">1</text>
<text top="642" left="205" width="4" height="13" font="4">|</text>
<text top="648" left="209" width="7" height="8" font="18">Γ</text>
<text top="651" left="215" width="6" height="7" font="26">T</text>
<text top="643" left="230" width="12" height="12" font="4">id</text>
<text top="648" left="241" width="5" height="8" font="18">1</text>
<text top="643" left="255" width="35" height="12" font="4">. . . |T</text>
<text top="648" left="290" width="7" height="8" font="18">n</text>
<text top="642" left="298" width="4" height="13" font="4">|</text>
<text top="648" left="302" width="7" height="8" font="18">Γ</text>
<text top="651" left="309" width="6" height="7" font="26">T</text>
<text top="643" left="323" width="12" height="12" font="4">id</text>
<text top="648" left="335" width="7" height="8" font="18">n</text>
<text top="642" left="349" width="7" height="13" font="4">{</text>
<text top="661" left="153" width="59" height="11" font="4">public |T</text>
<text top="664" left="212" width="5" height="8" font="18">1</text>
<text top="659" left="218" width="4" height="13" font="4">|</text>
<text top="664" left="222" width="7" height="8" font="18">Γ</text>
<text top="667" left="229" width="6" height="7" font="26">T</text>
<text top="659" left="241" width="16" height="13" font="4">|id</text>
<text top="664" left="257" width="5" height="8" font="18">1</text>
<text top="659" left="263" width="4" height="13" font="4">|</text>
<text top="664" left="267" width="7" height="8" font="18">Γ</text>
<text top="667" left="274" width="6" height="7" font="26">T</text>
<text top="661" left="288" width="7" height="11" font="4">;</text>
<text top="676" left="153" width="16" height="12" font="4">. . .</text>
<text top="693" left="153" width="59" height="11" font="4">public |T</text>
<text top="697" left="212" width="7" height="8" font="18">n</text>
<text top="692" left="219" width="4" height="13" font="4">|</text>
<text top="697" left="223" width="7" height="8" font="18">Γ</text>
<text top="700" left="230" width="6" height="7" font="26">T</text>
<text top="692" left="243" width="16" height="13" font="4">|id</text>
<text top="697" left="259" width="7" height="8" font="18">n</text>
<text top="692" left="266" width="4" height="13" font="4">|</text>
<text top="697" left="270" width="7" height="8" font="18">Γ</text>
<text top="700" left="277" width="6" height="7" font="26">T</text>
<text top="693" left="290" width="7" height="11" font="4">;</text>
<text top="708" left="125" width="7" height="13" font="4">}</text>
<text top="725" left="84" width="53" height="12" font="4">where id</text>
<text top="730" left="137" width="5" height="8" font="18">1</text>
<text top="725" left="146" width="30" height="12" font="4">. . . id</text>
<text top="730" left="176" width="7" height="8" font="18">n</text>
<text top="725" left="188" width="204" height="12" font="4">are lexicographically ordered, and</text>
<text top="742" left="125" width="53" height="12" font="4">in AC |T</text>
<text top="746" left="178" width="5" height="8" font="18">1</text>
<text top="741" left="184" width="4" height="13" font="4">|</text>
<text top="746" left="188" width="7" height="8" font="18">Γ</text>
<text top="742" left="201" width="12" height="12" font="4">id</text>
<text top="746" left="213" width="5" height="8" font="18">1</text>
<text top="742" left="226" width="35" height="12" font="4">. . . |T</text>
<text top="746" left="261" width="7" height="8" font="18">n</text>
<text top="741" left="269" width="4" height="13" font="4">|</text>
<text top="746" left="273" width="7" height="8" font="18">Γ</text>
<text top="742" left="285" width="12" height="12" font="4">id</text>
<text top="746" left="297" width="7" height="8" font="18">n</text>
<text top="742" left="305" width="4" height="12" font="4">,</text>
<text top="758" left="125" width="21" height="12" font="4">T [ ]</text>
<text top="763" left="147" width="5" height="8" font="18">1</text>
<text top="758" left="155" width="30" height="12" font="4">. . . [ ]</text>
<text top="763" left="185" width="7" height="8" font="18">n</text>
<text top="758" left="197" width="123" height="12" font="4">is replaced with T n</text>
<text top="797" left="70" width="27" height="13" font="2">4.3.</text>
<text top="797" left="114" width="183" height="13" font="2">Translation of Programs</text>
<text top="823" left="70" width="359" height="12" font="4">The translation of a program consists of the import of the</text>
<text top="840" left="70" width="359" height="14" font="4">main .Net namespace (System) followed by the declaration</text>
<text top="856" left="70" width="147" height="12" font="4">of anonymous classes (</text>
<text top="861" left="238" width="16" height="8" font="18">AC</text>
<text top="856" left="254" width="175" height="12" font="4">) (passing an empty set of</text>
<text top="873" left="70" width="251" height="12" font="4">classes) and the ﬁnal generation of code (</text>
<text top="877" left="336" width="16" height="8" font="18">CG</text>
<text top="873" left="353" width="9" height="12" font="4">).</text>
<text top="902" left="89" width="9" height="12" font="4">P</text>
<text top="907" left="106" width="40" height="8" font="18">program</text>
<text top="904" left="180" width="106" height="11" font="4">import System ;</text>
<text top="919" left="186" width="9" height="12" font="4">P</text>
<text top="923" left="202" width="16" height="8" font="18">AC</text>
<text top="919" left="219" width="18" height="12" font="4">(∅)</text>
<text top="935" left="186" width="9" height="12" font="4">P</text>
<text top="940" left="202" width="16" height="8" font="18">CG</text>
<text top="964" left="85" width="208" height="12" font="4">Code generated for a program ( P</text>
<text top="969" left="301" width="16" height="8" font="18">CG</text>
<text top="964" left="318" width="111" height="12" font="4">) consists of a C#</text>
<text top="981" left="70" width="359" height="12" font="4">public class (MainClass) followed by two helper setValue</text>
<text top="997" left="70" width="359" height="12" font="4">methods (explained in Sections 4.7 and 4.8). Each function</text>
<text top="1014" left="70" width="359" height="12" font="4">is translated into a corresponding static C# method, and</text>
<text top="1030" left="70" width="359" height="12" font="4">the main declarations and statements are placed inside</text>
<text top="1046" left="70" width="359" height="12" font="4">the program’s entry point (the C# Main method of the</text>
<text top="1064" left="70" width="359" height="11" font="4">MainClass)—the example translation in Figure 18 omits the</text>
<text top="1079" left="70" width="147" height="12" font="4">two setValue methods.</text>
<text top="1109" left="75" width="38" height="12" font="4">P = F</text>
<text top="1114" left="113" width="5" height="8" font="18">1</text>
<text top="1109" left="122" width="27" height="12" font="4">. . . F</text>
<text top="1114" left="149" width="7" height="8" font="18">n</text>
<text top="1109" left="161" width="11" height="12" font="4">D</text>
<text top="1114" left="172" width="5" height="8" font="18">1</text>
<text top="1109" left="181" width="30" height="12" font="4">. . . D</text>
<text top="1114" left="210" width="10" height="8" font="18">m</text>
<text top="1109" left="225" width="8" height="12" font="4">S</text>
<text top="1114" left="233" width="5" height="8" font="18">1</text>
<text top="1109" left="242" width="27" height="12" font="4">. . . S</text>
<text top="1114" left="269" width="26" height="8" font="18">l CG</text>
<text top="1127" left="98" width="169" height="11" font="4">public class MainClass {</text>
<text top="1143" left="98" width="148" height="11" font="4">private static object</text>
<text top="1143" left="258" width="141" height="11" font="4">setValue(object obj,</text>
<text top="1159" left="153" width="183" height="11" font="4">string id, object value) {</text>
<text top="137" left="506" width="332" height="11" font="4">obj.GetType().GetField(id).SetValue(obj,value);</text>
<text top="154" left="492" width="92" height="11" font="4">return value;</text>
<text top="168" left="492" width="7" height="13" font="4">}</text>
<text top="187" left="492" width="148" height="11" font="4">private static object</text>
<text top="187" left="652" width="148" height="11" font="4">setValue(Array array,</text>
<text top="203" left="547" width="183" height="11" font="4">object value, int index) {</text>
<text top="219" left="506" width="205" height="11" font="4">array.SetValue(value, index);</text>
<text top="236" left="506" width="92" height="11" font="4">return value;</text>
<text top="250" left="492" width="7" height="13" font="4">}</text>
<text top="268" left="498" width="9" height="12" font="4">F</text>
<text top="272" left="506" width="28" height="8" font="18">1 CG</text>
<text top="268" left="538" width="16" height="12" font="4">. . .</text>
<text top="268" left="569" width="9" height="12" font="4">F</text>
<text top="272" left="578" width="29" height="8" font="18">n CG</text>
<text top="285" left="492" width="190" height="11" font="4">public static void Main() {</text>
<text top="302" left="506" width="42" height="11" font="4">object</text>
<text top="302" left="560" width="35" height="11" font="4">temp;</text>
<text top="317" left="511" width="11" height="12" font="4">D</text>
<text top="322" left="523" width="28" height="8" font="18">1 CG</text>
<text top="317" left="554" width="16" height="12" font="4">. . .</text>
<text top="317" left="586" width="11" height="12" font="4">D</text>
<text top="322" left="597" width="32" height="8" font="18">m CG</text>
<text top="333" left="506" width="76" height="12" font="4">statement(S</text>
<text top="338" left="582" width="5" height="8" font="18">1</text>
<text top="333" left="588" width="110" height="12" font="4">) . . . statement(S</text>
<text top="338" left="698" width="4" height="8" font="18">l</text>
<text top="333" left="702" width="5" height="12" font="4">)</text>
<text top="349" left="492" width="7" height="13" font="4">}</text>
<text top="366" left="478" width="7" height="13" font="4">}</text>
<text top="393" left="479" width="344" height="12" font="4">Since not every single expression is a valid statement</text>
<text top="409" left="464" width="359" height="12" font="4">in C#, we deﬁne the statement function to generate</text>
<text top="426" left="464" width="359" height="12" font="4">an artiﬁcial assignment to a temporary reference ( temp),</text>
<text top="442" left="464" width="359" height="12" font="4">converting an expression into a valid C# statement when</text>
<text top="459" left="464" width="59" height="12" font="4">necessary.</text>
<text top="486" left="479" width="329" height="12" font="4">Definition 4.1. Given a statement node S, we deﬁne:</text>
<text top="533" left="479" width="100" height="12" font="4">statement(S) ≡</text>
<text top="506" left="584" width="12" height="6" font="4"></text>
<text top="519" left="584" width="12" height="6" font="4"></text>
<text top="523" left="584" width="12" height="6" font="4"></text>
<text top="527" left="584" width="12" height="6" font="4"></text>
<text top="551" left="584" width="12" height="6" font="4"></text>
<text top="555" left="584" width="12" height="6" font="4"></text>
<text top="559" left="584" width="12" height="6" font="4"></text>
<text top="510" left="609" width="49" height="11" font="4">temp= S</text>
<text top="513" left="665" width="16" height="8" font="18">CG</text>
<text top="510" left="682" width="7" height="11" font="4">;</text>
<text top="509" left="704" width="75" height="12" font="4">if S is E and</text>
<text top="525" left="715" width="38" height="12" font="4">S = E</text>
<text top="530" left="753" width="5" height="8" font="18">1</text>
<text top="526" left="759" width="17" height="11" font="4">=E</text>
<text top="530" left="777" width="5" height="8" font="18">2</text>
<text top="525" left="787" width="22" height="12" font="4">and</text>
<text top="542" left="715" width="55" height="12" font="4">S = id(E</text>
<text top="538" left="771" width="6" height="8" font="18">∗</text>
<text top="542" left="778" width="5" height="12" font="4">)</text>
<text top="558" left="614" width="8" height="12" font="4">S</text>
<text top="563" left="629" width="16" height="8" font="18">CG</text>
<text top="559" left="646" width="7" height="11" font="4">;</text>
<text top="558" left="704" width="57" height="12" font="4">otherwise</text>
<text top="593" left="464" width="27" height="13" font="2">4.4.</text>
<text top="593" left="508" width="94" height="13" font="2">Declarations</text>
<text top="619" left="464" width="359" height="14" font="4">The .Net platform forces the declaration of each single</text>
<text top="636" left="464" width="184" height="12" font="4">variable with a unique type.</text>
<text top="636" left="665" width="158" height="12" font="4">We could simply declare</text>
<text top="652" left="464" width="359" height="12" font="4">variables and function parameters with their type erasures.</text>
<text top="669" left="464" width="359" height="12" font="4">However, this would generate many unnecessary casts. As</text>
<text top="685" left="464" width="359" height="12" font="4">an example, if a free type variable parameter is always used</text>
<text top="702" left="464" width="359" height="12" font="4">as an integer it is better to declare it as int rather than</text>
<text top="718" left="464" width="359" height="12" font="4">as object—its type erasure—(examples are the x, y and</text>
<text top="736" left="464" width="318" height="11" font="4">z parameters of the point function in Figure 18).</text>
<text top="735" left="796" width="27" height="12" font="4">This</text>
<text top="751" left="464" width="359" height="12" font="4">involves a faster execution because no cast will be generated.</text>
<text top="767" left="479" width="207" height="12" font="4">For this purpose, we deﬁne the</text>
<text top="772" left="717" width="25" height="8" font="18">types</text>
<text top="767" left="751" width="72" height="12" font="4">traversal of</text>
<text top="784" left="464" width="359" height="12" font="4">the AST that collects all the possible types which a local</text>
<text top="800" left="464" width="359" height="12" font="4">variable may have in a function scope. Notice that this type</text>
<text top="817" left="464" width="359" height="12" font="4">collection is not the output environment obtained after type</text>
<text top="833" left="464" width="359" height="12" font="4">checking every function body, because our type system is</text>
<text top="850" left="464" width="359" height="12" font="4">ﬂow sensitive: types bound to type variables change while</text>
<text top="866" left="464" width="359" height="12" font="4">type checking is performed. The types traversal returns an</text>
<text top="882" left="464" width="359" height="12" font="4">environment with all the possible types a local variable may</text>
<text top="899" left="464" width="359" height="12" font="4">have in a speciﬁc function. If a variable has more than one</text>
<text top="915" left="464" width="359" height="12" font="4">type, a union type is then used to represent its least upper</text>
<text top="932" left="464" width="42" height="12" font="4">bound.</text>
<text top="975" left="479" width="265" height="12" font="4">Definition 4.2. Given two environments Γ</text>
<text top="977" left="744" width="5" height="8" font="18">1</text>
<text top="972" left="756" width="36" height="12" font="4">and Γ</text>
<text top="977" left="792" width="5" height="8" font="18">2</text>
<text top="972" left="798" width="25" height="12" font="4">, we</text>
<text top="989" left="464" width="40" height="12" font="4">deﬁne:</text>
<text top="1000" left="492" width="9" height="12" font="4">Γ</text>
<text top="1005" left="501" width="5" height="8" font="18">1</text>
<text top="999" left="510" width="21" height="13" font="4">∨ Γ</text>
<text top="1005" left="531" width="5" height="8" font="18">2</text>
<text top="999" left="545" width="39" height="13" font="4">≡ Γ in</text>
<text top="1000" left="603" width="39" height="12" font="4">Γ ← Γ</text>
<text top="1005" left="641" width="5" height="8" font="18">1</text>
<text top="1016" left="603" width="63" height="13" font="4">∀ id:T ∈ Γ</text>
<text top="1021" left="665" width="5" height="8" font="18">2</text>
<text top="1017" left="672" width="88" height="12" font="4">, add(id, T, Γ)</text>
<text top="1032" left="603" width="63" height="13" font="4">∀ X:T ∈ Γ</text>
<text top="1038" left="666" width="5" height="8" font="18">2</text>
<text top="1033" left="672" width="88" height="12" font="4">, add(X, T, Γ)</text>
<text top="1062" left="479" width="344" height="12" font="4">Definition 4.3. Given a type variable or identiﬁer x, a</text>
<text top="1076" left="464" width="252" height="12" font="4">type T , and an environment Γ, we deﬁne:</text>
<text top="1109" left="493" width="85" height="12" font="4">add(x, T, Γ) ≡</text>
<text top="1101" left="603" width="72" height="12" font="4">Γ ← Γ, x : T</text>
<text top="1101" left="735" width="32" height="12" font="4">if x /</text>
<text top="1100" left="759" width="58" height="13" font="4">∈ dom(Γ)</text>
<text top="1117" left="604" width="115" height="12" font="4">Γ ← Γ, x : Γ(x) ∨ T</text>
<text top="1117" left="735" width="57" height="12" font="4">otherwise</text>
<text top="1142" left="479" width="344" height="12" font="4">To obtain all the possible types of a local variable, it</text>
<text top="1158" left="464" width="359" height="12" font="4">is also necessary to know the actual C# types of the</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1262" width="892">
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="808" width="15" height="13" font="2">15</text>
<text top="136" left="70" width="359" height="12" font="4">generated global functions. As an example, the x, y and z</text>
<text top="153" left="70" width="359" height="12" font="4">parameters in the point function (Figure 18) are only used</text>
<text top="169" left="70" width="359" height="12" font="4">in function invocations (lines 21 and 23). Since parameters</text>
<text top="185" left="70" width="359" height="12" font="4">of both point2D and point3D were declared as int in the</text>
<text top="202" left="70" width="359" height="12" font="4">C# destination code, the three point function parameters</text>
<text top="218" left="70" width="359" height="12" font="4">should also be declared as integers. Consequently, we deﬁne</text>
<text top="235" left="70" width="359" height="12" font="4">the types traversal not only returning the Γ of local variables,</text>
<text top="251" left="70" width="359" height="12" font="4">but also receiving the Γ that holds the type of every global</text>
<text top="268" left="70" width="53" height="12" font="4">function.</text>
<text top="284" left="85" width="344" height="12" font="4">Once we obtain all the possible types of each local</text>
<text top="301" left="70" width="359" height="12" font="4">variable, we can pass them as a parameter to the translation</text>
<text top="317" left="70" width="359" height="12" font="4">process in order to optimize the generated C# code.</text>
<text top="333" left="70" width="85" height="12" font="4">Therefore, the</text>
<text top="338" left="174" width="16" height="8" font="18">CG</text>
<text top="333" left="195" width="234" height="12" font="4">code generation function will from now</text>
<text top="350" left="70" width="359" height="12" font="4">on receive a Γ parameter. This parameter contains all the</text>
<text top="366" left="70" width="359" height="12" font="4">possible types of each local variable in the current scope,</text>
<text top="383" left="70" width="359" height="12" font="4">plus the C# types of the previously declared functions.</text>
<text top="399" left="70" width="359" height="12" font="4">We should then extend the code generation template for</text>
<text top="416" left="70" width="359" height="12" font="4">a program, adding the following code to the translation</text>
<text top="432" left="70" width="359" height="12" font="4">scheme shown above (the statement function—Deﬁnition</text>
<text top="449" left="70" width="335" height="12" font="4">4.1—has also been extended with the appropriate Γ</text>
<text top="453" left="405" width="22" height="8" font="18">local</text>
<text top="465" left="70" width="71" height="12" font="4">parameter):</text>
<text top="499" left="89" width="38" height="12" font="4">P = F</text>
<text top="503" left="127" width="5" height="8" font="18">1</text>
<text top="499" left="136" width="27" height="12" font="4">. . . F</text>
<text top="503" left="163" width="7" height="8" font="18">n</text>
<text top="499" left="175" width="11" height="12" font="4">D</text>
<text top="503" left="186" width="5" height="8" font="18">1</text>
<text top="499" left="194" width="30" height="12" font="4">. . . D</text>
<text top="503" left="224" width="10" height="8" font="18">m</text>
<text top="499" left="239" width="8" height="12" font="4">S</text>
<text top="503" left="247" width="5" height="8" font="18">1</text>
<text top="499" left="256" width="27" height="12" font="4">. . . S</text>
<text top="503" left="283" width="26" height="8" font="18">l CG</text>
<text top="515" left="111" width="9" height="12" font="4">Γ</text>
<text top="520" left="120" width="29" height="8" font="18">global</text>
<text top="514" left="153" width="25" height="13" font="4">← ∅</text>
<text top="531" left="111" width="9" height="12" font="4">Γ</text>
<text top="536" left="120" width="22" height="8" font="18">local</text>
<text top="539" left="142" width="5" height="7" font="26">1</text>
<text top="531" left="153" width="32" height="13" font="4">← F</text>
<text top="536" left="185" width="37" height="8" font="18">1 types</text>
<text top="531" left="223" width="14" height="12" font="4">(Γ</text>
<text top="536" left="237" width="29" height="8" font="18">global</text>
<text top="531" left="266" width="5" height="12" font="4">)</text>
<text top="548" left="117" width="9" height="12" font="4">F</text>
<text top="552" left="126" width="28" height="8" font="18">1 CG</text>
<text top="548" left="155" width="14" height="12" font="4">(Γ</text>
<text top="553" left="169" width="22" height="8" font="18">local</text>
<text top="555" left="191" width="5" height="7" font="26">1</text>
<text top="547" left="201" width="21" height="13" font="4">∨ Γ</text>
<text top="553" left="222" width="29" height="8" font="18">global</text>
<text top="548" left="251" width="5" height="12" font="4">)</text>
<text top="564" left="111" width="16" height="12" font="4">. . .</text>
<text top="581" left="111" width="9" height="12" font="4">Γ</text>
<text top="585" left="120" width="22" height="8" font="18">local</text>
<text top="588" left="142" width="7" height="7" font="26">n</text>
<text top="580" left="154" width="32" height="13" font="4">← F</text>
<text top="585" left="186" width="39" height="8" font="18">n types</text>
<text top="581" left="226" width="14" height="12" font="4">(Γ</text>
<text top="585" left="240" width="29" height="8" font="18">global</text>
<text top="581" left="269" width="5" height="12" font="4">)</text>
<text top="597" left="117" width="9" height="12" font="4">F</text>
<text top="602" left="126" width="29" height="8" font="18">n CG</text>
<text top="597" left="156" width="14" height="12" font="4">(Γ</text>
<text top="602" left="170" width="22" height="8" font="18">local</text>
<text top="604" left="192" width="7" height="7" font="26">n</text>
<text top="596" left="204" width="21" height="13" font="4">∨ Γ</text>
<text top="602" left="224" width="29" height="8" font="18">global</text>
<text top="597" left="254" width="5" height="12" font="4">)</text>
<text top="614" left="111" width="9" height="12" font="4">Γ</text>
<text top="618" left="120" width="22" height="8" font="18">local</text>
<text top="621" left="142" width="22" height="7" font="26">main</text>
<text top="613" left="170" width="35" height="13" font="4">← D</text>
<text top="618" left="204" width="5" height="8" font="18">1</text>
<text top="614" left="213" width="30" height="12" font="4">. . . D</text>
<text top="618" left="243" width="10" height="8" font="18">m</text>
<text top="614" left="257" width="8" height="12" font="4">S</text>
<text top="618" left="265" width="5" height="8" font="18">1</text>
<text top="614" left="274" width="27" height="12" font="4">. . . S</text>
<text top="618" left="301" width="35" height="8" font="18">l types</text>
<text top="614" left="337" width="14" height="12" font="4">(Γ</text>
<text top="618" left="351" width="29" height="8" font="18">global</text>
<text top="614" left="381" width="5" height="12" font="4">)</text>
<text top="630" left="117" width="11" height="12" font="4">D</text>
<text top="635" left="128" width="28" height="8" font="18">1 CG</text>
<text top="630" left="157" width="14" height="12" font="4">(Γ</text>
<text top="635" left="171" width="22" height="8" font="18">local</text>
<text top="638" left="194" width="22" height="7" font="26">main</text>
<text top="629" left="220" width="21" height="13" font="4">∨ Γ</text>
<text top="635" left="241" width="29" height="8" font="18">global</text>
<text top="630" left="271" width="5" height="12" font="4">)</text>
<text top="646" left="111" width="16" height="12" font="4">. . .</text>
<text top="663" left="117" width="11" height="12" font="4">D</text>
<text top="667" left="128" width="32" height="8" font="18">m CG</text>
<text top="663" left="161" width="14" height="12" font="4">(Γ</text>
<text top="668" left="175" width="22" height="8" font="18">local</text>
<text top="671" left="198" width="22" height="7" font="26">main</text>
<text top="662" left="224" width="21" height="13" font="4">∨ Γ</text>
<text top="668" left="245" width="29" height="8" font="18">global</text>
<text top="663" left="275" width="5" height="12" font="4">)</text>
<text top="679" left="111" width="76" height="12" font="4">statement(S</text>
<text top="684" left="187" width="5" height="8" font="18">1</text>
<text top="679" left="193" width="15" height="12" font="4">, Γ</text>
<text top="684" left="208" width="22" height="8" font="18">local</text>
<text top="687" left="231" width="22" height="7" font="26">main</text>
<text top="679" left="257" width="21" height="13" font="4">∨ Γ</text>
<text top="684" left="278" width="29" height="8" font="18">global</text>
<text top="679" left="308" width="5" height="12" font="4">)</text>
<text top="696" left="111" width="16" height="12" font="4">. . .</text>
<text top="712" left="111" width="76" height="12" font="4">statement(S</text>
<text top="717" left="187" width="4" height="8" font="18">l</text>
<text top="712" left="192" width="15" height="12" font="4">, Γ</text>
<text top="717" left="206" width="22" height="8" font="18">local</text>
<text top="720" left="229" width="22" height="7" font="26">main</text>
<text top="711" left="255" width="21" height="13" font="4">∨ Γ</text>
<text top="717" left="276" width="29" height="8" font="18">global</text>
<text top="712" left="306" width="5" height="12" font="4">)</text>
<text top="745" left="85" width="344" height="12" font="4">We now deﬁne how types of local variables are obtained,</text>
<text top="761" left="70" width="50" height="12" font="4">i.e., the</text>
<text top="766" left="149" width="25" height="8" font="18">types</text>
<text top="761" left="183" width="56" height="12" font="4">traversal.</text>
<text top="761" left="255" width="173" height="12" font="4">Local types in declarations</text>
<text top="778" left="70" width="359" height="12" font="4">and statements are the union (Deﬁnition 4.2) of the local</text>
<text top="794" left="70" width="158" height="12" font="4">environments they return.</text>
<text top="828" left="89" width="11" height="12" font="4">D</text>
<text top="832" left="101" width="5" height="8" font="18">1</text>
<text top="828" left="109" width="30" height="12" font="4">. . . D</text>
<text top="832" left="139" width="10" height="8" font="18">m</text>
<text top="828" left="153" width="8" height="12" font="4">S</text>
<text top="832" left="162" width="5" height="8" font="18">1</text>
<text top="828" left="170" width="27" height="12" font="4">. . . S</text>
<text top="832" left="197" width="4" height="8" font="18">l</text>
<text top="828" left="205" width="10" height="12" font="4">R</text>
<text top="832" left="222" width="25" height="8" font="18">types</text>
<text top="828" left="248" width="14" height="12" font="4">(Γ</text>
<text top="832" left="262" width="29" height="8" font="18">global</text>
<text top="828" left="291" width="5" height="12" font="4">)</text>
<text top="844" left="111" width="58" height="12" font="4">return D</text>
<text top="849" left="170" width="37" height="8" font="18">1 types</text>
<text top="844" left="208" width="14" height="12" font="4">(Γ</text>
<text top="849" left="222" width="29" height="8" font="18">global</text>
<text top="844" left="251" width="69" height="12" font="4">) ∨ . . . ∨ D</text>
<text top="849" left="320" width="42" height="8" font="18">m types</text>
<text top="844" left="363" width="14" height="12" font="4">(Γ</text>
<text top="849" left="377" width="29" height="8" font="18">global</text>
<text top="844" left="406" width="18" height="12" font="4">) ∨</text>
<text top="861" left="158" width="8" height="12" font="4">S</text>
<text top="865" left="167" width="37" height="8" font="18">1 types</text>
<text top="861" left="205" width="14" height="12" font="4">(Γ</text>
<text top="865" left="219" width="29" height="8" font="18">global</text>
<text top="861" left="248" width="66" height="12" font="4">) ∨ . . . ∨ S</text>
<text top="865" left="315" width="35" height="8" font="18">l types</text>
<text top="861" left="351" width="14" height="12" font="4">(Γ</text>
<text top="865" left="365" width="29" height="8" font="18">global</text>
<text top="861" left="394" width="18" height="12" font="4">) ∨</text>
<text top="877" left="158" width="10" height="12" font="4">R</text>
<text top="882" left="174" width="25" height="8" font="18">types</text>
<text top="877" left="201" width="14" height="12" font="4">(Γ</text>
<text top="882" left="215" width="29" height="8" font="18">global</text>
<text top="877" left="244" width="5" height="12" font="4">)</text>
<text top="910" left="85" width="344" height="12" font="4">For functions, the union of their parameters, declarations</text>
<text top="926" left="70" width="359" height="12" font="4">and statements are added to the local environment. Besides,</text>
<text top="942" left="70" width="359" height="12" font="4">the function type is added to the global environment,</text>
<text top="959" left="70" width="359" height="12" font="4">taking its parameter types (and return type) from the local</text>
<text top="975" left="70" width="329" height="12" font="4">environment. That is, the function type added to Γ</text>
<text top="980" left="399" width="29" height="8" font="18">global</text>
<text top="992" left="70" width="359" height="12" font="4">holds the generated C# type—not the one inferred by the</text>
<text top="1008" left="70" width="55" height="12" font="4">compiler.</text>
<text top="1042" left="75" width="81" height="12" font="4">F =ST id(ST</text>
<text top="1046" left="156" width="5" height="8" font="18">1</text>
<text top="1042" left="166" width="12" height="12" font="4">id</text>
<text top="1046" left="178" width="5" height="8" font="18">1</text>
<text top="1042" left="184" width="29" height="12" font="4">...ST</text>
<text top="1046" left="213" width="7" height="8" font="18">n</text>
<text top="1042" left="225" width="12" height="12" font="4">id</text>
<text top="1046" left="237" width="7" height="8" font="18">n</text>
<text top="1043" left="244" width="18" height="11" font="4">)D</text>
<text top="1046" left="263" width="5" height="8" font="18">1</text>
<text top="1042" left="269" width="23" height="12" font="4">...D</text>
<text top="1046" left="292" width="10" height="8" font="18">m</text>
<text top="1042" left="306" width="8" height="12" font="4">S</text>
<text top="1046" left="315" width="5" height="8" font="18">1</text>
<text top="1042" left="321" width="20" height="12" font="4">...S</text>
<text top="1046" left="341" width="4" height="8" font="18">l</text>
<text top="1042" left="349" width="10" height="12" font="4">R</text>
<text top="1046" left="365" width="25" height="8" font="18">types</text>
<text top="1042" left="391" width="14" height="12" font="4">(Γ</text>
<text top="1046" left="405" width="29" height="8" font="18">global</text>
<text top="1042" left="435" width="5" height="12" font="4">)</text>
<text top="1058" left="84" width="9" height="12" font="4">Γ</text>
<text top="1063" left="92" width="22" height="8" font="18">local</text>
<text top="1057" left="119" width="30" height="13" font="4">← id</text>
<text top="1063" left="149" width="5" height="8" font="18">1</text>
<text top="1058" left="155" width="12" height="12" font="4">:T</text>
<text top="1063" left="167" width="5" height="8" font="18">1</text>
<text top="1058" left="173" width="23" height="12" font="4">...id</text>
<text top="1063" left="197" width="7" height="8" font="18">n</text>
<text top="1058" left="204" width="12" height="12" font="4">:T</text>
<text top="1063" left="216" width="7" height="8" font="18">n</text>
<text top="1057" left="227" width="29" height="13" font="4">∨ D</text>
<text top="1063" left="256" width="5" height="8" font="18">1</text>
<text top="1058" left="262" width="23" height="12" font="4">...D</text>
<text top="1063" left="285" width="10" height="8" font="18">m</text>
<text top="1058" left="300" width="8" height="12" font="4">S</text>
<text top="1063" left="308" width="5" height="8" font="18">1</text>
<text top="1058" left="314" width="20" height="12" font="4">...S</text>
<text top="1063" left="334" width="4" height="8" font="18">l</text>
<text top="1058" left="343" width="10" height="12" font="4">R</text>
<text top="1063" left="359" width="25" height="8" font="18">types</text>
<text top="1058" left="385" width="14" height="12" font="4">(Γ</text>
<text top="1063" left="399" width="29" height="8" font="18">global</text>
<text top="1058" left="428" width="5" height="12" font="4">)</text>
<text top="1075" left="84" width="9" height="12" font="4">Γ</text>
<text top="1079" left="92" width="29" height="8" font="18">global</text>
<text top="1074" left="126" width="26" height="13" font="4">← Γ</text>
<text top="1079" left="152" width="29" height="8" font="18">global</text>
<text top="1074" left="185" width="36" height="13" font="4">∨ id:T</text>
<text top="1080" left="221" width="5" height="8" font="18">1</text>
<text top="1074" left="230" width="55" height="13" font="4">× . . . × T</text>
<text top="1080" left="285" width="7" height="8" font="18">n</text>
<text top="1074" left="296" width="26" height="13" font="4">→ T</text>
<text top="1091" left="84" width="51" height="12" font="4">return Γ</text>
<text top="1096" left="135" width="22" height="8" font="18">local</text>
<text top="1108" left="70" width="50" height="12" font="4">where Γ</text>
<text top="1112" left="120" width="7" height="8" font="18">F</text>
<text top="1108" left="128" width="16" height="12" font="4">; Ω</text>
<text top="1112" left="144" width="7" height="8" font="18">F</text>
<text top="1108" left="168" width="31" height="12" font="4">id : T</text>
<text top="1112" left="199" width="5" height="8" font="18">1</text>
<text top="1107" left="209" width="55" height="13" font="4">× . . . × T</text>
<text top="1112" left="264" width="7" height="8" font="18">n</text>
<text top="1107" left="275" width="31" height="13" font="4">→ T ,</text>
<text top="1124" left="111" width="9" height="12" font="4">Γ</text>
<text top="1129" left="120" width="22" height="8" font="18">local</text>
<text top="1124" left="143" width="16" height="12" font="4">; Ω</text>
<text top="1129" left="159" width="7" height="8" font="18">F</text>
<text top="1124" left="183" width="12" height="12" font="4">id</text>
<text top="1129" left="195" width="5" height="8" font="18">1</text>
<text top="1124" left="201" width="12" height="12" font="4">:T</text>
<text top="1129" left="213" width="5" height="8" font="18">1</text>
<text top="1124" left="219" width="45" height="12" font="4">, . . . Γ</text>
<text top="1129" left="264" width="22" height="8" font="18">local</text>
<text top="1124" left="287" width="16" height="12" font="4">; Ω</text>
<text top="1129" left="304" width="7" height="8" font="18">F</text>
<text top="1124" left="327" width="12" height="12" font="4">id</text>
<text top="1129" left="339" width="7" height="8" font="18">n</text>
<text top="1124" left="347" width="12" height="12" font="4">:T</text>
<text top="1129" left="359" width="7" height="8" font="18">n</text>
<text top="1124" left="367" width="31" height="12" font="4">, and</text>
<text top="1149" left="111" width="29" height="12" font="4">T =</text>
<text top="1140" left="162" width="9" height="12" font="4">Γ</text>
<text top="1145" left="170" width="22" height="8" font="18">local</text>
<text top="1140" left="193" width="21" height="12" font="4">(T )</text>
<text top="1140" left="229" width="79" height="12" font="4">if T ∈ dom(Γ</text>
<text top="1145" left="308" width="22" height="8" font="18">local</text>
<text top="1140" left="331" width="5" height="12" font="4">)</text>
<text top="1157" left="166" width="8" height="12" font="4">T</text>
<text top="1157" left="229" width="57" height="12" font="4">otherwise</text>
<text top="136" left="479" width="344" height="12" font="4">The rest of the code generation templates follow the same</text>
<text top="153" left="464" width="359" height="12" font="4">structure, returning the union of the Γs returned by its</text>
<text top="169" left="464" width="76" height="12" font="4">descendants.</text>
<text top="169" left="553" width="270" height="12" font="4">In addition, if one expression must have a</text>
<text top="185" left="464" width="359" height="12" font="4">speciﬁc type (e.g. integer in arithmetic expressions) and the</text>
<text top="202" left="464" width="359" height="12" font="4">type inferred is a type variable, that speciﬁc type is then</text>
<text top="218" left="464" width="304" height="12" font="4">added to a union type bound to the type variable.</text>
<text top="247" left="484" width="41" height="11" font="4">if E S</text>
<text top="251" left="525" width="5" height="8" font="18">1</text>
<text top="246" left="533" width="27" height="12" font="4">. . . S</text>
<text top="251" left="560" width="7" height="8" font="18">n</text>
<text top="246" left="572" width="8" height="12" font="4">S</text>
<text top="251" left="580" width="21" height="8" font="18">n+1</text>
<text top="246" left="604" width="27" height="12" font="4">. . . S</text>
<text top="251" left="631" width="57" height="8" font="18">n+m types</text>
<text top="246" left="689" width="14" height="12" font="4">(Γ</text>
<text top="251" left="703" width="29" height="8" font="18">global</text>
<text top="246" left="732" width="5" height="12" font="4">)</text>
<text top="262" left="506" width="9" height="12" font="4">Γ</text>
<text top="267" left="514" width="22" height="8" font="18">local</text>
<text top="262" left="542" width="33" height="13" font="4">← E</text>
<text top="267" left="581" width="25" height="8" font="18">types</text>
<text top="262" left="607" width="14" height="12" font="4">(Γ</text>
<text top="267" left="621" width="29" height="8" font="18">global</text>
<text top="262" left="651" width="5" height="12" font="4">)</text>
<text top="279" left="506" width="21" height="12" font="4">if Γ</text>
<text top="283" left="526" width="7" height="8" font="18">E</text>
<text top="279" left="534" width="16" height="12" font="4">; Ω</text>
<text top="283" left="551" width="7" height="8" font="18">E</text>
<text top="279" left="575" width="34" height="12" font="4">E : X</text>
<text top="295" left="534" width="86" height="12" font="4">add(X, bool, Γ</text>
<text top="300" left="619" width="22" height="8" font="18">local</text>
<text top="295" left="642" width="5" height="12" font="4">)</text>
<text top="312" left="506" width="50" height="12" font="4">return Γ</text>
<text top="316" left="556" width="22" height="8" font="18">local</text>
<text top="311" left="582" width="26" height="13" font="4">∨ S</text>
<text top="316" left="609" width="37" height="8" font="18">1 types</text>
<text top="312" left="647" width="14" height="12" font="4">(Γ</text>
<text top="316" left="661" width="29" height="8" font="18">global</text>
<text top="312" left="690" width="37" height="12" font="4">) ∨ . . .</text>
<text top="327" left="547" width="27" height="13" font="4">∨ S</text>
<text top="333" left="574" width="39" height="8" font="18">n types</text>
<text top="328" left="614" width="14" height="12" font="4">(Γ</text>
<text top="333" left="628" width="29" height="8" font="18">global</text>
<text top="328" left="657" width="35" height="12" font="4">) ∨ S</text>
<text top="333" left="692" width="53" height="8" font="18">n+1 types</text>
<text top="328" left="745" width="14" height="12" font="4">(Γ</text>
<text top="333" left="759" width="29" height="8" font="18">global</text>
<text top="328" left="789" width="37" height="12" font="4">) ∨ . . .</text>
<text top="344" left="547" width="27" height="13" font="4">∨ S</text>
<text top="349" left="574" width="57" height="8" font="18">n+m types</text>
<text top="345" left="632" width="14" height="12" font="4">(Γ</text>
<text top="349" left="646" width="29" height="8" font="18">global</text>
<text top="345" left="676" width="5" height="12" font="4">)</text>
<text top="372" left="484" width="62" height="11" font="4">while E S</text>
<text top="375" left="546" width="5" height="8" font="18">1</text>
<text top="371" left="555" width="27" height="12" font="4">. . . S</text>
<text top="375" left="582" width="39" height="8" font="18">n types</text>
<text top="371" left="621" width="14" height="12" font="4">(Γ</text>
<text top="376" left="635" width="29" height="8" font="18">global</text>
<text top="371" left="665" width="5" height="12" font="4">)</text>
<text top="387" left="506" width="9" height="12" font="4">Γ</text>
<text top="392" left="514" width="22" height="8" font="18">local</text>
<text top="387" left="542" width="33" height="13" font="4">← E</text>
<text top="392" left="581" width="25" height="8" font="18">types</text>
<text top="387" left="607" width="14" height="12" font="4">(Γ</text>
<text top="392" left="621" width="29" height="8" font="18">global</text>
<text top="387" left="651" width="5" height="12" font="4">)</text>
<text top="404" left="506" width="21" height="12" font="4">if Γ</text>
<text top="408" left="526" width="7" height="8" font="18">E</text>
<text top="404" left="534" width="16" height="12" font="4">; Ω</text>
<text top="408" left="551" width="7" height="8" font="18">E</text>
<text top="404" left="575" width="34" height="12" font="4">E : X</text>
<text top="420" left="534" width="86" height="12" font="4">add(X, bool, Γ</text>
<text top="425" left="619" width="22" height="8" font="18">local</text>
<text top="420" left="642" width="5" height="12" font="4">)</text>
<text top="437" left="506" width="50" height="12" font="4">return Γ</text>
<text top="441" left="556" width="22" height="8" font="18">local</text>
<text top="436" left="582" width="26" height="13" font="4">∨ S</text>
<text top="441" left="609" width="37" height="8" font="18">1 types</text>
<text top="437" left="647" width="14" height="12" font="4">(Γ</text>
<text top="441" left="661" width="29" height="8" font="18">global</text>
<text top="437" left="690" width="32" height="12" font="4">) ∨ ...</text>
<text top="452" left="547" width="27" height="13" font="4">∨ S</text>
<text top="458" left="574" width="39" height="8" font="18">n types</text>
<text top="453" left="614" width="14" height="12" font="4">(Γ</text>
<text top="458" left="628" width="29" height="8" font="18">global</text>
<text top="453" left="657" width="5" height="12" font="4">)</text>
<text top="480" left="484" width="56" height="11" font="4">return E</text>
<text top="484" left="546" width="25" height="8" font="18">types</text>
<text top="479" left="573" width="14" height="12" font="4">(Γ</text>
<text top="484" left="587" width="29" height="8" font="18">global</text>
<text top="479" left="616" width="5" height="12" font="4">)</text>
<text top="496" left="506" width="9" height="12" font="4">Γ</text>
<text top="500" left="514" width="22" height="8" font="18">local</text>
<text top="495" left="542" width="33" height="13" font="4">← E</text>
<text top="500" left="581" width="25" height="8" font="18">types</text>
<text top="496" left="607" width="14" height="12" font="4">(Γ</text>
<text top="500" left="621" width="29" height="8" font="18">global</text>
<text top="496" left="651" width="5" height="12" font="4">)</text>
<text top="512" left="506" width="39" height="12" font="4">if tv(Ω</text>
<text top="517" left="545" width="10" height="8" font="18">E.</text>
<text top="519" left="556" width="8" height="7" font="26">rt</text>
<text top="512" left="565" width="5" height="12" font="4">)</text>
<text top="529" left="534" width="37" height="12" font="4">add(Ω</text>
<text top="533" left="571" width="10" height="8" font="18">E.</text>
<text top="536" left="581" width="8" height="7" font="26">rt</text>
<text top="529" left="591" width="30" height="12" font="4">, T, Γ</text>
<text top="533" left="621" width="22" height="8" font="18">local</text>
<text top="529" left="644" width="5" height="12" font="4">)</text>
<text top="545" left="506" width="51" height="12" font="4">return Γ</text>
<text top="550" left="557" width="22" height="8" font="18">local</text>
<text top="571" left="484" width="35" height="12" font="4">ST id</text>
<text top="576" left="524" width="25" height="8" font="18">types</text>
<text top="571" left="550" width="14" height="12" font="4">(Γ</text>
<text top="576" left="564" width="29" height="8" font="18">global</text>
<text top="571" left="594" width="5" height="12" font="4">)</text>
<text top="571" left="626" width="75" height="12" font="4">return id:ST</text>
<text top="597" left="484" width="12" height="12" font="4">id</text>
<text top="602" left="501" width="25" height="8" font="18">types</text>
<text top="597" left="527" width="14" height="12" font="4">(Γ</text>
<text top="602" left="541" width="29" height="8" font="18">global</text>
<text top="597" left="571" width="5" height="12" font="4">)</text>
<text top="597" left="603" width="49" height="12" font="4">return ∅</text>
<text top="624" left="484" width="10" height="12" font="4">E</text>
<text top="628" left="494" width="5" height="8" font="18">1</text>
<text top="623" left="503" width="24" height="13" font="4">⊕ E</text>
<text top="628" left="527" width="37" height="8" font="18">2 types</text>
<text top="624" left="565" width="14" height="12" font="4">(Γ</text>
<text top="628" left="579" width="29" height="8" font="18">global</text>
<text top="624" left="609" width="5" height="12" font="4">)</text>
<text top="640" left="506" width="9" height="12" font="4">Γ</text>
<text top="645" left="514" width="22" height="8" font="18">local</text>
<text top="639" left="542" width="33" height="13" font="4">← E</text>
<text top="645" left="575" width="37" height="8" font="18">1 types</text>
<text top="640" left="613" width="14" height="12" font="4">(Γ</text>
<text top="645" left="627" width="29" height="8" font="18">global</text>
<text top="640" left="656" width="36" height="12" font="4">) ∨ E</text>
<text top="645" left="693" width="37" height="8" font="18">2 types</text>
<text top="640" left="731" width="14" height="12" font="4">(Γ</text>
<text top="645" left="745" width="29" height="8" font="18">global</text>
<text top="640" left="774" width="5" height="12" font="4">)</text>
<text top="657" left="506" width="21" height="12" font="4">if Γ</text>
<text top="661" left="526" width="8" height="8" font="18">E</text>
<text top="664" left="534" width="5" height="7" font="26">1</text>
<text top="657" left="541" width="16" height="12" font="4">; Ω</text>
<text top="661" left="557" width="8" height="8" font="18">E</text>
<text top="664" left="565" width="5" height="7" font="26">1</text>
<text top="657" left="588" width="10" height="12" font="4">E</text>
<text top="661" left="598" width="5" height="8" font="18">1</text>
<text top="657" left="608" width="19" height="12" font="4">: X</text>
<text top="661" left="627" width="5" height="8" font="18">1</text>
<text top="673" left="534" width="38" height="12" font="4">add(X</text>
<text top="678" left="572" width="5" height="8" font="18">1</text>
<text top="673" left="578" width="37" height="12" font="4">, int, Γ</text>
<text top="678" left="616" width="22" height="8" font="18">local</text>
<text top="673" left="639" width="5" height="12" font="4">)</text>
<text top="689" left="506" width="21" height="12" font="4">if Γ</text>
<text top="694" left="526" width="8" height="8" font="18">E</text>
<text top="697" left="534" width="5" height="7" font="26">2</text>
<text top="689" left="541" width="16" height="12" font="4">; Ω</text>
<text top="694" left="557" width="8" height="8" font="18">E</text>
<text top="697" left="565" width="5" height="7" font="26">2</text>
<text top="689" left="588" width="10" height="12" font="4">E</text>
<text top="694" left="598" width="5" height="8" font="18">2</text>
<text top="689" left="608" width="19" height="12" font="4">: X</text>
<text top="694" left="627" width="5" height="8" font="18">2</text>
<text top="706" left="534" width="38" height="12" font="4">add(X</text>
<text top="711" left="572" width="5" height="8" font="18">2</text>
<text top="706" left="578" width="37" height="12" font="4">, int, Γ</text>
<text top="711" left="616" width="22" height="8" font="18">local</text>
<text top="706" left="639" width="5" height="12" font="4">)</text>
<text top="722" left="506" width="51" height="12" font="4">return Γ</text>
<text top="727" left="557" width="22" height="8" font="18">local</text>
<text top="749" left="484" width="10" height="12" font="4">E</text>
<text top="753" left="494" width="5" height="8" font="18">1</text>
<text top="750" left="500" width="17" height="11" font="4">=E</text>
<text top="753" left="517" width="37" height="8" font="18">2 types</text>
<text top="749" left="555" width="14" height="12" font="4">(Γ</text>
<text top="753" left="569" width="29" height="8" font="18">global</text>
<text top="749" left="599" width="5" height="12" font="4">)</text>
<text top="765" left="506" width="9" height="12" font="4">Γ</text>
<text top="770" left="514" width="22" height="8" font="18">local</text>
<text top="764" left="542" width="33" height="13" font="4">← E</text>
<text top="770" left="575" width="37" height="8" font="18">1 types</text>
<text top="765" left="613" width="14" height="12" font="4">(Γ</text>
<text top="770" left="627" width="29" height="8" font="18">global</text>
<text top="765" left="656" width="36" height="12" font="4">) ∨ E</text>
<text top="770" left="693" width="37" height="8" font="18">2 types</text>
<text top="765" left="731" width="14" height="12" font="4">(Γ</text>
<text top="770" left="745" width="29" height="8" font="18">global</text>
<text top="765" left="774" width="5" height="12" font="4">)</text>
<text top="781" left="506" width="21" height="12" font="4">if Γ</text>
<text top="786" left="526" width="8" height="8" font="18">E</text>
<text top="789" left="534" width="5" height="7" font="26">1</text>
<text top="781" left="541" width="16" height="12" font="4">; Ω</text>
<text top="786" left="557" width="8" height="8" font="18">E</text>
<text top="789" left="565" width="5" height="7" font="26">1</text>
<text top="781" left="588" width="10" height="12" font="4">E</text>
<text top="786" left="598" width="5" height="8" font="18">1</text>
<text top="781" left="608" width="19" height="12" font="4">: X</text>
<text top="786" left="627" width="5" height="8" font="18">1</text>
<text top="798" left="534" width="38" height="12" font="4">add(X</text>
<text top="802" left="572" width="5" height="8" font="18">1</text>
<text top="798" left="578" width="14" height="12" font="4">, T</text>
<text top="802" left="592" width="5" height="8" font="18">2</text>
<text top="798" left="599" width="15" height="12" font="4">, Γ</text>
<text top="803" left="613" width="22" height="8" font="18">local</text>
<text top="798" left="637" width="5" height="12" font="4">)</text>
<text top="814" left="506" width="51" height="12" font="4">return Γ</text>
<text top="819" left="557" width="22" height="8" font="18">local</text>
<text top="831" left="478" width="49" height="12" font="4">where Γ</text>
<text top="835" left="527" width="8" height="8" font="18">E</text>
<text top="838" left="535" width="5" height="7" font="26">2</text>
<text top="831" left="541" width="16" height="12" font="4">; Ω</text>
<text top="835" left="558" width="8" height="8" font="18">E</text>
<text top="838" left="566" width="5" height="7" font="26">2</text>
<text top="831" left="588" width="10" height="12" font="4">E</text>
<text top="835" left="599" width="5" height="8" font="18">2</text>
<text top="831" left="609" width="16" height="12" font="4">: T</text>
<text top="835" left="624" width="5" height="8" font="18">2</text>
<text top="857" left="484" width="10" height="12" font="4">E</text>
<text top="862" left="494" width="5" height="8" font="18">1</text>
<text top="858" left="500" width="17" height="11" font="4">[E</text>
<text top="862" left="517" width="5" height="8" font="18">2</text>
<text top="858" left="524" width="7" height="11" font="4">]</text>
<text top="862" left="536" width="25" height="8" font="18">types</text>
<text top="857" left="562" width="14" height="12" font="4">(Γ</text>
<text top="862" left="576" width="29" height="8" font="18">global</text>
<text top="857" left="606" width="5" height="12" font="4">)</text>
<text top="873" left="506" width="9" height="12" font="4">Γ</text>
<text top="878" left="514" width="22" height="8" font="18">local</text>
<text top="873" left="542" width="33" height="13" font="4">← E</text>
<text top="878" left="575" width="37" height="8" font="18">1 types</text>
<text top="873" left="613" width="14" height="12" font="4">(Γ</text>
<text top="878" left="627" width="29" height="8" font="18">global</text>
<text top="873" left="656" width="36" height="12" font="4">) ∨ E</text>
<text top="878" left="693" width="37" height="8" font="18">2 types</text>
<text top="873" left="731" width="14" height="12" font="4">(Γ</text>
<text top="878" left="745" width="29" height="8" font="18">global</text>
<text top="873" left="774" width="5" height="12" font="4">)</text>
<text top="890" left="506" width="21" height="12" font="4">if Γ</text>
<text top="894" left="526" width="8" height="8" font="18">E</text>
<text top="897" left="534" width="5" height="7" font="26">1</text>
<text top="890" left="541" width="16" height="12" font="4">; Ω</text>
<text top="894" left="557" width="8" height="8" font="18">E</text>
<text top="897" left="565" width="5" height="7" font="26">1</text>
<text top="890" left="588" width="10" height="12" font="4">E</text>
<text top="894" left="598" width="5" height="8" font="18">1</text>
<text top="890" left="608" width="19" height="12" font="4">: X</text>
<text top="894" left="627" width="5" height="8" font="18">1</text>
<text top="906" left="534" width="38" height="12" font="4">add(X</text>
<text top="911" left="572" width="5" height="8" font="18">1</text>
<text top="906" left="578" width="80" height="12" font="4">, Array(T ), Γ</text>
<text top="911" left="658" width="22" height="8" font="18">local</text>
<text top="906" left="681" width="5" height="12" font="4">)</text>
<text top="923" left="506" width="21" height="12" font="4">if Γ</text>
<text top="927" left="526" width="8" height="8" font="18">E</text>
<text top="930" left="534" width="5" height="7" font="26">2</text>
<text top="923" left="541" width="16" height="12" font="4">; Ω</text>
<text top="927" left="557" width="8" height="8" font="18">E</text>
<text top="930" left="565" width="5" height="7" font="26">2</text>
<text top="923" left="588" width="10" height="12" font="4">E</text>
<text top="927" left="598" width="5" height="8" font="18">2</text>
<text top="923" left="608" width="19" height="12" font="4">: X</text>
<text top="927" left="627" width="5" height="8" font="18">2</text>
<text top="939" left="534" width="38" height="12" font="4">add(X</text>
<text top="944" left="572" width="5" height="8" font="18">2</text>
<text top="939" left="578" width="37" height="12" font="4">, int, Γ</text>
<text top="944" left="616" width="22" height="8" font="18">local</text>
<text top="939" left="639" width="5" height="12" font="4">)</text>
<text top="956" left="506" width="51" height="12" font="4">return Γ</text>
<text top="960" left="557" width="22" height="8" font="18">local</text>
<text top="972" left="478" width="49" height="12" font="4">where Γ</text>
<text top="977" left="527" width="8" height="8" font="18">E</text>
<text top="980" left="535" width="5" height="7" font="26">1</text>
<text top="977" left="541" width="11" height="8" font="18">[E</text>
<text top="980" left="552" width="5" height="7" font="26">2</text>
<text top="977" left="558" width="3" height="8" font="18">]</text>
<text top="972" left="562" width="16" height="12" font="4">; Ω</text>
<text top="977" left="578" width="8" height="8" font="18">E</text>
<text top="980" left="586" width="5" height="7" font="26">1</text>
<text top="977" left="592" width="11" height="8" font="18">[E</text>
<text top="980" left="603" width="5" height="7" font="26">2</text>
<text top="977" left="609" width="3" height="8" font="18">]</text>
<text top="972" left="629" width="10" height="12" font="4">E</text>
<text top="977" left="639" width="5" height="8" font="18">1</text>
<text top="972" left="645" width="14" height="12" font="4">[E</text>
<text top="977" left="659" width="5" height="8" font="18">2</text>
<text top="972" left="665" width="23" height="12" font="4">] : T</text>
<text top="998" left="484" width="30" height="12" font="4">E.id</text>
<text top="1003" left="519" width="25" height="8" font="18">types</text>
<text top="998" left="545" width="14" height="12" font="4">(Γ</text>
<text top="1003" left="559" width="29" height="8" font="18">global</text>
<text top="998" left="589" width="5" height="12" font="4">)</text>
<text top="1015" left="506" width="9" height="12" font="4">Γ</text>
<text top="1019" left="514" width="22" height="8" font="18">local</text>
<text top="1014" left="542" width="33" height="13" font="4">← E</text>
<text top="1019" left="581" width="25" height="8" font="18">types</text>
<text top="1015" left="607" width="14" height="12" font="4">(Γ</text>
<text top="1019" left="621" width="29" height="8" font="18">global</text>
<text top="1015" left="651" width="5" height="12" font="4">)</text>
<text top="1031" left="506" width="21" height="12" font="4">if Γ</text>
<text top="1036" left="526" width="8" height="8" font="18">E</text>
<text top="1031" left="536" width="16" height="12" font="4">; Ω</text>
<text top="1036" left="552" width="8" height="8" font="18">E</text>
<text top="1031" left="577" width="34" height="12" font="4">E : X</text>
<text top="1048" left="534" width="93" height="12" font="4">add(X, [id:T ], Γ</text>
<text top="1052" left="627" width="22" height="8" font="18">local</text>
<text top="1048" left="650" width="5" height="12" font="4">)</text>
<text top="1064" left="506" width="51" height="12" font="4">return Γ</text>
<text top="1069" left="557" width="22" height="8" font="18">local</text>
<text top="1091" left="484" width="98" height="11" font="4">new ST [E]([])</text>
<text top="1087" left="582" width="6" height="8" font="18">∗</text>
<text top="1095" left="594" width="25" height="8" font="18">types</text>
<text top="1090" left="620" width="14" height="12" font="4">(Γ</text>
<text top="1095" left="634" width="29" height="8" font="18">global</text>
<text top="1090" left="664" width="5" height="12" font="4">)</text>
<text top="1090" left="695" width="57" height="12" font="4">return E</text>
<text top="1095" left="758" width="25" height="8" font="18">types</text>
<text top="1090" left="785" width="14" height="12" font="4">(Γ</text>
<text top="1095" left="799" width="29" height="8" font="18">global</text>
<text top="1090" left="828" width="5" height="12" font="4">)</text>
<text top="1118" left="484" width="44" height="11" font="4">new {id</text>
<text top="1121" left="528" width="5" height="8" font="18">1</text>
<text top="1118" left="534" width="17" height="11" font="4">=E</text>
<text top="1121" left="551" width="5" height="8" font="18">1</text>
<text top="1116" left="557" width="43" height="12" font="4">, . . . , id</text>
<text top="1121" left="600" width="7" height="8" font="18">n</text>
<text top="1118" left="608" width="17" height="11" font="4">=E</text>
<text top="1121" left="625" width="7" height="8" font="18">n</text>
<text top="1116" left="632" width="7" height="13" font="4">}</text>
<text top="1121" left="645" width="25" height="8" font="18">types</text>
<text top="1116" left="671" width="14" height="12" font="4">(Γ</text>
<text top="1121" left="685" width="29" height="8" font="18">global</text>
<text top="1116" left="715" width="5" height="12" font="4">)</text>
<text top="1133" left="506" width="58" height="12" font="4">return E</text>
<text top="1138" left="564" width="37" height="8" font="18">1 types</text>
<text top="1133" left="602" width="14" height="12" font="4">(Γ</text>
<text top="1138" left="616" width="29" height="8" font="18">global</text>
<text top="1133" left="645" width="68" height="12" font="4">) ∨ . . . ∨ E</text>
<text top="1138" left="713" width="39" height="8" font="18">n types</text>
<text top="1133" left="753" width="14" height="12" font="4">(Γ</text>
<text top="1138" left="767" width="29" height="8" font="18">global</text>
<text top="1133" left="796" width="5" height="12" font="4">)</text>
<text top="1159" left="484" width="28" height="11" font="4">true</text>
<text top="1163" left="518" width="25" height="8" font="18">types</text>
<text top="1158" left="544" width="14" height="12" font="4">(Γ</text>
<text top="1163" left="558" width="29" height="8" font="18">global</text>
<text top="1158" left="587" width="65" height="12" font="4">) = false</text>
<text top="1163" left="658" width="25" height="8" font="18">types</text>
<text top="1158" left="684" width="14" height="12" font="4">(Γ</text>
<text top="1163" left="698" width="29" height="8" font="18">global</text>
<text top="1158" left="727" width="20" height="12" font="4">) =</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="17" position="absolute" top="0" left="0" height="1262" width="892">
<text top="93" left="70" width="15" height="13" font="2">16</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="136" left="172" width="64" height="12" font="4">IntLiteral</text>
<text top="141" left="242" width="25" height="8" font="18">types</text>
<text top="136" left="268" width="14" height="12" font="4">(Γ</text>
<text top="141" left="282" width="29" height="8" font="18">global</text>
<text top="136" left="312" width="5" height="12" font="4">)</text>
<text top="136" left="360" width="49" height="12" font="4">return ∅</text>
<text top="168" left="85" width="344" height="12" font="4">In the invocation expression, the function type is taken</text>
<text top="184" left="70" width="40" height="12" font="4">from Γ</text>
<text top="189" left="110" width="29" height="8" font="18">global</text>
<text top="184" left="143" width="285" height="12" font="4">rather than from the inferred type, reducing the</text>
<text top="201" left="70" width="234" height="12" font="4">number of casts in the generated code.</text>
<text top="233" left="89" width="29" height="12" font="4">id(E</text>
<text top="238" left="118" width="5" height="8" font="18">1</text>
<text top="233" left="127" width="29" height="12" font="4">. . . E</text>
<text top="238" left="156" width="7" height="8" font="18">n</text>
<text top="234" left="163" width="7" height="11" font="4">)</text>
<text top="238" left="176" width="25" height="8" font="18">types</text>
<text top="233" left="202" width="14" height="12" font="4">(Γ</text>
<text top="238" left="216" width="29" height="8" font="18">global</text>
<text top="233" left="246" width="5" height="12" font="4">)</text>
<text top="250" left="111" width="9" height="12" font="4">Γ</text>
<text top="254" left="120" width="22" height="8" font="18">local</text>
<text top="249" left="147" width="33" height="13" font="4">← E</text>
<text top="254" left="180" width="37" height="8" font="18">1 types</text>
<text top="250" left="218" width="14" height="12" font="4">(Γ</text>
<text top="254" left="232" width="29" height="8" font="18">global</text>
<text top="250" left="262" width="68" height="12" font="4">) ∨ . . . ∨ E</text>
<text top="254" left="330" width="39" height="8" font="18">n types</text>
<text top="250" left="369" width="14" height="12" font="4">(Γ</text>
<text top="254" left="383" width="29" height="8" font="18">global</text>
<text top="250" left="413" width="5" height="12" font="4">)</text>
<text top="265" left="111" width="62" height="13" font="4">∀ i ∈ [1, n]</text>
<text top="282" left="139" width="21" height="12" font="4">if Γ</text>
<text top="287" left="160" width="8" height="8" font="18">E</text>
<text top="290" left="168" width="4" height="7" font="26">i</text>
<text top="282" left="174" width="16" height="12" font="4">; Ω</text>
<text top="287" left="190" width="8" height="8" font="18">E</text>
<text top="290" left="198" width="4" height="7" font="26">i</text>
<text top="282" left="220" width="10" height="12" font="4">E</text>
<text top="287" left="230" width="4" height="8" font="18">i</text>
<text top="282" left="238" width="19" height="12" font="4">: X</text>
<text top="287" left="257" width="4" height="8" font="18">i</text>
<text top="299" left="167" width="38" height="12" font="4">add(X</text>
<text top="303" left="205" width="4" height="8" font="18">i</text>
<text top="299" left="210" width="14" height="12" font="4">, T</text>
<text top="303" left="224" width="4" height="8" font="18">i</text>
<text top="299" left="229" width="15" height="12" font="4">, Γ</text>
<text top="304" left="244" width="22" height="8" font="18">local</text>
<text top="299" left="267" width="5" height="12" font="4">)</text>
<text top="315" left="111" width="51" height="12" font="4">return Γ</text>
<text top="320" left="162" width="22" height="8" font="18">local</text>
<text top="332" left="84" width="49" height="12" font="4">where Γ</text>
<text top="336" left="132" width="29" height="8" font="18">global</text>
<text top="332" left="162" width="42" height="12" font="4">(id) : T</text>
<text top="336" left="204" width="5" height="8" font="18">1</text>
<text top="331" left="213" width="55" height="13" font="4">× . . . × T</text>
<text top="336" left="268" width="7" height="8" font="18">n</text>
<text top="331" left="280" width="26" height="13" font="4">→ T</text>
<text top="363" left="85" width="189" height="12" font="4">Finally, we can now deﬁne the</text>
<text top="368" left="297" width="16" height="8" font="18">CG</text>
<text top="363" left="319" width="109" height="12" font="4">template for local</text>
<text top="380" left="70" width="359" height="12" font="4">variable declarations, using the type erasures of the types</text>
<text top="396" left="70" width="160" height="12" font="4">inferred in the local scope.</text>
<text top="429" left="103" width="65" height="12" font="4">D = ST id</text>
<text top="433" left="174" width="16" height="8" font="18">CG</text>
<text top="429" left="191" width="14" height="12" font="4">(Γ</text>
<text top="433" left="205" width="22" height="8" font="18">local</text>
<text top="429" left="228" width="5" height="12" font="4">)</text>
<text top="428" left="259" width="18" height="13" font="4">|T |</text>
<text top="433" left="277" width="7" height="8" font="18">Γ</text>
<text top="436" left="284" width="21" height="7" font="26">local</text>
<text top="429" left="310" width="23" height="12" font="4">id ;</text>
<text top="445" left="125" width="49" height="12" font="4">where Γ</text>
<text top="450" left="174" width="22" height="8" font="18">local</text>
<text top="445" left="197" width="16" height="12" font="4">; Ω</text>
<text top="450" left="213" width="9" height="8" font="18">D</text>
<text top="445" left="239" width="31" height="12" font="4">id : T</text>
<text top="477" left="85" width="344" height="12" font="4">Following the same process, each function is translated to</text>
<text top="493" left="70" width="359" height="12" font="4">a private static method in C#. The return type and the</text>
<text top="510" left="70" width="359" height="12" font="4">types of the parameters are the erasures of the types held</text>
<text top="526" left="70" width="359" height="12" font="4">in the local Γ. The return statement is the last one to be</text>
<text top="542" left="70" width="62" height="12" font="4">generated.</text>
<text top="575" left="75" width="81" height="12" font="4">F =ST id(ST</text>
<text top="579" left="156" width="5" height="8" font="18">1</text>
<text top="575" left="166" width="12" height="12" font="4">id</text>
<text top="579" left="178" width="5" height="8" font="18">1</text>
<text top="575" left="184" width="29" height="12" font="4">...ST</text>
<text top="579" left="213" width="7" height="8" font="18">n</text>
<text top="575" left="225" width="12" height="12" font="4">id</text>
<text top="579" left="237" width="7" height="8" font="18">n</text>
<text top="576" left="244" width="22" height="11" font="4">) D</text>
<text top="579" left="266" width="5" height="8" font="18">1</text>
<text top="575" left="273" width="23" height="12" font="4">...D</text>
<text top="579" left="296" width="10" height="8" font="18">m</text>
<text top="575" left="310" width="8" height="12" font="4">S</text>
<text top="579" left="318" width="5" height="8" font="18">1</text>
<text top="575" left="325" width="20" height="12" font="4">...S</text>
<text top="580" left="345" width="4" height="8" font="18">l</text>
<text top="575" left="353" width="10" height="12" font="4">R</text>
<text top="579" left="369" width="16" height="8" font="18">CG</text>
<text top="575" left="386" width="14" height="12" font="4">(Γ</text>
<text top="580" left="400" width="22" height="8" font="18">local</text>
<text top="575" left="423" width="5" height="12" font="4">)</text>
<text top="592" left="98" width="68" height="11" font="4">static |T |</text>
<text top="596" left="165" width="7" height="8" font="18">Γ</text>
<text top="599" left="172" width="21" height="7" font="26">local</text>
<text top="591" left="199" width="31" height="12" font="4">id(|T</text>
<text top="597" left="229" width="5" height="8" font="18">1</text>
<text top="591" left="236" width="4" height="13" font="4">|</text>
<text top="596" left="239" width="7" height="8" font="18">Γ</text>
<text top="599" left="246" width="21" height="7" font="26">local</text>
<text top="591" left="273" width="12" height="12" font="4">id</text>
<text top="596" left="284" width="5" height="8" font="18">1</text>
<text top="592" left="291" width="47" height="11" font="4">, . . . ,|T</text>
<text top="597" left="337" width="7" height="8" font="18">n</text>
<text top="591" left="345" width="4" height="13" font="4">|</text>
<text top="596" left="349" width="7" height="8" font="18">Γ</text>
<text top="599" left="356" width="21" height="7" font="26">local</text>
<text top="591" left="382" width="12" height="12" font="4">id</text>
<text top="596" left="394" width="7" height="8" font="18">n</text>
<text top="592" left="402" width="21" height="11" font="4">) {</text>
<text top="609" left="125" width="42" height="11" font="4">object</text>
<text top="609" left="180" width="35" height="11" font="4">temp;</text>
<text top="624" left="131" width="11" height="12" font="4">D</text>
<text top="629" left="142" width="28" height="8" font="18">1 CG</text>
<text top="624" left="171" width="14" height="12" font="4">(Γ</text>
<text top="629" left="185" width="22" height="8" font="18">local</text>
<text top="624" left="208" width="24" height="12" font="4">) . . .</text>
<text top="624" left="247" width="11" height="12" font="4">D</text>
<text top="629" left="259" width="32" height="8" font="18">m CG</text>
<text top="624" left="292" width="14" height="12" font="4">(Γ</text>
<text top="629" left="306" width="22" height="8" font="18">local</text>
<text top="624" left="329" width="5" height="12" font="4">)</text>
<text top="641" left="125" width="76" height="12" font="4">statement(S</text>
<text top="645" left="201" width="5" height="8" font="18">1</text>
<text top="641" left="207" width="15" height="12" font="4">, Γ</text>
<text top="645" left="222" width="22" height="8" font="18">local</text>
<text top="641" left="245" width="110" height="12" font="4">) . . . statement(S</text>
<text top="645" left="355" width="4" height="8" font="18">l</text>
<text top="641" left="359" width="15" height="12" font="4">, Γ</text>
<text top="645" left="374" width="22" height="8" font="18">local</text>
<text top="641" left="397" width="5" height="12" font="4">)</text>
<text top="657" left="131" width="10" height="12" font="4">R</text>
<text top="662" left="147" width="16" height="8" font="18">CG</text>
<text top="657" left="164" width="14" height="12" font="4">(Γ</text>
<text top="662" left="178" width="22" height="8" font="18">local</text>
<text top="657" left="201" width="5" height="12" font="4">)</text>
<text top="673" left="98" width="7" height="13" font="4">}</text>
<text top="690" left="70" width="35" height="12" font="4">where</text>
<text top="690" left="125" width="9" height="12" font="4">Γ</text>
<text top="695" left="134" width="22" height="8" font="18">local</text>
<text top="690" left="157" width="16" height="12" font="4">; Ω</text>
<text top="695" left="173" width="7" height="8" font="18">F</text>
<text top="690" left="198" width="12" height="12" font="4">id</text>
<text top="695" left="210" width="5" height="8" font="18">1</text>
<text top="690" left="220" width="16" height="12" font="4">: T</text>
<text top="695" left="236" width="5" height="8" font="18">1</text>
<text top="690" left="242" width="43" height="12" font="4">, . . . , Γ</text>
<text top="695" left="286" width="22" height="8" font="18">local</text>
<text top="690" left="309" width="16" height="12" font="4">; Ω</text>
<text top="695" left="325" width="7" height="8" font="18">F</text>
<text top="690" left="350" width="12" height="12" font="4">id</text>
<text top="695" left="362" width="7" height="8" font="18">n</text>
<text top="690" left="374" width="16" height="12" font="4">: T</text>
<text top="695" left="389" width="7" height="8" font="18">n</text>
<text top="690" left="397" width="31" height="12" font="4">, and</text>
<text top="706" left="125" width="9" height="12" font="4">Γ</text>
<text top="711" left="134" width="22" height="8" font="18">local</text>
<text top="706" left="157" width="16" height="12" font="4">; Ω</text>
<text top="711" left="173" width="7" height="8" font="18">F</text>
<text top="706" left="198" width="31" height="12" font="4">id : T</text>
<text top="711" left="230" width="6" height="8" font="18">p</text>
<text top="714" left="236" width="5" height="7" font="26">1</text>
<text top="706" left="245" width="55" height="13" font="4">× . . . × T</text>
<text top="711" left="300" width="6" height="8" font="18">p</text>
<text top="713" left="306" width="7" height="7" font="26">n</text>
<text top="706" left="318" width="26" height="13" font="4">→ T</text>
<text top="747" left="70" width="27" height="13" font="2">4.5.</text>
<text top="747" left="114" width="134" height="13" font="2">Basic Expressions</text>
<text top="774" left="70" width="359" height="12" font="4">To optimize runtime performance of the generated code, we</text>
<text top="790" left="70" width="59" height="12" font="4">deﬁne the</text>
<text top="795" left="148" width="16" height="8" font="18">CG</text>
<text top="790" left="169" width="259" height="12" font="4">traversal for expressions returning the type</text>
<text top="807" left="70" width="359" height="12" font="4">erasure of the generated expression. This makes it easier</text>
<text top="823" left="70" width="359" height="12" font="4">to reduce the number of unnecessary casts. Following this</text>
<text top="840" left="70" width="359" height="12" font="4">scheme, code generation of basic expressions is deﬁned as</text>
<text top="856" left="70" width="45" height="12" font="4">follows:</text>
<text top="890" left="103" width="28" height="11" font="4">true</text>
<text top="893" left="137" width="16" height="8" font="18">CG</text>
<text top="888" left="154" width="14" height="12" font="4">(Γ</text>
<text top="893" left="168" width="22" height="8" font="18">local</text>
<text top="888" left="191" width="5" height="12" font="4">)</text>
<text top="890" left="236" width="28" height="11" font="4">true</text>
<text top="905" left="236" width="68" height="12" font="4">return bool</text>
<text top="932" left="103" width="35" height="11" font="4">false</text>
<text top="936" left="144" width="16" height="8" font="18">CG</text>
<text top="931" left="161" width="14" height="12" font="4">(Γ</text>
<text top="936" left="175" width="22" height="8" font="18">local</text>
<text top="931" left="198" width="5" height="12" font="4">)</text>
<text top="932" left="236" width="35" height="11" font="4">false</text>
<text top="948" left="236" width="68" height="12" font="4">return bool</text>
<text top="974" left="103" width="64" height="12" font="4">IntLiteral</text>
<text top="978" left="173" width="16" height="8" font="18">CG</text>
<text top="974" left="190" width="14" height="12" font="4">(Γ</text>
<text top="979" left="204" width="22" height="8" font="18">local</text>
<text top="974" left="227" width="5" height="12" font="4">)</text>
<text top="974" left="263" width="64" height="12" font="4">IntLiteral</text>
<text top="990" left="263" width="59" height="12" font="4">return int</text>
<text top="1016" left="103" width="12" height="12" font="4">id</text>
<text top="1021" left="121" width="16" height="8" font="18">CG</text>
<text top="1016" left="138" width="14" height="12" font="4">(Γ</text>
<text top="1021" left="152" width="22" height="8" font="18">local</text>
<text top="1016" left="175" width="5" height="12" font="4">)</text>
<text top="1016" left="208" width="12" height="12" font="4">id</text>
<text top="1033" left="208" width="60" height="12" font="4">return |T |</text>
<text top="1038" left="268" width="7" height="8" font="18">Γ</text>
<text top="1041" left="275" width="21" height="7" font="26">local</text>
<text top="1049" left="98" width="49" height="12" font="4">where Γ</text>
<text top="1054" left="146" width="22" height="8" font="18">local</text>
<text top="1049" left="169" width="16" height="12" font="4">; Ω</text>
<text top="1054" left="185" width="10" height="8" font="18">id</text>
<text top="1049" left="212" width="31" height="12" font="4">id : T</text>
<text top="1081" left="85" width="344" height="12" font="4">Notice that the type erasure of the identiﬁer is taken from</text>
<text top="1097" left="70" width="359" height="12" font="4">the local environment, returning the least upper bound of</text>
<text top="1114" left="70" width="262" height="12" font="4">all its possible C# types in the local scope.</text>
<text top="1142" left="85" width="264" height="12" font="4">Definition 4.4. Given two type erasures T</text>
<text top="1144" left="349" width="5" height="8" font="18">1</text>
<text top="1139" left="361" width="36" height="12" font="4">and T</text>
<text top="1144" left="397" width="5" height="8" font="18">2</text>
<text top="1139" left="403" width="25" height="12" font="4">, an</text>
<text top="1156" left="70" width="323" height="12" font="4">expression node E, and an environment Γ, we deﬁne:</text>
<text top="138" left="464" width="38" height="12" font="4">cast(T</text>
<text top="142" left="503" width="5" height="8" font="18">1</text>
<text top="138" left="509" width="14" height="12" font="4">, T</text>
<text top="142" left="523" width="5" height="8" font="18">2</text>
<text top="138" left="529" width="56" height="12" font="4">, E, Γ) ≡</text>
<text top="155" left="492" width="22" height="11" font="4">((T</text>
<text top="159" left="514" width="5" height="8" font="18">2</text>
<text top="155" left="520" width="23" height="11" font="4">) E</text>
<text top="159" left="550" width="16" height="8" font="18">CG</text>
<text top="154" left="567" width="56" height="12" font="4">(Γ)) if T</text>
<text top="159" left="623" width="5" height="8" font="18">1</text>
<text top="154" left="633" width="23" height="12" font="4">= T</text>
<text top="159" left="655" width="5" height="8" font="18">2</text>
<text top="154" left="665" width="34" height="12" font="4">and T</text>
<text top="159" left="700" width="5" height="8" font="18">2</text>
<text top="154" left="710" width="78" height="12" font="4">= object and</text>
<text top="171" left="616" width="33" height="12" font="4">not(T</text>
<text top="175" left="650" width="5" height="8" font="18">2</text>
<text top="171" left="656" width="87" height="12" font="4">=Array and T</text>
<text top="175" left="743" width="5" height="8" font="18">1</text>
<text top="171" left="749" width="43" height="12" font="4">=T ([ ])</text>
<text top="168" left="792" width="8" height="8" font="18">+</text>
<text top="171" left="801" width="5" height="12" font="4">)</text>
<text top="188" left="492" width="23" height="11" font="4">( E</text>
<text top="192" left="521" width="16" height="8" font="18">CG</text>
<text top="187" left="538" width="26" height="12" font="4">(Γ))</text>
<text top="187" left="603" width="57" height="12" font="4">otherwise</text>
<text top="230" left="479" width="344" height="12" font="4">The cast function generates code for the E expression</text>
<text top="246" left="464" width="359" height="12" font="4">including a cast when necessary. In case the types are the</text>
<text top="263" left="464" width="359" height="12" font="4">same, or the destination is object, or an array type is cast</text>
<text top="279" left="464" width="335" height="14" font="4">to the .Net Array type, the cast will not be generated.</text>
<text top="295" left="479" width="344" height="12" font="4">To avoid generating unnecessary object type erasures for</text>
<text top="312" left="464" width="359" height="12" font="4">the types inferred by the compiler, we use the following</text>
<text top="328" left="464" width="155" height="12" font="4">properties of union types:</text>
<text top="356" left="478" width="73" height="12" font="4">T ∨ T −→ T</text>
<text top="373" left="478" width="8" height="12" font="4">T</text>
<text top="377" left="486" width="5" height="8" font="18">1</text>
<text top="372" left="496" width="20" height="13" font="4">∨ T</text>
<text top="377" left="516" width="5" height="8" font="18">2</text>
<text top="372" left="526" width="23" height="13" font="4">≡ T</text>
<text top="377" left="549" width="5" height="8" font="18">2</text>
<text top="372" left="558" width="20" height="13" font="4">∨ T</text>
<text top="377" left="578" width="5" height="8" font="18">1</text>
<text top="389" left="478" width="13" height="12" font="4">(T</text>
<text top="394" left="492" width="5" height="8" font="18">1</text>
<text top="388" left="501" width="20" height="13" font="4">∨ T</text>
<text top="394" left="521" width="5" height="8" font="18">2</text>
<text top="389" left="528" width="29" height="12" font="4">) ∨ T</text>
<text top="394" left="556" width="5" height="8" font="18">3</text>
<text top="388" left="566" width="23" height="13" font="4">≡ T</text>
<text top="394" left="589" width="5" height="8" font="18">1</text>
<text top="388" left="598" width="26" height="13" font="4">∨ (T</text>
<text top="394" left="624" width="5" height="8" font="18">2</text>
<text top="388" left="633" width="20" height="13" font="4">∨ T</text>
<text top="394" left="654" width="5" height="8" font="18">3</text>
<text top="389" left="660" width="43" height="12" font="4">) −→ T</text>
<text top="394" left="703" width="5" height="8" font="18">1</text>
<text top="388" left="713" width="20" height="13" font="4">∨ T</text>
<text top="394" left="733" width="5" height="8" font="18">2</text>
<text top="388" left="742" width="20" height="13" font="4">∨ T</text>
<text top="394" left="763" width="5" height="8" font="18">3</text>
<text top="405" left="478" width="52" height="12" font="4">Array(T</text>
<text top="410" left="530" width="5" height="8" font="18">1</text>
<text top="405" left="536" width="72" height="12" font="4">) ∨ Array(T</text>
<text top="410" left="608" width="5" height="8" font="18">2</text>
<text top="405" left="615" width="87" height="12" font="4">) −→ Array(T</text>
<text top="410" left="702" width="5" height="8" font="18">1</text>
<text top="405" left="711" width="20" height="13" font="4">∨ T</text>
<text top="410" left="731" width="5" height="8" font="18">2</text>
<text top="405" left="738" width="5" height="12" font="4">)</text>
<text top="422" left="478" width="19" height="13" font="4">{id</text>
<text top="427" left="497" width="5" height="8" font="18">1</text>
<text top="423" left="503" width="12" height="12" font="4">:T</text>
<text top="427" left="515" width="5" height="8" font="18">1</text>
<text top="423" left="521" width="36" height="12" font="4">, ..., id</text>
<text top="427" left="557" width="7" height="8" font="18">n</text>
<text top="423" left="565" width="12" height="12" font="4">:T</text>
<text top="427" left="577" width="7" height="8" font="18">n</text>
<text top="422" left="584" width="38" height="13" font="4">} ∨ [id</text>
<text top="427" left="622" width="4" height="8" font="18">i</text>
<text top="423" left="627" width="12" height="12" font="4">:T</text>
<text top="427" left="639" width="4" height="8" font="18">i</text>
<text top="423" left="644" width="4" height="12" font="4">]</text>
<text top="420" left="648" width="34" height="8" font="18">i∈[1,n]</text>
<text top="422" left="686" width="45" height="13" font="4">−→ {id</text>
<text top="427" left="731" width="5" height="8" font="18">1</text>
<text top="423" left="737" width="12" height="12" font="4">:T</text>
<text top="427" left="749" width="5" height="8" font="18">1</text>
<text top="423" left="755" width="36" height="12" font="4">, ..., id</text>
<text top="427" left="791" width="7" height="8" font="18">n</text>
<text top="423" left="798" width="12" height="12" font="4">:T</text>
<text top="427" left="810" width="7" height="8" font="18">n</text>
<text top="422" left="818" width="7" height="13" font="4">}</text>
<text top="440" left="478" width="16" height="12" font="4">[id</text>
<text top="445" left="494" width="5" height="8" font="18">1</text>
<text top="440" left="500" width="12" height="12" font="4">:T</text>
<text top="445" left="512" width="5" height="8" font="18">1</text>
<text top="440" left="518" width="36" height="12" font="4">, ..., id</text>
<text top="445" left="554" width="7" height="8" font="18">n</text>
<text top="440" left="562" width="12" height="12" font="4">:T</text>
<text top="445" left="574" width="7" height="8" font="18">n</text>
<text top="440" left="581" width="35" height="12" font="4">] ∨ [id</text>
<text top="445" left="616" width="4" height="8" font="18">i</text>
<text top="440" left="621" width="12" height="12" font="4">:T</text>
<text top="445" left="633" width="4" height="8" font="18">i</text>
<text top="440" left="638" width="4" height="12" font="4">]</text>
<text top="438" left="641" width="34" height="8" font="18">i∈[1,n]</text>
<text top="439" left="680" width="42" height="13" font="4">−→ [id</text>
<text top="445" left="721" width="5" height="8" font="18">1</text>
<text top="440" left="728" width="12" height="12" font="4">:T</text>
<text top="445" left="739" width="5" height="8" font="18">1</text>
<text top="440" left="746" width="36" height="12" font="4">, ..., id</text>
<text top="445" left="781" width="7" height="8" font="18">n</text>
<text top="440" left="789" width="12" height="12" font="4">:T</text>
<text top="445" left="801" width="7" height="8" font="18">n</text>
<text top="440" left="809" width="4" height="12" font="4">]</text>
<text top="468" left="479" width="344" height="12" font="4">If a type already exists in a union type, it is not added.</text>
<text top="484" left="464" width="359" height="12" font="4">Union types are commutative, and nesting is avoided. A</text>
<text top="501" left="464" width="359" height="12" font="4">union of arrays is represented with an array of unions; this</text>
<text top="517" left="464" width="359" height="12" font="4">way, the union of objects will not be erased to the object</text>
<text top="534" left="464" width="359" height="12" font="4">type. If all the ﬁeld labels in a member type exist in an</text>
<text top="550" left="464" width="359" height="12" font="4">object type and the corresponding types are equal, the</text>
<text top="567" left="464" width="321" height="12" font="4">member type can be deleted from the union type.</text>
<text top="567" left="799" width="24" height="12" font="4">The</text>
<text top="583" left="464" width="285" height="12" font="4">previous property also holds for member types.</text>
<text top="599" left="479" width="344" height="12" font="4">We now deﬁne the generation of arithmetic expressions</text>
<text top="616" left="464" width="359" height="12" font="4">(logical and relational ones are similar). The ﬁrst operand</text>
<text top="632" left="464" width="359" height="12" font="4">is translated to C# and, if necessary, a cast to integer is</text>
<text top="649" left="464" width="359" height="12" font="4">inserted. If the type of one of the operands is dynamic and</text>
<text top="665" left="464" width="359" height="12" font="4">it is not a subtype of int, an InvalidCastException will be</text>
<text top="682" left="464" width="359" height="12" font="4">thrown by the CLR at runtime. The generated code does</text>
<text top="698" left="464" width="359" height="12" font="4">not perform extra type checking at runtime because it is</text>
<text top="715" left="464" width="157" height="12" font="4">already done by the CLR.</text>
<text top="743" left="470" width="10" height="12" font="4">E</text>
<text top="748" left="480" width="5" height="8" font="18">1</text>
<text top="742" left="489" width="24" height="13" font="4">⊕ E</text>
<text top="748" left="513" width="28" height="8" font="18">2 CG</text>
<text top="743" left="542" width="14" height="12" font="4">(Γ</text>
<text top="748" left="556" width="22" height="8" font="18">local</text>
<text top="743" left="579" width="5" height="12" font="4">)</text>
<text top="760" left="520" width="38" height="12" font="4">cast(T</text>
<text top="764" left="558" width="5" height="8" font="18">1</text>
<text top="760" left="564" width="39" height="12" font="4">, int, E</text>
<text top="764" left="603" width="5" height="8" font="18">1</text>
<text top="760" left="609" width="15" height="12" font="4">, Γ</text>
<text top="764" left="624" width="22" height="8" font="18">local</text>
<text top="760" left="647" width="23" height="12" font="4">) op</text>
<text top="766" left="671" width="9" height="8" font="18">⊕</text>
<text top="760" left="684" width="38" height="12" font="4">cast(T</text>
<text top="764" left="722" width="5" height="8" font="18">2</text>
<text top="760" left="728" width="39" height="12" font="4">, int, E</text>
<text top="764" left="767" width="5" height="8" font="18">2</text>
<text top="760" left="773" width="15" height="12" font="4">, Γ</text>
<text top="764" left="788" width="22" height="8" font="18">local</text>
<text top="760" left="811" width="5" height="12" font="4">)</text>
<text top="776" left="520" width="59" height="12" font="4">return int</text>
<text top="793" left="464" width="35" height="12" font="4">where</text>
<text top="793" left="520" width="8" height="12" font="4">T</text>
<text top="797" left="528" width="5" height="8" font="18">1</text>
<text top="793" left="538" width="30" height="12" font="4">= E</text>
<text top="797" left="568" width="28" height="8" font="18">1 CG</text>
<text top="793" left="597" width="14" height="12" font="4">(Γ</text>
<text top="797" left="611" width="22" height="8" font="18">local</text>
<text top="793" left="634" width="23" height="12" font="4">), T</text>
<text top="797" left="658" width="5" height="8" font="18">2</text>
<text top="793" left="668" width="30" height="12" font="4">= E</text>
<text top="797" left="698" width="28" height="8" font="18">2 CG</text>
<text top="793" left="727" width="14" height="12" font="4">(Γ</text>
<text top="797" left="741" width="22" height="8" font="18">local</text>
<text top="793" left="764" width="9" height="12" font="4">),</text>
<text top="810" left="520" width="14" height="11" font="4">op</text>
<text top="816" left="534" width="8" height="8" font="18">+</text>
<text top="809" left="547" width="46" height="12" font="4">= +, op</text>
<text top="815" left="593" width="9" height="8" font="18">−</text>
<text top="809" left="606" width="46" height="12" font="4">= -, op</text>
<text top="815" left="652" width="6" height="8" font="18">∗</text>
<text top="809" left="662" width="72" height="12" font="4">= *, and op</text>
<text top="816" left="734" width="6" height="8" font="18">/</text>
<text top="809" left="744" width="22" height="12" font="4">= /</text>
<text top="838" left="479" width="344" height="12" font="4">At function invocation, each argument is converted to the</text>
<text top="854" left="464" width="359" height="12" font="4">corresponding parameter type. These parameter types are</text>
<text top="871" left="464" width="257" height="12" font="4">taken from the environment parameter (Γ</text>
<text top="875" left="721" width="22" height="8" font="18">local</text>
<text top="871" left="744" width="79" height="12" font="4">). Therefore,</text>
<text top="887" left="464" width="359" height="12" font="4">the arguments may be cast to the actual C# types of the</text>
<text top="904" left="464" width="359" height="12" font="4">declared function. For instance, although the type erasure</text>
<text top="920" left="464" width="359" height="12" font="4">of the four parameters of the point function (Figure 18) is</text>
<text top="938" left="464" width="359" height="11" font="4">object, all of them were declared as integers. Therefore,</text>
<text top="953" left="464" width="359" height="12" font="4">arguments of any point function call should be cast to int,</text>
<text top="969" left="464" width="359" height="12" font="4">when necessary. The return type erasure follows the same</text>
<text top="986" left="464" width="47" height="12" font="4">process.</text>
<text top="1014" left="484" width="29" height="12" font="4">id(E</text>
<text top="1019" left="513" width="5" height="8" font="18">1</text>
<text top="1014" left="521" width="29" height="12" font="4">. . . E</text>
<text top="1019" left="550" width="7" height="8" font="18">n</text>
<text top="1015" left="558" width="7" height="11" font="4">)</text>
<text top="1019" left="570" width="16" height="8" font="18">CG</text>
<text top="1014" left="587" width="14" height="12" font="4">(Γ</text>
<text top="1019" left="601" width="22" height="8" font="18">local</text>
<text top="1014" left="625" width="5" height="12" font="4">)</text>
<text top="1031" left="547" width="57" height="12" font="4">id(cast(T</text>
<text top="1035" left="604" width="5" height="8" font="18">1</text>
<text top="1031" left="611" width="18" height="12" font="4">, |T</text>
<text top="1035" left="629" width="6" height="8" font="18">p</text>
<text top="1038" left="634" width="5" height="7" font="26">1</text>
<text top="1030" left="641" width="4" height="13" font="4">|</text>
<text top="1035" left="645" width="7" height="8" font="18">Γ</text>
<text top="1039" left="652" width="21" height="7" font="26">local</text>
<text top="1031" left="674" width="16" height="12" font="4">, E</text>
<text top="1035" left="690" width="5" height="8" font="18">1</text>
<text top="1031" left="697" width="15" height="12" font="4">, Γ</text>
<text top="1035" left="712" width="22" height="8" font="18">local</text>
<text top="1031" left="735" width="40" height="12" font="4">), . . . ,</text>
<text top="1047" left="630" width="38" height="12" font="4">cast(T</text>
<text top="1052" left="668" width="7" height="8" font="18">n</text>
<text top="1047" left="676" width="18" height="12" font="4">, |T</text>
<text top="1052" left="694" width="6" height="8" font="18">p</text>
<text top="1054" left="700" width="7" height="7" font="26">n</text>
<text top="1046" left="708" width="4" height="13" font="4">|</text>
<text top="1052" left="712" width="7" height="8" font="18">Γ</text>
<text top="1055" left="719" width="21" height="7" font="26">local</text>
<text top="1047" left="741" width="16" height="12" font="4">, E</text>
<text top="1052" left="757" width="7" height="8" font="18">n</text>
<text top="1047" left="765" width="15" height="12" font="4">, Γ</text>
<text top="1052" left="780" width="22" height="8" font="18">local</text>
<text top="1047" left="803" width="12" height="12" font="4">))</text>
<text top="1064" left="547" width="60" height="12" font="4">return |T |</text>
<text top="1068" left="607" width="7" height="8" font="18">Γ</text>
<text top="1071" left="614" width="21" height="7" font="26">local</text>
<text top="1080" left="478" width="48" height="12" font="4">where T</text>
<text top="1085" left="526" width="5" height="8" font="18">1</text>
<text top="1080" left="536" width="30" height="12" font="4">= E</text>
<text top="1085" left="567" width="28" height="8" font="18">1 CG</text>
<text top="1080" left="595" width="14" height="12" font="4">(Γ</text>
<text top="1085" left="609" width="22" height="8" font="18">local</text>
<text top="1080" left="633" width="48" height="12" font="4">), . . . , T</text>
<text top="1085" left="681" width="7" height="8" font="18">n</text>
<text top="1080" left="692" width="30" height="12" font="4">= E</text>
<text top="1085" left="722" width="29" height="8" font="18">n CG</text>
<text top="1080" left="753" width="14" height="12" font="4">(Γ</text>
<text top="1085" left="767" width="22" height="8" font="18">local</text>
<text top="1080" left="790" width="36" height="12" font="4">), and</text>
<text top="1097" left="520" width="9" height="12" font="4">Γ</text>
<text top="1101" left="528" width="22" height="8" font="18">local</text>
<text top="1097" left="552" width="49" height="12" font="4">(id) = T</text>
<text top="1101" left="601" width="6" height="8" font="18">p</text>
<text top="1104" left="606" width="5" height="7" font="26">1</text>
<text top="1096" left="616" width="55" height="13" font="4">× . . . × T</text>
<text top="1101" left="671" width="6" height="8" font="18">p</text>
<text top="1104" left="677" width="7" height="7" font="26">n</text>
<text top="1096" left="689" width="26" height="13" font="4">→ T</text>
<text top="1124" left="479" width="344" height="12" font="4">In assignments, the type erasure of the right-hand side</text>
<text top="1141" left="464" width="359" height="12" font="4">must be converted to the type erasure of the left-hand side.</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1262" width="892">
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="808" width="15" height="13" font="2">17</text>
<text top="124" left="103" width="10" height="12" font="4">E</text>
<text top="128" left="113" width="5" height="8" font="18">1</text>
<text top="125" left="119" width="17" height="11" font="4">=E</text>
<text top="128" left="137" width="28" height="8" font="18">2 CG</text>
<text top="124" left="166" width="14" height="12" font="4">(Γ</text>
<text top="128" left="180" width="22" height="8" font="18">local</text>
<text top="124" left="203" width="5" height="12" font="4">)</text>
<text top="140" left="186" width="10" height="12" font="4">E</text>
<text top="145" left="196" width="28" height="8" font="18">1 CG</text>
<text top="140" left="225" width="14" height="12" font="4">(Γ</text>
<text top="145" left="239" width="22" height="8" font="18">local</text>
<text top="140" left="262" width="58" height="12" font="4">) = cast(T</text>
<text top="145" left="320" width="5" height="8" font="18">2</text>
<text top="140" left="327" width="14" height="12" font="4">, T</text>
<text top="145" left="341" width="5" height="8" font="18">1</text>
<text top="140" left="347" width="16" height="12" font="4">, E</text>
<text top="145" left="363" width="5" height="8" font="18">2</text>
<text top="140" left="370" width="15" height="12" font="4">, Γ</text>
<text top="145" left="384" width="22" height="8" font="18">local</text>
<text top="140" left="408" width="5" height="12" font="4">)</text>
<text top="156" left="180" width="50" height="12" font="4">return T</text>
<text top="161" left="231" width="5" height="8" font="18">1</text>
<text top="173" left="98" width="48" height="12" font="4">where T</text>
<text top="177" left="146" width="5" height="8" font="18">1</text>
<text top="173" left="156" width="30" height="12" font="4">= E</text>
<text top="177" left="186" width="28" height="8" font="18">1 CG</text>
<text top="173" left="215" width="14" height="12" font="4">(Γ</text>
<text top="178" left="229" width="22" height="8" font="18">local</text>
<text top="173" left="252" width="23" height="12" font="4">), T</text>
<text top="177" left="275" width="5" height="8" font="18">2</text>
<text top="173" left="285" width="30" height="12" font="4">= E</text>
<text top="177" left="316" width="28" height="8" font="18">2 CG</text>
<text top="173" left="345" width="14" height="12" font="4">(Γ</text>
<text top="178" left="359" width="22" height="8" font="18">local</text>
<text top="173" left="382" width="5" height="12" font="4">)</text>
<text top="202" left="85" width="344" height="12" font="4">Objects are created by calling the default constructors</text>
<text top="218" left="70" width="277" height="12" font="4">of their corresponding anonymous classes,</text>
<text top="218" left="359" width="70" height="12" font="4">and arrays</text>
<text top="235" left="70" width="323" height="12" font="4">allocation is translated into its analogous C# syntax.</text>
<text top="265" left="89" width="76" height="12" font="4">E = new {id</text>
<text top="269" left="166" width="5" height="8" font="18">1</text>
<text top="266" left="172" width="17" height="11" font="4">=E</text>
<text top="269" left="189" width="5" height="8" font="18">1</text>
<text top="265" left="195" width="43" height="12" font="4">, . . . , id</text>
<text top="269" left="238" width="7" height="8" font="18">n</text>
<text top="266" left="246" width="17" height="11" font="4">=E</text>
<text top="269" left="263" width="7" height="8" font="18">n</text>
<text top="264" left="271" width="7" height="13" font="4">}</text>
<text top="269" left="283" width="16" height="8" font="18">CG</text>
<text top="265" left="300" width="14" height="12" font="4">(Γ</text>
<text top="270" left="314" width="22" height="8" font="18">local</text>
<text top="265" left="337" width="5" height="12" font="4">)</text>
<text top="282" left="111" width="59" height="11" font="4">new AC |T</text>
<text top="286" left="171" width="5" height="8" font="18">1</text>
<text top="281" left="177" width="4" height="13" font="4">|</text>
<text top="286" left="181" width="7" height="8" font="18">Γ</text>
<text top="289" left="188" width="8" height="7" font="26">E</text>
<text top="281" left="202" width="12" height="12" font="4">id</text>
<text top="286" left="214" width="5" height="8" font="18">1</text>
<text top="281" left="227" width="35" height="12" font="4">. . . |T</text>
<text top="286" left="263" width="7" height="8" font="18">n</text>
<text top="281" left="270" width="4" height="13" font="4">|</text>
<text top="286" left="274" width="7" height="8" font="18">Γ</text>
<text top="289" left="281" width="8" height="7" font="26">E</text>
<text top="281" left="295" width="12" height="12" font="4">id</text>
<text top="286" left="307" width="7" height="8" font="18">n</text>
<text top="281" left="319" width="7" height="13" font="4">{</text>
<text top="298" left="139" width="12" height="12" font="4">id</text>
<text top="302" left="151" width="5" height="8" font="18">1</text>
<text top="299" left="157" width="23" height="11" font="4">= E</text>
<text top="302" left="180" width="28" height="8" font="18">1 CG</text>
<text top="298" left="209" width="14" height="12" font="4">(Γ</text>
<text top="302" left="223" width="22" height="8" font="18">local</text>
<text top="298" left="246" width="48" height="12" font="4">), . . . , id</text>
<text top="302" left="294" width="7" height="8" font="18">n</text>
<text top="299" left="302" width="23" height="11" font="4">= E</text>
<text top="302" left="324" width="29" height="8" font="18">n CG</text>
<text top="298" left="355" width="14" height="12" font="4">(Γ</text>
<text top="302" left="369" width="22" height="8" font="18">local</text>
<text top="298" left="392" width="5" height="12" font="4">)</text>
<text top="313" left="139" width="7" height="13" font="4">}</text>
<text top="331" left="111" width="62" height="12" font="4">return AC</text>
<text top="330" left="179" width="12" height="13" font="4">|T</text>
<text top="335" left="190" width="5" height="8" font="18">1</text>
<text top="330" left="197" width="4" height="13" font="4">|</text>
<text top="335" left="201" width="7" height="8" font="18">Γ</text>
<text top="338" left="207" width="8" height="7" font="26">E</text>
<text top="331" left="222" width="12" height="12" font="4">id</text>
<text top="335" left="234" width="5" height="8" font="18">1</text>
<text top="331" left="247" width="35" height="12" font="4">. . . |T</text>
<text top="335" left="282" width="7" height="8" font="18">n</text>
<text top="330" left="290" width="4" height="13" font="4">|</text>
<text top="335" left="294" width="7" height="8" font="18">Γ</text>
<text top="338" left="301" width="8" height="7" font="26">E</text>
<text top="331" left="315" width="12" height="12" font="4">id</text>
<text top="335" left="327" width="7" height="8" font="18">n</text>
<text top="347" left="84" width="53" height="12" font="4">where id</text>
<text top="352" left="137" width="5" height="8" font="18">1</text>
<text top="347" left="146" width="30" height="12" font="4">. . . id</text>
<text top="352" left="176" width="7" height="8" font="18">n</text>
<text top="347" left="188" width="204" height="12" font="4">are lexicographically ordered, and</text>
<text top="363" left="125" width="36" height="12" font="4">in AC</text>
<text top="363" left="166" width="12" height="13" font="4">|T</text>
<text top="368" left="178" width="5" height="8" font="18">1</text>
<text top="363" left="184" width="4" height="13" font="4">|</text>
<text top="368" left="188" width="7" height="8" font="18">Γ</text>
<text top="363" left="201" width="12" height="12" font="4">id</text>
<text top="368" left="213" width="5" height="8" font="18">1</text>
<text top="363" left="226" width="35" height="12" font="4">. . . |T</text>
<text top="368" left="261" width="7" height="8" font="18">n</text>
<text top="363" left="269" width="4" height="13" font="4">|</text>
<text top="368" left="273" width="7" height="8" font="18">Γ</text>
<text top="363" left="285" width="12" height="12" font="4">id</text>
<text top="368" left="297" width="7" height="8" font="18">n</text>
<text top="363" left="305" width="4" height="12" font="4">,</text>
<text top="380" left="125" width="21" height="12" font="4">T [ ]</text>
<text top="385" left="147" width="5" height="8" font="18">1</text>
<text top="380" left="155" width="30" height="12" font="4">. . . [ ]</text>
<text top="385" left="185" width="7" height="8" font="18">n</text>
<text top="380" left="197" width="123" height="12" font="4">is replaced with T n</text>
<text top="406" left="89" width="94" height="12" font="4">E = new ST [E</text>
<text top="411" left="183" width="5" height="8" font="18">1</text>
<text top="407" left="190" width="64" height="11" font="4">][ ] . . . [ ]</text>
<text top="411" left="259" width="16" height="8" font="18">CG</text>
<text top="406" left="276" width="14" height="12" font="4">(Γ</text>
<text top="411" left="290" width="22" height="8" font="18">local</text>
<text top="406" left="313" width="5" height="12" font="4">)</text>
<text top="424" left="111" width="52" height="11" font="4">new |ST |</text>
<text top="427" left="163" width="7" height="8" font="18">Γ</text>
<text top="430" left="170" width="8" height="7" font="26">E</text>
<text top="424" left="183" width="23" height="11" font="4">[ E</text>
<text top="427" left="206" width="28" height="8" font="18">1 CG</text>
<text top="423" left="235" width="14" height="12" font="4">(Γ</text>
<text top="427" left="249" width="22" height="8" font="18">local</text>
<text top="423" left="272" width="69" height="12" font="4">)][ ] . . . [ ]</text>
<text top="439" left="111" width="69" height="12" font="4">return |ST |</text>
<text top="444" left="181" width="7" height="8" font="18">Γ</text>
<text top="447" left="187" width="8" height="7" font="26">E</text>
<text top="439" left="197" width="55" height="12" font="4">[ ][ ] . . . [ ]</text>
<text top="478" left="70" width="27" height="13" font="2">4.6.</text>
<text top="478" left="114" width="84" height="13" font="2">Statements</text>
<text top="504" left="70" width="359" height="12" font="4">In the if and while statements, the condition expression is</text>
<text top="521" left="70" width="359" height="12" font="4">checked to be bool. The rest of the translation process is</text>
<text top="537" left="70" width="193" height="12" font="4">similar to the code in functions.</text>
<text top="568" left="79" width="41" height="11" font="4">if E S</text>
<text top="572" left="120" width="5" height="8" font="18">1</text>
<text top="567" left="129" width="27" height="12" font="4">. . . S</text>
<text top="572" left="156" width="7" height="8" font="18">n</text>
<text top="567" left="167" width="8" height="12" font="4">S</text>
<text top="572" left="176" width="21" height="8" font="18">n+1</text>
<text top="567" left="200" width="27" height="12" font="4">. . . S</text>
<text top="572" left="226" width="48" height="8" font="18">n+m CG</text>
<text top="567" left="275" width="14" height="12" font="4">(Γ</text>
<text top="572" left="289" width="22" height="8" font="18">local</text>
<text top="567" left="312" width="5" height="12" font="4">)</text>
<text top="585" left="98" width="136" height="11" font="4">if ( cast(T , bool, E, Γ</text>
<text top="588" left="234" width="22" height="8" font="18">local</text>
<text top="584" left="257" width="31" height="12" font="4">) ) {</text>
<text top="600" left="111" width="76" height="12" font="4">statement(S</text>
<text top="605" left="187" width="5" height="8" font="18">1</text>
<text top="600" left="193" width="15" height="12" font="4">, Γ</text>
<text top="605" left="208" width="22" height="8" font="18">local</text>
<text top="600" left="231" width="106" height="12" font="4">) . . . statement(S</text>
<text top="605" left="337" width="7" height="8" font="18">n</text>
<text top="600" left="345" width="15" height="12" font="4">, Γ</text>
<text top="605" left="360" width="22" height="8" font="18">local</text>
<text top="600" left="383" width="5" height="12" font="4">)</text>
<text top="616" left="98" width="7" height="13" font="4">}</text>
<text top="634" left="98" width="42" height="11" font="4">else {</text>
<text top="649" left="111" width="76" height="12" font="4">statement(S</text>
<text top="654" left="187" width="21" height="8" font="18">n+1</text>
<text top="649" left="209" width="15" height="12" font="4">, Γ</text>
<text top="654" left="224" width="22" height="8" font="18">local</text>
<text top="649" left="247" width="106" height="12" font="4">) . . . statement(S</text>
<text top="654" left="353" width="25" height="8" font="18">n+m</text>
<text top="649" left="378" width="15" height="12" font="4">, Γ</text>
<text top="654" left="393" width="22" height="8" font="18">local</text>
<text top="649" left="416" width="5" height="12" font="4">)</text>
<text top="665" left="98" width="7" height="13" font="4">}</text>
<text top="682" left="74" width="84" height="12" font="4">where T = E</text>
<text top="687" left="164" width="16" height="8" font="18">CG</text>
<text top="682" left="181" width="14" height="12" font="4">(Γ</text>
<text top="687" left="195" width="22" height="8" font="18">local</text>
<text top="682" left="218" width="5" height="12" font="4">)</text>
<text top="710" left="79" width="62" height="11" font="4">while E S</text>
<text top="713" left="142" width="5" height="8" font="18">1</text>
<text top="709" left="150" width="27" height="12" font="4">. . . S</text>
<text top="713" left="177" width="29" height="8" font="18">n CG</text>
<text top="709" left="207" width="14" height="12" font="4">(Γ</text>
<text top="713" left="221" width="22" height="8" font="18">local</text>
<text top="709" left="244" width="5" height="12" font="4">)</text>
<text top="726" left="98" width="157" height="11" font="4">while ( cast(T , bool, E, Γ</text>
<text top="730" left="255" width="22" height="8" font="18">local</text>
<text top="725" left="278" width="31" height="12" font="4">) ) {</text>
<text top="741" left="111" width="76" height="12" font="4">statement(S</text>
<text top="746" left="187" width="5" height="8" font="18">1</text>
<text top="741" left="193" width="15" height="12" font="4">, Γ</text>
<text top="746" left="208" width="22" height="8" font="18">local</text>
<text top="741" left="231" width="106" height="12" font="4">) . . . statement(S</text>
<text top="746" left="337" width="7" height="8" font="18">n</text>
<text top="741" left="345" width="15" height="12" font="4">, Γ</text>
<text top="746" left="360" width="22" height="8" font="18">local</text>
<text top="741" left="383" width="5" height="12" font="4">)</text>
<text top="757" left="98" width="7" height="13" font="4">}</text>
<text top="774" left="74" width="84" height="12" font="4">where T = E</text>
<text top="779" left="164" width="16" height="8" font="18">CG</text>
<text top="774" left="181" width="14" height="12" font="4">(Γ</text>
<text top="779" left="195" width="22" height="8" font="18">local</text>
<text top="774" left="218" width="5" height="12" font="4">)</text>
<text top="802" left="79" width="56" height="11" font="4">return E</text>
<text top="805" left="142" width="16" height="8" font="18">CG</text>
<text top="801" left="159" width="14" height="12" font="4">(Γ</text>
<text top="805" left="173" width="22" height="8" font="18">local</text>
<text top="801" left="196" width="5" height="12" font="4">)</text>
<text top="802" left="224" width="62" height="11" font="4">return E</text>
<text top="805" left="292" width="16" height="8" font="18">CG</text>
<text top="801" left="309" width="14" height="12" font="4">(Γ</text>
<text top="805" left="323" width="22" height="8" font="18">local</text>
<text top="801" left="346" width="5" height="12" font="4">)</text>
<text top="840" left="70" width="27" height="13" font="2">4.7.</text>
<text top="840" left="114" width="93" height="13" font="2">Field Access</text>
<text top="866" left="70" width="359" height="12" font="4">In the ﬁrst scenario, the expression is an object type and</text>
<text top="882" left="70" width="203" height="12" font="4">the ﬁeld can be obtained directly.</text>
<text top="912" left="153" width="9" height="12" font="4">Γ</text>
<text top="916" left="161" width="8" height="8" font="18">E</text>
<text top="912" left="171" width="16" height="12" font="4">; Ω</text>
<text top="916" left="187" width="8" height="8" font="18">E</text>
<text top="912" left="212" width="41" height="12" font="4">E : {id</text>
<text top="916" left="254" width="5" height="8" font="18">1</text>
<text top="912" left="260" width="12" height="12" font="4">:T</text>
<text top="916" left="272" width="5" height="8" font="18">1</text>
<text top="912" left="278" width="43" height="12" font="4">, . . . , id</text>
<text top="916" left="321" width="7" height="8" font="18">n</text>
<text top="912" left="328" width="12" height="12" font="4">:T</text>
<text top="916" left="340" width="7" height="8" font="18">n</text>
<text top="911" left="348" width="7" height="13" font="4">}</text>
<text top="938" left="103" width="30" height="12" font="4">E.id</text>
<text top="942" left="133" width="27" height="8" font="18">i CG</text>
<text top="938" left="160" width="14" height="12" font="4">(Γ</text>
<text top="942" left="174" width="22" height="8" font="18">local</text>
<text top="938" left="197" width="5" height="12" font="4">)</text>
<text top="954" left="125" width="68" height="12" font="4">cast(T, |{id</text>
<text top="959" left="193" width="5" height="8" font="18">1</text>
<text top="954" left="200" width="12" height="12" font="4">:T</text>
<text top="959" left="211" width="5" height="8" font="18">1</text>
<text top="954" left="218" width="43" height="12" font="4">, . . . , id</text>
<text top="959" left="260" width="7" height="8" font="18">n</text>
<text top="954" left="268" width="12" height="12" font="4">:T</text>
<text top="959" left="280" width="7" height="8" font="18">n</text>
<text top="953" left="287" width="11" height="13" font="4">}|</text>
<text top="959" left="298" width="7" height="8" font="18">Γ</text>
<text top="962" left="305" width="8" height="7" font="26">E</text>
<text top="954" left="314" width="32" height="12" font="4">, E, Γ</text>
<text top="959" left="346" width="22" height="8" font="18">local</text>
<text top="954" left="369" width="32" height="12" font="4">) . id</text>
<text top="959" left="401" width="4" height="8" font="18">i</text>
<text top="971" left="125" width="54" height="12" font="4">return |T</text>
<text top="975" left="179" width="4" height="8" font="18">i</text>
<text top="970" left="184" width="4" height="13" font="4">|</text>
<text top="975" left="188" width="7" height="8" font="18">Γ</text>
<text top="978" left="195" width="8" height="7" font="26">E</text>
<text top="987" left="98" width="84" height="12" font="4">where T = E</text>
<text top="992" left="188" width="16" height="8" font="18">CG</text>
<text top="987" left="205" width="14" height="12" font="4">(Γ</text>
<text top="992" left="219" width="22" height="8" font="18">local</text>
<text top="987" left="242" width="5" height="12" font="4">)</text>
<text top="1016" left="85" width="344" height="12" font="4">In case no type information has been gathered by the</text>
<text top="1033" left="70" width="359" height="12" font="4">compiler, the ﬁeld value is obtained using reﬂection. The</text>
<text top="1049" left="70" width="359" height="12" font="4">same happens when it is only known that it is an object</text>
<text top="1066" left="70" width="359" height="12" font="4">with the appropriate ﬁeld, not knowing its speciﬁc type,</text>
<text top="1082" left="70" width="149" height="12" font="4">i.e., it is a member type.</text>
<text top="1111" left="84" width="9" height="12" font="4">Γ</text>
<text top="1116" left="92" width="8" height="8" font="18">E</text>
<text top="1111" left="102" width="16" height="12" font="4">; Ω</text>
<text top="1116" left="118" width="8" height="8" font="18">E</text>
<text top="1111" left="143" width="31" height="12" font="4">E : T</text>
<text top="1111" left="222" width="61" height="12" font="4">T ∈ f tv(Γ</text>
<text top="1116" left="283" width="8" height="8" font="18">E</text>
<text top="1111" left="292" width="87" height="12" font="4">) or T = [..., id</text>
<text top="1116" left="380" width="4" height="8" font="18">i</text>
<text top="1111" left="384" width="12" height="12" font="4">:T</text>
<text top="1116" left="396" width="4" height="8" font="18">i</text>
<text top="1111" left="401" width="22" height="12" font="4">, ...]</text>
<text top="1137" left="103" width="30" height="12" font="4">E.id</text>
<text top="1142" left="133" width="27" height="8" font="18">i CG</text>
<text top="1137" left="160" width="14" height="12" font="4">(Γ</text>
<text top="1142" left="174" width="22" height="8" font="18">local</text>
<text top="1137" left="197" width="5" height="12" font="4">)</text>
<text top="1159" left="125" width="63" height="11" font="4">( temp= E</text>
<text top="1163" left="195" width="16" height="8" font="18">CG</text>
<text top="1158" left="212" width="14" height="12" font="4">(Γ</text>
<text top="1163" left="226" width="22" height="8" font="18">local</text>
<text top="1158" left="249" width="83" height="12" font="4">)).GetType()</text>
<text top="137" left="603" width="90" height="11" font="4">.GetField(&#34;id</text>
<text top="141" left="692" width="4" height="8" font="18">i</text>
<text top="137" left="697" width="125" height="11" font="4">&#34;).GetValue( temp)</text>
<text top="153" left="492" width="80" height="12" font="4">return object</text>
<text top="183" left="479" width="344" height="12" font="4">Under the same circumstances, if a ﬁeld value is modiﬁed</text>
<text top="200" left="464" width="359" height="12" font="4">with the assignment operator, the setValue helper method</text>
<text top="216" left="464" width="47" height="12" font="4">is used.</text>
<text top="216" left="524" width="299" height="12" font="4">The setValue method simply returns the ﬁeld</text>
<text top="233" left="464" width="359" height="12" font="4">value after the assignment. This method is necessary for</text>
<text top="249" left="464" width="359" height="12" font="4">generating a valid C# expression, because the SetValue</text>
<text top="266" left="464" width="359" height="14" font="4">method of the .Net’s reﬂection API does not return any</text>
<text top="282" left="464" width="35" height="12" font="4">value.</text>
<text top="313" left="478" width="9" height="12" font="4">Γ</text>
<text top="317" left="487" width="8" height="8" font="18">E</text>
<text top="320" left="495" width="5" height="7" font="26">1</text>
<text top="313" left="501" width="16" height="12" font="4">; Ω</text>
<text top="317" left="518" width="8" height="8" font="18">E</text>
<text top="320" left="526" width="5" height="7" font="26">1</text>
<text top="313" left="548" width="10" height="12" font="4">E</text>
<text top="317" left="559" width="5" height="8" font="18">1</text>
<text top="313" left="569" width="16" height="12" font="4">: T</text>
<text top="313" left="616" width="54" height="12" font="4">T ∈f tv(Γ</text>
<text top="317" left="670" width="8" height="8" font="18">E</text>
<text top="320" left="678" width="5" height="7" font="26">1</text>
<text top="313" left="685" width="79" height="12" font="4">) or T =[..., id</text>
<text top="317" left="764" width="4" height="8" font="18">i</text>
<text top="313" left="769" width="12" height="12" font="4">:T</text>
<text top="317" left="781" width="4" height="8" font="18">i</text>
<text top="313" left="786" width="22" height="12" font="4">, ...]</text>
<text top="339" left="498" width="10" height="12" font="4">E</text>
<text top="344" left="508" width="5" height="8" font="18">1</text>
<text top="340" left="514" width="19" height="11" font="4">.id</text>
<text top="344" left="533" width="4" height="8" font="18">i</text>
<text top="340" left="542" width="21" height="11" font="4">= E</text>
<text top="344" left="563" width="28" height="8" font="18">2 CG</text>
<text top="339" left="591" width="14" height="12" font="4">(Γ</text>
<text top="344" left="605" width="22" height="8" font="18">local</text>
<text top="339" left="629" width="5" height="12" font="4">)</text>
<text top="361" left="525" width="79" height="11" font="4">setValue( E</text>
<text top="364" left="604" width="28" height="8" font="18">1 CG</text>
<text top="360" left="633" width="14" height="12" font="4">(Γ</text>
<text top="365" left="647" width="22" height="8" font="18">local</text>
<text top="360" left="670" width="31" height="12" font="4">),&#34;id</text>
<text top="364" left="701" width="4" height="8" font="18">i</text>
<text top="361" left="706" width="30" height="11" font="4">&#34;, E</text>
<text top="364" left="736" width="28" height="8" font="18">2 CG</text>
<text top="360" left="765" width="14" height="12" font="4">(Γ</text>
<text top="365" left="779" width="29" height="8" font="18">global</text>
<text top="360" left="808" width="12" height="12" font="4">))</text>
<text top="376" left="520" width="80" height="12" font="4">return object</text>
<text top="407" left="479" width="241" height="12" font="4">In the case of static union types,</text>
<text top="407" left="734" width="89" height="12" font="4">the generated</text>
<text top="423" left="464" width="359" height="12" font="4">code is optimized using the type information gathered</text>
<text top="440" left="464" width="58" height="12" font="4">statically.</text>
<text top="440" left="540" width="283" height="12" font="4">We use the ternary conditional operator to</text>
<text top="456" left="464" width="359" height="12" font="4">dynamically check the actual type from all the possible ones</text>
<text top="473" left="464" width="155" height="12" font="4">inferred by the compiler</text>
<text top="470" left="619" width="5" height="8" font="18">3</text>
<text top="473" left="625" width="4" height="12" font="4">.</text>
<text top="473" left="644" width="179" height="12" font="4">At runtime, this conditional</text>
<text top="489" left="464" width="359" height="12" font="4">code is signiﬁcantly faster than reﬂection, which is the</text>
<text top="506" left="464" width="359" height="12" font="4">implementation of dynamic typing for both C# and Visual</text>
<text top="522" left="464" width="359" height="12" font="4">Basic [38, 39]. If the union type holds one (or more) free type</text>
<text top="539" left="464" width="359" height="12" font="4">variables, the last alternative in the conditional expression</text>
<text top="555" left="464" width="244" height="12" font="4">obtains the ﬁeld value using reﬂection.</text>
<text top="555" left="721" width="102" height="12" font="4">Since this is the</text>
<text top="571" left="464" width="359" height="12" font="4">slowest alternative, we generate it as the last option in order</text>
<text top="588" left="464" width="338" height="12" font="4">to optimize runtime performance of the generated code.</text>
<text top="619" left="473" width="9" height="12" font="4">Γ</text>
<text top="623" left="481" width="8" height="8" font="18">E</text>
<text top="619" left="491" width="16" height="12" font="4">; Ω</text>
<text top="623" left="507" width="8" height="8" font="18">E</text>
<text top="619" left="532" width="56" height="12" font="4">E : sta T</text>
<text top="623" left="588" width="5" height="8" font="18">1</text>
<text top="618" left="597" width="47" height="13" font="4">∨ ... ∨ T</text>
<text top="623" left="644" width="7" height="8" font="18">n</text>
<text top="619" left="684" width="9" height="12" font="4">Γ</text>
<text top="623" left="693" width="22" height="8" font="18">E.id</text>
<text top="619" left="715" width="16" height="12" font="4">; Ω</text>
<text top="623" left="732" width="22" height="8" font="18">E.id</text>
<text top="619" left="770" width="46" height="12" font="4">E.id : T</text>
<text top="645" left="470" width="30" height="12" font="4">E.id</text>
<text top="649" left="505" width="16" height="8" font="18">CG</text>
<text top="645" left="522" width="14" height="12" font="4">(Γ</text>
<text top="650" left="536" width="22" height="8" font="18">local</text>
<text top="645" left="560" width="5" height="12" font="4">)</text>
<text top="661" left="478" width="76" height="13" font="4">∀ i ∈ [1, n], T</text>
<text top="666" left="555" width="4" height="8" font="18">i</text>
<text top="661" left="565" width="7" height="12" font="4">/</text>
<text top="661" left="563" width="47" height="13" font="4">∈ f tv(Γ</text>
<text top="666" left="611" width="8" height="8" font="18">E</text>
<text top="661" left="620" width="5" height="12" font="4">)</text>
<text top="678" left="492" width="258" height="12" font="4">if it is not the last iteration or ∃ j∈[1, n], T</text>
<text top="682" left="750" width="5" height="8" font="18">j</text>
<text top="677" left="756" width="44" height="13" font="4">∈f tv(Γ</text>
<text top="682" left="800" width="8" height="8" font="18">E</text>
<text top="678" left="809" width="5" height="12" font="4">)</text>
<text top="695" left="529" width="51" height="11" font="4">temp= E</text>
<text top="699" left="586" width="16" height="8" font="18">CG</text>
<text top="694" left="603" width="14" height="12" font="4">(Γ</text>
<text top="699" left="617" width="22" height="8" font="18">local</text>
<text top="694" left="640" width="5" height="12" font="4">)</text>
<text top="694" left="661" width="143" height="12" font="4">if it is the ﬁrst iteration</text>
<text top="712" left="524" width="44" height="11" font="4">: temp</text>
<text top="711" left="661" width="57" height="12" font="4">otherwise</text>
<text top="728" left="554" width="33" height="11" font="4">is |T</text>
<text top="732" left="587" width="4" height="8" font="18">i</text>
<text top="726" left="592" width="4" height="13" font="4">|</text>
<text top="732" left="596" width="7" height="8" font="18">Γ</text>
<text top="735" left="603" width="8" height="7" font="26">E</text>
<text top="728" left="619" width="7" height="11" font="4">?</text>
<text top="745" left="492" width="25" height="11" font="4">(|T |</text>
<text top="748" left="517" width="7" height="8" font="18">Γ</text>
<text top="751" left="524" width="21" height="7" font="26">E.id</text>
<text top="745" left="546" width="33" height="11" font="4">)((|T</text>
<text top="748" left="579" width="4" height="8" font="18">i</text>
<text top="743" left="584" width="4" height="13" font="4">|</text>
<text top="748" left="588" width="7" height="8" font="18">Γ</text>
<text top="751" left="594" width="8" height="7" font="26">E</text>
<text top="745" left="604" width="66" height="11" font="4">) temp).id</text>
<text top="760" left="478" width="89" height="12" font="4">if ∃ i ∈ [1, n], T</text>
<text top="765" left="567" width="4" height="8" font="18">i</text>
<text top="759" left="576" width="47" height="13" font="4">∈ f tv(Γ</text>
<text top="765" left="623" width="8" height="8" font="18">E</text>
<text top="760" left="633" width="5" height="12" font="4">)</text>
<text top="777" left="492" width="32" height="11" font="4">:(|T |</text>
<text top="781" left="524" width="7" height="8" font="18">Γ</text>
<text top="784" left="531" width="21" height="7" font="26">E.id</text>
<text top="777" left="553" width="14" height="11" font="4">)(</text>
<text top="777" left="579" width="203" height="11" font="4">temp.GetType().GetField(&#34;id&#34;)</text>
<text top="794" left="630" width="125" height="11" font="4">.GetValue( temp) )</text>
<text top="809" left="478" width="60" height="12" font="4">return |T |</text>
<text top="814" left="538" width="7" height="8" font="18">Γ</text>
<text top="817" left="545" width="21" height="7" font="26">E.id</text>
<text top="840" left="479" width="344" height="12" font="4">An example of the previous code generation template</text>
<text top="856" left="464" width="227" height="12" font="4">can be seen in line 32 of Figure 18.</text>
<text top="856" left="704" width="119" height="12" font="4">The type of sta is</text>
<text top="872" left="464" width="359" height="13" font="4">{x:int, y:int} ∨ {x:int, y:int, z:int}. In the ﬁrst iteration,</text>
<text top="889" left="464" width="270" height="12" font="4">the object expression (sta) is assigned to</text>
<text top="890" left="747" width="76" height="11" font="4">temp and it</text>
<text top="906" left="464" width="248" height="12" font="4">is checked whether it is {x:int, y:int}.</text>
<text top="906" left="727" width="96" height="12" font="4">If so, a cast is</text>
<text top="922" left="464" width="359" height="12" font="4">performed and the x ﬁeld is obtained. The second condition</text>
<text top="939" left="464" width="359" height="12" font="4">is similar, but asking for the {x:int, y:int, z:int} type.</text>
<text top="955" left="464" width="359" height="12" font="4">Since the union type does not hold any free type variable,</text>
<text top="972" left="464" width="283" height="12" font="4">reﬂection is not used in another last condition.</text>
<text top="988" left="479" width="344" height="12" font="4">When the expression type is dynamic, it should be taken</text>
<text top="1004" left="464" width="359" height="12" font="4">into consideration that there may be types in the union</text>
<text top="1021" left="464" width="287" height="12" font="4">type that do not provide the expected ﬁeld.</text>
<text top="1021" left="767" width="56" height="12" font="4">The ﬁrst</text>
<text top="1037" left="464" width="359" height="12" font="4">optimization consists in generating code only for those types</text>
<text top="1054" left="464" width="359" height="12" font="4">that accept the speciﬁc ﬁeld access operation, using the</text>
<text top="1070" left="464" width="182" height="12" font="4">ternary conditional operator.</text>
<text top="1070" left="663" width="160" height="12" font="4">A performance beneﬁt is</text>
<text top="1087" left="464" width="359" height="12" font="4">obtained because the generated code only checks for those</text>
<text top="1103" left="464" width="359" height="12" font="4">types that are applicable. The last alternative generated</text>
<text top="1129" left="481" width="5" height="8" font="18">3</text>
<text top="1131" left="487" width="336" height="11" font="19">We use reﬂection when the number of types in the union type</text>
<text top="1145" left="464" width="359" height="11" font="19">is greater than 120. We have measured that reﬂection is faster</text>
<text top="1159" left="464" width="354" height="11" font="19">when the number of elements in a union type is more than 146.</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="19" position="absolute" top="0" left="0" height="1262" width="892">
<text top="93" left="70" width="15" height="13" font="2">18</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="136" left="70" width="359" height="12" font="4">is reﬂection. At runtime, if the ﬁeld is still not found, a</text>
<text top="153" left="70" width="359" height="12" font="4">runtime exception will be thrown. This may happen when</text>
<text top="169" left="70" width="359" height="12" font="4">dynamic references are used, because it is not guaranteed</text>
<text top="185" left="70" width="182" height="12" font="4">that the ﬁeld actually exists.</text>
<text top="185" left="264" width="165" height="12" font="4">Another ﬁnal optimization</text>
<text top="202" left="70" width="359" height="12" font="4">is implemented when only one possible type fulﬁlls the</text>
<text top="218" left="70" width="60" height="12" font="4">condition.</text>
<text top="218" left="147" width="282" height="12" font="4">In this case, a direct access to the ﬁeld is</text>
<text top="235" left="70" width="359" height="12" font="4">generated (an InvalidCastException could be raised by the</text>
<text top="251" left="70" width="38" height="12" font="4">CLR).</text>
<text top="282" left="70" width="9" height="12" font="4">Γ</text>
<text top="286" left="79" width="8" height="8" font="18">E</text>
<text top="282" left="88" width="16" height="12" font="4">; Ω</text>
<text top="286" left="104" width="8" height="8" font="18">E</text>
<text top="282" left="129" width="56" height="12" font="4">E : dyn T</text>
<text top="286" left="185" width="5" height="8" font="18">1</text>
<text top="281" left="194" width="47" height="13" font="4">∨ ... ∨ T</text>
<text top="286" left="241" width="7" height="8" font="18">n</text>
<text top="282" left="295" width="9" height="12" font="4">Γ</text>
<text top="286" left="304" width="22" height="8" font="18">E.id</text>
<text top="282" left="326" width="16" height="12" font="4">; Ω</text>
<text top="286" left="342" width="22" height="8" font="18">E.id</text>
<text top="282" left="381" width="46" height="12" font="4">E.id : T</text>
<text top="308" left="75" width="30" height="12" font="4">E.id</text>
<text top="312" left="111" width="16" height="8" font="18">CG</text>
<text top="308" left="128" width="14" height="12" font="4">(Γ</text>
<text top="313" left="142" width="22" height="8" font="18">local</text>
<text top="308" left="165" width="5" height="12" font="4">)</text>
<text top="326" left="84" width="76" height="12" font="4">if only one T</text>
<text top="323" left="165" width="34" height="8" font="18">i∈[1,n]</text>
<text top="333" left="159" width="4" height="8" font="18">i</text>
<text top="326" left="203" width="49" height="12" font="4">fullﬁls Γ</text>
<text top="331" left="252" width="8" height="8" font="18">E</text>
<text top="326" left="261" width="16" height="12" font="4">; Ω</text>
<text top="331" left="277" width="8" height="8" font="18">E</text>
<text top="326" left="302" width="8" height="12" font="4">T</text>
<text top="331" left="310" width="4" height="8" font="18">i</text>
<text top="326" left="315" width="38" height="13" font="4">≤[id:T</text>
<text top="332" left="354" width="4" height="8" font="18">i</text>
<text top="326" left="359" width="21" height="12" font="4">] (T</text>
<text top="332" left="381" width="4" height="8" font="18">i</text>
<text top="326" left="390" width="34" height="12" font="4">fresh)</text>
<text top="343" left="153" width="22" height="12" font="4">and</text>
<text top="343" left="189" width="8" height="12" font="4">T</text>
<text top="347" left="197" width="4" height="8" font="18">i</text>
<text top="343" left="207" width="7" height="12" font="4">/</text>
<text top="342" left="206" width="47" height="13" font="4">∈ f tv(Γ</text>
<text top="348" left="253" width="22" height="8" font="18">E.id</text>
<text top="343" left="275" width="5" height="12" font="4">)</text>
<text top="359" left="98" width="38" height="12" font="4">cast(T</text>
<text top="364" left="136" width="8" height="8" font="18">E</text>
<text top="359" left="145" width="18" height="12" font="4">, |T</text>
<text top="364" left="163" width="4" height="8" font="18">i</text>
<text top="359" left="168" width="4" height="13" font="4">|</text>
<text top="364" left="172" width="7" height="8" font="18">Γ</text>
<text top="367" left="178" width="8" height="7" font="26">E</text>
<text top="359" left="188" width="32" height="12" font="4">, E, Γ</text>
<text top="364" left="220" width="22" height="8" font="18">local</text>
<text top="359" left="243" width="32" height="12" font="4">) . id</text>
<text top="376" left="98" width="60" height="12" font="4">return |T |</text>
<text top="380" left="157" width="7" height="8" font="18">Γ</text>
<text top="383" left="164" width="21" height="7" font="26">E.id</text>
<text top="392" left="84" width="22" height="12" font="4">else</text>
<text top="408" left="98" width="81" height="13" font="4">∀ i ∈ [1, n], Γ</text>
<text top="413" left="178" width="8" height="8" font="18">E</text>
<text top="409" left="188" width="16" height="12" font="4">; Ω</text>
<text top="413" left="204" width="8" height="8" font="18">E</text>
<text top="409" left="229" width="8" height="12" font="4">T</text>
<text top="413" left="237" width="4" height="8" font="18">i</text>
<text top="408" left="246" width="50" height="13" font="4">≤ [id : T</text>
<text top="414" left="296" width="4" height="8" font="18">i</text>
<text top="409" left="302" width="21" height="12" font="4">] (T</text>
<text top="414" left="323" width="4" height="8" font="18">i</text>
<text top="409" left="333" width="34" height="12" font="4">fresh)</text>
<text top="425" left="153" width="22" height="12" font="4">and</text>
<text top="425" left="189" width="8" height="12" font="4">T</text>
<text top="430" left="197" width="4" height="8" font="18">i</text>
<text top="425" left="207" width="7" height="12" font="4">/</text>
<text top="424" left="206" width="47" height="13" font="4">∈ f tv(Γ</text>
<text top="430" left="253" width="8" height="8" font="18">E</text>
<text top="425" left="262" width="5" height="12" font="4">)</text>
<text top="443" left="134" width="51" height="11" font="4">temp= E</text>
<text top="446" left="192" width="16" height="8" font="18">CG</text>
<text top="441" left="209" width="14" height="12" font="4">(Γ</text>
<text top="446" left="223" width="22" height="8" font="18">local</text>
<text top="441" left="246" width="5" height="12" font="4">)</text>
<text top="441" left="266" width="143" height="12" font="4">if it is the ﬁrst iteration</text>
<text top="459" left="134" width="28" height="11" font="4">temp</text>
<text top="458" left="266" width="57" height="12" font="4">otherwise</text>
<text top="475" left="118" width="33" height="11" font="4">is |T</text>
<text top="479" left="151" width="4" height="8" font="18">i</text>
<text top="474" left="156" width="4" height="13" font="4">|</text>
<text top="479" left="160" width="7" height="8" font="18">Γ</text>
<text top="482" left="167" width="8" height="7" font="26">E</text>
<text top="475" left="183" width="7" height="11" font="4">?</text>
<text top="492" left="111" width="25" height="11" font="4">(|T |</text>
<text top="495" left="136" width="7" height="8" font="18">Γ</text>
<text top="499" left="143" width="21" height="7" font="26">E.id</text>
<text top="492" left="165" width="33" height="11" font="4">)((|T</text>
<text top="495" left="198" width="4" height="8" font="18">i</text>
<text top="490" left="203" width="4" height="13" font="4">|</text>
<text top="495" left="207" width="7" height="8" font="18">Γ</text>
<text top="498" left="214" width="8" height="7" font="26">E</text>
<text top="492" left="223" width="77" height="11" font="4">) temp).id :</text>
<text top="508" left="98" width="25" height="11" font="4">(|T |</text>
<text top="512" left="122" width="7" height="8" font="18">Γ</text>
<text top="515" left="129" width="21" height="7" font="26">E.id</text>
<text top="508" left="151" width="14" height="11" font="4">)(</text>
<text top="508" left="178" width="203" height="11" font="4">temp.GetType().GetField(&#34;id&#34;)</text>
<text top="525" left="236" width="125" height="11" font="4">.GetValue( temp) )</text>
<text top="540" left="98" width="60" height="12" font="4">return |T |</text>
<text top="545" left="157" width="7" height="8" font="18">Γ</text>
<text top="548" left="164" width="21" height="7" font="26">E.id</text>
<text top="557" left="70" width="48" height="12" font="4">where T</text>
<text top="561" left="118" width="8" height="8" font="18">E</text>
<text top="557" left="131" width="30" height="12" font="4">= E</text>
<text top="561" left="168" width="16" height="8" font="18">CG</text>
<text top="557" left="185" width="14" height="12" font="4">(Γ</text>
<text top="561" left="199" width="22" height="8" font="18">local</text>
<text top="557" left="222" width="5" height="12" font="4">)</text>
<text top="587" left="85" width="344" height="12" font="4">Line 33 in Figure 18 is an example of accessing the y</text>
<text top="603" left="70" width="359" height="12" font="4">ﬁeld of a dynamic union type. The ternary operator is the</text>
<text top="620" left="70" width="359" height="12" font="4">same as the previous ﬁeld access (sta.x), but reﬂection</text>
<text top="636" left="70" width="184" height="12" font="4">is used in the last condition.</text>
<text top="636" left="267" width="162" height="12" font="4">We use reﬂection because</text>
<text top="653" left="70" width="359" height="12" font="4">the dynamic din reference may point to an object that</text>
<text top="669" left="70" width="359" height="12" font="4">does not implement the y ﬁeld (it is a dynamic union</text>
<text top="686" left="70" width="359" height="12" font="4">type). Finally, line 34 generates faster code generating a</text>
<text top="702" left="70" width="359" height="12" font="4">direct cast because only one possible type in the union type</text>
<text top="718" left="70" width="240" height="12" font="4">({x:int, y:int, z:int}) oﬀers the z ﬁeld.</text>
<text top="735" left="85" width="344" height="12" font="4">Two special generation templates were speciﬁed to</text>
<text top="751" left="70" width="359" height="12" font="4">translate assignments of ﬁeld access expressions when the</text>
<text top="768" left="70" width="158" height="12" font="4">object is a union type.</text>
<text top="768" left="251" width="178" height="12" font="4">Since they imply a simple</text>
<text top="784" left="70" width="359" height="12" font="4">modiﬁcation of the two previous translation rules, we do</text>
<text top="801" left="70" width="101" height="12" font="4">not depict them.</text>
<text top="839" left="70" width="27" height="13" font="2">4.8.</text>
<text top="839" left="114" width="115" height="13" font="2">Array Indexing</text>
<text top="865" left="70" width="317" height="12" font="4">In the ﬁrst scenario, the expression is an array type.</text>
<text top="896" left="167" width="9" height="12" font="4">Γ</text>
<text top="900" left="175" width="8" height="8" font="18">E</text>
<text top="903" left="183" width="5" height="7" font="26">1</text>
<text top="896" left="190" width="16" height="12" font="4">; Ω</text>
<text top="900" left="206" width="8" height="8" font="18">E</text>
<text top="903" left="214" width="5" height="7" font="26">1</text>
<text top="896" left="237" width="10" height="12" font="4">E</text>
<text top="900" left="247" width="5" height="8" font="18">1</text>
<text top="896" left="257" width="67" height="12" font="4">: Array(T )</text>
<text top="922" left="89" width="10" height="12" font="4">E</text>
<text top="927" left="99" width="5" height="8" font="18">1</text>
<text top="923" left="106" width="17" height="11" font="4">[E</text>
<text top="927" left="123" width="5" height="8" font="18">2</text>
<text top="923" left="129" width="7" height="11" font="4">]</text>
<text top="927" left="142" width="16" height="8" font="18">CG</text>
<text top="922" left="159" width="14" height="12" font="4">(Γ</text>
<text top="927" left="173" width="22" height="8" font="18">local</text>
<text top="922" left="196" width="5" height="12" font="4">)</text>
<text top="938" left="125" width="38" height="12" font="4">cast(T</text>
<text top="943" left="163" width="5" height="8" font="18">1</text>
<text top="938" left="170" width="44" height="12" font="4">, T [ ], E</text>
<text top="943" left="214" width="5" height="8" font="18">1</text>
<text top="938" left="220" width="15" height="12" font="4">, Γ</text>
<text top="943" left="235" width="22" height="8" font="18">local</text>
<text top="938" left="258" width="58" height="12" font="4">) [ cast(T</text>
<text top="943" left="316" width="5" height="8" font="18">2</text>
<text top="938" left="322" width="39" height="12" font="4">, int, E</text>
<text top="943" left="361" width="5" height="8" font="18">2</text>
<text top="938" left="367" width="15" height="12" font="4">, Γ</text>
<text top="943" left="382" width="22" height="8" font="18">local</text>
<text top="938" left="405" width="16" height="12" font="4">) ]</text>
<text top="955" left="125" width="60" height="12" font="4">return |T |</text>
<text top="960" left="185" width="7" height="8" font="18">Γ</text>
<text top="963" left="192" width="33" height="9" font="26">E1[E2]</text>
<text top="973" left="84" width="48" height="12" font="4">where T</text>
<text top="977" left="132" width="5" height="8" font="18">1</text>
<text top="973" left="142" width="30" height="12" font="4">= E</text>
<text top="977" left="172" width="5" height="8" font="18">1</text>
<text top="973" left="184" width="14" height="12" font="4">(Γ</text>
<text top="977" left="198" width="22" height="8" font="18">local</text>
<text top="973" left="221" width="50" height="12" font="4">), and T</text>
<text top="977" left="271" width="5" height="8" font="18">2</text>
<text top="973" left="281" width="30" height="12" font="4">= E</text>
<text top="977" left="311" width="5" height="8" font="18">2</text>
<text top="973" left="323" width="14" height="12" font="4">(Γ</text>
<text top="977" left="337" width="22" height="8" font="18">local</text>
<text top="973" left="360" width="5" height="12" font="4">)</text>
<text top="1003" left="85" width="344" height="12" font="4">If the ﬁrst expression is not an array, reﬂection is used (the</text>
<text top="1021" left="70" width="359" height="13" font="4">GetValue method of the .Net’s Array class). Notice that it</text>
<text top="1036" left="70" width="359" height="12" font="4">cannot be a union of arrays because of the way we create</text>
<text top="1052" left="70" width="359" height="12" font="4">union types (Section 4.5). In that case, the type would be</text>
<text top="1069" left="70" width="145" height="12" font="4">an array of union types.</text>
<text top="1099" left="125" width="9" height="12" font="4">Γ</text>
<text top="1104" left="134" width="8" height="8" font="18">E</text>
<text top="1107" left="142" width="5" height="7" font="26">1</text>
<text top="1099" left="148" width="16" height="12" font="4">; Ω</text>
<text top="1104" left="165" width="8" height="8" font="18">E</text>
<text top="1107" left="173" width="5" height="7" font="26">1</text>
<text top="1099" left="195" width="10" height="12" font="4">E</text>
<text top="1104" left="206" width="5" height="8" font="18">1</text>
<text top="1099" left="216" width="16" height="12" font="4">: T</text>
<text top="1099" left="293" width="66" height="12" font="4">T = Array</text>
<text top="1125" left="89" width="10" height="12" font="4">E</text>
<text top="1130" left="99" width="5" height="8" font="18">1</text>
<text top="1127" left="106" width="17" height="11" font="4">[E</text>
<text top="1130" left="123" width="5" height="8" font="18">2</text>
<text top="1127" left="129" width="7" height="11" font="4">]</text>
<text top="1130" left="142" width="16" height="8" font="18">CG</text>
<text top="1125" left="159" width="14" height="12" font="4">(Γ</text>
<text top="1130" left="173" width="22" height="8" font="18">local</text>
<text top="1125" left="196" width="5" height="12" font="4">)</text>
<text top="1142" left="111" width="38" height="12" font="4">cast(T</text>
<text top="1146" left="150" width="5" height="8" font="18">1</text>
<text top="1142" left="156" width="57" height="12" font="4">, Array, E</text>
<text top="1146" left="213" width="5" height="8" font="18">1</text>
<text top="1142" left="219" width="15" height="12" font="4">, Γ</text>
<text top="1147" left="234" width="22" height="8" font="18">local</text>
<text top="1142" left="257" width="5" height="12" font="4">)</text>
<text top="1159" left="153" width="109" height="11" font="4">.GetValue(cast(T</text>
<text top="1163" left="262" width="5" height="8" font="18">2</text>
<text top="1158" left="268" width="39" height="12" font="4">, int, E</text>
<text top="1163" left="307" width="5" height="8" font="18">2</text>
<text top="1158" left="313" width="15" height="12" font="4">, Γ</text>
<text top="1163" left="328" width="22" height="8" font="18">local</text>
<text top="1158" left="351" width="12" height="12" font="4">))</text>
<text top="136" left="506" width="80" height="12" font="4">return object</text>
<text top="153" left="478" width="48" height="12" font="4">where T</text>
<text top="157" left="526" width="5" height="8" font="18">1</text>
<text top="153" left="536" width="30" height="12" font="4">= E</text>
<text top="157" left="567" width="5" height="8" font="18">1</text>
<text top="153" left="578" width="14" height="12" font="4">(Γ</text>
<text top="157" left="592" width="22" height="8" font="18">local</text>
<text top="153" left="616" width="50" height="12" font="4">), and T</text>
<text top="157" left="665" width="5" height="8" font="18">2</text>
<text top="153" left="675" width="30" height="12" font="4">= E</text>
<text top="157" left="706" width="5" height="8" font="18">2</text>
<text top="153" left="717" width="14" height="12" font="4">(Γ</text>
<text top="157" left="731" width="22" height="8" font="18">local</text>
<text top="153" left="755" width="5" height="12" font="4">)</text>
<text top="183" left="479" width="344" height="12" font="4">We have overloaded the setValue method because the</text>
<text top="202" left="464" width="359" height="12" font="4">.Net SetValue method does not return the assigned value.</text>
<text top="216" left="464" width="359" height="12" font="4">It assigns values to an array element by means of reﬂection.</text>
<text top="247" left="506" width="9" height="12" font="4">Γ</text>
<text top="252" left="514" width="8" height="8" font="18">E</text>
<text top="255" left="523" width="5" height="7" font="26">1</text>
<text top="247" left="529" width="16" height="12" font="4">; Ω</text>
<text top="252" left="545" width="8" height="8" font="18">E</text>
<text top="255" left="553" width="5" height="7" font="26">1</text>
<text top="247" left="576" width="10" height="12" font="4">E</text>
<text top="252" left="586" width="5" height="8" font="18">1</text>
<text top="247" left="596" width="16" height="12" font="4">: T</text>
<text top="247" left="701" width="66" height="12" font="4">T = Array</text>
<text top="274" left="470" width="10" height="12" font="4">E</text>
<text top="278" left="480" width="5" height="8" font="18">1</text>
<text top="275" left="486" width="17" height="11" font="4">[E</text>
<text top="278" left="504" width="5" height="8" font="18">2</text>
<text top="275" left="510" width="24" height="11" font="4">]=E</text>
<text top="278" left="534" width="28" height="8" font="18">3 CG</text>
<text top="274" left="563" width="14" height="12" font="4">(Γ</text>
<text top="278" left="577" width="22" height="8" font="18">local</text>
<text top="274" left="600" width="5" height="12" font="4">)</text>
<text top="291" left="483" width="102" height="11" font="4">setValue(cast(T</text>
<text top="295" left="585" width="5" height="8" font="18">1</text>
<text top="290" left="591" width="57" height="12" font="4">, Array, E</text>
<text top="295" left="649" width="5" height="8" font="18">1</text>
<text top="290" left="655" width="15" height="12" font="4">, Γ</text>
<text top="295" left="670" width="22" height="8" font="18">local</text>
<text top="290" left="693" width="32" height="12" font="4">), E</text>
<text top="295" left="725" width="5" height="8" font="18">3</text>
<text top="290" left="737" width="14" height="12" font="4">(Γ</text>
<text top="295" left="751" width="22" height="8" font="18">local</text>
<text top="290" left="774" width="12" height="12" font="4">),</text>
<text top="306" left="547" width="38" height="12" font="4">cast(T</text>
<text top="311" left="586" width="5" height="8" font="18">2</text>
<text top="306" left="592" width="39" height="12" font="4">, int, E</text>
<text top="311" left="631" width="5" height="8" font="18">2</text>
<text top="306" left="637" width="15" height="12" font="4">, Γ</text>
<text top="311" left="652" width="22" height="8" font="18">local</text>
<text top="306" left="675" width="12" height="12" font="4">))</text>
<text top="323" left="478" width="80" height="12" font="4">return object</text>
<text top="339" left="464" width="50" height="12" font="4">where T</text>
<text top="344" left="514" width="5" height="8" font="18">1</text>
<text top="339" left="524" width="30" height="12" font="4">= E</text>
<text top="344" left="554" width="5" height="8" font="18">1</text>
<text top="339" left="566" width="14" height="12" font="4">(Γ</text>
<text top="344" left="580" width="22" height="8" font="18">local</text>
<text top="339" left="603" width="23" height="12" font="4">), T</text>
<text top="344" left="627" width="5" height="8" font="18">2</text>
<text top="339" left="637" width="30" height="12" font="4">= E</text>
<text top="344" left="667" width="5" height="8" font="18">2</text>
<text top="339" left="679" width="14" height="12" font="4">(Γ</text>
<text top="344" left="693" width="22" height="8" font="18">local</text>
<text top="339" left="716" width="38" height="12" font="4">), and</text>
<text top="356" left="506" width="8" height="12" font="4">T</text>
<text top="360" left="514" width="5" height="8" font="18">3</text>
<text top="356" left="524" width="30" height="12" font="4">= E</text>
<text top="360" left="554" width="5" height="8" font="18">3</text>
<text top="356" left="566" width="14" height="12" font="4">(Γ</text>
<text top="360" left="580" width="22" height="8" font="18">local</text>
<text top="356" left="603" width="5" height="12" font="4">)</text>
<text top="396" left="464" width="13" height="13" font="2">5.</text>
<text top="396" left="495" width="229" height="13" font="2">RUNTIME PERFORMANCE</text>
<text top="423" left="464" width="359" height="12" font="4">We have evaluated the runtime performance of the StaDyn</text>
<text top="439" left="464" width="359" height="12" font="4">core presented in this paper, following the translation</text>
<text top="455" left="464" width="359" height="12" font="4">scheme described in Section 4.1. An assessment of the whole</text>
<text top="472" left="464" width="359" height="12" font="4">StaDyn implementation (that generates IL code instead of</text>
<text top="488" left="464" width="179" height="12" font="4">C#) can be consulted in [23].</text>
<text top="527" left="464" width="27" height="13" font="2">5.1.</text>
<text top="527" left="508" width="99" height="13" font="2">Methodology</text>
<text top="554" left="464" width="359" height="12" font="4">In order to assess the StaDyn core translation to C#,</text>
<text top="570" left="464" width="359" height="12" font="4">we have compared its runtime performance with probably</text>
<text top="586" left="464" width="359" height="12" font="4">the two most widely used programming languages over the</text>
<text top="605" left="464" width="359" height="12" font="4">.Net platform, compiled with their maximum optimization</text>
<text top="619" left="464" width="48" height="12" font="4">options:</text>
<text top="642" left="467" width="11" height="12" font="4">1.</text>
<text top="642" left="494" width="52" height="12" font="4">C# 4.0.</text>
<text top="642" left="566" width="257" height="12" font="4">The C# programming language version</text>
<text top="659" left="494" width="329" height="12" font="4">4.0 combines static and dynamic typing [14]. When</text>
<text top="675" left="494" width="329" height="12" font="4">dynamic code is used, the recently released Dynamic</text>
<text top="692" left="494" width="329" height="12" font="4">Language Runtime (DLR) is used to optimize the</text>
<text top="708" left="494" width="329" height="12" font="4">execution of dynamic code [40]. The DLR is now part</text>
<text top="724" left="494" width="164" height="14" font="4">of the .Net framework 4.0.</text>
<text top="741" left="494" width="329" height="12" font="4">The translation of programs from the StaDyn core to</text>
<text top="757" left="494" width="329" height="12" font="4">C# 4.0 has been accomplished by coding functions</text>
<text top="774" left="494" width="132" height="12" font="4">as static methods,</text>
<text top="774" left="639" width="184" height="12" font="4">translating every (dyn) var</text>
<text top="790" left="494" width="329" height="12" font="4">reference into a dynamic one, and assigning expressions</text>
<text top="807" left="494" width="329" height="12" font="4">(excluding function invocation and assignment) to</text>
<text top="823" left="494" width="172" height="12" font="4">temporary object references.</text>
<text top="840" left="467" width="11" height="12" font="4">2.</text>
<text top="840" left="494" width="329" height="12" font="4">Visual Basic 10. The VB 10 programming language</text>
<text top="856" left="494" width="329" height="12" font="4">also supports both dynamic and static typing [41]. A</text>
<text top="872" left="494" width="329" height="12" font="4">dynamic reference is declared with the Dim reserved</text>
<text top="889" left="494" width="329" height="12" font="4">word, without setting a type. With this syntax, the</text>
<text top="905" left="494" width="329" height="12" font="4">compiler does not infer any type information statically,</text>
<text top="922" left="494" width="245" height="12" font="4">performing type checking at runtime.</text>
<text top="922" left="760" width="63" height="12" font="4">The main</text>
<text top="938" left="494" width="329" height="12" font="4">diﬀerence between VB 10 and C# 4.0 is that the</text>
<text top="955" left="494" width="329" height="12" font="4">former uses the Common Language Runtime (CLR),</text>
<text top="971" left="494" width="329" height="12" font="4">whereas the latter employs the DLR. Translation from</text>
<text top="987" left="494" width="329" height="12" font="4">the StaDyn core to VB has been done the same way as</text>
<text top="1004" left="494" width="223" height="12" font="4">to C# 4.0, but using the VB syntax.</text>
<text top="1020" left="467" width="11" height="12" font="4">3.</text>
<text top="1020" left="494" width="81" height="12" font="4">StaDyn core.</text>
<text top="1020" left="591" width="232" height="12" font="4">Programs coded in the StaDyn core</text>
<text top="1037" left="494" width="329" height="12" font="4">programming language presented in this paper (whose</text>
<text top="1053" left="494" width="288" height="12" font="4">abstract syntax is presented in Section 3.1).</text>
<text top="1053" left="799" width="24" height="12" font="4">The</text>
<text top="1070" left="494" width="329" height="12" font="4">source code is checked by the type system described</text>
<text top="1086" left="494" width="329" height="12" font="4">in Section 3.2 and translated to C# 4.0 following the</text>
<text top="1103" left="494" width="256" height="12" font="4">translation templates deﬁned in Section 4.</text>
<text top="1125" left="479" width="344" height="12" font="4">We have not included other dynamic programming</text>
<text top="1142" left="464" width="359" height="12" font="4">languages such as Python or Ruby to avoid the introduction</text>
<text top="1158" left="464" width="359" height="12" font="4">of a bias in the translation of source code (translation from</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="42" size="9" family="Times" color="#000000"/>
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="808" width="15" height="13" font="2">19</text>
<text top="136" left="70" width="180" height="12" font="4">C# to VB is almost direct).</text>
<text top="136" left="262" width="166" height="12" font="4">Both C# and VB compile</text>
<text top="153" left="70" width="359" height="14" font="4">code to the .Net framework, facilitating the comparison</text>
<text top="169" left="70" width="149" height="12" font="4">of performance results.</text>
<text top="169" left="240" width="188" height="12" font="4">This way, the measurements</text>
<text top="185" left="70" width="359" height="12" font="4">obtained show the performance improvement of gathering</text>
<text top="202" left="70" width="339" height="12" font="4">type information of dynamic references at compile time.</text>
<text top="218" left="85" width="344" height="12" font="4">We have divided the programs we have used to make the</text>
<text top="235" left="70" width="235" height="12" font="4">comparison into three diﬀerent groups:</text>
<text top="260" left="73" width="11" height="12" font="4">1.</text>
<text top="260" left="100" width="329" height="12" font="4">A micro-benchmark to evaluate the inﬂuence of static</text>
<text top="277" left="100" width="287" height="12" font="4">type information gathered by the compiler.</text>
<text top="277" left="408" width="20" height="12" font="4">For</text>
<text top="293" left="100" width="329" height="12" font="4">this purpose, we have developed a synthetic micro-</text>
<text top="310" left="100" width="329" height="12" font="4">benchmark that takes the following scenarios into</text>
<text top="326" left="100" width="50" height="12" font="4">account:</text>
<text top="351" left="100" width="7" height="13" font="4">•</text>
<text top="351" left="133" width="47" height="12" font="4">Explicit</text>
<text top="351" left="193" width="33" height="12" font="4">static</text>
<text top="351" left="238" width="26" height="12" font="4">type</text>
<text top="351" left="277" width="71" height="12" font="4">declaration.</text>
<text top="351" left="378" width="17" height="12" font="4">No</text>
<text top="352" left="407" width="21" height="11" font="4">var</text>
<text top="368" left="133" width="296" height="12" font="4">references are used at all, explicitly stating the</text>
<text top="384" left="133" width="134" height="12" font="4">type of every variable.</text>
<text top="400" left="100" width="7" height="13" font="4">•</text>
<text top="401" left="133" width="296" height="12" font="4">Implicit dynamic type reference declaration,</text>
<text top="417" left="133" width="296" height="12" font="4">when the compiler is able to infer types. Although</text>
<text top="435" left="133" width="296" height="11" font="4">dyn var references are used, the StaDyn core</text>
<text top="450" left="133" width="296" height="12" font="4">compiler infers their possible types statically.</text>
<text top="466" left="133" width="296" height="12" font="4">Diﬀerent types are inferred as a single union type.</text>
<text top="483" left="133" width="296" height="12" font="4">The number of possible types in the union type</text>
<text top="499" left="133" width="296" height="12" font="4">produces diﬀerent runtime performance. In this</text>
<text top="516" left="133" width="296" height="12" font="4">micro-benchmark we have considered this, writing</text>
<text top="532" left="133" width="296" height="12" font="4">programs where 1, 5, 10 or 50 diﬀerent possible</text>
<text top="549" left="133" width="170" height="12" font="4">types are statically inferred.</text>
<text top="564" left="100" width="7" height="13" font="4">•</text>
<text top="565" left="133" width="296" height="12" font="4">Implicit dynamic type reference declaration,</text>
<text top="581" left="133" width="260" height="12" font="4">when the compiler does not infer any type.</text>
<text top="607" left="100" width="329" height="12" font="4">For each scenario, we perform three diﬀerent opera-</text>
<text top="623" left="100" width="329" height="12" font="4">tions: accessing a ﬁeld of an object, accessing an ele-</text>
<text top="640" left="100" width="329" height="12" font="4">ment of an array, and performing an arithmetical op-</text>
<text top="656" left="100" width="329" height="12" font="4">eration over two variables. These three operations are</text>
<text top="673" left="100" width="258" height="12" font="4">performed in a loop of 5 million iterations.</text>
<text top="689" left="73" width="11" height="12" font="4">2.</text>
<text top="689" left="100" width="42" height="12" font="4">Hybrid</text>
<text top="689" left="155" width="33" height="12" font="4">static</text>
<text top="689" left="201" width="22" height="12" font="4">and</text>
<text top="689" left="236" width="51" height="12" font="4">dynamic</text>
<text top="689" left="300" width="38" height="12" font="4">typing</text>
<text top="689" left="351" width="31" height="12" font="4">code.</text>
<text top="689" left="413" width="16" height="12" font="4">To</text>
<text top="705" left="100" width="329" height="12" font="4">evaluate hybrid statically and dynamically typed</text>
<text top="722" left="100" width="329" height="12" font="4">code, we have extended the StaDyn core program in</text>
<text top="738" left="100" width="329" height="12" font="4">Figure 2, ﬁlling the list with 10,000 random two and</text>
<text top="755" left="100" width="159" height="12" font="4">three dimensional points.</text>
<text top="755" left="274" width="154" height="12" font="4">The two positiveX and</text>
<text top="772" left="100" width="329" height="11" font="4">closestToOrigin3D functions are called passing the</text>
<text top="789" left="100" width="188" height="11" font="4">list reference as an argument.</text>
<text top="804" left="73" width="11" height="12" font="4">3.</text>
<text top="804" left="100" width="329" height="12" font="4">Existing benchmarks for dynamically typed languages</text>
<text top="820" left="100" width="329" height="12" font="4">to obtain an estimate of possible beneﬁts over</text>
<text top="837" left="100" width="184" height="12" font="4">dynamically typed languages.</text>
<text top="837" left="299" width="129" height="12" font="4">For this scenario we</text>
<text top="853" left="100" width="329" height="12" font="4">have taken two well-known benchmarks for the Python</text>
<text top="870" left="100" width="329" height="12" font="4">programming language: Pystone (a translation of the</text>
<text top="886" left="100" width="329" height="12" font="4">Dhrystone benchmark) and Pybench (a collection of</text>
<text top="903" left="100" width="329" height="12" font="4">tests that provides a standardized way to measure the</text>
<text top="919" left="100" width="259" height="12" font="4">performance of Python implementations).</text>
<text top="919" left="371" width="58" height="12" font="4">From the</text>
<text top="936" left="100" width="329" height="12" font="4">second one we have selected those tests that could</text>
<text top="952" left="100" width="329" height="12" font="4">be translated into the StaDyn core (arithmetic, calls,</text>
<text top="968" left="100" width="329" height="12" font="4">constructs, instances, lists, lookups, new instances and</text>
<text top="985" left="100" width="329" height="12" font="4">numbers). Python code was ﬁrst translated into the</text>
<text top="1001" left="100" width="329" height="12" font="4">StaDyn core; afterwards, the StaDyn core code was</text>
<text top="1018" left="100" width="329" height="12" font="4">translated into both C# 4.0 and VB following the</text>
<text top="1034" left="100" width="150" height="12" font="4">method described above.</text>
<text top="1060" left="85" width="344" height="12" font="4">Since the StaDyn core type system does not support</text>
<text top="1076" left="70" width="359" height="12" font="4">method overriding, all the tests in the selected benchmarks</text>
<text top="1092" left="70" width="359" height="12" font="4">make no use of dynamic binding in order to not bias the</text>
<text top="1109" left="70" width="220" height="12" font="4">runtime performance measurements.</text>
<text top="1125" left="85" width="344" height="12" font="4">The code has been instrumented with hooks to evaluate</text>
<text top="1142" left="70" width="359" height="12" font="4">runtime performance, recording the value of the processor’s</text>
<text top="1158" left="70" width="129" height="12" font="4">time stamp counter.</text>
<text top="1158" left="216" width="213" height="12" font="4">We have measured the diﬀerence</text>
<text top="395" left="510" width="5" height="9" font="17">0</text>
<text top="351" left="492" width="24" height="9" font="17">5,000</text>
<text top="308" left="487" width="30" height="9" font="17">10,000</text>
<text top="265" left="487" width="30" height="9" font="17">15,000</text>
<text top="222" left="487" width="30" height="9" font="17">20,000</text>
<text top="179" left="487" width="30" height="9" font="17">25,000</text>
<text top="136" left="487" width="30" height="9" font="17">30,000</text>
<text top="411" left="535" width="30" height="9" font="17">Explicit</text>
<text top="411" left="585" width="27" height="9" font="17">1 Type</text>
<text top="411" left="632" width="31" height="9" font="17">5 Types</text>
<text top="411" left="678" width="37" height="9" font="17">10 Types</text>
<text top="411" left="727" width="37" height="9" font="17">50 Types</text>
<text top="411" left="777" width="37" height="9" font="17">No Type </text>
<text top="424" left="786" width="16" height="9" font="17">Info</text>
<text top="307" left="476" width="0" height="10" font="42">E</text>
<text top="302" left="476" width="0" height="10" font="42">x</text>
<text top="296" left="476" width="0" height="10" font="42">e</text>
<text top="290" left="476" width="0" height="10" font="42">cu</text>
<text top="279" left="476" width="0" height="10" font="42">ti</text>
<text top="272" left="476" width="0" height="10" font="42">o</text>
<text top="266" left="476" width="0" height="10" font="42">n</text>
<text top="258" left="476" width="0" height="10" font="42">T</text>
<text top="252" left="476" width="0" height="10" font="42">im</text>
<text top="240" left="476" width="0" height="10" font="42">e</text>
<text top="233" left="476" width="0" height="10" font="42"> (</text>
<text top="228" left="476" width="0" height="10" font="42">m</text>
<text top="218" left="476" width="0" height="10" font="42">s)</text>
<text top="451" left="565" width="51" height="9" font="17">StaDyn core</text>
<text top="451" left="650" width="11" height="9" font="17">C#</text>
<text top="451" left="696" width="48" height="9" font="17">Visual Basic</text>
<text top="426" left="592" width="109" height="10" font="19">MicroBenchmark Tests</text>
<text top="484" left="474" width="340" height="12" font="4">FIGURE 21. Execution time of the micro-benchmark.</text>
<text top="533" left="464" width="359" height="12" font="4">between the beginning and the end of each benchmark to</text>
<text top="549" left="464" width="295" height="12" font="4">obtain the total execution time of each program.</text>
<text top="566" left="479" width="344" height="14" font="4">All the programs have been executed over the .Net</text>
<text top="582" left="464" width="359" height="12" font="4">framework 4.0 on a lightly loaded E6750 2.67 GHz</text>
<text top="599" left="464" width="28" height="12" font="4">Core</text>
<text top="599" left="505" width="7" height="12" font="4">2</text>
<text top="599" left="524" width="25" height="12" font="4">Duo</text>
<text top="599" left="562" width="41" height="12" font="4">system</text>
<text top="599" left="616" width="27" height="12" font="4">with</text>
<text top="599" left="655" width="7" height="12" font="4">2</text>
<text top="599" left="674" width="21" height="12" font="4">GB</text>
<text top="599" left="707" width="11" height="12" font="4">of</text>
<text top="599" left="731" width="33" height="12" font="4">RAM</text>
<text top="599" left="776" width="47" height="12" font="4">running</text>
<text top="615" left="464" width="154" height="12" font="4">Windows 7 Professional.</text>
<text top="615" left="633" width="190" height="12" font="4">Every test has been compiled</text>
<text top="632" left="464" width="359" height="12" font="4">without debugging information and with full optimization.</text>
<text top="648" left="464" width="359" height="12" font="4">To evaluate average percentages, ratios and orders of</text>
<text top="665" left="464" width="279" height="12" font="4">magnitude, we have used the geometric mean.</text>
<text top="703" left="464" width="27" height="13" font="2">5.2.</text>
<text top="703" left="508" width="86" height="13" font="2">Assessment</text>
<text top="731" left="464" width="359" height="12" font="4">Table 1 shows the results expressed in milliseconds. The ﬁrst</text>
<text top="747" left="464" width="359" height="12" font="4">six rows show the results of the micro-benchmark; following</text>
<text top="764" left="464" width="359" height="12" font="4">this, the hybrid static and dynamic typing Points example.</text>
<text top="780" left="464" width="359" height="12" font="4">Finally, the dynamic typing benchmarks: Pybench (8 rows)</text>
<text top="797" left="464" width="142" height="12" font="4">and Pystone (last row).</text>
<text top="813" left="479" width="344" height="12" font="4">Beginning with the micro-benchmark, the test with ex-</text>
<text top="830" left="464" width="359" height="12" font="4">plicit type declaration reveals that the three implementa-</text>
<text top="846" left="464" width="359" height="12" font="4">tions oﬀer exactly the same runtime performance (the gen-</text>
<text top="862" left="464" width="359" height="12" font="4">erated IL code is almost the same). The performance as-</text>
<text top="879" left="464" width="359" height="12" font="4">sessment when the exact single type of dyn var references</text>
<text top="895" left="464" width="359" height="12" font="4">is inferred shows the repercussion of our approach. Runtime</text>
<text top="912" left="464" width="359" height="12" font="4">performance of StaDyn core is the same as using explicitly</text>
<text top="928" left="464" width="359" height="12" font="4">typed references (in fact, the generated code is precisely the</text>
<text top="945" left="464" width="359" height="12" font="4">same). In this special scenario, StaDyn shows a huge perfor-</text>
<text top="961" left="464" width="359" height="12" font="4">mance improvement. If the compiler infers the exact type</text>
<text top="977" left="464" width="359" height="12" font="4">of dyn var references, the StaDyn core is more than 1,252</text>
<text top="994" left="464" width="359" height="12" font="4">times faster than VB and, in the same situation, 185 times</text>
<text top="1010" left="464" width="359" height="12" font="4">faster than C# 4.0. diﬀerence is caused by the lack of static</text>
<text top="1027" left="464" width="359" height="12" font="4">type inferencing in both VB and C# 4.0. These two lan-</text>
<text top="1043" left="464" width="359" height="12" font="4">guages perform every type-checking operation over dynamic</text>
<text top="1060" left="464" width="359" height="12" font="4">references at runtime, using reﬂection. The use of reﬂective</text>
<text top="1076" left="464" width="359" height="14" font="4">operations in the .Net platform has an important perfor-</text>
<text top="1093" left="464" width="359" height="12" font="4">mance cost [38]. The diﬀerence between C# and VB shows</text>
<text top="1109" left="464" width="354" height="12" font="4">the performance beneﬁt of using the DLR in this scenario.</text>
<text top="1125" left="479" width="344" height="12" font="4">Figure 21 shows the progression of execution time when</text>
<text top="1142" left="464" width="319" height="12" font="4">the compiler infers 1, 5, 10 or 50 possible types.</text>
<text top="1142" left="799" width="24" height="12" font="4">The</text>
<text top="1158" left="464" width="359" height="12" font="4">last value is when no type information is gathered by</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1262" width="892">
<text top="93" left="70" width="15" height="13" font="2">20</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="130" left="196" width="79" height="12" font="4">Benchmark</text>
<text top="130" left="353" width="30" height="12" font="4">Test</text>
<text top="130" left="447" width="85" height="12" font="4">StaDyn core</text>
<text top="130" left="566" width="25" height="12" font="4">C#</text>
<text top="130" left="625" width="86" height="12" font="4">Visual Basic</text>
<text top="188" left="182" width="106" height="12" font="4">Micro-benchmark</text>
<text top="147" left="306" width="95" height="12" font="4">Explicit Typing</text>
<text top="147" left="501" width="31" height="12" font="4">15.63</text>
<text top="147" left="575" width="31" height="12" font="4">15.63</text>
<text top="147" left="679" width="31" height="12" font="4">15.63</text>
<text top="164" left="306" width="108" height="12" font="4">One possible type</text>
<text top="164" left="501" width="31" height="12" font="4">15.63</text>
<text top="164" left="558" width="49" height="12" font="4">2,906.25</text>
<text top="164" left="655" width="56" height="12" font="4">28,953.13</text>
<text top="180" left="306" width="114" height="12" font="4">Five possible types</text>
<text top="180" left="494" width="38" height="12" font="4">406.25</text>
<text top="180" left="558" width="49" height="12" font="4">2,937.50</text>
<text top="180" left="655" width="56" height="12" font="4">29,640.63</text>
<text top="197" left="306" width="111" height="12" font="4">Ten possible types</text>
<text top="197" left="494" width="38" height="12" font="4">484.38</text>
<text top="197" left="558" width="49" height="12" font="4">2,984.38</text>
<text top="197" left="655" width="56" height="12" font="4">29,484.38</text>
<text top="213" left="306" width="112" height="12" font="4">Fifty possible type</text>
<text top="213" left="494" width="38" height="12" font="4">921.88</text>
<text top="213" left="558" width="49" height="12" font="4">3,156.25</text>
<text top="213" left="655" width="56" height="12" font="4">29,937.50</text>
<text top="230" left="306" width="123" height="12" font="4">No type information</text>
<text top="230" left="484" width="49" height="12" font="4">1,671.88</text>
<text top="230" left="558" width="49" height="12" font="4">3,175.65</text>
<text top="230" left="655" width="56" height="12" font="4">30,328.13</text>
<text top="247" left="214" width="42" height="12" font="4">Hybrid</text>
<text top="247" left="306" width="38" height="12" font="4">Points</text>
<text top="247" left="494" width="38" height="12" font="4">309.62</text>
<text top="247" left="558" width="49" height="12" font="4">1,859.27</text>
<text top="247" left="661" width="49" height="12" font="4">4,921.87</text>
<text top="383" left="192" width="0" height="12" font="4">Dynamically</text>
<text top="303" left="192" width="0" height="12" font="4">T</text>
<text top="293" left="192" width="0" height="12" font="4">yp</text>
<text top="278" left="192" width="0" height="12" font="4">ed</text>
<text top="321" left="224" width="52" height="12" font="4">Pybench</text>
<text top="264" left="306" width="66" height="12" font="4">Arithmetic</text>
<text top="264" left="501" width="31" height="12" font="4">31.25</text>
<text top="264" left="558" width="49" height="12" font="4">2,109.38</text>
<text top="264" left="672" width="38" height="12" font="4">671.88</text>
<text top="280" left="306" width="30" height="12" font="4">Calls</text>
<text top="280" left="494" width="38" height="12" font="4">203.13</text>
<text top="280" left="558" width="49" height="12" font="4">2,765.63</text>
<text top="280" left="661" width="49" height="12" font="4">2,796.88</text>
<text top="297" left="306" width="65" height="12" font="4">Constructs</text>
<text top="297" left="501" width="31" height="12" font="4">31.25</text>
<text top="297" left="558" width="49" height="12" font="4">3,343.75</text>
<text top="297" left="661" width="49" height="12" font="4">3,250.00</text>
<text top="313" left="306" width="56" height="12" font="4">Instances</text>
<text top="313" left="494" width="38" height="12" font="4">296.88</text>
<text top="313" left="558" width="49" height="12" font="4">2,421.88</text>
<text top="313" left="661" width="49" height="12" font="4">1,109.38</text>
<text top="329" left="306" width="29" height="12" font="4">Lists</text>
<text top="329" left="494" width="38" height="12" font="4">812.50</text>
<text top="329" left="551" width="56" height="12" font="4">20,765.63</text>
<text top="329" left="655" width="56" height="12" font="4">76,109.38</text>
<text top="346" left="306" width="51" height="12" font="4">Lookups</text>
<text top="346" left="501" width="31" height="12" font="4">93.75</text>
<text top="346" left="558" width="49" height="12" font="4">2,453.13</text>
<text top="346" left="655" width="56" height="12" font="4">52,062.50</text>
<text top="362" left="306" width="82" height="12" font="4">NewInstances</text>
<text top="362" left="501" width="31" height="12" font="4">31.25</text>
<text top="362" left="558" width="49" height="12" font="4">1,796.88</text>
<text top="362" left="661" width="49" height="12" font="4">9,421.88</text>
<text top="379" left="306" width="54" height="12" font="4">Numbers</text>
<text top="379" left="501" width="31" height="12" font="4">31.25</text>
<text top="379" left="558" width="49" height="12" font="4">1,250.00</text>
<text top="379" left="679" width="31" height="12" font="4">78.13</text>
<text top="395" left="226" width="48" height="12" font="4">Pystone</text>
<text top="395" left="494" width="38" height="12" font="4">281.25</text>
<text top="395" left="558" width="49" height="12" font="4">2,937.50</text>
<text top="395" left="661" width="49" height="12" font="4">9,218.75</text>
<text top="426" left="282" width="328" height="12" font="4">TABLE 1. Execution time expressed in milliseconds.</text>
<text top="916" left="310" width="273" height="12" font="4">FIGURE 20. Execution time ratios to C#.</text>
<text top="967" left="70" width="359" height="12" font="4">the compiler. Although C# is 8.5 times faster than VB,</text>
<text top="983" left="70" width="359" height="12" font="4">both runtime performance trends are nearly constant: the</text>
<text top="1000" left="70" width="359" height="12" font="4">standard deviation of VB is 1.7% and that of C# is 4.14%.</text>
<text top="1016" left="70" width="359" height="12" font="4">This small variation is caused by the lack of static type</text>
<text top="1033" left="70" width="359" height="12" font="4">information gathered for dynamic references. Therefore, the</text>
<text top="1049" left="70" width="359" height="12" font="4">generated code does not seem to depend on the number of</text>
<text top="1065" left="70" width="88" height="12" font="4">possible types.</text>
<text top="1093" left="85" width="344" height="12" font="4">The runtime performance of StaDyn core programs</text>
<text top="1109" left="70" width="359" height="12" font="4">evolves in a diﬀerent way. Execution time shows a linear</text>
<text top="1125" left="70" width="359" height="12" font="4">increase in the number of types inferred by the compiler</text>
<text top="1142" left="70" width="359" height="12" font="4">(the performance beneﬁt drops when the number of possible</text>
<text top="1158" left="70" width="359" height="12" font="4">types increases). As an example, the runtime performance</text>
<text top="967" left="464" width="359" height="12" font="4">beneﬁt drops to 32 and 3.42 times better than VB and C#</text>
<text top="983" left="464" width="359" height="12" font="4">respectively, when the compiler infers 50 possible types for</text>
<text top="1001" left="464" width="359" height="11" font="4">dyn var references. This diﬀerence between our approach</text>
<text top="1016" left="464" width="359" height="12" font="4">and others is justiﬁed by the amount of type information</text>
<text top="1033" left="464" width="359" height="12" font="4">gathered by the compiler. StaDyn continues collecting type</text>
<text top="1049" left="464" width="359" height="12" font="4">information, even when references are set as dynamic, and</text>
<text top="1065" left="464" width="359" height="12" font="4">this information is used to optimize the generated code.</text>
<text top="1082" left="464" width="359" height="12" font="4">In contrast, both C# 4.0 and VB perform no static type</text>
<text top="1098" left="464" width="299" height="12" font="4">inference once a reference is declared as dynamic.</text>
<text top="1125" left="479" width="344" height="12" font="4">When the compiler obtains no static type information,</text>
<text top="1142" left="464" width="359" height="12" font="4">runtime performance is the worst in the three programming</text>
<text top="1158" left="464" width="62" height="12" font="4">languages.</text>
<text top="1158" left="546" width="277" height="12" font="4">However, StaDyn core requires 5.52% and</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="22" position="absolute" top="0" left="0" height="1262" width="892">
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="808" width="15" height="13" font="2">21</text>
<text top="136" left="70" width="359" height="12" font="4">52.65% of the execution time that VB and C# respectively</text>
<text top="153" left="70" width="219" height="12" font="4">employ to run the same programs.</text>
<text top="153" left="301" width="127" height="12" font="4">In this scenario, the</text>
<text top="169" left="70" width="359" height="12" font="4">DLR implies a considerable performance improvement (C#</text>
<text top="185" left="70" width="52" height="12" font="4">vs. VB).</text>
<text top="202" left="85" width="344" height="12" font="4">Figure 20 shows the ratios of execution time to C# for the</text>
<text top="218" left="70" width="359" height="12" font="4">hybrid (Points) and dynamic typing benchmarks (Pybench</text>
<text top="235" left="70" width="88" height="12" font="4">and Pystone).</text>
<text top="235" left="177" width="252" height="12" font="4">Running hybrid code, the performance</text>
<text top="251" left="70" width="359" height="12" font="4">beneﬁt is 500.5% and 1,489.65% compared to C# and</text>
<text top="268" left="70" width="102" height="12" font="4">VB respectively.</text>
<text top="268" left="189" width="240" height="12" font="4">This beneﬁt increases as the number</text>
<text top="284" left="70" width="359" height="12" font="4">of dynamic references in the code grows: average beneﬁt</text>
<text top="301" left="70" width="359" height="12" font="4">running the dynamic typing code is 3,106.29% (C#)</text>
<text top="317" left="70" width="359" height="12" font="4">and 3,381.3% (VB). Since StaDyn core optimizations are</text>
<text top="334" left="70" width="359" height="12" font="4">obtained by means of collecting type information of dynamic</text>
<text top="350" left="70" width="359" height="12" font="4">references, the compiler has more opportunities to optimize</text>
<text top="366" left="70" width="281" height="12" font="4">the code when dyn var references are used.</text>
<text top="366" left="367" width="62" height="12" font="4">Therefore,</text>
<text top="383" left="70" width="359" height="12" font="4">our language oﬀers the ﬂexibility of dynamic typing, and</text>
<text top="399" left="70" width="359" height="12" font="4">a number of optimizations to come closer to the runtime</text>
<text top="416" left="70" width="175" height="12" font="4">performance of static typing.</text>
<text top="432" left="85" width="344" height="12" font="4">The lowest performance beneﬁt obtained by StaDyn core</text>
<text top="449" left="70" width="359" height="12" font="4">running dynamic code is with the numbers test of Pybench</text>
<text top="465" left="70" width="359" height="12" font="4">(150% compared to VB). Since this test performs almost</text>
<text top="482" left="70" width="359" height="12" font="4">all the operations over constant numbers (few variables are</text>
<text top="498" left="70" width="279" height="12" font="4">used), our optimizations are hardly applied.</text>
<text top="498" left="363" width="66" height="12" font="4">Diﬀerences</text>
<text top="514" left="70" width="359" height="12" font="4">between C# and VB may be due to the appropriateness</text>
<text top="531" left="70" width="359" height="12" font="4">of using the DLR (C#) as opposed to the Reflection</text>
<text top="547" left="70" width="359" height="12" font="4">namespace (VB) for dynamically typed code. One example</text>
<text top="564" left="70" width="359" height="12" font="4">is the lookups test that accesses to dynamic ﬁelds of</text>
<text top="580" left="70" width="359" height="12" font="4">an object, using another dynamic reference; under these</text>
<text top="597" left="70" width="359" height="12" font="4">circumstances, the VB implementation is extraordinary</text>
<text top="613" left="70" width="99" height="12" font="4">slower than C#.</text>
<text top="653" left="70" width="13" height="13" font="2">6.</text>
<text top="653" left="100" width="145" height="13" font="2">RELATED WORK</text>
<text top="681" left="70" width="359" height="12" font="4">Since both dynamic and static typing oﬀer important</text>
<text top="698" left="70" width="359" height="12" font="4">beneﬁts, there have been approaches aimed at obtaining the</text>
<text top="714" left="70" width="359" height="12" font="4">advantages of both, following the philosophy of static typing</text>
<text top="731" left="70" width="296" height="12" font="4">where possible, dynamic typing when needed [19].</text>
<text top="747" left="85" width="344" height="12" font="4">One of the ﬁrst approaches was Soft Typing [42], that</text>
<text top="764" left="70" width="359" height="12" font="4">applied static typing to a dynamically typed language</text>
<text top="780" left="70" width="106" height="12" font="4">such as Scheme.</text>
<text top="780" left="196" width="232" height="12" font="4">Soft typing does not control which</text>
<text top="796" left="70" width="359" height="12" font="4">parts in a program are statically checked, neither is static</text>
<text top="813" left="70" width="359" height="12" font="4">type information used to optimize the generated code.</text>
<text top="829" left="70" width="359" height="12" font="4">The approach proposed in [20] adds a Dynamic type to</text>
<text top="846" left="70" width="359" height="12" font="4">the lambda calculus, including two conversion operations</text>
<text top="862" left="70" width="359" height="12" font="4">(dynamic and typecase), generating a verbose code deeply</text>
<text top="879" left="70" width="171" height="12" font="4">dependent on its dynamism.</text>
<text top="895" left="85" width="344" height="12" font="4">The works of Quasi-Static Typing [43], Hybrid Typing</text>
<text top="912" left="70" width="359" height="12" font="4">[44] and Gradual Typing [45] perform implicit conversions</text>
<text top="928" left="70" width="359" height="12" font="4">between dynamic and static code, employing subtyping</text>
<text top="945" left="70" width="359" height="12" font="4">relations in the case of quasi-static and hybrid typing, and</text>
<text top="961" left="70" width="359" height="12" font="4">a consistency relation in gradual typing. Gradual typing</text>
<text top="977" left="70" width="359" height="12" font="4">already identiﬁed uniﬁcation-based constraint resolution as</text>
<text top="994" left="70" width="359" height="12" font="4">a suitable approach to integrate both dynamic and static</text>
<text top="1010" left="70" width="359" height="12" font="4">typing [46]. However, with gradual typing a dynamic type</text>
<text top="1027" left="70" width="359" height="12" font="4">is always implicitly converted into static without any static</text>
<text top="1043" left="70" width="359" height="12" font="4">type-checking, because type inference is not performed over</text>
<text top="1060" left="70" width="122" height="12" font="4">dynamic references.</text>
<text top="1060" left="207" width="222" height="12" font="4">The main diﬀerence between these</text>
<text top="1076" left="70" width="359" height="12" font="4">approaches and the work presented in this paper is that we</text>
<text top="1092" left="70" width="359" height="12" font="4">perform type-checking even when dynamic types are used,</text>
<text top="1109" left="70" width="359" height="12" font="4">detecting some type errors in dynamic code and, hence,</text>
<text top="1125" left="70" width="152" height="12" font="4">improving its robustness.</text>
<text top="1142" left="85" width="260" height="12" font="4">The work developed by Wrigstad et al.</text>
<text top="1142" left="364" width="65" height="12" font="4">allows the</text>
<text top="1158" left="70" width="359" height="12" font="4">combination of dynamic and static typing in the Thorn</text>
<text top="136" left="464" width="359" height="12" font="4">programming language [47]. Thorn oﬀers like types, an</text>
<text top="153" left="464" width="359" height="12" font="4">intermediate point between static and dynamic types [48].</text>
<text top="169" left="464" width="359" height="12" font="4">Occurrences of like types variables are checked statically</text>
<text top="185" left="464" width="359" height="12" font="4">within their scope but, as they may be bound to dynamic</text>
<text top="202" left="464" width="359" height="12" font="4">values, their usage must be still checked at runtime. like</text>
<text top="218" left="464" width="359" height="12" font="4">types increase the robustness of the Thorn programming</text>
<text top="235" left="464" width="359" height="12" font="4">language, and programs developed using like types have</text>
<text top="251" left="464" width="359" height="12" font="4">been assessed to be about 3x and 6x faster than using</text>
<text top="268" left="464" width="335" height="12" font="4">dynamic types in the same programming language [48].</text>
<text top="284" left="479" width="344" height="12" font="4">Although the Just programming language [49] does not</text>
<text top="301" left="464" width="359" height="12" font="4">combine dynamic and static typing, it added implicit type</text>
<text top="317" left="464" width="359" height="12" font="4">reconstruction to an explicitly typed language such as Java</text>
<text top="334" left="464" width="359" height="12" font="4">to obtain statically checked duck typing. The combination of</text>
<text top="350" left="464" width="359" height="12" font="4">syntax-directed and constraint-based type-checking allows</text>
<text top="366" left="464" width="359" height="12" font="4">the programmer to write generic code without deﬁning class</text>
<text top="383" left="464" width="359" height="12" font="4">hierarchies [50]. This approach, however, does not consider</text>
<text top="399" left="464" width="359" height="12" font="4">methods that generate constraints (polymorphic methods)</text>
<text top="416" left="464" width="231" height="12" font="4">to invoke other polymorphic methods.</text>
<text top="432" left="479" width="344" height="12" font="4">Theoretical works on combining static with dynamic</text>
<text top="449" left="464" width="359" height="12" font="4">typing have been partially included in the implementation</text>
<text top="465" left="464" width="359" height="12" font="4">of programming languages such as Boo, Visual Basic (VB)</text>
<text top="484" left="464" width="359" height="12" font="4">.Net, Cobra, Dylan, Strongtalk, and the recently released</text>
<text top="498" left="464" width="80" height="12" font="4">C# 4.0 [51].</text>
<text top="498" left="560" width="263" height="12" font="4">Some programming languages have taken</text>
<text top="514" left="464" width="359" height="12" font="4">the approach of adding a new dynamic type as proposed</text>
<text top="531" left="464" width="359" height="12" font="4">in [20] (dynamic in C# and Cobra, and duck in Boo),</text>
<text top="547" left="464" width="359" height="12" font="4">whereas others represent dynamic types by removing type</text>
<text top="564" left="464" width="359" height="12" font="4">annotations in variable declarations (VB and Dylan) [41].</text>
<text top="580" left="464" width="359" height="12" font="4">Strongtalk follows a completely diﬀerent approach based</text>
<text top="597" left="464" width="294" height="12" font="4">on the concept of pluggable type systems [52].</text>
<text top="597" left="772" width="51" height="12" font="4">In these</text>
<text top="613" left="464" width="359" height="12" font="4">languages, dynamic types are implicitly coerced to static</text>
<text top="630" left="464" width="359" height="12" font="4">ones following the approach deﬁned in [43] and [45], opposite</text>
<text top="646" left="464" width="359" height="12" font="4">to the explicit use of a conversion instruction like the</text>
<text top="664" left="464" width="359" height="11" font="4">typecase statement proposed by [20]. Since these implicit</text>
<text top="679" left="464" width="359" height="12" font="4">coercions may fail at runtime, a dynamic type-check is</text>
<text top="695" left="464" width="307" height="12" font="4">inserted in the generated code as described in [44].</text>
<text top="712" left="479" width="344" height="12" font="4">There are also some works aimed at performing static</text>
<text top="728" left="464" width="359" height="12" font="4">type inference of dynamically typed languages to discover</text>
<text top="745" left="464" width="359" height="12" font="4">type errors before program execution. Diamondback Ruby</text>
<text top="761" left="464" width="359" height="12" font="4">(DRuby) is a tool that blends Ruby’s dynamic type</text>
<text top="778" left="464" width="359" height="12" font="4">system with a static typing discipline [32]. When possible,</text>
<text top="794" left="464" width="359" height="12" font="4">DRuby infers static types to discover type errors in Ruby</text>
<text top="810" left="464" width="60" height="12" font="4">programs.</text>
<text top="810" left="537" width="286" height="12" font="4">In many cases, the DRuby programmer must</text>
<text top="827" left="464" width="359" height="12" font="4">annotate programs with types in order to obtain compile-</text>
<text top="843" left="464" width="110" height="12" font="4">time type errors.</text>
<text top="843" left="594" width="229" height="12" font="4">Since DRuby trusts annotations to</text>
<text top="860" left="464" width="359" height="12" font="4">be correct, improperly annotated code may cause run-</text>
<text top="876" left="464" width="359" height="12" font="4">time type errors, and these errors may be misleading.</text>
<text top="893" left="464" width="359" height="12" font="4">Anderson, Giannini and Drossopoulou formalized a subset</text>
<text top="909" left="464" width="104" height="12" font="4">of JavaScript (J S</text>
<text top="914" left="568" width="5" height="8" font="18">0</text>
<text top="909" left="575" width="248" height="12" font="4">), deﬁning a type inference algorithm that</text>
<text top="925" left="464" width="283" height="12" font="4">is sound with respect to a type system [53].</text>
<text top="925" left="761" width="62" height="12" font="4">Therefore,</text>
<text top="942" left="464" width="359" height="12" font="4">programmers can beneﬁt from the safety oﬀered by the</text>
<text top="958" left="464" width="359" height="12" font="4">type system, without the need to write explicitly types</text>
<text top="975" left="464" width="116" height="12" font="4">in their programs.</text>
<text top="975" left="597" width="226" height="12" font="4">Diﬀerent features of the JavaScript</text>
<text top="991" left="464" width="359" height="12" font="4">programming language such as dynamic removal of members</text>
<text top="1008" left="464" width="359" height="12" font="4">or dynamic code evaluation are not supported. Neither of</text>
<text top="1024" left="464" width="180" height="12" font="4">these works (DRuby and J S</text>
<text top="1029" left="645" width="5" height="8" font="18">0</text>
<text top="1024" left="651" width="172" height="12" font="4">) use the statically inferred</text>
<text top="1041" left="464" width="297" height="12" font="4">type information to optimize the generated code.</text>
<text top="1080" left="464" width="13" height="13" font="2">7.</text>
<text top="1080" left="495" width="127" height="13" font="2">CONCLUSIONS</text>
<text top="1109" left="464" width="359" height="12" font="4">The StaDyn programming language combines static and</text>
<text top="1125" left="464" width="359" height="12" font="4">dynamic typing in the very same programming language</text>
<text top="1142" left="464" width="233" height="12" font="4">oﬀering early type error detection,</text>
<text top="1142" left="709" width="114" height="12" font="4">improved runtime</text>
<text top="1158" left="464" width="359" height="12" font="4">performance, and direct interoperation between dynamically</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1262" width="892">
<text top="93" left="70" width="15" height="13" font="2">22</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="136" left="70" width="169" height="12" font="4">and statically typed code.</text>
<text top="136" left="257" width="171" height="12" font="4">The major contribution of</text>
<text top="153" left="70" width="359" height="12" font="4">StaDyn is that static type inference and type checking is</text>
<text top="169" left="70" width="359" height="12" font="4">performed by the compiler even over dynamic references,</text>
<text top="185" left="70" width="359" height="12" font="4">oﬀering a high level of ﬂexibility, and a better robustness</text>
<text top="202" left="70" width="222" height="12" font="4">and eﬃciency closer to static typing.</text>
<text top="218" left="85" width="344" height="12" font="4">In order to formally describe the StaDyn programming</text>
<text top="235" left="70" width="320" height="12" font="4">language, we have reduced it to its minimal core.</text>
<text top="235" left="405" width="24" height="12" font="4">The</text>
<text top="251" left="70" width="359" height="12" font="4">key features of its type system are a new interpretation of</text>
<text top="268" left="70" width="359" height="12" font="4">union and intersection types, the combination of syntax-</text>
<text top="284" left="70" width="359" height="12" font="4">directed and constraint-based type-checking, type inference</text>
<text top="301" left="70" width="359" height="12" font="4">of implicitly-typed dynamic and static references, and ﬂow-</text>
<text top="317" left="70" width="141" height="12" font="4">sensitive type-checking.</text>
<text top="333" left="85" width="344" height="12" font="4">The type information gathered by the compiler is used</text>
<text top="350" left="70" width="359" height="12" font="4">to generate optimized C# code. When running dynamic</text>
<text top="366" left="70" width="359" height="12" font="4">languages benchmarks, the average runtime performance</text>
<text top="383" left="70" width="359" height="12" font="4">improvement has been 23 and 27 orders of magnitude</text>
<text top="399" left="70" width="359" height="12" font="4">compared to C# and VB respectively. When running hybrid</text>
<text top="416" left="70" width="359" height="12" font="4">static and dynamic typing code, the runtime performance</text>
<text top="432" left="70" width="359" height="12" font="4">beneﬁt drops to 5 and 15 orders of magnitude. The lowest</text>
<text top="449" left="70" width="359" height="12" font="4">beneﬁt is obtained, 89.95% (C#) and 1,714% (VB), when</text>
<text top="465" left="70" width="359" height="12" font="4">the compiler does not manage to infer any type information</text>
<text top="481" left="70" width="359" height="12" font="4">of dynamic references. Finally, the code generation scheme</text>
<text top="498" left="70" width="359" height="12" font="4">does not seem to involve any performance penalty, obtaining</text>
<text top="514" left="70" width="299" height="12" font="4">the same results when types are explicitly stated.</text>
<text top="531" left="85" width="344" height="12" font="4">The C# implementation of the StaDyn minimal core,</text>
<text top="547" left="70" width="359" height="12" font="4">including a parser for its concrete syntax, its type system,</text>
<text top="564" left="70" width="359" height="12" font="4">the translation to C# described in Section 4, and all the</text>
<text top="580" left="70" width="359" height="12" font="4">examples and benchmarks used in this paper, are freely</text>
<text top="596" left="70" width="359" height="12" font="4">available at http://www.reflection.uniovi.es/stadyn/</text>
<text top="614" left="70" width="209" height="11" font="4">download/2011/computerjournal.</text>
<text top="629" left="85" width="344" height="12" font="4">The current release of the whole StaDyn programming</text>
<text top="646" left="70" width="359" height="12" font="4">language implementation and its source code can be down-</text>
<text top="662" left="70" width="349" height="12" font="4">loaded from http://www.reflection.uniovi.es/stadyn.</text>
<text top="700" left="70" width="204" height="13" font="2">ACKNOWLEDGEMENTS</text>
<text top="727" left="70" width="359" height="12" font="4">This work has been funded by Microsoft Research, under</text>
<text top="743" left="70" width="359" height="12" font="4">the project entitled Extending dynamic features of the</text>
<text top="760" left="70" width="359" height="12" font="4">SSCLI, awarded in the Phoenix and SSCLI, Compilation</text>
<text top="776" left="70" width="334" height="12" font="4">and Managed Execution Request for Proposals, 2006.</text>
<text top="776" left="418" width="10" height="12" font="4">It</text>
<text top="793" left="70" width="359" height="12" font="4">has been also funded by the Department of Science</text>
<text top="809" left="70" width="359" height="12" font="4">and Technology (Spain) under the National Program for</text>
<text top="826" left="70" width="359" height="12" font="4">Research, Development and Innovation: project TIN2008-</text>
<text top="842" left="70" width="359" height="12" font="4">00276, entitled Improving Performance and Robustness</text>
<text top="859" left="70" width="359" height="12" font="4">of Dynamic Languages to develop Eﬃcient, Scalable and</text>
<text top="875" left="70" width="107" height="12" font="4">Reliable Software.</text>
<text top="913" left="70" width="117" height="13" font="2">REFERENCES</text>
<text top="940" left="77" width="74" height="12" font="4">[1] Thomas,</text>
<text top="940" left="164" width="18" height="12" font="4">D.,</text>
<text top="940" left="195" width="44" height="12" font="4">Fowler,</text>
<text top="940" left="252" width="18" height="12" font="4">C.,</text>
<text top="940" left="283" width="68" height="12" font="4">and Hunt,</text>
<text top="940" left="364" width="64" height="12" font="4">A. (2004)</text>
<text top="956" left="98" width="80" height="12" font="4">Programming</text>
<text top="956" left="191" width="34" height="12" font="4">Ruby,</text>
<text top="956" left="240" width="22" height="12" font="4">2nd</text>
<text top="956" left="274" width="45" height="12" font="4">edition.</text>
<text top="956" left="332" width="96" height="12" font="4">Addison-Wesley</text>
<text top="973" left="98" width="230" height="12" font="4">Professional, Raleigh, North Carolina.</text>
<text top="991" left="77" width="352" height="12" font="4">[2] Thomas, D., Hansson, D., Schwarz, A., Fuchs, T.,</text>
<text top="1007" left="98" width="330" height="12" font="4">Breed, L., and Clark, M. (2005) Agile Web Development</text>
<text top="1024" left="98" width="330" height="12" font="4">with Rails. A Pragmatic Guide. Pragmatic Bookshelf,</text>
<text top="1040" left="98" width="150" height="12" font="4">Raleigh, North Carolina.</text>
<text top="1058" left="77" width="352" height="12" font="4">[3] Hunt, A. and Thomas, D. (1999) The pragmatic</text>
<text top="1075" left="98" width="76" height="12" font="4">programmer:</text>
<text top="1075" left="187" width="242" height="12" font="4">from journeyman to master. Addison-</text>
<text top="1091" left="98" width="42" height="12" font="4">Wesley</text>
<text top="1091" left="154" width="56" height="12" font="4">Longman</text>
<text top="1091" left="223" width="64" height="12" font="4">Publishing</text>
<text top="1091" left="300" width="25" height="12" font="4">Co.,</text>
<text top="1091" left="341" width="26" height="12" font="4">Inc.,</text>
<text top="1091" left="383" width="46" height="12" font="4">Boston,</text>
<text top="1107" left="98" width="90" height="12" font="4">Massachusetts.</text>
<text top="1125" left="77" width="352" height="12" font="4">[4] ECMA-357 (2005) ECMAScript for XML (E4X) Speci-</text>
<text top="1142" left="98" width="330" height="12" font="4">ﬁcation, 2nd edition. European Computer Manufactur-</text>
<text top="1158" left="98" width="227" height="12" font="4">ers Association, Geneva, Switzerland.</text>
<text top="136" left="471" width="352" height="12" font="4">[5] Crane, D., Pascarello, E., and James, D. (2005)</text>
<text top="153" left="493" width="330" height="12" font="4">AJAX in Action. Manning Publications, Greenwich,</text>
<text top="169" left="493" width="77" height="12" font="4">Connecticut.</text>
<text top="186" left="471" width="352" height="12" font="4">[6] van Rossum, G., Fred, L., and Drake, J. (2003) The</text>
<text top="203" left="493" width="330" height="12" font="4">Python Language Reference Manual. Network Theory,</text>
<text top="219" left="493" width="105" height="12" font="4">United Kingdom.</text>
<text top="237" left="471" width="352" height="12" font="4">[7] Latteier, A., Pelletier, M., McDonough, C., and</text>
<text top="253" left="493" width="330" height="12" font="4">Sabaini, P. (2008). The Zope book. http://www.zope.</text>
<text top="271" left="493" width="237" height="11" font="4">org/Documentation/Books/ZopeBook/.</text>
<text top="287" left="471" width="211" height="12" font="4">[8] Django Software Foundation.</text>
<text top="287" left="710" width="47" height="12" font="4">Django,</text>
<text top="287" left="769" width="54" height="12" font="4">the web</text>
<text top="304" left="493" width="278" height="12" font="4">framework for perfectionists with deadlines.</text>
<text top="305" left="788" width="35" height="11" font="4">http:</text>
<text top="321" left="493" width="230" height="11" font="4">//openjdk.java.net/projects/mlvm.</text>
<text top="338" left="471" width="352" height="12" font="4">[9] Ierusalimschy, R., de Figueiredo, L. H., and Filho,</text>
<text top="354" left="493" width="330" height="12" font="4">W. C. (1996) Lua – an extensible extension language.</text>
<text top="370" left="493" width="275" height="12" font="4">Software Practice &amp; Experience, 26, 635–652.</text>
<text top="388" left="464" width="359" height="12" font="4">[10] Ierusalimschy, R., de Figueiredo, L. H., and Celes,</text>
<text top="404" left="493" width="217" height="12" font="4">W. (2007) The evolution of lua.</text>
<text top="404" left="733" width="90" height="12" font="4">Proceedings of</text>
<text top="421" left="493" width="330" height="12" font="4">the conference on History of Programming Languages</text>
<text top="437" left="493" width="330" height="12" font="4">(HOPL), San Diego, California, 9-10 June, pp. 1–26.</text>
<text top="454" left="493" width="36" height="12" font="4">ACM.</text>
<text top="471" left="464" width="359" height="12" font="4">[11] Hermann, J. The Pythius Web Site. http://pythius.</text>
<text top="489" left="493" width="110" height="11" font="4">sourceforge.net.</text>
<text top="505" left="464" width="45" height="12" font="4">[12] B¨</text>
<text top="505" left="503" width="320" height="12" font="4">ollert, K. (1999) On weaving aspects. Proceedings of</text>
<text top="521" left="493" width="330" height="12" font="4">the Workshop on Object-Oriented Technology, Lisbon,</text>
<text top="538" left="493" width="313" height="12" font="4">Portugal, 14-18 June, pp. 301–302. Springer-Verlag.</text>
<text top="555" left="464" width="359" height="12" font="4">[13] Ortin, F. and Cueva, J. M. (2004) Dynamic adaptation</text>
<text top="572" left="493" width="146" height="12" font="4">of application aspects.</text>
<text top="572" left="665" width="158" height="12" font="4">Journal of Systems and</text>
<text top="588" left="493" width="136" height="12" font="4">Software, 71, 229–243.</text>
<text top="606" left="464" width="359" height="12" font="4">[14] Torgersen, M. (2009) New features in C# 4.0. Microsoft</text>
<text top="622" left="493" width="223" height="12" font="4">Corporation, Redmond, Washington.</text>
<text top="640" left="464" width="359" height="12" font="4">[15] Hugunin, J. (2007) Just glue it! Ruby and the DLR in</text>
<text top="656" left="493" width="330" height="12" font="4">Silverlight. The MIX Conference, Las Vegas, Nevada,</text>
<text top="672" left="493" width="104" height="12" font="4">30 April - 7 May.</text>
<text top="690" left="464" width="359" height="12" font="4">[16] Sun Microsystems. JSR 292, supporting dynamically</text>
<text top="706" left="493" width="239" height="12" font="4">typed languages on the java platform.</text>
<text top="707" left="745" width="78" height="11" font="4">http://www.</text>
<text top="724" left="493" width="202" height="11" font="4">jcp.org/en/jsr/detail?id=292.</text>
<text top="740" left="464" width="359" height="12" font="4">[17] Sun Microsystems OpenJDK. The Da Vinci Machine, a</text>
<text top="757" left="493" width="330" height="12" font="4">multi-language renaissance for the java virtual machine</text>
<text top="773" left="493" width="76" height="12" font="4">architecture.</text>
<text top="774" left="590" width="233" height="11" font="4">http://openjdk.java.net/projects/</text>
<text top="791" left="493" width="32" height="11" font="4">mlvm.</text>
<text top="807" left="464" width="359" height="12" font="4">[18] Pierce, B. C. (2002) Types and Programming Lan-</text>
<text top="823" left="493" width="313" height="12" font="4">guages. The MIT Press, Cambridge, Massachusetts.</text>
<text top="841" left="464" width="359" height="12" font="4">[19] Meijer, E. and Drayton, P. (2004) Static typing where</text>
<text top="857" left="493" width="330" height="12" font="4">possible dynamic typing when needed: The end of the</text>
<text top="874" left="493" width="330" height="12" font="4">cold war between programming languages. Proceedings</text>
<text top="890" left="493" width="330" height="12" font="4">of the OOPSLA Workshop on Revival of Dynamic</text>
<text top="907" left="493" width="327" height="12" font="4">Languages, Vancouver, Canada, 24-28 October. ACM.</text>
<text top="924" left="464" width="359" height="12" font="4">[20] Abadi, M., Cardelli, L., Pierce, B., and Plotkin, G.</text>
<text top="941" left="493" width="330" height="12" font="4">(1991) Dynamic typing in a statically typed language.</text>
<text top="957" left="493" width="330" height="12" font="4">ACM Transactions on Programming Languages and</text>
<text top="973" left="493" width="133" height="12" font="4">Systems, 13, 237–268.</text>
<text top="991" left="464" width="338" height="12" font="4">[21] Abadi, M., Cardelli, L., Pierce, B. C., and R´</text>
<text top="991" left="796" width="27" height="12" font="4">emy,</text>
<text top="1007" left="493" width="330" height="12" font="4">D. (1995) Dynamic typing in polymorphic languages.</text>
<text top="1024" left="493" width="293" height="12" font="4">Journal of Functional Programming, 5, 111–130.</text>
<text top="1041" left="464" width="359" height="12" font="4">[22] Ortin, F. The StaDyn programming language. http:</text>
<text top="1059" left="493" width="237" height="11" font="4">//www.reflection.uniovi.es/stadyn.</text>
<text top="1075" left="464" width="359" height="12" font="4">[23] Ortin, F., Zapico, D., Perez-Schoﬁeld, J. B. G., and</text>
<text top="1092" left="493" width="330" height="12" font="4">Garcia, M. (2010) Including both static and dynamic</text>
<text top="1108" left="493" width="284" height="12" font="4">typing in the same programming language.</text>
<text top="1108" left="798" width="25" height="12" font="4">IET</text>
<text top="1124" left="493" width="128" height="12" font="4">Software, 4, 268–282.</text>
<text top="1142" left="464" width="69" height="12" font="4">[24] Foster,</text>
<text top="1142" left="547" width="15" height="12" font="4">J.,</text>
<text top="1142" left="574" width="56" height="12" font="4">Terauchi,</text>
<text top="1142" left="643" width="18" height="12" font="4">T.,</text>
<text top="1142" left="674" width="72" height="12" font="4">and Aiken,</text>
<text top="1142" left="759" width="64" height="12" font="4">A. (2002)</text>
<text top="1158" left="493" width="189" height="12" font="4">Flow-sensitive type qualiﬁers.</text>
<text top="1158" left="705" width="118" height="12" font="4">Proceedings of the</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="24" position="absolute" top="0" left="0" height="1262" width="892">
<text top="95" left="126" width="641" height="13" font="2">Type Inference to Optimize a Hybrid Statically and Dynamically Typed Language</text>
<text top="93" left="808" width="15" height="13" font="2">23</text>
<text top="136" left="98" width="330" height="12" font="4">Programming Language Design and Implementation</text>
<text top="153" left="98" width="330" height="12" font="4">(PLDI), Berlin, Germany, 17-19 June, pp. 1–12. ACM.</text>
<text top="172" left="70" width="359" height="12" font="4">[25] Pierce, B. C. (1992) Programming with intersection</text>
<text top="188" left="98" width="330" height="12" font="4">types and bounded polymorphism. Technical Report</text>
<text top="204" left="98" width="330" height="12" font="4">CMU-CS-91-106. School of Computer Science, Pitts-</text>
<text top="221" left="98" width="103" height="12" font="4">burgh, PA, USA.</text>
<text top="240" left="70" width="130" height="12" font="4">[26] Corporation, M.</text>
<text top="240" left="217" width="212" height="12" font="4">The C# Programming Language.</text>
<text top="257" left="98" width="318" height="11" font="4">http://download.microsoft.com/download/3/8/8/</text>
<text top="274" left="98" width="314" height="11" font="4">388e7205-bc10-4226-b2a8-75351c669b09/csharp\</text>
<text top="290" left="98" width="230" height="11" font="4">%20language\%20specification.doc.</text>
<text top="308" left="70" width="95" height="12" font="4">[27] Barbanera,</text>
<text top="308" left="187" width="17" height="12" font="4">F.,</text>
<text top="308" left="225" width="117" height="12" font="4">Dezani-Ciancaglini,</text>
<text top="308" left="364" width="20" height="12" font="4">M.,</text>
<text top="308" left="406" width="22" height="12" font="4">and</text>
<text top="325" left="98" width="330" height="12" font="4">De’Liguoro, U. (1995) Intersection and union types:</text>
<text top="341" left="98" width="330" height="12" font="4">syntax and semantics. Information and Computation,</text>
<text top="358" left="98" width="85" height="12" font="4">119, 202–230.</text>
<text top="377" left="70" width="359" height="12" font="4">[28] Aiken, A. and Wimmers, E. L. (1993) Type inclusion</text>
<text top="393" left="98" width="197" height="12" font="4">constraints and type inference.</text>
<text top="393" left="314" width="115" height="12" font="4">Proceedings of the</text>
<text top="409" left="98" width="330" height="12" font="4">Conference on Functional Programming Languages and</text>
<text top="426" left="98" width="330" height="12" font="4">Computer Architecture, Copenhagen, Denmark, 9-11</text>
<text top="442" left="98" width="177" height="12" font="4">June, pp. 31–41. ACM Press.</text>
<text top="461" left="70" width="80" height="12" font="4">[29] Igarashi,</text>
<text top="461" left="162" width="102" height="12" font="4">A. and Nagira,</text>
<text top="461" left="276" width="153" height="12" font="4">H. (2006) Union types</text>
<text top="478" left="98" width="213" height="12" font="4">for object-oriented programming.</text>
<text top="478" left="338" width="91" height="12" font="4">Proceedings of</text>
<text top="494" left="98" width="330" height="12" font="4">the Symposium on Applied Computing (SAC), Dijon,</text>
<text top="511" left="98" width="311" height="12" font="4">France, 23-27 April SAC ’06, pp. 1435–1441. ACM.</text>
<text top="530" left="70" width="78" height="12" font="4">[30] Lagorio,</text>
<text top="530" left="160" width="109" height="12" font="4">G. and Ancona,</text>
<text top="530" left="281" width="147" height="12" font="4">D. (2009) Coinductive</text>
<text top="546" left="98" width="289" height="12" font="4">type systems for object-oriented languages.</text>
<text top="546" left="416" width="13" height="12" font="4">In</text>
<text top="562" left="98" width="86" height="12" font="4">Drossopoulou,</text>
<text top="562" left="197" width="55" height="12" font="4">S. (ed.),</text>
<text top="562" left="264" width="165" height="12" font="4">Proceedings of the Euro-</text>
<text top="579" left="98" width="330" height="12" font="4">pean Conference on Object-Oriented Programming</text>
<text top="595" left="98" width="330" height="12" font="4">(ECOOP), Genova, Italy, 6-10 July, pp. 2–26. Springer-</text>
<text top="612" left="98" width="42" height="12" font="4">Verlag.</text>
<text top="631" left="70" width="359" height="12" font="4">[31] Igarashi, A., Pierce, B. C., and Wadler, P. (2001)</text>
<text top="647" left="98" width="330" height="12" font="4">Featherweight Java: a minimal core calculus for Java</text>
<text top="664" left="98" width="330" height="12" font="4">and GJ. Transactions on Programming Languages and</text>
<text top="680" left="98" width="133" height="12" font="4">Systems, 23, 396–450.</text>
<text top="699" left="70" width="359" height="12" font="4">[32] Furr, M., An, J.-h. D., Foster, J. S., and Hicks, M.</text>
<text top="716" left="98" width="330" height="12" font="4">(2009) Static type inference for Ruby. Proceedings of</text>
<text top="732" left="98" width="330" height="12" font="4">the ACM symposium on Applied Computing (SAC),</text>
<text top="748" left="98" width="321" height="12" font="4">Honolulu, Hawaii, 9-12 March, pp. 1859–1866. ACM.</text>
<text top="767" left="70" width="359" height="12" font="4">[33] Abadi, M. and Cardelli, L. (1996) A Theory of Objects.</text>
<text top="784" left="98" width="180" height="12" font="4">Springer, Secaucus, NJ, USA.</text>
<text top="803" left="70" width="359" height="12" font="4">[34] Damm, F. M. (1994) Subtyping with union types,</text>
<text top="819" left="98" width="244" height="12" font="4">intersection types and recursive types.</text>
<text top="819" left="360" width="69" height="12" font="4">Proceedings</text>
<text top="836" left="98" width="330" height="12" font="4">of the International Conference on Theoretical Aspects</text>
<text top="852" left="98" width="330" height="12" font="4">of Computer Software (TACS), Sendai, Japan, 19-22</text>
<text top="869" left="98" width="218" height="12" font="4">April, pp. 687–706. Springer-Verlag.</text>
<text top="888" left="70" width="359" height="12" font="4">[35] Ortin, F. and Garcia, M. (2011) Union and intersection</text>
<text top="904" left="98" width="330" height="12" font="4">types to support both dynamic and static typing.</text>
<text top="921" left="98" width="279" height="12" font="4">Information Processing Letters, 111, 278–286.</text>
<text top="940" left="70" width="359" height="12" font="4">[36] Ortin, F. and Garcia, M. (2010) Supporting dynamic</text>
<text top="956" left="98" width="330" height="12" font="4">and static typing by means of union and intersection</text>
<text top="972" left="98" width="36" height="12" font="4">types.</text>
<text top="972" left="168" width="69" height="12" font="4">Proceedings</text>
<text top="972" left="249" width="11" height="12" font="4">of</text>
<text top="972" left="273" width="18" height="12" font="4">the</text>
<text top="972" left="304" width="33" height="12" font="4">IEEE</text>
<text top="972" left="350" width="79" height="12" font="4">International</text>
<text top="989" left="98" width="330" height="12" font="4">Conference on Progress in Informatics and Computing</text>
<text top="1005" left="98" width="330" height="12" font="4">(PIC), Shanghai, China, 10-12 December, pp. 993–999.</text>
<text top="1022" left="98" width="37" height="12" font="4">IEEE.</text>
<text top="1041" left="70" width="45" height="12" font="4">[37] B¨</text>
<text top="1041" left="108" width="304" height="12" font="4">orger, E., Fruja, N. G., Gervasi, V., and St¨</text>
<text top="1041" left="405" width="23" height="12" font="4">ark,</text>
<text top="1057" left="98" width="330" height="12" font="4">R. F. (2005) A High-Level Modular Deﬁnition of the</text>
<text top="1074" left="98" width="330" height="12" font="4">Semantics of C#. Theoretical Computer Science, 336,</text>
<text top="1090" left="98" width="52" height="12" font="4">235–284.</text>
<text top="1109" left="70" width="359" height="12" font="4">[38] Ortin, F., Redondo, J. M., and Perez-Schoﬁeld, J.</text>
<text top="1125" left="98" width="330" height="12" font="4">B. G. (2009) Eﬃcient virtual machine support of</text>
<text top="1142" left="98" width="182" height="12" font="4">runtime structural reﬂection.</text>
<text top="1142" left="297" width="131" height="12" font="4">Science of Computer</text>
<text top="1158" left="98" width="165" height="12" font="4">Programming, 70, 836–860.</text>
<text top="136" left="464" width="359" height="12" font="4">[39] Redondo, J. M. and Ortin, F. (2008) Optimizing re-</text>
<text top="153" left="493" width="330" height="12" font="4">ﬂective primitives of dynamic languages. International</text>
<text top="169" left="493" width="330" height="12" font="4">Journal of Software Engineering and Knowledge Engi-</text>
<text top="185" left="493" width="129" height="12" font="4">neering, 18, 759–783.</text>
<text top="203" left="464" width="191" height="12" font="4">[40] Chiles, B. and Turner, A.</text>
<text top="203" left="668" width="155" height="12" font="4">Dynamic Language Run-</text>
<text top="220" left="493" width="330" height="12" font="4">time. http://dlr.codeplex.com/Project/Download/</text>
<text top="237" left="493" width="244" height="11" font="4">FileDownload.aspx?DownloadId=97300.</text>
<text top="254" left="464" width="359" height="12" font="4">[41] Vick, P. (2007) The Microsoft Visual Basic Language</text>
<text top="270" left="493" width="330" height="12" font="4">Speciﬁcation. Microsoft Corporation, Redmond, Wash-</text>
<text top="287" left="493" width="42" height="12" font="4">ington.</text>
<text top="305" left="464" width="359" height="12" font="4">[42] Cartwright, R. and Fagan, M. (1991) Soft Typing. Pro-</text>
<text top="321" left="493" width="330" height="12" font="4">ceedings of the Conference on Programming Language</text>
<text top="338" left="493" width="330" height="12" font="4">Design and Implementation (PLDI), Toronto, Canada,</text>
<text top="354" left="493" width="191" height="12" font="4">26-28 June, pp. 278–292. ACM.</text>
<text top="372" left="464" width="272" height="12" font="4">[43] Thatte, S. (1990) Quasi-static typing.</text>
<text top="372" left="754" width="69" height="12" font="4">Proceedings</text>
<text top="388" left="493" width="330" height="12" font="4">of the 17th symposium on Principles of programming</text>
<text top="405" left="493" width="330" height="12" font="4">languages (POPL), San Francisco, California, United</text>
<text top="421" left="493" width="218" height="12" font="4">States, January, pp. 367–381. ACM.</text>
<text top="439" left="464" width="359" height="12" font="4">[44] Flanagan, C., Freund, S., and Tomb, A. (2006) Hybrid</text>
<text top="455" left="493" width="36" height="12" font="4">types,</text>
<text top="455" left="542" width="63" height="12" font="4">invariants,</text>
<text top="455" left="617" width="206" height="12" font="4">and reﬁnements for imperative</text>
<text top="472" left="493" width="47" height="12" font="4">objects.</text>
<text top="472" left="556" width="267" height="12" font="4">Proceedings of the International Workshop</text>
<text top="488" left="493" width="330" height="12" font="4">on Foundations and Developments of Object-Oriented</text>
<text top="505" left="493" width="330" height="12" font="4">Languages (FOOL), San Antonio, Texas, 23 January.</text>
<text top="521" left="493" width="36" height="12" font="4">ACM.</text>
<text top="539" left="464" width="359" height="12" font="4">[45] Siek, J. G. and Taha, W. (2007) Gradual typing for</text>
<text top="555" left="493" width="330" height="12" font="4">objects. Proceedings of the 21st European Conference</text>
<text top="572" left="493" width="330" height="12" font="4">on Object-Oriented Programming (ECOOP), Berlin,</text>
<text top="588" left="493" width="330" height="12" font="4">Germany, 30 July - 3 August, pp. 2–27. Springer-Verlag.</text>
<text top="606" left="464" width="359" height="12" font="4">[46] Siek, J. G. and Vachharajani, M. (2008) Gradual typing</text>
<text top="623" left="493" width="201" height="12" font="4">with uniﬁcation-based inference.</text>
<text top="623" left="710" width="113" height="12" font="4">Proceedings of the</text>
<text top="639" left="493" width="330" height="12" font="4">Dynamic Languages Symposium, Paphos, Cyprus, 25</text>
<text top="655" left="493" width="151" height="12" font="4">July, pp. 7:1–7:12. ACM.</text>
<text top="673" left="464" width="269" height="12" font="4">[47] Bloom, B., Field, J., Nystrom, N.,</text>
<text top="670" left="747" width="7" height="12" font="4">¨</text>
<text top="673" left="745" width="78" height="12" font="4">Ostlund, J.,</text>
<text top="690" left="493" width="330" height="12" font="4">Richards, G., Strnisa, R., Vitek, J., and Wrigstad, T.</text>
<text top="706" left="493" width="330" height="12" font="4">(2009) Thorn—robust, concurrent, extensible scripting</text>
<text top="723" left="493" width="88" height="12" font="4">on the JVM.</text>
<text top="723" left="604" width="219" height="12" font="4">Proceedings of the Conference on</text>
<text top="739" left="493" width="330" height="12" font="4">Object-Oriented Programming Systems, Languages and</text>
<text top="755" left="493" width="223" height="12" font="4">Applications (OOPSLA), Orlando,</text>
<text top="755" left="730" width="47" height="12" font="4">Florida,</text>
<text top="755" left="791" width="32" height="12" font="4">25-29</text>
<text top="772" left="493" width="174" height="12" font="4">October, pp. 117–136. ACM.</text>
<text top="790" left="464" width="315" height="12" font="4">[48] Wrigstad, T., Nardelli, F. Z., Lebresne, S., ¨</text>
<text top="790" left="771" width="52" height="12" font="4">Ostlund,</text>
<text top="806" left="493" width="330" height="12" font="4">J., and Vitek, J. (2010) Integrating typed and untyped</text>
<text top="823" left="493" width="192" height="12" font="4">code in a scripting language.</text>
<text top="823" left="707" width="117" height="12" font="4">Proceedings of the</text>
<text top="839" left="493" width="330" height="12" font="4">37th annual symposium on Principles of Programming</text>
<text top="855" left="493" width="330" height="12" font="4">Languages (POPL), Madrid, Spain, 17-23 January</text>
<text top="872" left="493" width="186" height="12" font="4">POPL ’10, pp. 377–388. ACM.</text>
<text top="890" left="464" width="359" height="12" font="4">[49] Lagorio, G. and Zucca, E. (2007) Just: Safe unknown</text>
<text top="906" left="493" width="188" height="12" font="4">types in java-like languages.</text>
<text top="906" left="707" width="116" height="12" font="4">Journal of Object</text>
<text top="923" left="493" width="129" height="12" font="4">Technology, 6, 69–98.</text>
<text top="940" left="464" width="359" height="12" font="4">[50] Lagorio, G. and Zucca, E. (2006) Introducing safe</text>
<text top="957" left="493" width="330" height="12" font="4">unknown types in java-like languages. Proceedings of</text>
<text top="973" left="493" width="330" height="12" font="4">the Symposium on Applied Computing (SAC), Dijon,</text>
<text top="990" left="493" width="256" height="12" font="4">France, 23-27 April, pp. 1429–1434. ACM.</text>
<text top="1008" left="464" width="359" height="12" font="4">[51] Bierman, G., Meijer, E., and Torgersen, M. (2010)</text>
<text top="1024" left="493" width="330" height="12" font="4">Adding dynamic types to c#. Proceedings of the 24th</text>
<text top="1040" left="493" width="330" height="12" font="4">European Conference on Object-Oriented Programming,</text>
<text top="1057" left="493" width="330" height="12" font="4">Maribor, Slovenia, 21-25 June ECOOP’10, pp. 76–100.</text>
<text top="1073" left="493" width="98" height="12" font="4">Springer-Verlag.</text>
<text top="1091" left="464" width="359" height="12" font="4">[52] Bracha, G. (2004) Pluggable Type Systems. Proceed-</text>
<text top="1108" left="493" width="330" height="12" font="4">ings of the OOPSLA 2004 Workshop on Revival of Dy-</text>
<text top="1124" left="493" width="330" height="12" font="4">namic Languages, Vancouver, Canada, October. ACM.</text>
<text top="1142" left="464" width="90" height="12" font="4">[53] Anderson,</text>
<text top="1142" left="569" width="18" height="12" font="4">C.,</text>
<text top="1142" left="601" width="56" height="12" font="4">Giannini,</text>
<text top="1142" left="672" width="16" height="12" font="4">P.,</text>
<text top="1142" left="702" width="22" height="12" font="4">and</text>
<text top="1142" left="737" width="86" height="12" font="4">Drossopoulou,</text>
<text top="1158" left="493" width="330" height="12" font="4">S. (2005) Towards type inference for javascript.</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1262" width="892">
<text top="93" left="70" width="15" height="13" font="2">24</text>
<text top="95" left="414" width="64" height="13" font="2">F. Ortin</text>
<text top="136" left="98" width="330" height="12" font="4">Proceedings of the European Conference on Object-</text>
<text top="153" left="98" width="330" height="12" font="4">Oriented Programming (ECOOP), Glasgow, UK, 9-11</text>
<text top="169" left="98" width="172" height="12" font="4">June, pp. 428–452. Springer.</text>
<text top="187" left="70" width="359" height="12" font="4">[54] Hunt, A. and Thomas, D. (2000) Dylan programming:</text>
<text top="203" left="98" width="330" height="12" font="4">an object-oriented and dynamic language. Addison</text>
<text top="220" left="98" width="259" height="12" font="4">Wesley Longman, Reading, Massachusetts.</text>
<text top="1195" left="292" width="183" height="13" font="2">The Computer Journal,</text>
<text top="1192" left="490" width="40" height="13" font="2">Vol. ,</text>
<text top="1192" left="544" width="37" height="13" font="2">No. ,</text>
</page>
</pdf2xml>
