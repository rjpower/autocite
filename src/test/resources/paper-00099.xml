<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="989" width="644">
	<fontspec id="0" size="10" family="Times" color="#000000"/>
	<fontspec id="1" size="8" family="Times" color="#000000"/>
	<fontspec id="2" size="19" family="Times" color="#000000"/>
	<fontspec id="3" size="12" family="Times" color="#000000"/>
	<fontspec id="4" size="11" family="Times" color="#000000"/>
	<fontspec id="5" size="11" family="Times" color="#000000"/>
	<fontspec id="6" size="16" family="Times" color="#000000"/>
<text top="925" left="63" width="356" height="11" font="0">Z. Qian et al. (Eds.): Recent Advances in CSIE, LNEE 128, pp. 223<a href="pdfxml.html#7">–229</a>. </text>
<text top="939" left="63" width="111" height="11" font="0">springerlink.com      </text>
<text top="940" left="174" width="15" height="10" font="1">       </text>
<text top="939" left="191" width="229" height="11" font="0">        © Springer-Verlag Berlin Heidelberg 2012 </text>
<text top="89" left="123" width="413" height="19" font="2"><b>Design and Implementation of Digital Image   </b></text>
<text top="115" left="195" width="260" height="19" font="2"><b>Watermark Based on FPGA </b></text>
<text top="176" left="175" width="299" height="14" font="3">Xingfu Wang, Qixian Qin, and Yongyuan Cheng </text>
<text top="214" left="246" width="157" height="12" font="4">USTC Hefei, 230027, China </text>
<text top="231" left="144" width="364" height="11" font="4">wangxfu@ustc.edu.cn, qixian@mail.ustc.edu.cn </text>
<text top="247" left="225" width="202" height="11" font="4">forever_cheng520@163.com </text>
<text top="305" left="106" width="439" height="12" font="5"><b>Abstract.</b> In this paper, using discrete cosine transform (DCT), a method of </text>
<text top="322" left="106" width="443" height="12" font="4">realizing the Digital Image Watermark, is introduced. By setting up a </text>
<text top="338" left="106" width="439" height="12" font="4">DCT-module and an IDCT-module which are based on the 8-by-8 matrix and </text>
<text top="355" left="106" width="437" height="12" font="4">hanging on the FSL, we have made the structural design of FPGA hardware. To </text>
<text top="371" left="106" width="439" height="12" font="4">make good use of the hardware resource of FPGA, the pipelined structure is </text>
<text top="387" left="106" width="437" height="12" font="4">adopted to put data into DCT and IDCT operation, which optimizes the complex </text>
<text top="404" left="106" width="438" height="12" font="4">logic and improves the processing speed and coordinates the operations such as </text>
<text top="421" left="106" width="438" height="12" font="4">calculation and storage. The whole design is divided into several modules, and </text>
<text top="437" left="106" width="446" height="12" font="4">each is described in VHDL. This experiment demonstrates that the </text>
<text top="454" left="106" width="380" height="12" font="4">high-performance FPGA is suitable for the Digital Image Watermark. </text>
<text top="485" left="106" width="247" height="12" font="5"><b>Keywords:</b> FPGA, Watermark, DCT, IDCT. </text>
<text top="537" left="63" width="233" height="16" font="6"><b>1   Background Information </b></text>
<text top="575" left="63" width="522" height="14" font="3">With the development of image processing technology and network technology, issues </text>
<text top="593" left="63" width="528" height="14" font="3">concerning the verification of image’s authenticity are increasingly prominent. </text>
<text top="611" left="63" width="526" height="14" font="3">Watermarking technology is used to solve the issue of ownership and verify the </text>
<text top="629" left="63" width="523" height="14" font="3">authenticity of the content of such products as digital images, audio, video and other </text>
<text top="647" left="63" width="523" height="14" font="3">multimedia products 123. Some of the existing advanced technology has been used to </text>
<text top="665" left="63" width="523" height="14" font="3">prevent illegal piracy, such as cryptography, but technology can not completely solve </text>
<text top="683" left="63" width="524" height="14" font="3">this problem alone, because the data encryption only provides protection during the </text>
<text top="701" left="63" width="525" height="14" font="3">transmission of data. Once the data is received and decrypted, the product will no </text>
<text top="719" left="63" width="522" height="14" font="3">longer be protected. To solve this problem, in recent years, people have proposed a new </text>
<text top="737" left="63" width="523" height="14" font="3">effective copyright protection of digital information products and a technique for data </text>
<text top="755" left="63" width="363" height="14" font="3">security maintenance ------- Digital watermark technology.   </text>
<text top="773" left="80" width="505" height="14" font="3">According to different types of watermark carrier, digital watermark can be divided </text>
<text top="791" left="63" width="523" height="14" font="3">into: image watermark, video watermark and audio watermark. In watermark research </text>
<text top="809" left="63" width="522" height="14" font="3">field, watermark has the most abundant achievements and is the most mature, the most </text>
<text top="827" left="63" width="528" height="14" font="3">widely used, and also the most intuitive branch. Therefore, the digital image </text>
<text top="845" left="63" width="522" height="14" font="3">watermarking algorithm is meaningful. Combining with FPGA hardware resources and </text>
<text top="863" left="63" width="522" height="14" font="3">giving full play to the digital processing power, the watermark process is realized, and </text>
<text top="881" left="63" width="263" height="14" font="3">this should be a new attempt of watermark. </text>
</page>
<page number="2" position="absolute" top="0" left="0" height="989" width="644">
	<fontspec id="7" size="12" family="Times" color="#000000"/>
<text top="43" left="63" width="24" height="12" font="4">224 </text>
<text top="43" left="114" width="177" height="12" font="4">X. Wang, Q. Qin, and Y. Cheng </text>
<text top="85" left="63" width="180" height="16" font="6"><b>2   Realizing Solution </b></text>
<text top="123" left="63" width="522" height="14" font="3">As to the basic algorithm, we propose a watermarking algorithm based on discrete cosine </text>
<text top="141" left="63" width="522" height="14" font="3">transform (DCT) domain. In the experiment we select a Bmp format of gray image as the </text>
<text top="159" left="63" width="523" height="14" font="3">carrier, a Bmp format of gray image as the watermark. First, carrier images were divided </text>
<text top="177" left="63" width="525" height="14" font="3">into small pieces of 8-by-8 matrix form, and each piece was transformed through 2 </text>
<text top="195" left="63" width="526" height="14" font="3">dimensional DCT. Then modify the intermediate frequency coefficients, embed the </text>
<text top="213" left="63" width="522" height="14" font="3">pixels of watermark image, and make inverter change of the two-dimensional DCT. After </text>
<text top="231" left="63" width="523" height="14" font="3">get the image of embedded watermark, compare it with the original image and measure </text>
<text top="249" left="63" width="524" height="14" font="3">the change of the image. Because most of the image’s energy is in dc component and </text>
<text top="267" left="63" width="523" height="14" font="3">low-frequency coefficients, if modify them the image’s visual effect will be affected. So </text>
<text top="285" left="63" width="526" height="14" font="3">we choose to embed the watermark in the intermediate frequency coefficient. High </text>
<text top="303" left="63" width="522" height="14" font="3">frequency coefficients is very small, eliminate them basically won't make any difference. </text>
<text top="321" left="63" width="522" height="14" font="3">The extraction of watermark is reversed. First, we divide the image containing watermark </text>
<text top="339" left="63" width="529" height="14" font="3">into pieces, make DCT coefficients transformation, then extract the embedded </text>
<text top="357" left="63" width="523" height="14" font="3">information from intermediate frequency, finally assemble a gray image, and check the </text>
<text top="375" left="63" width="137" height="14" font="3">embedding effect of it. </text>
<text top="411" left="63" width="352" height="14" font="7"><b>2.1      Watermarking Algorithm Implementation Steps </b></text>
<text top="443" left="63" width="525" height="14" font="3">The basic idea of algorithm is discrete cosine transform algorithm based on image. </text>
<text top="461" left="63" width="523" height="14" font="3">Assuming that the original watermark image is mark, carrier picture is Ca, image with </text>
<text top="479" left="63" width="525" height="14" font="3">embedded watermark is Ca_emb, extracted watermark is mark_dec. The algorithm </text>
<text top="497" left="63" width="132" height="14" font="3">process is as follows: </text>
<text top="513" left="95" width="126" height="14" font="3">Embedding process: </text>
<text top="539" left="95" width="493" height="14" font="3">(1)  First, generate a random permutation to the line and row of the matrix of </text>
<text top="555" left="122" width="465" height="14" font="3">watermark image pixels, and then get an image mark_c without any visual </text>
<text top="572" left="122" width="463" height="14" font="3">effect. Because the key is private, even if the watermark is illegally extracted, </text>
<text top="588" left="122" width="399" height="14" font="3">it can be ensured that any effective information won’t be attained. </text>
<text top="605" left="122" width="182" height="14" font="3">mark_c[i,j]=mark[k1(i),k2(j)] </text>
<text top="621" left="95" width="492" height="14" font="3">(2)  Make DCT transformation to the watermark image carrier based on 8-by-8 </text>
<text top="638" left="122" width="41" height="14" font="3">block. </text>
<text top="654" left="122" width="100" height="14" font="3">Ca_dct=dct(Ca) </text>
<text top="671" left="95" width="497" height="14" font="3">(3)  Embed the information of pixel value in the intermediate frequency </text>
<text top="687" left="122" width="464" height="14" font="3">coefficients of each piece. Among it h should be appropriately selected based </text>
<text top="704" left="122" width="113" height="14" font="3">on the watermark. </text>
<text top="720" left="122" width="206" height="14" font="3">Ca_dct_block[4,4]=h*mark_c[i,j] </text>
<text top="737" left="95" width="413" height="14" font="3">(4)  Make DCT transformation, and get the image with watermark.   </text>
<text top="753" left="122" width="50" height="14" font="3">Ca_emb</text>
<text top="750" left="172" width="94" height="19" font="3">＝idct(Ca_dct) </text>
<text top="779" left="95" width="188" height="14" font="3">Watermark extraction process: </text>
<text top="804" left="95" width="371" height="14" font="3">(1)  Make DCT transformation to the image with watermark. </text>
<text top="821" left="122" width="122" height="14" font="3">Ca_d=dct(Ca_emb) </text>
<text top="837" left="95" width="499" height="14" font="3">(2)  Extract the watermark information from the intermediate frequency </text>
<text top="854" left="122" width="465" height="14" font="3">coefficients in each block, assemble them and get a preliminary watermark </text>
<text top="870" left="122" width="121" height="14" font="3">image mark_c_dec. </text>
<text top="887" left="122" width="96" height="14" font="3">mark_c_dec[i,j]</text>
<text top="883" left="217" width="132" height="19" font="3">＝Ca_d_block[4,4]/h </text>
</page>
<page number="3" position="absolute" top="0" left="0" height="989" width="644">
<text top="43" left="63" width="3" height="12" font="4"> </text>
<text top="43" left="133" width="401" height="12" font="4">Design and Implementation of Digital Image Watermark Based on FPGA </text>
<text top="43" left="562" width="24" height="12" font="4">225 </text>
<text top="86" left="95" width="491" height="14" font="3">(3)  Adjust the preliminary watermark image with the private key: key1 and key2 </text>
<text top="102" left="122" width="187" height="14" font="3">and restore the original image. </text>
<text top="119" left="122" width="246" height="14" font="3">mark_dct[i,j]=mark_c_dec[k1’(i),k2’(j)] </text>
<text top="152" left="63" width="341" height="14" font="7"><b>2.2      Discrete Cosine Transform/Inverse Transform </b></text>
<text top="182" left="63" width="523" height="14" font="3">Discrete Cosine Transform/Inverse Transform is a kind of transformation that similar </text>
<text top="200" left="63" width="528" height="14" font="3">to the Discrete Fourier Transform but only use real numbers. Discrete Cosine </text>
<text top="218" left="63" width="522" height="14" font="3">Transform is equivalent to the Discrete Fourier Transform whose length is almost twice </text>
<text top="236" left="63" width="526" height="14" font="3">of it. The Discrete Fourier Transform is a real even function. The two kinds of </text>
<text top="254" left="63" width="526" height="14" font="3">transformation are needed in the watermarking technique based on DCT/IDCT45. </text>
<text top="272" left="63" width="524" height="14" font="3">Because the computation of the two kinds of transformation is highly complex, the </text>
<text top="290" left="63" width="522" height="14" font="3">application of hardware to deal with DCT/IDCT can greatly reduce the processing time. </text>
<text top="308" left="63" width="525" height="14" font="3">We can decompose one two-dimensional transformation into two one-dimensional </text>
<text top="326" left="63" width="522" height="14" font="3">transformations because of the 2-d DCT/IDCT‘s orthogonal decomposability. For DCT </text>
<text top="344" left="63" width="523" height="14" font="3">transformation, transform the N-by-N matrix into many a one-d matrix in the direction </text>
<text top="362" left="63" width="522" height="14" font="3">of columns or rows, then compute them in a second round of DCT computation, finally </text>
<text top="380" left="63" width="524" height="14" font="3">get 2 d DCT matrix. IDCT algorithm structure is similar to DCT, just with inverse </text>
<text top="398" left="63" width="525" height="14" font="3">calculation order, output into input67. A widely adopted DCT transformation is to </text>
<text top="416" left="63" width="527" height="14" font="3">divide the image into small matrix structure of 8*8, and then make the DCT </text>
<text top="434" left="63" width="527" height="14" font="3">transformation to this little matrix. For each one d transformation of 8x8 DCT </text>
<text top="452" left="63" width="524" height="14" font="3">transformation,  put in a list of data in a row, make inside accumulation operations </text>
<text top="470" left="63" width="522" height="14" font="3">with the eight corresponding coefficient vector, and then get 8 values, so we complete a </text>
<text top="488" left="63" width="413" height="14" font="3">round of DCT transformation after such operation of 8 rows of data. </text>
<text top="508" left="80" width="442" height="14" font="3">For an 8 x8 matrix, process the data by row, if a list of data is as follows: </text>
<text top="535" left="95" width="310" height="14" font="3">f[i]=[f(i,0),f(i,1), (i,2),f(i,3),f(i,4),f(i,5),f(i,6),f(i,7)] </text>
<text top="552" left="95" width="210" height="14" font="3">The vector after transformation is: </text>
<text top="565" left="95" width="363" height="14" font="3">D[i]=[D(i,0),D(i,1),D(i,2),D(i,3),D(i,4),D(i,5),D(i,6),D(i,7)] </text>
<text top="592" left="63" width="522" height="14" font="3">Therefore, in the process of inner product operation of vector, we can firstly carry out </text>
<text top="610" left="63" width="526" height="14" font="3">the adding and subtracting operation to the input vector, then carry out inside </text>
<text top="628" left="63" width="522" height="14" font="3">accumulate operations with the corresponding coefficient. This can reduce half of the </text>
<text top="646" left="63" width="522" height="14" font="3">vessels, and save system resources. But the price is that it increases a round of adding </text>
<text top="664" left="63" width="531" height="14" font="3">processing time. Considering the limited resources of FPGA, we decide to adopt  </text>
<text top="682" left="63" width="532" height="14" font="3">this method to optimize design. After a round of DCT transformation, we need  </text>
<text top="700" left="63" width="527" height="14" font="3">to transpose the middle matrix, and then carry out the second round of DCT </text>
<text top="718" left="63" width="98" height="14" font="3">transformation. </text>
<text top="756" left="63" width="339" height="16" font="6"><b>3      The FPGA Hardware Design Structure </b></text>
<text top="795" left="63" width="525" height="14" font="3">For a 256 pixels complement range of -128—+127, we need eight binary data to </text>
<text top="813" left="63" width="522" height="14" font="3">represent. After DCT transformation, the dynamic range of coefficients is changed into </text>
<text top="831" left="63" width="523" height="14" font="3">-1024—+1016, we need 12 binary numbers to represent the output. In the process of </text>
<text top="849" left="63" width="530" height="14" font="3">DCT transformation, we need to deal with the cosine function. It’s very difficult to  </text>
<text top="867" left="63" width="4" height="14" font="3"> </text>
</page>
<page number="4" position="absolute" top="0" left="0" height="989" width="644">
<text top="43" left="63" width="24" height="12" font="4">226 </text>
<text top="43" left="114" width="177" height="12" font="4">X. Wang, Q. Qin, and Y. Cheng </text>
<text top="87" left="63" width="522" height="14" font="3">calculate the multiplication of decimals and integer. So considering the precision of the </text>
<text top="105" left="63" width="523" height="14" font="3">result, first, multiply the 8 fixed coefficients by an integer of 211, convert the decimal </text>
<text top="123" left="63" width="523" height="14" font="3">into an integer, then multiply the integer by the multiplier. The intermediate result is </text>
<text top="141" left="63" width="524" height="14" font="3">obtained. After that divide the intermediate result by 211, equivalently move 11 bit </text>
<text top="159" left="63" width="487" height="14" font="3">right. In the process, if the 11th bit is 1, we get a carrier, otherwise we discard it. </text>
<text top="177" left="80" width="283" height="14" font="3">Analyses of one dimensional DCT transform:   </text>
<text top="195" left="80" width="506" height="14" font="3">According to the order of line, one d DCT read a pixel value change in each clock, </text>
<text top="213" left="63" width="523" height="14" font="3">i.e.8 bit binary data. First, send the data to an 8 x8 shift register, and set a counter of </text>
<text top="231" left="63" width="524" height="14" font="3">modulo 8. When each counter comes to 8, the shift register will be full, and then it </text>
<text top="249" left="63" width="523" height="14" font="3">needs to load the data of all line right away. We send data to the next group of register </text>
<text top="267" left="63" width="524" height="14" font="3">when next clock rises up, and then calculate absolute value of the data and save the </text>
<text top="285" left="63" width="524" height="14" font="3">symbols. Next, the vector needs to do inner product operations with the coefficient </text>
<text top="303" left="63" width="522" height="14" font="3">produced by coefficient generator. In the process of inner product operation, according </text>
<text top="321" left="63" width="524" height="14" font="3">to the above mentioned getting common factor method, first, do a round of addition, </text>
<text top="339" left="63" width="522" height="14" font="3">then, do a round of multiplication computing, finally, do complement computing to the </text>
<text top="357" left="63" width="388" height="14" font="3">result, obtain the intermediate result, and save the data in RAM. </text>
<text top="375" left="80" width="510" height="14" font="3">The calculation results of the first round would be continuously sent to the </text>
<text top="393" left="63" width="522" height="14" font="3">intermediate matrix storage unit. When the storage read enough data, the second round </text>
<text top="411" left="63" width="522" height="14" font="3">of DCT transformation begins to work. And data will be input according to the order of </text>
<text top="429" left="63" width="524" height="14" font="3">columns of the middle matrix into the second round of DCT parts to do operations. </text>
<text top="447" left="63" width="524" height="14" font="3">RAM can be regarded as the 8 x8 storage array. When writing in data, the address </text>
<text top="465" left="63" width="160" height="14" font="3">should be in the order of 0</text>
<text top="461" left="223" width="363" height="19" font="3">，1，2，3，4…,63. When reading out, the address should </text>
<text top="483" left="63" width="115" height="14" font="3">be in the order of 0</text>
<text top="479" left="178" width="401" height="19" font="3">，8，16，……，56; 1, 9, 17,……,57，……，7, 15,23,……,63. </text>
<text top="501" left="80" width="506" height="14" font="3">IDCT hardware structure is similar to DCT hardware structure. But the coefficient </text>
<text top="519" left="63" width="524" height="14" font="3">matrix needs to transpose, thus it can’t carry out the operations of getting common </text>
<text top="537" left="63" width="367" height="14" font="3">factor. Therefore IDCT needs twice time-multiplier as DCT. </text>
<text top="570" left="63" width="282" height="14" font="7"><b>3.1      Hardware and Software Architecture </b></text>
<text top="600" left="63" width="523" height="14" font="3">Depending on EDK developing environment, applying microblaze soft core, and also </text>
<text top="618" left="63" width="527" height="14" font="3">adding some IP core defined by user, the system has successfully made digital </text>
<text top="636" left="63" width="523" height="14" font="3">watermark to BMP format image. Watermarking algorithm is proposed to be done in </text>
<text top="654" left="63" width="523" height="14" font="3">frequency domain, so it needs to do transformation domain processing. We select 2 d </text>
<text top="672" left="63" width="527" height="14" font="3">DCT which has a widely application in image processing domain. Due to the </text>
<text top="690" left="63" width="522" height="14" font="3">complicated information processing of such complex signal like 2 d DCT, to process it </text>
<text top="708" left="63" width="523" height="14" font="3">directly in microblaze with software consumes much time. We use the FSL interface </text>
<text top="726" left="63" width="523" height="14" font="3">provided by microblaze with hardware to realize DCT and IDCT. Tests show that the </text>
<text top="744" left="63" width="523" height="14" font="3">implementation of hardware is much faster than that of software. The test data below </text>
<text top="762" left="63" width="525" height="14" font="3">shows that a 256 * 256 grayscale image needs at least 40 hours if realized by the </text>
<text top="780" left="63" width="528" height="14" font="3">implementation of software, and needs only a few minutes if realized by the </text>
<text top="798" left="63" width="254" height="14" font="3">implementation of hardware acceleration. </text>
<text top="816" left="80" width="508" height="14" font="3">Every step lights a lamp, and when all the five lamps light, board would have </text>
<text top="834" left="63" width="522" height="14" font="3">completed his task. At the same time, in the process, super terminal board and the LCD </text>
<text top="852" left="63" width="525" height="14" font="3">will always show the working state of the board. The role of the dip is to let the </text>
<text top="870" left="63" width="522" height="14" font="3">communication of two board keep in pace with each other. In the process of operation, </text>
<text top="888" left="63" width="522" height="14" font="3">the board1 will give a reminder to connect the com to DTE of board2. Then promote the </text>
</page>
<page number="5" position="absolute" top="0" left="0" height="989" width="644">
<text top="43" left="63" width="3" height="12" font="4"> </text>
<text top="43" left="133" width="401" height="12" font="4">Design and Implementation of Digital Image Watermark Based on FPGA </text>
<text top="43" left="562" width="24" height="12" font="4">227 </text>
<text top="87" left="63" width="523" height="14" font="3">dip1 of the board1, the board1 would begin to transmit data to board2.We mainly use </text>
<text top="105" left="63" width="527" height="14" font="3">board2 to do IDCT transformation, and combine the data and files after twice </text>
<text top="123" left="63" width="433" height="14" font="3">transformation, finally, send the image embedded watermark to the PC. </text>
<text top="159" left="63" width="163" height="14" font="7"><b>3.2   Allocation Scheme </b></text>
<text top="191" left="63" width="522" height="14" font="3">Board1 uses rs232_dce as standard input and output and Lmb_bram as the initial guide </text>
<text top="209" left="63" width="523" height="14" font="3">memory. The user program is put in spi_flash. Next, we combine the bit stream of the </text>
<text top="227" left="63" width="523" height="14" font="3">boot program and hardware data and gain the initial configuration files, then the files </text>
<text top="245" left="63" width="522" height="14" font="3">are downloaded to MCS spi_flash. The program starts in spi way, and the boot program </text>
<text top="263" left="63" width="524" height="14" font="3">copies the user program from the pre-determined position of spi_flash to ddr_sdram, </text>
<text top="281" left="63" width="528" height="14" font="3">then jumps to user program area of ddr_sdram, and begins to work. Board2 </text>
<text top="299" left="63" width="291" height="14" font="3">configuration is basically the same with board1. </text>
<text top="335" left="63" width="283" height="14" font="7"><b>3.3   Peripheral Communication Solutions </b></text>
<text top="366" left="63" width="524" height="14" font="3">Because a piece of board cannot place the DCT and IDCT at the same time, the two </text>
<text top="384" left="63" width="528" height="14" font="3">boards must provide the communication interface. Board1 and board2 provide </text>
<text top="402" left="63" width="525" height="14" font="3">rs232_dce as standard input and output, additionally board2 provides rs232_dte as </text>
<text top="420" left="63" width="522" height="14" font="3">communication interface to communicate with rs232_dce on the Board1. The tip of the </text>
<text top="438" left="63" width="523" height="14" font="3">standard input and output let them keep in pace with each other, which realized by the </text>
<text top="456" left="63" width="525" height="14" font="3">dip_button’s configuration. The ready-made serial smart offers the communication </text>
<text top="474" left="63" width="208" height="14" font="3">interface to the Board and the PC. </text>
<text top="517" left="63" width="206" height="16" font="6"><b>4   System Function Test </b></text>
<text top="555" left="63" width="476" height="14" font="3">We select the original image and image with watermark, as shown in figure 1:  </text>
<text top="735" left="489" width="3" height="12" font="4"> </text>
<text top="769" left="305" width="39" height="12" font="5"><b>Fig. 1. </b></text>
<text top="812" left="80" width="510" height="14" font="3">The selected watermark is a series of random sequence. Figure 2 shows the </text>
<text top="830" left="63" width="430" height="14" font="3">coordinated graphs of the random watermark and extracted watermark. </text>
</page>
<page number="6" position="absolute" top="0" left="0" height="989" width="644">
	<fontspec id="8" size="16" family="Times" color="#000000"/>
<text top="43" left="63" width="24" height="12" font="4">228 </text>
<text top="43" left="114" width="177" height="12" font="4">X. Wang, Q. Qin, and Y. Cheng </text>
<text top="344" left="582" width="3" height="12" font="4"> </text>
<text top="386" left="305" width="39" height="12" font="5"><b>Fig. 2. </b></text>
<text top="429" left="80" width="507" height="14" font="3">Through visual observation, we find that the damage rate of the original image is </text>
<text top="447" left="63" width="356" height="14" font="3">very small, and basically it does not affect its visual effect. </text>
<text top="490" left="63" width="119" height="16" font="8">5   <b>Summary </b></text>
<text top="528" left="63" width="522" height="14" font="3">This paper introduces a kind of digital image watermark embedding system in real time </text>
<text top="546" left="63" width="522" height="14" font="3">based on FPGA. Combined with the logic circuit’s operation characteristics, we design </text>
<text top="564" left="63" width="524" height="14" font="3">and make full use of the DCT module and IDCT module in hardware. And we put </text>
<text top="582" left="63" width="523" height="14" font="3">forward a new embedding method which embeds the watermark after reconstructing a </text>
<text top="600" left="63" width="522" height="14" font="3">gray image. This not only ensures the watermark's imperceptibility, but also makes the </text>
<text top="618" left="63" width="522" height="14" font="3">watermark more sensitive to the falsification. This system’s main calculation amount is </text>
<text top="636" left="63" width="525" height="14" font="3">undertaken by the logic circuit, so the speed of operation was improved, and the </text>
<text top="654" left="63" width="523" height="14" font="3">watermarking embedding in real-time is ensured. Assembly line working way makes </text>
<text top="672" left="63" width="525" height="14" font="3">the whole process fast and smooth. The experimental results show that the ber of </text>
<text top="690" left="63" width="524" height="14" font="3">watermark is about 5%, and the watermarking information and the position of being </text>
<text top="708" left="63" width="211" height="14" font="3">tampered can be clearly discerned. </text>
<text top="751" left="63" width="101" height="16" font="8">6   <b>Thanks </b></text>
<text top="789" left="63" width="530" height="14" font="3">This paper supported by the national major technology special (NO. 2008 </text>
<text top="807" left="63" width="523" height="14" font="3">ZX10005-013) and the national natural science foundation of China (NO. 60773037, </text>
<text top="825" left="63" width="355" height="14" font="3">60970128), Anhui province teaching research plan (2010). </text>
</page>
<page number="7" position="absolute" top="0" left="0" height="989" width="644">
<text top="43" left="63" width="3" height="12" font="4"> </text>
<text top="43" left="133" width="401" height="12" font="4">Design and Implementation of Digital Image Watermark Based on FPGA </text>
<text top="43" left="562" width="24" height="12" font="4">229 </text>
<text top="89" left="63" width="88" height="16" font="6"><b>References </b></text>
<text top="128" left="64" width="525" height="12" font="4">1.  Voyatzis, G., Pitas, L.: The use of watermarks in the protection of digital multimedia </text>
<text top="145" left="82" width="257" height="12" font="4">products. Proc. IEEE 87(1), 1197–1207 (1999) </text>
<text top="161" left="64" width="523" height="12" font="4">2.  Xue, H., Wang, P., Liang, J.: Digital Image Watermark Scheme Based on Parity of Pixels. </text>
<text top="178" left="82" width="333" height="12" font="4">Computer Application and Research 23(12), 347–348 (2006) </text>
<text top="194" left="64" width="521" height="12" font="4">3.  Tai, S.-C., Wang, C.C., Yu, C.S.: Digital image watermarking based on VSS in BTC domain. </text>
<text top="211" left="82" width="206" height="12" font="4">Chinese Institute of Engineers (2009) </text>
<text top="227" left="64" width="522" height="12" font="4">4.  Wang, C.-C., Tai, S.-C., Yu, C.-H.: Repeating image watermarking technique by the visual </text>
<text top="244" left="82" width="486" height="12" font="4">cryptography. Institute of Electronics, Information and Communication Engineers (2009) </text>
<text top="260" left="64" width="502" height="12" font="4">5.  Wang, H., Liao, C.: JPEG Images Authentication with Discrimination of Tampers on the </text>
<text top="277" left="82" width="376" height="12" font="4">Image Content or Watermark. Medknow Publications 27(03) (2010), </text>
<text top="293" left="82" width="168" height="12" font="4">doi:10.4103/0256-4602.62787 </text>
<text top="310" left="64" width="525" height="12" font="4">6.  Chang, L.: Digital Watermarking Technique Based on Wavelet Transform and Spatial </text>
<text top="326" left="82" width="380" height="12" font="4">Domain Computer Application and Research 23(07), 258–260 (2006) </text>
<text top="343" left="64" width="522" height="12" font="4">7.  Wang, H.-J., Su, P.-C., Jay Kuo, C.-C.: Wavelet-based Digital Image Watermarking. Optical </text>
<text top="359" left="82" width="324" height="12" font="4">Society of America 3(12) (1998) doi:10.1364/OE.3.000491 </text>
</page>
</pdf2xml>
