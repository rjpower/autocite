<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="0" size="10" family="Times" color="#000000"/>
	<fontspec id="1" size="10" family="Times" color="#ff0000"/>
	<fontspec id="2" size="20" family="Times" color="#000000"/>
	<fontspec id="3" size="16" family="Times" color="#000000"/>
	<fontspec id="4" size="15" family="Times" color="#000000"/>
	<fontspec id="5" size="9" family="Times" color="#000000"/>
	<fontspec id="6" size="6" family="Times" color="#000000"/>
	<fontspec id="7" size="12" family="Times" color="#000000"/>
	<fontspec id="8" size="11" family="Times" color="#000000"/>
	<fontspec id="9" size="13" family="Times" color="#000000"/>
	<fontspec id="10" size="13" family="Times" color="#ff0000"/>
<text top="59" left="140" width="252" height="15" font="0">SOFTWARE—PRACTICE AND EXPERIENCE</text>
<text top="75" left="140" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="72" left="246" width="48" height="15" font="0">2011; 00<a href="pdfxml.html#1">:</a></text>
<text top="72" left="294" width="6" height="15" font="1"><a href="pdfxml.html#1">1</a></text>
<text top="72" left="301" width="6" height="15" font="0"><a href="pdfxml.html#1">–</a></text>
<text top="72" left="307" width="13" height="15" font="1"><a href="pdfxml.html#31">33</a></text>
<text top="86" left="140" width="454" height="15" font="0">Published online in Wiley InterScience (www.interscience.wiley.com). DOI: 10.1002/spe</text>
<text top="159" left="154" width="9" height="28" font="2">J</text>
<text top="164" left="163" width="25" height="22" font="3">AV</text>
<text top="159" left="186" width="17" height="28" font="2">A</text>
<text top="164" left="204" width="78" height="22" font="3">DAPTOR</text>
<text top="159" left="288" width="450" height="28" font="2">– Flexible Runtime Updates of Java Applications</text>
<text top="223" left="262" width="90" height="21" font="4">Mario Pukall</text>
<text top="224" left="352" width="13" height="11" font="5">1∗</text>
<text top="223" left="367" width="129" height="21" font="4">, Christian K¨astner</text>
<text top="224" left="496" width="6" height="11" font="5">2</text>
<text top="223" left="503" width="114" height="21" font="4">, Walter Cazzola</text>
<text top="224" left="617" width="6" height="11" font="5">3</text>
<text top="223" left="624" width="4" height="21" font="4">,</text>
<text top="241" left="192" width="104" height="21" font="4">Sebastian G¨otz</text>
<text top="242" left="295" width="6" height="11" font="5">4</text>
<text top="241" left="302" width="152" height="21" font="4">, Alexander Grebhahn</text>
<text top="242" left="454" width="6" height="11" font="5">5</text>
<text top="241" left="461" width="122" height="21" font="4">, Reimar Schr¨oter</text>
<text top="242" left="583" width="6" height="11" font="5">5</text>
<text top="241" left="590" width="101" height="21" font="4">, Gunter Saake</text>
<text top="242" left="692" width="6" height="11" font="5">1</text>
<text top="276" left="251" width="5" height="8" font="6">1</text>
<text top="278" left="257" width="130" height="11" font="0">University of Magdeburg,</text>
<text top="278" left="391" width="6" height="11" font="5">{</text>
<text top="278" left="397" width="100" height="11" font="0">mario.pukall, saake</text>
<text top="278" left="498" width="6" height="11" font="5">}</text>
<text top="278" left="504" width="132" height="11" font="0">@iti.cs.uni-magdeburg.de</text>
<text top="290" left="269" width="5" height="8" font="6">2</text>
<text top="292" left="275" width="344" height="11" font="0">Philipps-University Marburg, kaestner@informatik.uni-marburg.de</text>
<text top="303" left="327" width="5" height="8" font="6">3</text>
<text top="305" left="334" width="226" height="11" font="0">University of Milano, cazzola@dico.unimi.it</text>
<text top="317" left="302" width="5" height="8" font="6">4</text>
<text top="319" left="308" width="277" height="11" font="0">University of Dresden, sebastian.goetz@tu-dresden.de</text>
<text top="330" left="242" width="5" height="8" font="6">5</text>
<text top="332" left="249" width="130" height="11" font="0">University of Magdeburg,</text>
<text top="331" left="382" width="6" height="11" font="5">{</text>
<text top="332" left="389" width="190" height="11" font="0">alexander.grebhahn, reimar.schroeter</text>
<text top="331" left="579" width="6" height="11" font="5">}</text>
<text top="332" left="585" width="63" height="11" font="0">@st.ovgu.de</text>
<text top="402" left="409" width="72" height="17" font="7">SUMMARY</text>
<text top="429" left="140" width="610" height="17" font="7">Software is changed frequently during its life cycle. New requirements come and bugs must be ﬁxed.</text>
<text top="444" left="140" width="610" height="17" font="7">To update an application it usually must be stopped, patched, and restarted. This causes time periods of</text>
<text top="459" left="140" width="610" height="17" font="7">unavailability which is always a problem for highly available applications. Even for the development of</text>
<text top="474" left="140" width="610" height="17" font="7">complex applications restarts to test new program parts can be time consuming and annoying. Thus, we</text>
<text top="489" left="140" width="610" height="17" font="7">aim at dynamic software updates to update programs at runtime. There is a large body of research on</text>
<text top="504" left="140" width="610" height="17" font="7">dynamic software updates, but so far, existing approaches have shortcomings either in terms of ﬂexibility or</text>
<text top="519" left="140" width="610" height="17" font="7">performance. In addition, some of them depend on speciﬁc runtime environments and dictate the program’s</text>
<text top="534" left="140" width="154" height="17" font="7">architecture. We present J</text>
<text top="536" left="294" width="16" height="14" font="5">AV</text>
<text top="534" left="308" width="10" height="17" font="7">A</text>
<text top="536" left="319" width="48" height="14" font="5">DAPTOR</text>
<text top="534" left="368" width="382" height="17" font="7">, the ﬁrst runtime update approach based on Java that (a) offers</text>
<text top="549" left="140" width="610" height="17" font="7">ﬂexible dynamic software updates, (b) is platform independent, (c) introduces only minimal performance</text>
<text top="564" left="140" width="346" height="17" font="7">overhead, and (d) does not dictate the program architecture. J</text>
<text top="566" left="486" width="16" height="14" font="5">AV</text>
<text top="564" left="501" width="10" height="17" font="7">A</text>
<text top="566" left="512" width="48" height="14" font="5">DAPTOR</text>
<text top="564" left="563" width="187" height="17" font="7">combines schema changing class</text>
<text top="579" left="140" width="610" height="17" font="7">replacements by class renaming and caller updates with Java HotSwap using containers and proxies. It runs</text>
<text top="594" left="140" width="610" height="17" font="7">on top of all major standard Java virtual machines. We evaluate our approach’s applicability and performance</text>
<text top="608" left="140" width="606" height="17" font="7">in non-trivial case studies and compare it to existing dynamic software update approaches. Copyright c</text>
<text top="623" left="140" width="172" height="17" font="7">2011 John Wiley &amp; Sons, Ltd.</text>
<text top="660" left="140" width="63" height="15" font="0">Received . . .</text>
<text top="693" left="140" width="527" height="17" font="7">KEY WORDS: dynamic software updates; program evolution; state migration: tool support</text>
<text top="763" left="378" width="135" height="19" font="9">1. INTRODUCTION</text>
<text top="799" left="140" width="610" height="19" font="9">Once a program goes live and works in productive mode its development is not completed. It has</text>
<text top="817" left="140" width="610" height="19" font="9">to be changed because of bugs and new requirements. In order to maintain a program, it usually</text>
<text top="835" left="140" width="610" height="19" font="9">must be stopped, patched, and restarted. This downtime is always a problem for applications that</text>
<text top="853" left="140" width="610" height="19" font="9">must be highly available. But, also for the development of complex applications restarts to test the</text>
<text top="871" left="140" width="610" height="19" font="9">new program parts can be time consuming and annoying. This is also true for end-user desktop</text>
<text top="889" left="140" width="443" height="19" font="9">applications that have to be restarted because patches must be applied <a href="pdfxml.html#32">[</a></text>
<text top="889" left="584" width="8" height="19" font="10"><a href="pdfxml.html#32">4</a></text>
<text top="889" left="591" width="159" height="19" font="9"><a href="pdfxml.html#32">]; </a>end users prefer update</text>
<text top="907" left="140" width="610" height="19" font="9">approaches that do not interrupt their tasks. For that reasons, we aim at dynamic software updates</text>
<text top="924" left="140" width="249" height="19" font="9">(DSU), i.e., program updates at runtime.</text>
<text top="942" left="155" width="595" height="19" font="9">Even though dynamic languages like Smalltalk, Python, or Ruby natively support runtime</text>
<text top="960" left="140" width="610" height="19" font="9">program changes, we address Java for several reasons. First, Java is a programming language</text>
<text top="978" left="140" width="610" height="19" font="9">commonly used to implement highly available applications. Examples are Apache Tomcat, Java</text>
<text top="1000" left="140" width="21" height="13" font="9">DB</text>
<text top="996" left="161" width="589" height="19" font="9">, or JBoss Application Server. Second, in most ﬁelds of application Java programs execute faster</text>
<text top="1014" left="140" width="280" height="19" font="9">than programs based on dynamic languages <a href="pdfxml.html#32">[</a></text>
<text top="1014" left="420" width="15" height="19" font="10"><a href="pdfxml.html#32">12</a></text>
<text top="1014" left="436" width="314" height="19" font="9"><a href="pdfxml.html#32">]. </a>Thus, developers often prefer Java over dynamic</text>
<text top="1032" left="140" width="610" height="19" font="9">languages in time-critical scenarios. Amongst others, one reason for the better performance is that</text>
<text top="1050" left="140" width="610" height="19" font="9">Java is a statically typed language. Unfortunately, compilation prevents Java and other statically</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1110" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1109" left="221" width="212" height="12" font="0">speauth.cls [Version: 2010/05/13 v3.00]</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="11" size="12" family="Times" color="#ff0000"/>
<text top="56" left="140" width="8" height="19" font="9">2</text>
<text top="107" left="193" width="132" height="11" font="0">Construct to be changed</text>
<text top="107" left="514" width="95" height="11" font="0">Related Elements</text>
<text top="239" left="161" width="0" height="11" font="0">Classes</text>
<text top="131" left="179" width="108" height="15" font="0">(1) Class Declaration</text>
<text top="131" left="385" width="353" height="15" font="0">Modiﬁers, Generic, Inner Classes, Superclass, Subclasses, Superinter-</text>
<text top="145" left="385" width="206" height="15" font="0">faces, Class Body, Member Declarations</text>
<text top="167" left="179" width="97" height="15" font="0">(2) Class Members</text>
<text top="167" left="385" width="82" height="15" font="0">Fields, Methods</text>
<text top="190" left="179" width="111" height="15" font="0">(3) Field Declarations</text>
<text top="190" left="385" width="211" height="15" font="0">Modiﬁers, Field Initialization, Field Type</text>
<text top="213" left="179" width="125" height="15" font="0">(4) Method Declarations</text>
<text top="213" left="385" width="353" height="15" font="0">Modiﬁers, Signature (Name, Parameters), Return Type, Throws,</text>
<text top="226" left="385" width="70" height="15" font="0">Method Body</text>
<text top="249" left="179" width="145" height="15" font="0">(5) Constructor Declarations</text>
<text top="249" left="385" width="346" height="15" font="0">Modiﬁers, Signature (Name, Parameter), Throws, Constructor Body</text>
<text top="272" left="179" width="53" height="15" font="0">(6) Blocks</text>
<text top="272" left="385" width="56" height="15" font="0">Statements</text>
<text top="294" left="179" width="53" height="15" font="0">(7) Enums</text>
<text top="294" left="385" width="160" height="15" font="0">Enum Declaration, Enum Body</text>
<text top="410" left="161" width="0" height="11" font="0">Interfaces</text>
<text top="318" left="179" width="125" height="15" font="0">(8) Interface Declaration</text>
<text top="318" left="385" width="353" height="15" font="0">Modiﬁers, Generic, Superinterface, Subinterface, Interface Body,</text>
<text top="331" left="385" width="110" height="15" font="0">Member Declarations</text>
<text top="354" left="179" width="114" height="15" font="0">(9) Interface Members</text>
<text top="354" left="385" width="144" height="15" font="0">Fields, Method Declarations</text>
<text top="377" left="179" width="175" height="15" font="0">(10) Field (Constant) Declarations</text>
<text top="377" left="385" width="155" height="15" font="0">Field Initialization, Field Type</text>
<text top="399" left="179" width="177" height="15" font="0">(11) Abstract Method Declarations</text>
<text top="399" left="385" width="267" height="15" font="0">Signature (Name, Parameters), Return Type, Throws</text>
<text top="422" left="179" width="60" height="15" font="0">(12) Blocks</text>
<text top="422" left="385" width="56" height="15" font="0">Statements</text>
<text top="445" left="179" width="86" height="15" font="0">(13) Annotations</text>
<text top="445" left="385" width="194" height="15" font="0">Annotation Type, Annotation Element</text>
<text top="478" left="325" width="215" height="17" font="7">Table I. Language constructs of Java <a href="pdfxml.html#32">[</a></text>
<text top="478" left="540" width="14" height="17" font="11"><a href="pdfxml.html#32">14</a></text>
<text top="478" left="554" width="8" height="17" font="7"><a href="pdfxml.html#32">].</a></text>
<text top="548" left="140" width="610" height="19" font="9">typed languages such as C or C++ from natively offering powerful instruments for runtime program</text>
<text top="566" left="140" width="51" height="19" font="9">updates.</text>
<text top="584" left="155" width="573" height="19" font="9">Literature suggests a wide range of DSU approaches for Java (see related work in Section</text>
<text top="584" left="733" width="8" height="19" font="10"><a href="pdfxml.html#19">6</a></text>
<text top="584" left="741" width="9" height="19" font="9"><a href="pdfxml.html#19">).</a></text>
<text top="602" left="140" width="610" height="19" font="9">The ﬂexibility of an approach can be determined by answering the following three questions: Are</text>
<text top="620" left="140" width="610" height="19" font="9">unanticipated changes allowed (i.e., can we apply requirements for which the running program was</text>
<text top="638" left="140" width="610" height="19" font="9">not prepared)? Can already loaded classes (including their schema) be changed, and is the program</text>
<text top="655" left="140" width="610" height="19" font="9">state kept beyond the update? Other quality criteria for a DSU approach are the caused performance</text>
<text top="673" left="140" width="610" height="19" font="9">overhead, the inﬂuence on the program architecture and the platform independency. We believe that</text>
<text top="691" left="140" width="610" height="19" font="9">it is impossible to prepare an application for all potential upcoming requirements. Furthermore, only</text>
<text top="709" left="140" width="610" height="19" font="9">offering modiﬁcations of not previously executed program parts while disregarding the executed</text>
<text top="727" left="140" width="610" height="19" font="9">parts (e.g., already loaded classes) restricts the application of program changes. In addition, state</text>
<text top="745" left="140" width="610" height="19" font="9">loss and major performance overhead are unacceptable in many scenarios as well. Next, we argue</text>
<text top="763" left="140" width="610" height="19" font="9">that DSU approaches should not dictate the program’s architecture, i.e., they should be capable of</text>
<text top="781" left="140" width="610" height="19" font="9">being integrated into the program’s natural architecture (different application domains might require</text>
<text top="799" left="140" width="610" height="19" font="9">different architectures). Last but not least, runtime update approaches should not force the customer</text>
<text top="817" left="140" width="610" height="19" font="9">to use a speciﬁc platform for program execution, e.g., to use a Linux based Java Virtual Machine</text>
<text top="835" left="140" width="610" height="19" font="9">even though the customer only runs Windows based machines. For all these reasons, we aim at</text>
<text top="853" left="140" width="610" height="19" font="9">(a) ﬂexible, (b) platform independent, and (c) performant runtime update approaches that (d) do</text>
<text top="871" left="140" width="610" height="19" font="9">not affect the program’s natural architecture. However, we do not (yet) aim at a solution that fully</text>
<text top="889" left="140" width="610" height="19" font="9">supports reliable (immediate) and consistent runtime updates (which, to our best knowledge, is not</text>
<text top="907" left="140" width="610" height="19" font="9">supported by any existing DSU approach which is applicable in real-world scenarios). In other</text>
<text top="924" left="140" width="610" height="19" font="9">words, our goal is to provide Java with the same runtime update capabilities known from dynamic</text>
<text top="946" left="140" width="63" height="13" font="9">languages</text>
<text top="942" left="203" width="4" height="19" font="9">.</text>
<text top="960" left="155" width="595" height="19" font="9">Researchers spent a lot of time to overcome Java’s shortcomings regarding runtime program</text>
<text top="978" left="140" width="252" height="19" font="9">adaptation. Approaches like Javassist <a href="pdfxml.html#32">[</a></text>
<text top="978" left="392" width="8" height="19" font="10"><a href="pdfxml.html#32">7</a></text>
<text top="978" left="400" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="978" left="410" width="8" height="19" font="10"><a href="pdfxml.html#32">6</a></text>
<text top="978" left="418" width="90" height="19" font="9"><a href="pdfxml.html#32">] </a>and BCEL <a href="pdfxml.html#32">[</a></text>
<text top="978" left="508" width="8" height="19" font="10"><a href="pdfxml.html#32">8</a></text>
<text top="978" left="516" width="234" height="19" font="9"><a href="pdfxml.html#32">] </a>allow to apply some unanticipated</text>
<text top="996" left="140" width="585" height="19" font="9">changes, but only to program parts that have not been executed yet. In contrast, Steamloom <a href="pdfxml.html#32">[</a></text>
<text top="996" left="726" width="15" height="19" font="10"><a href="pdfxml.html#32">19</a></text>
<text top="996" left="741" width="9" height="19" font="9"><a href="pdfxml.html#32">],</a></text>
<text top="1018" left="140" width="37" height="13" font="9">Reﬂex</text>
<text top="1014" left="181" width="5" height="19" font="9"><a href="pdfxml.html#33">[</a></text>
<text top="1014" left="186" width="15" height="19" font="10"><a href="pdfxml.html#33">44</a></text>
<text top="1014" left="201" width="67" height="19" font="9"><a href="pdfxml.html#33">], </a>PROSE <a href="pdfxml.html#32">[</a></text>
<text top="1014" left="268" width="15" height="19" font="10"><a href="pdfxml.html#32">31</a></text>
<text top="1014" left="283" width="61" height="19" font="9"><a href="pdfxml.html#32">], </a>DUSC <a href="pdfxml.html#33">[</a></text>
<text top="1014" left="344" width="15" height="19" font="10"><a href="pdfxml.html#33">36</a></text>
<text top="1014" left="359" width="98" height="19" font="9"><a href="pdfxml.html#33">], </a>AspectWerkz <a href="pdfxml.html#32">[</a></text>
<text top="1014" left="457" width="8" height="19" font="10"><a href="pdfxml.html#32">3</a></text>
<text top="1014" left="465" width="51" height="19" font="9"><a href="pdfxml.html#32">], </a>Wool <a href="pdfxml.html#33">[</a></text>
<text top="1014" left="516" width="15" height="19" font="10"><a href="pdfxml.html#33">41</a></text>
<text top="1014" left="531" width="75" height="19" font="9"><a href="pdfxml.html#33">], </a>or JAsCo <a href="pdfxml.html#33">[</a></text>
<text top="1014" left="607" width="15" height="19" font="10"><a href="pdfxml.html#33">46</a></text>
<text top="1014" left="622" width="128" height="19" font="9"><a href="pdfxml.html#33">] </a>allow unanticipated</text>
<text top="1032" left="140" width="610" height="19" font="9">changes even of executed program parts; however, Steamloom, Reﬂex, PROSE, AspectWerkz,</text>
<text top="1050" left="140" width="610" height="19" font="9">Wool, and JAsCo do not support class schema changing runtime updates. Although DUSC allows</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="12" size="8" family="Times" color="#000000"/>
<text top="56" left="742" width="8" height="19" font="9">3</text>
<text top="101" left="140" width="610" height="19" font="9">class schema changes the program loses its state. Another dynamic software update approach is</text>
<text top="123" left="140" width="42" height="13" font="9">JRebel</text>
<text top="119" left="186" width="5" height="19" font="9"><a href="pdfxml.html#32">[</a></text>
<text top="119" left="191" width="15" height="19" font="10"><a href="pdfxml.html#32">21</a></text>
<text top="119" left="207" width="543" height="19" font="9"><a href="pdfxml.html#32">] </a>which puts abstraction layers between the executed code and the JVM. It enables class</text>
<text top="137" left="140" width="545" height="19" font="9">schema changes except from modiﬁcations of the inheritance hierarchy. Kim presents in <a href="pdfxml.html#32">[</a></text>
<text top="137" left="685" width="15" height="19" font="10"><a href="pdfxml.html#32">23</a></text>
<text top="137" left="701" width="49" height="19" font="9"><a href="pdfxml.html#32">] </a>a DSU</text>
<text top="155" left="140" width="610" height="19" font="9">approach based on proxies which, similar to JRebel, only enables schema changes that not affect</text>
<text top="173" left="140" width="156" height="19" font="9">the inheritance hierarchy.</text>
<text top="191" left="155" width="81" height="19" font="9">We present J</text>
<text top="194" left="236" width="17" height="15" font="0">AV</text>
<text top="191" left="252" width="11" height="19" font="9">A</text>
<text top="194" left="264" width="52" height="15" font="0">DAPTOR</text>
<text top="191" left="316" width="434" height="19" font="9">, the ﬁrst (to our best knowledge) dynamic software update approach</text>
<text top="209" left="140" width="610" height="19" font="9">that fulﬁlls all our quality criteria postulated above: it is ﬂexible, platform independent, performant,</text>
<text top="227" left="140" width="610" height="19" font="9">and it does not affect the architecture of the program to be updated. To meet the criteria, we utilize</text>
<text top="245" left="140" width="610" height="19" font="9">Java HotSwap in an innovative way and combine it with class replacement mechanisms. Technically,</text>
<text top="262" left="140" width="610" height="19" font="9">we update all classes with a changed schema via class replacements and update their callers with</text>
<text top="280" left="140" width="610" height="19" font="9">the help of Java HotSwap. The key concepts of our solution are class renamings (to replace classes)</text>
<text top="298" left="140" width="610" height="19" font="9">and containers respectively proxies (to avoid caller class replacements). Furthermore, we contribute</text>
<text top="316" left="140" width="610" height="19" font="9">a discussion of desired properties for DSU approaches and a detailed survey off related approaches</text>
<text top="334" left="140" width="610" height="19" font="9">and their trade offs. In addition, we demonstrate the practicability of our approach with non-trivial</text>
<text top="352" left="140" width="610" height="19" font="9">case studies and show that the performance drops are minimal. We last but not least discuss ongoing</text>
<text top="370" left="140" width="179" height="19" font="9">and future work to improve J</text>
<text top="373" left="319" width="17" height="15" font="0">AV</text>
<text top="370" left="335" width="11" height="19" font="9">A</text>
<text top="373" left="347" width="52" height="15" font="0">DAPTOR</text>
<text top="370" left="400" width="4" height="19" font="9">.</text>
<text top="422" left="350" width="190" height="19" font="9">2. MOTIVATING EXAMPLE</text>
<text top="458" left="140" width="610" height="19" font="9">Program maintenance is not a trivial task, which usually affects many parts of a program.</text>
<text top="476" left="140" width="610" height="19" font="9">Depending on the requirements, it ranges from single statement modiﬁcations to complex structural</text>
<text top="494" left="140" width="504" height="19" font="9">modiﬁcations, i.e., it might affect all language constructs of Java as listed in Table</text>
<text top="494" left="648" width="5" height="19" font="10"><a href="pdfxml.html#2">I</a></text>
<text top="494" left="654" width="4" height="19" font="9"><a href="pdfxml.html#2">.</a></text>
<text top="699" left="607" width="62" height="12" font="8">TempSensor</text>
<text top="715" left="664" width="37" height="12" font="8">Sensor</text>
<text top="714" left="705" width="6" height="16" font="8">{</text>
<text top="730" left="583" width="19" height="12" font="8">...</text>
<text top="746" left="618" width="91" height="12" font="8">currentTemp() {</text>
<text top="778" left="583" width="6" height="12" font="8">}</text>
<text top="794" left="572" width="6" height="12" font="8">}</text>
<text top="530" left="607" width="79" height="11" font="5">TempDisplay {</text>
<text top="544" left="583" width="85" height="11" font="5">TempSensor ts;</text>
<text top="559" left="583" width="19" height="11" font="5">...</text>
<text top="573" left="612" width="91" height="11" font="5">displayTemp() {</text>
<text top="587" left="594" width="106" height="11" font="5">ts.currentTemp();</text>
<text top="601" left="594" width="19" height="11" font="5">...</text>
<text top="615" left="577" width="6" height="11" font="5">}</text>
<text top="630" left="572" width="6" height="11" font="5">}</text>
<text top="699" left="412" width="72" height="12" font="8">TempSensor {</text>
<text top="715" left="388" width="54" height="12" font="8">Sensor s;</text>
<text top="730" left="388" width="19" height="12" font="8">...</text>
<text top="746" left="423" width="81" height="12" font="8">currentTemp()</text>
<text top="745" left="508" width="6" height="16" font="8">{</text>
<text top="777" left="388" width="6" height="16" font="8">}</text>
<text top="794" left="377" width="6" height="12" font="8">}</text>
<text top="530" left="412" width="79" height="11" font="5">TempDisplay {</text>
<text top="544" left="389" width="85" height="11" font="5">TempSensor ts;</text>
<text top="559" left="389" width="19" height="11" font="5">...</text>
<text top="573" left="417" width="91" height="11" font="5">displayTemp() {</text>
<text top="587" left="400" width="106" height="11" font="5">ts.currentTemp();</text>
<text top="601" left="400" width="19" height="11" font="5">...</text>
<text top="615" left="389" width="6" height="11" font="5">}</text>
<text top="630" left="377" width="6" height="11" font="5">}</text>
<text top="699" left="218" width="72" height="12" font="8">TempSensor {</text>
<text top="715" left="194" width="54" height="12" font="8">Sensor s;</text>
<text top="730" left="194" width="19" height="12" font="8">...</text>
<text top="746" left="216" width="91" height="12" font="8">averageTemp() {</text>
<text top="778" left="194" width="6" height="12" font="8">}</text>
<text top="794" left="183" width="6" height="12" font="8">}</text>
<text top="530" left="218" width="79" height="11" font="5">TempDisplay {</text>
<text top="544" left="194" width="85" height="11" font="5">TempSensor ts;</text>
<text top="559" left="194" width="19" height="11" font="5">...</text>
<text top="573" left="223" width="91" height="11" font="5">displayTemp() {</text>
<text top="587" left="205" width="106" height="11" font="5">ts.averageTemp();</text>
<text top="601" left="205" width="19" height="11" font="5">...</text>
<text top="615" left="194" width="6" height="11" font="5">}</text>
<text top="630" left="183" width="6" height="11" font="5">}</text>
<text top="662" left="330" width="39" height="12" font="12">1st DSU</text>
<text top="662" left="522" width="43" height="12" font="12">2nd DSU</text>
<text top="823" left="140" width="610" height="17" font="7">Figure 1. Weather station. The example spans updates which replace methods, remove ﬁelds, and change</text>
<text top="837" left="379" width="132" height="17" font="7">inheritance hierarchies.</text>
<text top="871" left="155" width="294" height="19" font="9">The weather station program depicted in Figure</text>
<text top="871" left="453" width="8" height="19" font="10"><a href="pdfxml.html#3">1</a></text>
<text top="871" left="465" width="285" height="19" font="9">exampliﬁes that even simple program changes</text>
<text top="889" left="140" width="610" height="19" font="9">can affect many parts of a program. The weather station program consists of 2 classes. One class</text>
<text top="907" left="140" width="610" height="19" font="9">(TempSensor) measures the air temperature while the other class (TempDisplay) is responsible</text>
<text top="924" left="140" width="610" height="19" font="9">for displaying the temparature. Consider a maintenance task: the actual measuring algorithm</text>
<text top="942" left="140" width="610" height="19" font="9">(average temperature) must be replaced by another measuring algorithm (current temperature).</text>
<text top="960" left="140" width="610" height="19" font="9">Because the service provided by the weather station must be non-stop available, stopping the</text>
<text top="978" left="140" width="610" height="19" font="9">program in order to apply the necessary changes is no option; we want to change it at runtime.</text>
<text top="996" left="140" width="610" height="19" font="9">The application of the new functionality requires to change different parts of the program. First,</text>
<text top="1014" left="140" width="610" height="19" font="9">method averageTemp of class TempSensor must be replaced by method currentTemp</text>
<text top="1032" left="140" width="610" height="19" font="9">which requires to change the class schema. Second, in order to execute the new algorithm, method</text>
<text top="1055" left="140" width="102" height="12" font="9">displayTemp</text>
<text top="1050" left="247" width="503" height="19" font="9">of class TempDisplay must be reimplemented. Short time after applying the</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="13" size="7" family="Times" color="#000000"/>
<text top="56" left="140" width="8" height="19" font="9">4</text>
<text top="101" left="140" width="610" height="19" font="9">new measuring algorithm it was also decided to let TempSensor inherit from class Sensor in</text>
<text top="119" left="140" width="610" height="19" font="9">order to add new functions to TempSensor while avoiding to implement them again. Therefore,</text>
<text top="137" left="140" width="610" height="19" font="9">statement extends Sensor has to be applied to class TempSensor. Additionally, member</text>
<text top="159" left="140" width="9" height="12" font="9">s</text>
<text top="155" left="155" width="595" height="19" font="9">of original class TempSensor has to be removed because superclass Sensor let it become</text>
<text top="173" left="140" width="610" height="19" font="9">useless. However, changing the program code is only the ﬁrst step toward an updated application.</text>
<text top="191" left="140" width="610" height="19" font="9">In addition, all objects that exist in the program must be also updated to let them access the new</text>
<text top="209" left="140" width="313" height="19" font="9">program parts as well as to keep the program state.</text>
<text top="227" left="155" width="595" height="19" font="9">Even if the required program changes seem to be simple, they affect many different parts of the</text>
<text top="245" left="140" width="212" height="19" font="9">program (i.e., Points 1 – 6 of Table</text>
<text top="245" left="355" width="5" height="19" font="10"><a href="pdfxml.html#2">I</a></text>
<text top="245" left="361" width="389" height="19" font="9"><a href="pdfxml.html#2">). </a>Therefore, we search for a new mechanism in Java that allows</text>
<text top="262" left="140" width="482" height="19" font="9">to change every part of a program at runtime without anticipating the changes.</text>
<text top="318" left="329" width="232" height="19" font="9">3. THE JAVA VIRTUAL MACHINE</text>
<text top="354" left="140" width="610" height="19" font="9">In order to understand what is provided or possible in Java and what challenges remain regarding</text>
<text top="372" left="140" width="610" height="19" font="9">runtime adaptation, it is necessary to understand the standard design of Java’s runtime environment</text>
<text top="390" left="140" width="215" height="19" font="9">– the Java virtual machine (JVM) <a href="pdfxml.html#33">[</a></text>
<text top="390" left="356" width="15" height="19" font="10"><a href="pdfxml.html#33">48</a></text>
<text top="390" left="371" width="134" height="19" font="9"><a href="pdfxml.html#33">]. </a>As shown in Figure</text>
<text top="390" left="509" width="8" height="19" font="10"><a href="pdfxml.html#4">2</a></text>
<text top="390" left="517" width="233" height="19" font="9"><a href="pdfxml.html#4">, </a>a Java program is stored in the heap,</text>
<text top="408" left="140" width="610" height="19" font="9">in the method area, as well as on the stacks of the JVM. Within the heap, the runtime data of all</text>
<text top="426" left="140" width="167" height="19" font="9">class instances are stored <a href="pdfxml.html#32">[</a></text>
<text top="426" left="308" width="15" height="19" font="10"><a href="pdfxml.html#32">27</a></text>
<text top="426" left="323" width="427" height="19" font="9"><a href="pdfxml.html#32">]. </a>In case a new class instance has to be created, the JVM explicitly</text>
<text top="444" left="140" width="610" height="19" font="9">allocates heap memory for the instance, whereas the garbage collector cleans the heap from data</text>
<text top="462" left="140" width="610" height="19" font="9">bound to class instances no longer used by the program. Unlike the heap, the method area stores all</text>
<text top="479" left="140" width="610" height="19" font="9">class (type) speciﬁc data such as runtime constant pool, static ﬁeld information and method data,</text>
<text top="497" left="140" width="319" height="19" font="9">and the code of methods (including constructors) <a href="pdfxml.html#32">[</a></text>
<text top="497" left="460" width="15" height="19" font="10"><a href="pdfxml.html#32">27</a></text>
<text top="497" left="475" width="275" height="19" font="9"><a href="pdfxml.html#32">]. </a>The stacks contain the currently executed</text>
<text top="515" left="140" width="90" height="19" font="9">program parts.</text>
<text top="572" left="477" width="56" height="11" font="13">class loader </text>
<text top="584" left="480" width="47" height="11" font="13">subsystem</text>
<text top="577" left="366" width="50" height="13" font="5">class files</text>
<text top="752" left="290" width="107" height="12" font="13">runtime data areas</text>
<text top="687" left="297" width="42" height="12" font="13">method </text>
<text top="700" left="303" width="24" height="12" font="13">area</text>
<text top="694" left="363" width="24" height="12" font="13">heap</text>
<text top="687" left="422" width="30" height="12" font="13">Java </text>
<text top="700" left="416" width="36" height="12" font="13">stacks</text>
<text top="687" left="498" width="18" height="12" font="13">pc </text>
<text top="700" left="477" width="53" height="12" font="13">registers</text>
<text top="681" left="557" width="42" height="12" font="13">native </text>
<text top="694" left="557" width="42" height="12" font="13">method </text>
<text top="707" left="557" width="36" height="12" font="13">stacks</text>
<text top="832" left="305" width="45" height="11" font="13">execution </text>
<text top="843" left="312" width="30" height="11" font="13">engine</text>
<text top="830" left="418" width="83" height="12" font="13">native method </text>
<text top="843" left="430" width="53" height="12" font="13">interface</text>
<text top="823" left="554" width="42" height="12" font="13">Native </text>
<text top="837" left="554" width="42" height="12" font="13">method </text>
<text top="850" left="545" width="53" height="12" font="13">libraries</text>
<text top="888" left="289" width="289" height="17" font="7">Figure 2. Program representation – HotSpot JVM <a href="pdfxml.html#33">[</a></text>
<text top="888" left="578" width="14" height="17" font="11"><a href="pdfxml.html#33">48</a></text>
<text top="888" left="593" width="8" height="17" font="7"><a href="pdfxml.html#33">].</a></text>
<text top="924" left="155" width="595" height="19" font="9">Changing a program during its execution in the JVM requires to modify the data within the heap,</text>
<text top="942" left="140" width="593" height="19" font="9">the method area, and on the stacks. For instance, program changes such as depicted in Figure</text>
<text top="942" left="738" width="8" height="19" font="10"><a href="pdfxml.html#3">1</a></text>
<text top="942" left="746" width="4" height="19" font="9"><a href="pdfxml.html#3">,</a></text>
<text top="960" left="140" width="610" height="19" font="9">which also include method replacements require to extensively change the data of a class. In general,</text>
<text top="978" left="140" width="610" height="19" font="9">they require to modify the class schema. Unfortunately, the JVM does not permit class schema</text>
<text top="996" left="140" width="610" height="19" font="9">changes, because class schema changes may let the data on the stack, on the heap, and the class</text>
<text top="1014" left="140" width="610" height="19" font="9">data stored in the method area become inconsistent while the JVM does not provide functions to</text>
<text top="1032" left="140" width="610" height="19" font="9">synchronize them. In order to disallow the developer class schema changing updates, the JVM</text>
<text top="1050" left="140" width="610" height="19" font="9">enforces a strict class loading concept. To load a class, the JVM requests the following basic class</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="742" width="8" height="19" font="9">5</text>
<text top="101" left="140" width="610" height="19" font="9">loaders (in this order): (a) the bootstrap class loader (root class loader – loads system classes),</text>
<text top="119" left="140" width="610" height="19" font="9">(b) the extension class loader (loads classes of the extension library), and (c) the application class</text>
<text top="137" left="140" width="610" height="19" font="9">loader (loads classes from classpath). The ﬁrst class loader in this hierarchy that is able to load the</text>
<text top="155" left="140" width="610" height="19" font="9">requested class will be ﬁnally bounded to this class, i.e., none of the other class loaders is allowed</text>
<text top="173" left="140" width="610" height="19" font="9">to load or reload this class. The only way (beside customized class loaders that we will discuss in</text>
<text top="191" left="140" width="610" height="19" font="9">later sections) to reload (update) a class with a changed schema is to unload the old class version,</text>
<text top="209" left="140" width="610" height="19" font="9">which is only possible if the owning class loader can be garbage collected. Unfortunately, a class</text>
<text top="227" left="140" width="610" height="19" font="9">loader can only be garbage collected if all classes (even the unchanged ones) loaded by this class</text>
<text top="245" left="140" width="457" height="19" font="9">loader are dereferenced, which is equivalent to a (partial) application stop.</text>
<text top="266" left="155" width="100" height="14" font="9">Java HotSwap.</text>
<text top="262" left="260" width="490" height="19" font="9">Despite the insufﬁcient native runtime adaptation support of the JVM there is</text>
<text top="280" left="140" width="558" height="19" font="9">one feature that provides some simple runtime update capabilities – called Java HotSwap <a href="pdfxml.html#32">[</a></text>
<text top="280" left="698" width="15" height="19" font="10"><a href="pdfxml.html#32">10</a></text>
<text top="280" left="714" width="36" height="19" font="9"><a href="pdfxml.html#32">]. </a>It is</text>
<text top="298" left="140" width="395" height="19" font="9">provided by the Java Virtual Machine Tool Interface (JVMTI) <a href="pdfxml.html#33">[</a></text>
<text top="298" left="535" width="15" height="19" font="10"><a href="pdfxml.html#33">35</a></text>
<text top="298" left="550" width="200" height="19" font="9"><a href="pdfxml.html#33">] </a>and allows to replace the body</text>
<text top="316" left="140" width="348" height="19" font="9">of a method (which partly covers points 4 - 6 of Table</text>
<text top="316" left="494" width="5" height="19" font="10"><a href="pdfxml.html#2">I</a></text>
<text top="316" left="499" width="251" height="19" font="9"><a href="pdfxml.html#2">) </a>while the program is running. Even if</text>
<text top="334" left="140" width="610" height="19" font="9">HotSwap is not a standard feature, it is implemented by all major Java virtual machines commonly</text>
<text top="352" left="140" width="481" height="19" font="9">used in production, i.e., the HotSpot JVM, the JRockit JVM, and IBM’s JVM.</text>
<text top="370" left="155" width="595" height="19" font="9">The class data restructuring via Java HotSwap consists of the following steps: First, an updated</text>
<text top="388" left="140" width="610" height="19" font="9">version of a class is loaded into the JVM. It contains the new method bodies. Second, it is checked</text>
<text top="406" left="140" width="610" height="19" font="9">if old and new class version share the same class schema. Third, the references to the constant pool,</text>
<text top="424" left="140" width="610" height="19" font="9">method array, and method objects of the old class are successively (in the given order) redirected to</text>
<text top="442" left="140" width="610" height="19" font="9">their (up-to-date) counterparts within the updated class. After this is done, all corresponding method</text>
<text top="460" left="140" width="610" height="19" font="9">calls refer to the redeﬁned methods. Unfortunately, Java HotSwap (and other features of JVMTI)</text>
<text top="478" left="140" width="610" height="19" font="9">neither allows to swap the complete class data nor removing or adding methods, i.e., it does not</text>
<text top="496" left="140" width="175" height="19" font="9">allow class schema changes.</text>
<text top="550" left="253" width="384" height="19" font="9">4. DYNAMIC SOFTWARE UPDATES VIA JAVADAPTOR</text>
<text top="585" left="140" width="610" height="19" font="9">Having described the shortcomings of Java’s runtime environment, i.e., the JVM, regarding ﬂexible</text>
<text top="603" left="140" width="234" height="19" font="9">runtime program updates, we present J</text>
<text top="606" left="375" width="17" height="15" font="0">AV</text>
<text top="603" left="390" width="11" height="19" font="9">A</text>
<text top="606" left="402" width="52" height="15" font="0">DAPTOR</text>
<text top="603" left="458" width="292" height="19" font="9">which overcomes the limitations of the Java VM</text>
<text top="621" left="140" width="610" height="19" font="9">and adds ﬂexible DSU to Java while not causing platform dependencies, architecture dependencies,</text>
<text top="639" left="140" width="610" height="19" font="9">and signiﬁcant performance drops. It combines Java HotSwap and class replacements, which are</text>
<text top="657" left="140" width="249" height="19" font="9">implemented via containers and proxies.</text>
<text top="697" left="140" width="257" height="13" font="9">4.1. Tool Description and Demonstration</text>
<text top="720" left="140" width="610" height="19" font="9">Before we describe the concepts of our DSU approach, let us illustrate the general architecture and</text>
<text top="738" left="140" width="118" height="19" font="9">update process of J</text>
<text top="741" left="258" width="17" height="15" font="0">AV</text>
<text top="738" left="274" width="11" height="19" font="9">A</text>
<text top="741" left="286" width="52" height="15" font="0">DAPTOR</text>
<text top="738" left="339" width="4" height="19" font="9">.</text>
<text top="760" left="155" width="115" height="14" font="9">Tool Description.</text>
<text top="756" left="277" width="40" height="19" font="9">Figure</text>
<text top="756" left="324" width="8" height="19" font="10"><a href="pdfxml.html#6">3</a></text>
<text top="756" left="338" width="70" height="19" font="9">describes J</text>
<text top="759" left="408" width="17" height="15" font="0">AV</text>
<text top="756" left="424" width="11" height="19" font="9">A</text>
<text top="759" left="436" width="52" height="15" font="0">DAPTOR</text>
<text top="756" left="495" width="255" height="19" font="9">from the developers point of view. The</text>
<text top="774" left="140" width="610" height="19" font="9">current implementation of our tool comes as a plug-in which smoothly integrates into the Eclipse</text>
<text top="796" left="140" width="26" height="13" font="9">IDE</text>
<text top="793" left="166" width="6" height="10" font="12">∗</text>
<text top="792" left="178" width="95" height="19" font="9">(conceptually J</text>
<text top="795" left="272" width="17" height="15" font="0">AV</text>
<text top="792" left="288" width="11" height="19" font="9">A</text>
<text top="795" left="300" width="52" height="15" font="0">DAPTOR</text>
<text top="792" left="357" width="393" height="19" font="9">could be integrated into any other IDE or even used without an</text>
<text top="810" left="140" width="610" height="19" font="9">IDE). The implementation of the required program updates conforms to the usual static software</text>
<text top="828" left="140" width="610" height="19" font="9">development process, i.e., the developer implements the required functions using the Eclipse IDE</text>
<text top="846" left="140" width="610" height="19" font="9">and compiles the sources. This ensures type-safety because of the static type checking done by the</text>
<text top="864" left="140" width="58" height="19" font="9">compiler.</text>
<text top="881" left="155" width="426" height="19" font="9">When the developer decides to update the running application, J</text>
<text top="884" left="581" width="17" height="15" font="0">AV</text>
<text top="881" left="597" width="11" height="19" font="9">A</text>
<text top="884" left="609" width="52" height="15" font="0">DAPTOR</text>
<text top="881" left="669" width="81" height="19" font="9">establishes a</text>
<text top="899" left="140" width="392" height="19" font="9">connection to the JVM executing the application (see Figure</text>
<text top="899" left="538" width="8" height="19" font="10"><a href="pdfxml.html#6">4</a></text>
<text top="899" left="546" width="204" height="19" font="9"><a href="pdfxml.html#6">). </a>In more detail, it connects to</text>
<text top="917" left="140" width="589" height="19" font="9">the JVM’s Java Virtual Machine Tool Interface (JVMTI) which is used to control the JVM <a href="pdfxml.html#33">[</a></text>
<text top="917" left="730" width="15" height="19" font="10"><a href="pdfxml.html#33">35</a></text>
<text top="917" left="745" width="5" height="19" font="9"><a href="pdfxml.html#33">]</a></text>
<text top="935" left="140" width="610" height="19" font="9">(accessible from outside the JVM through the Java Debug Interface which is part of the Java</text>
<text top="957" left="140" width="198" height="13" font="9">Platform Debugger Architecture</text>
<text top="953" left="342" width="5" height="19" font="9"><a href="pdfxml.html#33">[</a></text>
<text top="953" left="347" width="15" height="19" font="10"><a href="pdfxml.html#33">34</a></text>
<text top="953" left="362" width="252" height="19" font="9"><a href="pdfxml.html#33">]). </a>Once the update process is triggered, J</text>
<text top="956" left="614" width="17" height="15" font="0">AV</text>
<text top="953" left="630" width="11" height="19" font="9">A</text>
<text top="956" left="642" width="52" height="15" font="0">DAPTOR</text>
<text top="953" left="698" width="52" height="19" font="9">prepares</text>
<text top="971" left="140" width="610" height="19" font="9">the classes changed within Eclipse so that they can be applied to the running application. The</text>
<text top="989" left="140" width="375" height="19" font="9">required bytecode modiﬁcations are performed by Javassist.</text>
<text top="990" left="515" width="5" height="10" font="12">†</text>
<text top="989" left="526" width="224" height="19" font="9">In order to load and instantiate new</text>
<text top="1039" left="140" width="6" height="8" font="6"><a href="http://www.eclipse.org/">∗</a></text>
<text top="1042" left="147" width="175" height="10" font="1"><a href="http://www.eclipse.org/">http://www.eclipse.org/</a></text>
<text top="1053" left="140" width="5" height="8" font="6"><a href="http://www.csg.is.titech.ac.jp/~chiba/javassist/">†</a></text>
<text top="1056" left="146" width="366" height="12" font="1"><a href="http://www.csg.is.titech.ac.jp/~chiba/javassist/">http://www.csg.is.titech.ac.jp/˜chiba/javassist/</a></text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="14" size="7" family="Times" color="#000000"/>
	<fontspec id="15" size="25" family="Times" color="#ffffff"/>
	<fontspec id="16" size="5" family="Times" color="#000000"/>
	<fontspec id="17" size="7" family="Times" color="#000000"/>
<text top="56" left="140" width="8" height="19" font="9">6</text>
<text top="172" left="176" width="113" height="11" font="13">Implement updates via IDE</text>
<text top="240" left="194" width="82" height="11" font="13">Connect to running </text>
<text top="249" left="211" width="45" height="11" font="13">application</text>
<text top="305" left="177" width="112" height="11" font="13">Update running application</text>
<text top="374" left="182" width="105" height="11" font="13">Disconnect from running </text>
<text top="383" left="210" width="45" height="11" font="13">application</text>
<text top="206" left="171" width="49" height="11" font="13">connected?</text>
<text top="335" left="189" width="24" height="11" font="13">more </text>
<text top="344" left="180" width="39" height="11" font="13">updates?</text>
<text top="355" left="237" width="12" height="11" font="14"><b>no</b></text>
<text top="333" left="246" width="16" height="11" font="14"><b>yes</b></text>
<text top="222" left="237" width="12" height="11" font="14"><b>no</b></text>
<text top="200" left="246" width="16" height="11" font="14"><b>yes</b></text>
<text top="460" left="373" width="145" height="17" font="7">Figure 3. Update process.</text>
<text top="538" left="387" width="49" height="34" font="15">IDE</text>
<text top="610" left="304" width="54" height="11" font="13">JavAdaptor</text>
<text top="690" left="323" width="16" height="11" font="13">JDI</text>
<text top="610" left="484" width="54" height="11" font="13">Target JVM</text>
<text top="630" left="482" width="59" height="11" font="13">Application</text>
<text top="690" left="498" width="27" height="11" font="13">JVMTI</text>
<text top="649" left="433" width="59" height="9" font="16">Update Thread</text>
<text top="649" left="532" width="59" height="9" font="16">Class Loaders</text>
<text top="641" left="299" width="65" height="11" font="13">Update Logic</text>
<text top="738" left="541" width="23" height="10" font="17"><i>Class</i></text>
<text top="745" left="540" width="37" height="10" font="17"><i>Class_v1</i></text>
<text top="752" left="547" width="37" height="10" font="17"><i>Class_v2</i></text>
<text top="759" left="554" width="37" height="10" font="17"><i>Class_v3</i></text>
<text top="765" left="561" width="37" height="10" font="17"><i>Class_v4</i></text>
<text top="772" left="567" width="37" height="10" font="17"><i>Class_v5</i></text>
<text top="545" left="300" width="52" height="10" font="17"><i>code change</i></text>
<text top="789" left="258" width="284" height="10" font="17"><i>update classes, create containers/proxies, and so forth, using Javassist</i></text>
<text top="730" left="338" width="170" height="10" font="17"><i>Invoke JVMTI to: load new class versions, </i></text>
<text top="740" left="338" width="169" height="10" font="17"><i>update callers, and hotswap method body </i></text>
<text top="751" left="389" width="66" height="10" font="17"><i>implementations</i></text>
<text top="586" left="454" width="41" height="10" font="17"><i>Developer</i></text>
<text top="703" left="626" width="0" height="10" font="17"><i>load</i></text>
<text top="815" left="308" width="274" height="17" font="7">Figure 4. Dynamic software update architecture.</text>
<text top="889" left="140" width="610" height="19" font="9">class versions, a special update thread is added to the target application. This thread is only active</text>
<text top="907" left="140" width="610" height="19" font="9">when the running program is updated and, thus, causes no performance penalties during normal</text>
<text top="924" left="140" width="234" height="19" font="9">program execution. After the update, J</text>
<text top="927" left="374" width="17" height="15" font="0">AV</text>
<text top="924" left="390" width="11" height="19" font="9">A</text>
<text top="927" left="402" width="52" height="15" font="0">DAPTOR</text>
<text top="924" left="458" width="292" height="19" font="9">disconnects from the application. The described</text>
<text top="942" left="140" width="274" height="19" font="9">process can be repeated as often as required.</text>
<text top="964" left="155" width="136" height="14" font="9">Tool Demonstration.</text>
<text top="960" left="297" width="453" height="19" font="9">Because abstract descriptions on the usage of tools are sometimes hard</text>
<text top="978" left="140" width="610" height="19" font="9">to understand and do not reﬂect the reality well, we created a tool demonstration showing</text>
<text top="996" left="141" width="6" height="19" font="9">J</text>
<text top="999" left="147" width="17" height="15" font="0">AV</text>
<text top="996" left="162" width="11" height="19" font="9">A</text>
<text top="999" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="996" left="231" width="196" height="19" font="9">in action. Concretely, we used J</text>
<text top="999" left="427" width="17" height="15" font="0">AV</text>
<text top="996" left="443" width="11" height="19" font="9">A</text>
<text top="999" left="455" width="52" height="15" font="0">DAPTOR</text>
<text top="996" left="512" width="238" height="19" font="9">to update the well-known arcade game</text>
<text top="1018" left="140" width="37" height="13" font="9">Snake</text>
<text top="1014" left="181" width="569" height="19" font="9">at runtime. The update consists of 4 different steps which each add new functions to the (at</text>
<text top="1032" left="140" width="610" height="19" font="9">startup) very basic game. It required to redeﬁne existing methods, to add new methods and ﬁelds,</text>
<text top="1050" left="140" width="610" height="19" font="9">and even to update inheritance hierarchies. That is, the demonstration covers all kinds of updates</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="18" size="10" family="Times" color="#db0000"/>
<text top="56" left="742" width="8" height="19" font="9">7</text>
<text top="101" left="140" width="610" height="19" font="9">essential to ﬂexibly update running applications. For more information about our tool demo see</text>
<text top="119" left="140" width="5" height="19" font="9"><a href="pdfxml.html#33">[</a></text>
<text top="119" left="145" width="15" height="19" font="10"><a href="pdfxml.html#33">38</a></text>
<text top="119" left="161" width="297" height="19" font="9"><a href="pdfxml.html#33">]. </a>The corresponding demo video is available on</text>
<text top="119" left="462" width="56" height="19" font="10"><a href="http://www.youtube.com/watch?v=jZm0hvlhC-E">YouTube</a></text>
<text top="119" left="517" width="4" height="19" font="9"><a href="http://www.youtube.com/watch?v=jZm0hvlhC-E">.</a></text>
<text top="120" left="521" width="5" height="10" font="12">‡</text>
<text top="137" left="155" width="378" height="19" font="9">In the following, we describe the basic mechanisms how J</text>
<text top="140" left="533" width="17" height="15" font="0">AV</text>
<text top="137" left="549" width="11" height="19" font="9">A</text>
<text top="140" left="561" width="52" height="15" font="0">DAPTOR</text>
<text top="137" left="620" width="130" height="19" font="9">changes applications</text>
<text top="155" left="140" width="515" height="19" font="9">running in the target JVM, namely class replacements using containers and proxies.</text>
<text top="207" left="538" width="130" height="11" font="5">TempSensor_v2 { ... }</text>
<text top="207" left="259" width="112" height="11" font="5">TempSensor { ... }</text>
<text top="205" left="400" width="62" height="12" font="12">Replacement</text>
<text top="239" left="372" width="146" height="17" font="7">Figure 5. Class renaming.</text>
<text top="309" left="140" width="132" height="13" font="9">4.2. Class Reloading</text>
<text top="332" left="140" width="124" height="19" font="9">As stated in Section</text>
<text top="332" left="269" width="8" height="19" font="10"><a href="pdfxml.html#4">3</a></text>
<text top="332" left="276" width="474" height="19" font="9"><a href="pdfxml.html#4">, </a>the JVM disallows updating an already loaded class when the update alters</text>
<text top="350" left="140" width="610" height="19" font="9">the class schema. In order to circumvent these restrictions, we perform class replacements (updates)</text>
<text top="368" left="140" width="313" height="19" font="9">through class renaming. As exempliﬁed in Figure</text>
<text top="368" left="458" width="8" height="19" font="10"><a href="pdfxml.html#7">5</a></text>
<text top="368" left="466" width="284" height="19" font="9"><a href="pdfxml.html#7">, </a>the key idea is that, while we cannot load a</text>
<text top="385" left="140" width="610" height="19" font="9">new class version with the same name, we rename the new version and load it under a fresh name.</text>
<text top="403" left="140" width="610" height="19" font="9">Since the resulting class name is not registered in any class loader, the updated class can be loaded</text>
<text top="421" left="140" width="362" height="19" font="9">by the same class loader that also loaded the original class.</text>
<text top="463" left="325" width="64" height="17" font="7">Listing 1. J</text>
<text top="465" left="389" width="16" height="14" font="5">AV</text>
<text top="463" left="403" width="10" height="17" font="7">A</text>
<text top="465" left="414" width="48" height="14" font="5">DAPTOR</text>
<text top="463" left="466" width="99" height="17" font="7">– class reloading.</text>
<text top="485" left="132" width="6" height="15" font="0">1</text>
<text top="489" left="146" width="38" height="10" font="18"><b>class</b></text>
<text top="489" left="191" width="145" height="10" font="0">ClassUpdateLoader {</text>
<text top="498" left="132" width="6" height="15" font="0">2</text>
<text top="502" left="157" width="191" height="10" font="0">VirtualMachine targetJVM;</text>
<text top="512" left="132" width="6" height="15" font="0">3</text>
<text top="515" left="157" width="23" height="10" font="0">...</text>
<text top="525" left="132" width="6" height="15" font="0">4</text>
<text top="529" left="157" width="30" height="10" font="18"><b>void</b></text>
<text top="529" left="195" width="267" height="10" font="0">replaceClass(String oldClassName) {</text>
<text top="539" left="132" width="6" height="15" font="0">5</text>
<text top="542" left="168" width="15" height="10" font="18"><b>if</b></text>
<text top="542" left="184" width="152" height="10" font="0">(isOldClassLoaded) {</text>
<text top="552" left="132" width="6" height="15" font="0">6</text>
<text top="556" left="180" width="23" height="10" font="0">...</text>
<text top="565" left="132" width="6" height="15" font="0">7</text>
<text top="569" left="180" width="358" height="10" font="0">CtClass c = classpool.getCtClass(oldClassName);</text>
<text top="579" left="132" width="6" height="15" font="0">8</text>
<text top="583" left="180" width="366" height="10" font="0">c.replaceClassName (oldClassName, newClassName);</text>
<text top="592" left="132" width="6" height="15" font="0">9</text>
<text top="596" left="180" width="23" height="10" font="0">...</text>
<text top="606" left="125" width="13" height="15" font="0">10</text>
<text top="610" left="180" width="518" height="10" font="0">ReferenceType refT = targetJVM.classesByName(&#34;UpdateHelper&#34;).get(0);</text>
<text top="619" left="125" width="13" height="15" font="0">11</text>
<text top="623" left="180" width="389" height="10" font="0">ObjectReference uHelper = refT.instances(0).get(0);</text>
<text top="633" left="125" width="13" height="15" font="0">12</text>
<text top="636" left="180" width="526" height="10" font="0">uHelper.invokeMethod(thread, loadClass, args[newClassName], options);</text>
<text top="646" left="125" width="13" height="15" font="0">13</text>
<text top="650" left="168" width="8" height="10" font="0">}</text>
<text top="660" left="125" width="13" height="15" font="0">14</text>
<text top="663" left="157" width="8" height="10" font="0">}</text>
<text top="673" left="125" width="28" height="15" font="0">15 }</text>
<text top="697" left="334" width="222" height="17" font="7">Listing 2. Target VM – class reloading.</text>
<text top="719" left="125" width="13" height="15" font="0">16</text>
<text top="723" left="146" width="38" height="10" font="18"><b>class</b></text>
<text top="723" left="191" width="91" height="10" font="0">UpdateHelper</text>
<text top="723" left="290" width="53" height="10" font="18"><b>extends</b></text>
<text top="723" left="351" width="53" height="10" font="0">Thread{</text>
<text top="732" left="125" width="13" height="15" font="0">17</text>
<text top="736" left="157" width="213" height="10" font="0">ClassLoader origClassLoader;</text>
<text top="746" left="125" width="13" height="15" font="0">18</text>
<text top="750" left="157" width="23" height="10" font="0">...</text>
<text top="759" left="125" width="13" height="15" font="0">19</text>
<text top="763" left="157" width="30" height="10" font="18"><b>void</b></text>
<text top="763" left="195" width="244" height="10" font="0">loadClass(String newClassName) {</text>
<text top="773" left="125" width="13" height="15" font="0">20</text>
<text top="777" left="168" width="305" height="10" font="0">origClassLoader.loadClass(newClassName);</text>
<text top="786" left="125" width="13" height="15" font="0">21</text>
<text top="790" left="157" width="8" height="10" font="0">}</text>
<text top="800" left="125" width="28" height="15" font="0">22 }</text>
<text top="843" left="155" width="44" height="19" font="9">Listing</text>
<text top="843" left="203" width="8" height="19" font="10"><a href="pdfxml.html#7">1</a></text>
<text top="843" left="215" width="450" height="19" font="9">sketches how class loading based on class renaming is implemented in J</text>
<text top="846" left="666" width="17" height="15" font="0">AV</text>
<text top="843" left="682" width="11" height="19" font="9">A</text>
<text top="846" left="693" width="52" height="15" font="0">DAPTOR</text>
<text top="843" left="746" width="4" height="19" font="9">.</text>
<text top="861" left="140" width="610" height="19" font="9">The renamed and updated class (here class TempSensor v2 from our motivating example</text>
<text top="879" left="140" width="116" height="19" font="9">depicted in Figure</text>
<text top="879" left="263" width="8" height="19" font="10"><a href="pdfxml.html#3">1</a></text>
<text top="879" left="270" width="480" height="19" font="9"><a href="pdfxml.html#3">) </a>is created by our adaptation tool (using the source level API of Javassist</text>
<text top="897" left="140" width="319" height="19" font="9">to manipulate the bytecode in Lines 7 and 8, Listing</text>
<text top="897" left="463" width="8" height="19" font="10"><a href="pdfxml.html#7">1</a></text>
<text top="897" left="471" width="279" height="19" font="9"><a href="pdfxml.html#7">). </a>In the next step, the adaptation tool invokes</text>
<text top="915" left="140" width="502" height="19" font="9">method loadClass (Line 12) of class UpdateHelper (Lines 16 – 22, Listing</text>
<text top="915" left="646" width="8" height="19" font="10"><a href="pdfxml.html#7">2</a></text>
<text top="915" left="653" width="97" height="19" font="9"><a href="pdfxml.html#7">), </a>which resides</text>
<text top="933" left="140" width="610" height="19" font="9">in the update thread added to the target application on application start. By invoking loadClass</text>
<text top="951" left="140" width="610" height="19" font="9">within the target application, the new class version is loaded by the same class loader that loaded</text>
<text top="969" left="140" width="156" height="19" font="9">the original class (Listing</text>
<text top="969" left="300" width="8" height="19" font="10"><a href="pdfxml.html#7">2</a></text>
<text top="969" left="308" width="442" height="19" font="9"><a href="pdfxml.html#7">, </a>Line 20), which ensures that our DSU approach is compatible with any</text>
<text top="987" left="140" width="509" height="19" font="9">application employing multiple class loaders (e.g., component based applications).</text>
<text top="1053" left="140" width="5" height="8" font="6"><a href="http://www.youtube.com/watch?v=jZm0hvlhC-E">‡</a></text>
<text top="1056" left="146" width="321" height="10" font="1"><a href="http://www.youtube.com/watch?v=jZm0hvlhC-E">http://www.youtube.com/watch?v=jZm0hvlhC-E</a></text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="8" height="19" font="9">8</text>
<text top="105" left="140" width="157" height="13" font="9">4.3. Caller-Side Updates</text>
<text top="128" left="140" width="610" height="19" font="9">As demonstrated above, our class reloading mechanism allows us to load a new version of an</text>
<text top="146" left="140" width="610" height="19" font="9">already loaded class even if the class schema has changed. However, the mechanism only triggers</text>
<text top="164" left="140" width="610" height="19" font="9">the loading of the updated class. To let the class become part of program execution, all references</text>
<text top="182" left="140" width="610" height="19" font="9">to the original class have to be changed to point to the new class version. For the sake of clarity,</text>
<text top="200" left="140" width="610" height="19" font="9">we will name the classes which hold references to classes to be reloaded (updated) callers and the</text>
<text top="218" left="140" width="610" height="19" font="9">classes subject to updates callees. In addition, the terms caller side and callee side cover the class</text>
<text top="236" left="140" width="196" height="19" font="9">itself as well as all its instances.</text>
<text top="280" left="511" width="11" height="14" font="5">15</text>
<text top="282" left="561" width="73" height="11" font="5">TempDisplay {</text>
<text top="294" left="511" width="11" height="14" font="5">16</text>
<text top="297" left="539" width="17" height="11" font="5">...</text>
<text top="308" left="511" width="11" height="14" font="5">17</text>
<text top="311" left="566" width="44" height="11" font="5">copy() {</text>
<text top="322" left="511" width="11" height="14" font="5">18</text>
<text top="325" left="550" width="17" height="11" font="5">...</text>
<text top="337" left="511" width="11" height="14" font="5">19</text>
<text top="339" left="550" width="116" height="11" font="5">TempSensor v2 local =</text>
<text top="351" left="511" width="11" height="14" font="5">20</text>
<text top="354" left="581" width="91" height="11" font="5">TempSensor v2();</text>
<text top="365" left="511" width="11" height="14" font="5">21</text>
<text top="368" left="550" width="17" height="11" font="5">...</text>
<text top="379" left="511" width="11" height="14" font="5">22</text>
<text top="382" left="539" width="6" height="11" font="5">}</text>
<text top="394" left="511" width="11" height="14" font="5">23</text>
<text top="408" left="511" width="11" height="14" font="5">24</text>
<text top="411" left="566" width="108" height="11" font="5">displayProducer() {</text>
<text top="422" left="511" width="11" height="14" font="5">25</text>
<text top="425" left="550" width="110" height="11" font="5">System.out.println(</text>
<text top="437" left="511" width="11" height="14" font="5">26</text>
<text top="439" left="560" width="166" height="11" font="5">TempSensor v2.getProducer());</text>
<text top="451" left="511" width="11" height="14" font="5">27</text>
<text top="454" left="539" width="6" height="11" font="5">}</text>
<text top="465" left="511" width="24" height="14" font="5">28 }</text>
<text top="280" left="168" width="6" height="14" font="5">1</text>
<text top="282" left="217" width="79" height="11" font="5">TempDisplay {</text>
<text top="294" left="168" width="6" height="14" font="5">2</text>
<text top="297" left="193" width="19" height="11" font="5">...</text>
<text top="308" left="168" width="6" height="14" font="5">3</text>
<text top="311" left="222" width="48" height="11" font="5">copy() {</text>
<text top="322" left="168" width="6" height="14" font="5">4</text>
<text top="325" left="204" width="19" height="11" font="5">...</text>
<text top="337" left="168" width="6" height="14" font="5">5</text>
<text top="339" left="204" width="108" height="11" font="5">TempSensor local =</text>
<text top="351" left="168" width="6" height="14" font="5">6</text>
<text top="354" left="250" width="81" height="11" font="5">TempSensor();</text>
<text top="365" left="168" width="6" height="14" font="5">7</text>
<text top="368" left="204" width="19" height="11" font="5">...</text>
<text top="379" left="168" width="6" height="14" font="5">8</text>
<text top="382" left="193" width="6" height="11" font="5">}</text>
<text top="394" left="168" width="6" height="14" font="5">9</text>
<text top="408" left="162" width="12" height="14" font="5">10</text>
<text top="411" left="222" width="117" height="11" font="5">displayProducer() {</text>
<text top="422" left="162" width="12" height="14" font="5">11</text>
<text top="425" left="204" width="119" height="11" font="5">System.out.println(</text>
<text top="437" left="162" width="12" height="14" font="5">12</text>
<text top="439" left="216" width="163" height="11" font="5">TempSensor.getProducer());</text>
<text top="451" left="162" width="12" height="14" font="5">13</text>
<text top="454" left="193" width="6" height="11" font="5">}</text>
<text top="465" left="162" width="26" height="14" font="5">14 }</text>
<text top="372" left="411" width="68" height="12" font="12">Java HotSwap</text>
<text top="495" left="279" width="332" height="17" font="7">Figure 6. Caller side updates in case of short-lived objects.</text>
<text top="540" left="155" width="574" height="19" font="9">In case of short-lived objects, such as local variable local of class TempDisplay (Figure</text>
<text top="540" left="733" width="8" height="19" font="10"><a href="pdfxml.html#8">6</a></text>
<text top="540" left="741" width="9" height="19" font="9"><a href="pdfxml.html#8">),</a></text>
<text top="558" left="140" width="610" height="19" font="9">only method body redeﬁnitions are required to refer to the new class version. This is, because with</text>
<text top="576" left="140" width="610" height="19" font="9">each method execution, the local variables are newly created. Thus, after redeﬁning a method, such</text>
<text top="594" left="140" width="131" height="19" font="9">as depicted in Figure</text>
<text top="594" left="276" width="8" height="19" font="10"><a href="pdfxml.html#8">6</a></text>
<text top="594" left="283" width="467" height="19" font="9"><a href="pdfxml.html#8">, </a>the local variables created during method execution will be of type of the</text>
<text top="612" left="140" width="610" height="19" font="9">updated class (here of class TempSensor v2). Those updates can be easily located and applied</text>
<text top="630" left="140" width="357" height="19" font="9">using the source level API of Javassist and Java HotSwap.</text>
<text top="648" left="155" width="409" height="19" font="9">A snippet of the corresponding update code is depicted in Listing</text>
<text top="648" left="569" width="8" height="19" font="10"><a href="pdfxml.html#9">3</a></text>
<text top="648" left="576" width="174" height="19" font="9"><a href="pdfxml.html#9">. </a>For each application class,</text>
<text top="666" left="141" width="6" height="19" font="9">J</text>
<text top="668" left="147" width="17" height="15" font="0">AV</text>
<text top="666" left="162" width="11" height="19" font="9">A</text>
<text top="668" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="666" left="232" width="518" height="19" font="9">checks whether the class references the class to be updated. Technically, all classes</text>
<text top="684" left="140" width="610" height="19" font="9">referenced by the caller side are requested using Javassist method getRefClasses (Line 4). If</text>
<text top="702" left="140" width="610" height="19" font="9">references of the old callee class (here of class TempSensor) are found, we update them method by</text>
<text top="719" left="140" width="610" height="19" font="9">method to the updated class (Lines 17-24). After this is done, the updated caller method is redeﬁned</text>
<text top="737" left="140" width="190" height="19" font="9">using Java HotSwap (Line 26).</text>
<text top="755" left="155" width="595" height="19" font="9">Different from references to short-lived objects, references to long-lived objects (such as class</text>
<text top="773" left="140" width="610" height="19" font="9">or instance ﬁeld references) are vital beyond method executions, i.e., they are inherent parts of</text>
<text top="791" left="140" width="610" height="19" font="9">the caller side. Thus, caller-side updates because of references to long-lived objects of type of the</text>
<text top="809" left="140" width="610" height="19" font="9">callee must be handled in a different way. Those updates require four steps: (1) caller detection, (2)</text>
<text top="831" left="140" width="245" height="13" font="9">instantiation of the updated callee class</text>
<text top="827" left="385" width="355" height="19" font="9">, (3) callee-side state mapping, and (4) reference updates.</text>
<text top="875" left="140" width="149" height="13" font="9">4.3.1. Caller Detection.</text>
<text top="871" left="296" width="454" height="19" font="9">In order to replace the references to instances of the original callee class by</text>
<text top="889" left="140" width="610" height="19" font="9">instances of the new callee class version (as required for class TempSensor from our motivating</text>
<text top="907" left="140" width="610" height="19" font="9">example), we have to detect all callers and their instances that refer to long-lived objects of</text>
<text top="924" left="140" width="610" height="19" font="9">the original callee class. The JVMTI supports this operation. A snippet of the caller detection</text>
<text top="942" left="140" width="227" height="19" font="9">implementation is depicted in Listing</text>
<text top="942" left="371" width="8" height="19" font="10"><a href="pdfxml.html#9">4</a></text>
<text top="942" left="378" width="372" height="19" font="9"><a href="pdfxml.html#9">. </a>First, the class object of the old callee class is retrieved from</text>
<text top="960" left="140" width="610" height="19" font="9">the target JVM (Line 4). This object is used to get all instances of the old callee class via reﬂection</text>
<text top="978" left="140" width="610" height="19" font="9">(Line 5). Again, using the instances all callers are retrieved (Line 7). This includes even callers</text>
<text top="996" left="140" width="610" height="19" font="9">whose global ﬁelds are of type of a super class the old class extends, which is possible because the</text>
<text top="1014" left="140" width="474" height="19" font="9">function requests the objects runtime type and not the static type. In addition, J</text>
<text top="1017" left="615" width="17" height="15" font="0">AV</text>
<text top="1014" left="630" width="11" height="19" font="9">A</text>
<text top="1017" left="642" width="52" height="15" font="0">DAPTOR</text>
<text top="1014" left="698" width="52" height="19" font="9">searches</text>
<text top="1032" left="140" width="610" height="19" font="9">all application classes for class and instance ﬁelds of type of the old callee class (using Javassist</text>
<text top="1050" left="140" width="610" height="19" font="9">method getRefClasses). This is necessary in order to detect even caller classes which are not</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="742" width="8" height="19" font="9">9</text>
<text top="102" left="234" width="64" height="17" font="7">Listing 3. J</text>
<text top="105" left="298" width="16" height="14" font="5">AV</text>
<text top="102" left="312" width="10" height="17" font="7">A</text>
<text top="105" left="323" width="48" height="14" font="5">DAPTOR</text>
<text top="102" left="375" width="281" height="17" font="7">– caller-side update in case of short-lived objects.</text>
<text top="124" left="132" width="6" height="15" font="0">1</text>
<text top="128" left="146" width="38" height="10" font="18"><b>class</b></text>
<text top="128" left="191" width="183" height="10" font="0">CallerUpdateShortLived {</text>
<text top="137" left="132" width="6" height="15" font="0">2</text>
<text top="141" left="157" width="23" height="10" font="0">...</text>
<text top="151" left="132" width="6" height="15" font="0">3</text>
<text top="155" left="157" width="30" height="10" font="18"><b>void</b></text>
<text top="155" left="195" width="297" height="10" font="0">detectAndUpdateCaller(CtClass caller) {</text>
<text top="164" left="132" width="6" height="15" font="0">4</text>
<text top="168" left="168" width="305" height="10" font="0">Collection col = caller.getRefClasses();</text>
<text top="178" left="132" width="6" height="15" font="0">5</text>
<text top="182" left="168" width="290" height="10" font="0">Iterator colIterator = col.iterator();</text>
<text top="191" left="132" width="6" height="15" font="0">6</text>
<text top="195" left="168" width="23" height="10" font="0">...</text>
<text top="205" left="132" width="6" height="15" font="0">7</text>
<text top="209" left="168" width="38" height="10" font="18"><b>while</b></text>
<text top="209" left="207" width="191" height="10" font="0">(colIterator.hasNext()) {</text>
<text top="218" left="132" width="6" height="15" font="0">8</text>
<text top="222" left="180" width="373" height="10" font="0">CtClass callee = (CtClass) colIterator.getNext();</text>
<text top="232" left="132" width="6" height="15" font="0">9</text>
<text top="235" left="180" width="15" height="10" font="18"><b>if</b></text>
<text top="235" left="195" width="373" height="10" font="0">(callee.getName().compareTo(oldClassName) == 0) {</text>
<text top="245" left="125" width="13" height="15" font="0">10</text>
<text top="249" left="191" width="145" height="10" font="0">ClassMap classMap =</text>
<text top="249" left="344" width="23" height="10" font="18"><b>new</b></text>
<text top="249" left="374" width="84" height="10" font="0">ClassMap();</text>
<text top="259" left="125" width="13" height="15" font="0">11</text>
<text top="262" left="191" width="343" height="10" font="0">classMap.put(&#34;oldClassName&#34;, &#34;newClassName&#34;);</text>
<text top="272" left="125" width="13" height="15" font="0">12</text>
<text top="276" left="191" width="23" height="10" font="0">...</text>
<text top="285" left="125" width="13" height="15" font="0">13</text>
<text top="289" left="191" width="259" height="10" font="0">callee.replaceClassName(classMap);</text>
<text top="299" left="125" width="13" height="15" font="0">14</text>
<text top="303" left="180" width="8" height="10" font="0">}</text>
<text top="312" left="125" width="13" height="15" font="0">15</text>
<text top="316" left="168" width="8" height="10" font="0">}</text>
<text top="326" left="125" width="13" height="15" font="0">16</text>
<text top="330" left="168" width="23" height="10" font="0">...</text>
<text top="339" left="125" width="13" height="15" font="0">17</text>
<text top="343" left="168" width="373" height="10" font="0">CtMethod[] methods = caller.getDeclaredMethods();</text>
<text top="353" left="125" width="13" height="15" font="0">18</text>
<text top="356" left="168" width="23" height="10" font="0">...</text>
<text top="366" left="125" width="13" height="15" font="0">19</text>
<text top="370" left="168" width="137" height="10" font="0">ExprEditor exprE =</text>
<text top="370" left="313" width="23" height="10" font="18"><b>new</b></text>
<text top="370" left="344" width="145" height="10" font="0">ExprEditor() {...};</text>
<text top="380" left="125" width="13" height="15" font="0">20</text>
<text top="383" left="168" width="23" height="10" font="18"><b>for</b></text>
<text top="383" left="191" width="8" height="10" font="0">(</text>
<text top="383" left="199" width="23" height="10" font="18"><b>int</b></text>
<text top="383" left="229" width="252" height="10" font="0">i = 0; i &lt; methods.length; i++) {</text>
<text top="393" left="125" width="13" height="15" font="0">21</text>
<text top="397" left="180" width="23" height="10" font="0">...</text>
<text top="406" left="125" width="13" height="15" font="0">22</text>
<text top="410" left="180" width="221" height="10" font="0">methods[i].instrument(exprE);</text>
<text top="420" left="125" width="13" height="15" font="0">23</text>
<text top="424" left="180" width="23" height="10" font="0">...</text>
<text top="433" left="125" width="13" height="15" font="0">24</text>
<text top="437" left="168" width="8" height="10" font="0">}</text>
<text top="447" left="125" width="13" height="15" font="0">25</text>
<text top="451" left="168" width="23" height="10" font="0">...</text>
<text top="460" left="125" width="13" height="15" font="0">26</text>
<text top="464" left="168" width="290" height="10" font="0">targetVM.redefineClasses(callerClass);</text>
<text top="474" left="125" width="13" height="15" font="0">27</text>
<text top="478" left="168" width="23" height="10" font="0">...</text>
<text top="487" left="125" width="13" height="15" font="0">28</text>
<text top="491" left="157" width="8" height="10" font="0">}</text>
<text top="501" left="125" width="28" height="15" font="0">29 }</text>
<text top="551" left="324" width="64" height="17" font="7">Listing 4. J</text>
<text top="554" left="387" width="16" height="14" font="5">AV</text>
<text top="551" left="402" width="10" height="17" font="7">A</text>
<text top="554" left="413" width="48" height="14" font="5">DAPTOR</text>
<text top="551" left="465" width="101" height="17" font="7">– caller detection.</text>
<text top="573" left="132" width="6" height="15" font="0">1</text>
<text top="577" left="146" width="38" height="10" font="18"><b>class</b></text>
<text top="577" left="191" width="175" height="10" font="0">CallerUpdateLongLived {</text>
<text top="587" left="132" width="6" height="15" font="0">2</text>
<text top="590" left="157" width="23" height="10" font="0">...</text>
<text top="600" left="132" width="6" height="15" font="0">3</text>
<text top="604" left="157" width="480" height="10" font="0">List&lt;ClassObjectReference&gt; detectCallers(String oldClassName) {</text>
<text top="613" left="132" width="6" height="15" font="0">4</text>
<text top="617" left="168" width="450" height="10" font="0">ReferenceType refL = targetJVM.classesByName(oldClassName);</text>
<text top="627" left="132" width="6" height="15" font="0">5</text>
<text top="631" left="168" width="366" height="10" font="0">List&lt;ObjectReference&gt; oRefL = refL.instances(0);</text>
<text top="640" left="132" width="6" height="15" font="0">6</text>
<text top="644" left="168" width="23" height="10" font="0">...</text>
<text top="654" left="132" width="6" height="15" font="0">7</text>
<text top="658" left="168" width="480" height="10" font="0">List&lt;ObjectReference&gt; cRefL = oRefL.get(i).referringObjects(0);</text>
<text top="667" left="132" width="6" height="15" font="0">8</text>
<text top="671" left="168" width="23" height="10" font="0">...</text>
<text top="681" left="132" width="6" height="15" font="0">9</text>
<text top="694" left="125" width="13" height="15" font="0">10</text>
<text top="698" left="157" width="8" height="10" font="0">}</text>
<text top="708" left="125" width="28" height="15" font="0">11 }</text>
<text top="769" left="140" width="610" height="19" font="9">yet loaded, instantiated, or whose instances do not refer to the callee side because the corresponding</text>
<text top="787" left="140" width="276" height="19" font="9">class or instance ﬁelds are not yet initialized.</text>
<text top="839" left="140" width="208" height="13" font="9">4.3.2. Callee Class Instantiation.</text>
<text top="835" left="356" width="156" height="19" font="9">In the next update step, J</text>
<text top="838" left="512" width="17" height="15" font="0">AV</text>
<text top="835" left="528" width="11" height="19" font="9">A</text>
<text top="838" left="540" width="52" height="15" font="0">DAPTOR</text>
<text top="835" left="597" width="153" height="19" font="9">creates for each instance</text>
<text top="853" left="140" width="610" height="19" font="9">of the original callee class an instance of the new class version (here of class TempSensor v2</text>
<text top="871" left="140" width="610" height="19" font="9">from our motivation). The new instances will be used later on to replace the instances of the old</text>
<text top="889" left="140" width="423" height="19" font="9">class and, thus, to update the caller side (i.e., class TempDisplay).</text>
<text top="907" left="155" width="595" height="19" font="9">Again, the instantiation is triggered by our adaptation tool. The corresponding code is depicted in</text>
<text top="924" left="140" width="44" height="19" font="9">Listing</text>
<text top="924" left="188" width="8" height="19" font="10"><a href="pdfxml.html#10">5</a></text>
<text top="924" left="196" width="554" height="19" font="9"><a href="pdfxml.html#10">. </a>Method createInstance of our update tool takes as argument the name of the new</text>
<text top="942" left="140" width="610" height="19" font="9">class version and invokes method newInst of class UpdateHelper in the target application</text>
<text top="960" left="140" width="311" height="19" font="9">which creates an instance of the new class. Listing</text>
<text top="960" left="456" width="8" height="19" font="10"><a href="pdfxml.html#10">6</a></text>
<text top="960" left="467" width="283" height="19" font="9">shows a code snippet of method newInst of</text>
<text top="978" left="140" width="610" height="19" font="9">the helper class at application side. Via method forName we retrieve the class object of the updated</text>
<text top="996" left="140" width="610" height="19" font="9">class (Line 14). Then we call method allocateInstance of class sun.misc.Unsafe</text>
<text top="1014" left="140" width="610" height="19" font="9">which performs the instantiation. One reason why we use sun.misc.Unsafe instead of method</text>
<text top="1037" left="140" width="102" height="12" font="9">newInstance</text>
<text top="1032" left="246" width="504" height="19" font="9">of class Class for instantiation is that it prevents us from initializing the objects</text>
<text top="1050" left="140" width="610" height="19" font="9">twice, i.e., it would require to initialize the objects when they are created and again when they</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">10</text>
<text top="102" left="332" width="64" height="17" font="7">Listing 5. J</text>
<text top="105" left="396" width="16" height="14" font="5">AV</text>
<text top="102" left="410" width="10" height="17" font="7">A</text>
<text top="105" left="421" width="48" height="14" font="5">DAPTOR</text>
<text top="102" left="474" width="84" height="17" font="7">– instantiation.</text>
<text top="124" left="132" width="6" height="15" font="0">1</text>
<text top="128" left="146" width="38" height="10" font="18"><b>class</b></text>
<text top="128" left="191" width="160" height="10" font="0">UpdateInstantiation {</text>
<text top="137" left="132" width="6" height="15" font="0">2</text>
<text top="141" left="157" width="259" height="10" font="0">ClassObjectReference updateHelper;</text>
<text top="151" left="132" width="6" height="15" font="0">3</text>
<text top="155" left="157" width="23" height="10" font="0">...</text>
<text top="164" left="132" width="6" height="15" font="0">4</text>
<text top="168" left="157" width="30" height="10" font="18"><b>void</b></text>
<text top="168" left="195" width="282" height="10" font="0">createInstance(String newClassName) {</text>
<text top="178" left="132" width="6" height="15" font="0">5</text>
<text top="182" left="168" width="23" height="10" font="0">...</text>
<text top="191" left="132" width="6" height="15" font="0">6</text>
<text top="195" left="168" width="549" height="10" font="0">updateHelper.invokeMethod(thread, newInst, args[newClassName], options);</text>
<text top="205" left="132" width="6" height="15" font="0">7</text>
<text top="209" left="157" width="8" height="10" font="0">}</text>
<text top="218" left="132" width="21" height="15" font="0">8 }</text>
<text top="242" left="341" width="208" height="17" font="7">Listing 6. Target VM – instantiation.</text>
<text top="264" left="132" width="6" height="15" font="0">9</text>
<text top="268" left="146" width="38" height="10" font="18"><b>class</b></text>
<text top="268" left="191" width="91" height="10" font="0">UpdateHelper</text>
<text top="268" left="290" width="53" height="10" font="18"><b>extends</b></text>
<text top="268" left="351" width="61" height="10" font="0">Thread {</text>
<text top="278" left="125" width="13" height="15" font="0">10</text>
<text top="281" left="157" width="107" height="10" font="0">Unsafe unsafe;</text>
<text top="291" left="125" width="13" height="15" font="0">11</text>
<text top="295" left="157" width="213" height="10" font="0">ClassLoader applClassLoader;</text>
<text top="305" left="125" width="13" height="15" font="0">12</text>
<text top="308" left="157" width="23" height="10" font="0">...</text>
<text top="318" left="125" width="13" height="15" font="0">13</text>
<text top="322" left="157" width="229" height="10" font="0">Object newInst(String cName) {</text>
<text top="331" left="125" width="13" height="15" font="0">14</text>
<text top="335" left="168" width="229" height="10" font="0">Class c = Class.forName(cName,</text>
<text top="335" left="405" width="38" height="10" font="18"><b>false</b></text>
<text top="335" left="443" width="145" height="10" font="0">, applClassLoader);</text>
<text top="345" left="125" width="13" height="15" font="0">15</text>
<text top="349" left="168" width="46" height="10" font="18"><b>return</b></text>
<text top="349" left="222" width="206" height="10" font="0">unsafe.allocateInstance(c);</text>
<text top="358" left="125" width="13" height="15" font="0">16</text>
<text top="362" left="157" width="8" height="10" font="0">}</text>
<text top="372" left="125" width="28" height="15" font="0">17 }</text>
<text top="428" left="140" width="610" height="19" font="9">get the state from their outdated counterparts, which would be inefﬁcient. Furthermore, method</text>
<text top="450" left="140" width="102" height="13" font="9">allocateInstance</text>
<text top="446" left="246" width="466" height="19" font="9">eases the instantiation of classes which do not provide a default constructor.</text>
<text top="492" left="140" width="218" height="13" font="9">4.3.3. Callee-Side State Mapping.</text>
<text top="488" left="366" width="258" height="19" font="9">Having ﬁnished the instantiation step, J</text>
<text top="491" left="623" width="17" height="15" font="0">AV</text>
<text top="488" left="639" width="11" height="19" font="9">A</text>
<text top="491" left="651" width="52" height="15" font="0">DAPTOR</text>
<text top="488" left="711" width="39" height="19" font="9">has to</text>
<text top="506" left="140" width="610" height="19" font="9">map the state from old to corresponding new instances. In our example, this means to map the</text>
<text top="524" left="140" width="610" height="19" font="9">state from instances of old class TempSensor to instances of class update TempSensor v2.</text>
<text top="542" left="140" width="610" height="19" font="9">Due to the simplicity of one-to-one mappings (mappings of values from ﬁelds that exist in both</text>
<text top="560" left="140" width="610" height="19" font="9">class versions) and mappings where either ﬁelds are removed or added they can be executed</text>
<text top="578" left="140" width="610" height="19" font="9">automatically. However, for more complex (indeﬁnite) mappings, e.g., mappings where the type of</text>
<text top="596" left="140" width="610" height="19" font="9">a ﬁeld differs between old and new class but the ﬁeld name remains the same, a mapping function</text>
<text top="614" left="140" width="233" height="19" font="9">must be manually deﬁned by the user.</text>
<text top="659" left="140" width="164" height="13" font="9">4.3.4. Reference Updates.</text>
<text top="655" left="311" width="439" height="19" font="9">Finally, once for each instance of the original callee class an instance</text>
<text top="673" left="140" width="610" height="19" font="9">of the new class version has been created and initialized with the state of its outdated counterpart,</text>
<text top="691" left="141" width="6" height="19" font="9">J</text>
<text top="694" left="147" width="17" height="15" font="0">AV</text>
<text top="691" left="162" width="11" height="19" font="9">A</text>
<text top="694" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="691" left="230" width="520" height="19" font="9">updates the caller side. That is, all instances of the original callee class (according our</text>
<text top="709" left="140" width="610" height="19" font="9">motivation class TempSensor) have to be replaced by the instances of the new callee class (here</text>
<text top="727" left="140" width="610" height="19" font="9">class TempSensor v2). Unfortunately, updated and outdated callee class are not type compatible,</text>
<text top="745" left="140" width="610" height="19" font="9">thus, objects of the updated class cannot be assigned to ﬁelds of type of the outdated class (such as</text>
<text top="763" left="140" width="368" height="19" font="9">required to update ﬁeld ts of caller class TempDisplay).</text>
<text top="785" left="155" width="77" height="14" font="9">Containers.</text>
<text top="781" left="239" width="511" height="19" font="9">To solve the type-incompatibility problem while avoiding to change the caller</text>
<text top="799" left="140" width="450" height="19" font="9">class schema, we use containers whose usage is exempliﬁed in Figure</text>
<text top="799" left="596" width="8" height="19" font="10"><a href="pdfxml.html#11">7</a></text>
<text top="799" left="604" width="146" height="19" font="9"><a href="pdfxml.html#11">. </a>Before program start,</text>
<text top="817" left="141" width="6" height="19" font="9">J</text>
<text top="820" left="147" width="17" height="15" font="0">AV</text>
<text top="817" left="162" width="11" height="19" font="9">A</text>
<text top="820" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="817" left="227" width="523" height="19" font="9">JavAdaptor prepares the program for the container approach, i.e., it adds ﬁeld cont</text>
<text top="835" left="140" width="610" height="19" font="9">(Line 17) to each class in the program. The container ﬁeld does not affect program execution as</text>
<text top="853" left="140" width="610" height="19" font="9">long as no callee of the caller class has to be replaced. To replace a callee instance referenced</text>
<text top="871" left="140" width="556" height="19" font="9">by the caller class, the program has to be changed as depicted in the right part of Figure</text>
<text top="871" left="702" width="8" height="19" font="10"><a href="pdfxml.html#11">7</a></text>
<text top="871" left="709" width="41" height="19" font="9"><a href="pdfxml.html#11">. </a>First,</text>
<text top="889" left="140" width="294" height="19" font="9">JavAdaptor creates a container class (see Figure</text>
<text top="889" left="438" width="8" height="19" font="10"><a href="pdfxml.html#11">7</a></text>
<text top="889" left="445" width="305" height="19" font="9"><a href="pdfxml.html#11">, </a>Lines 48 – 52) used to store instances of the new</text>
<text top="907" left="140" width="610" height="19" font="9">callee class (here of class TempSensor v2). Second, our tool assigns the up-to-date counterpart</text>
<text top="924" left="140" width="378" height="19" font="9">of an outdated object (such as referenced by ﬁeld ts in Figure</text>
<text top="924" left="522" width="8" height="19" font="10"><a href="pdfxml.html#11">7</a></text>
<text top="924" left="529" width="221" height="19" font="9"><a href="pdfxml.html#11">) </a>to an instance of the container. The</text>
<text top="942" left="140" width="610" height="19" font="9">container instance containing the up-to-date object is then assigned to ﬁeld cont within the caller</text>
<text top="960" left="140" width="610" height="19" font="9">class (here class TempDisplay). Third, the tool redirects all accesses of the old callee instance to</text>
<text top="978" left="140" width="385" height="19" font="9">the updated callee instance located in the container (see Figure</text>
<text top="978" left="529" width="8" height="19" font="10"><a href="pdfxml.html#11">7</a></text>
<text top="978" left="536" width="214" height="19" font="9"><a href="pdfxml.html#11">, </a>Lines 36 – 38 and Lines 43 – 44),</text>
<text top="996" left="140" width="610" height="19" font="9">i.e., the tool redeﬁnes all method bodies in which the old callee instance is accessed and swaps</text>
<text top="1014" left="140" width="610" height="19" font="9">the resulting method bodies via Java HotSwap. Note that we, for clarity reasons, will remove the</text>
<text top="1032" left="140" width="559" height="19" font="9">necessary downcasts to the speciﬁc container type (as shown in Lines 37 and 43 of Figure</text>
<text top="1032" left="703" width="8" height="19" font="10"><a href="pdfxml.html#11">7</a></text>
<text top="1032" left="711" width="39" height="19" font="9"><a href="pdfxml.html#11">) </a>from</text>
<text top="1050" left="140" width="181" height="19" font="9">the following code examples.</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="19" size="9" family="Times" color="#000000"/>
<text top="56" left="735" width="15" height="19" font="9">11</text>
<text top="109" left="146" width="6" height="14" font="5">1</text>
<text top="112" left="193" width="79" height="11" font="5">TempDisplay {</text>
<text top="123" left="146" width="6" height="14" font="5">2</text>
<text top="126" left="169" width="85" height="11" font="5">TempSensor ts;</text>
<text top="138" left="146" width="6" height="14" font="5">3</text>
<text top="140" left="169" width="19" height="11" font="5">...</text>
<text top="152" left="146" width="6" height="14" font="5">4</text>
<text top="155" left="169" width="91" height="11" font="5">TempDisplay() {</text>
<text top="166" left="146" width="6" height="14" font="5">5</text>
<text top="169" left="180" width="19" height="11" font="5">...</text>
<text top="180" left="146" width="6" height="14" font="5">6</text>
<text top="183" left="180" width="23" height="11" font="5">ts =</text>
<text top="183" left="229" width="81" height="11" font="5">TempSensor();</text>
<text top="195" left="146" width="6" height="14" font="5">7</text>
<text top="197" left="180" width="19" height="11" font="5">...</text>
<text top="209" left="146" width="6" height="14" font="5">8</text>
<text top="211" left="169" width="6" height="11" font="5">}</text>
<text top="223" left="146" width="6" height="14" font="5">9</text>
<text top="237" left="140" width="12" height="14" font="5">10</text>
<text top="240" left="198" width="91" height="11" font="5">displayTemp() {</text>
<text top="251" left="140" width="12" height="14" font="5">11</text>
<text top="254" left="180" width="106" height="11" font="5">ts.averageTemp();</text>
<text top="266" left="140" width="12" height="14" font="5">12</text>
<text top="268" left="180" width="19" height="11" font="5">...</text>
<text top="280" left="140" width="12" height="14" font="5">13</text>
<text top="283" left="169" width="6" height="11" font="5">}</text>
<text top="294" left="140" width="24" height="14" font="5">14 }</text>
<text top="371" left="263" width="66" height="12" font="12">Program Start</text>
<text top="108" left="333" width="12" height="14" font="5">15</text>
<text top="111" left="385" width="79" height="11" font="5">TempDisplay {</text>
<text top="123" left="333" width="12" height="14" font="5">16</text>
<text top="125" left="361" width="85" height="11" font="5">TempSensor ts;</text>
<text top="137" left="333" width="12" height="14" font="5">17</text>
<text top="140" left="361" width="97" height="11" font="5">IContainer cont;</text>
<text top="151" left="333" width="12" height="14" font="5">18</text>
<text top="154" left="361" width="19" height="11" font="5">...</text>
<text top="165" left="333" width="12" height="14" font="5">19</text>
<text top="168" left="361" width="91" height="11" font="5">TempDisplay() {</text>
<text top="179" left="333" width="12" height="14" font="5">20</text>
<text top="182" left="373" width="19" height="11" font="5">...</text>
<text top="194" left="333" width="12" height="14" font="5">21</text>
<text top="196" left="373" width="23" height="11" font="5">ts =</text>
<text top="196" left="422" width="81" height="11" font="5">TempSensor();</text>
<text top="208" left="333" width="12" height="14" font="5">22</text>
<text top="211" left="373" width="19" height="11" font="5">...</text>
<text top="222" left="333" width="12" height="14" font="5">23</text>
<text top="225" left="361" width="6" height="11" font="5">}</text>
<text top="236" left="333" width="12" height="14" font="5">24</text>
<text top="250" left="333" width="12" height="14" font="5">25</text>
<text top="253" left="390" width="91" height="11" font="5">displayTemp() {</text>
<text top="265" left="333" width="12" height="14" font="5">26</text>
<text top="267" left="373" width="106" height="11" font="5">ts.averageTemp();</text>
<text top="279" left="333" width="12" height="14" font="5">27</text>
<text top="282" left="373" width="19" height="11" font="5">...</text>
<text top="293" left="333" width="12" height="14" font="5">28</text>
<text top="296" left="361" width="6" height="11" font="5">}</text>
<text top="307" left="333" width="24" height="14" font="5">29 }</text>
<text top="108" left="524" width="12" height="14" font="5">30</text>
<text top="111" left="577" width="79" height="11" font="5">TempDisplay {</text>
<text top="122" left="524" width="12" height="14" font="5">31</text>
<text top="125" left="553" width="85" height="11" font="5">TempSensor ts;</text>
<text top="137" left="524" width="12" height="14" font="5">32</text>
<text top="139" left="553" width="97" height="11" font="5">IContainer cont;</text>
<text top="151" left="524" width="12" height="14" font="5">33</text>
<text top="153" left="553" width="19" height="11" font="5">...</text>
<text top="165" left="524" width="12" height="14" font="5">34</text>
<text top="168" left="553" width="91" height="11" font="5">TempDisplay() {</text>
<text top="179" left="524" width="12" height="14" font="5">35</text>
<text top="182" left="564" width="19" height="11" font="5">...</text>
<text top="193" left="524" width="12" height="14" font="5">36</text>
<text top="196" left="564" width="35" height="11" font="5">cont =</text>
<text top="196" left="626" width="75" height="11" font="5">Container();</text>
<text top="208" left="524" width="12" height="14" font="5">37</text>
<text top="210" left="564" width="138" height="11" font="5">((Container) cont).ts =</text>
<text top="222" left="524" width="12" height="14" font="5">38</text>
<text top="224" left="643" width="98" height="11" font="5">TempSensor v2();</text>
<text top="236" left="524" width="12" height="14" font="5">39</text>
<text top="239" left="564" width="19" height="11" font="5">...</text>
<text top="250" left="524" width="12" height="14" font="5">40</text>
<text top="253" left="553" width="6" height="11" font="5">}</text>
<text top="264" left="524" width="12" height="14" font="5">41</text>
<text top="279" left="524" width="12" height="14" font="5">42</text>
<text top="281" left="582" width="91" height="11" font="5">displayTemp() {</text>
<text top="293" left="524" width="12" height="14" font="5">43</text>
<text top="295" left="564" width="128" height="11" font="5">((Container) cont).ts</text>
<text top="307" left="524" width="12" height="14" font="5">44</text>
<text top="310" left="648" width="93" height="11" font="5">.currentTemp();</text>
<text top="321" left="524" width="12" height="14" font="5">45</text>
<text top="324" left="564" width="19" height="11" font="5">...</text>
<text top="335" left="524" width="12" height="14" font="5">46</text>
<text top="338" left="553" width="6" height="11" font="5">}</text>
<text top="350" left="524" width="24" height="14" font="5">47 }</text>
<text top="401" left="541" width="12" height="14" font="5">48</text>
<text top="404" left="594" width="56" height="11" font="5">Container</text>
<text top="416" left="541" width="12" height="14" font="5">49</text>
<text top="418" left="659" width="72" height="11" font="5">IContainer {</text>
<text top="430" left="541" width="12" height="14" font="5">50</text>
<text top="433" left="570" width="102" height="11" font="5">TempSensor v2 ts;</text>
<text top="444" left="541" width="12" height="14" font="5">51</text>
<text top="447" left="570" width="19" height="11" font="5">...</text>
<text top="458" left="541" width="24" height="14" font="5">52 }</text>
<text top="371" left="478" width="22" height="12" font="12">DSU</text>
<text top="512" left="185" width="82" height="13" font="5">+averageTemp()</text>
<text top="499" left="192" width="67" height="13" font="19"><b>TempSensor</b></text>
<text top="513" left="594" width="76" height="13" font="5">+currentTemp()</text>
<text top="500" left="594" width="86" height="13" font="19"><b>TempSensor_v2</b></text>
<text top="512" left="376" width="82" height="13" font="5">+averageTemp()</text>
<text top="499" left="384" width="67" height="13" font="19"><b>TempSensor</b></text>
<text top="539" left="385" width="120" height="17" font="7">Figure 7. Containers.</text>
<text top="595" left="155" width="52" height="14" font="9">Proxies.</text>
<text top="592" left="211" width="300" height="19" font="9">The basic container approach described in Figure</text>
<text top="592" left="514" width="8" height="19" font="10"><a href="pdfxml.html#11">7</a></text>
<text top="592" left="525" width="225" height="19" font="9">is sufﬁcient in many cases. However,</text>
<text top="610" left="140" width="610" height="19" font="9">it fails when the caller class to be updated contains methods whose parameters or returned objects</text>
<text top="628" left="140" width="383" height="19" font="9">are of type of the old callee class (such as shown in Figure</text>
<text top="628" left="529" width="8" height="19" font="10"><a href="pdfxml.html#11">8</a></text>
<text top="628" left="537" width="213" height="19" font="9"><a href="pdfxml.html#11">, </a>Line 5 and 9). One workaround</text>
<text top="646" left="140" width="610" height="19" font="9">would be to replace the caller class as well. But, this strategy may result in additional class</text>
<text top="664" left="140" width="610" height="19" font="9">replacements which at the worst require to essentially replace all classes of the system and thus</text>
<text top="682" left="140" width="610" height="19" font="9">let our DSU approach become inefﬁcient. In order to avoid cascading class replacements, we extend</text>
<text top="699" left="140" width="219" height="19" font="9">our approach by proxies (see Figure</text>
<text top="699" left="363" width="8" height="19" font="10"><a href="pdfxml.html#11">8</a></text>
<text top="699" left="371" width="379" height="19" font="9"><a href="pdfxml.html#11">)</a>. Caller updates work in the same manner as described above.</text>
<text top="717" left="140" width="515" height="19" font="9">Only difference is, that, in addition to the container class a proxy class is generated.</text>
<text top="764" left="169" width="6" height="14" font="5">1</text>
<text top="766" left="221" width="79" height="11" font="5">TempDisplay {</text>
<text top="778" left="169" width="6" height="14" font="5">2</text>
<text top="780" left="197" width="85" height="11" font="5">TempSensor ts;</text>
<text top="792" left="169" width="6" height="14" font="5">3</text>
<text top="795" left="197" width="97" height="11" font="5">IContainer cont;</text>
<text top="806" left="169" width="6" height="14" font="5">4</text>
<text top="809" left="197" width="19" height="11" font="5">...</text>
<text top="820" left="169" width="6" height="14" font="5">5</text>
<text top="823" left="197" width="145" height="11" font="5">TempSensor getSensor() {</text>
<text top="834" left="169" width="6" height="14" font="5">6</text>
<text top="837" left="250" width="19" height="11" font="5">ts;</text>
<text top="848" left="169" width="6" height="14" font="5">7</text>
<text top="851" left="197" width="6" height="11" font="5">}</text>
<text top="863" left="169" width="6" height="14" font="5">8</text>
<text top="877" left="169" width="6" height="14" font="5">9</text>
<text top="879" left="226" width="157" height="11" font="5">setSensor(TempSensor ts) {</text>
<text top="891" left="163" width="12" height="14" font="5">10</text>
<text top="894" left="233" width="51" height="11" font="5">.ts = ts;</text>
<text top="905" left="163" width="12" height="14" font="5">11</text>
<text top="908" left="197" width="6" height="11" font="5">}</text>
<text top="919" left="163" width="30" height="14" font="5">12 }</text>
<text top="843" left="428" width="22" height="12" font="12">DSU</text>
<text top="768" left="489" width="12" height="14" font="5">13</text>
<text top="770" left="547" width="77" height="11" font="5">TempDisplay {</text>
<text top="782" left="489" width="12" height="14" font="5">14</text>
<text top="784" left="523" width="83" height="11" font="5">TempSensor ts;</text>
<text top="795" left="489" width="12" height="14" font="5">15</text>
<text top="798" left="523" width="95" height="11" font="5">IContainer cont;</text>
<text top="809" left="489" width="12" height="14" font="5">16</text>
<text top="812" left="523" width="18" height="11" font="5">...</text>
<text top="823" left="489" width="12" height="14" font="5">17</text>
<text top="826" left="523" width="142" height="11" font="5">TempSensor getSensor() {</text>
<text top="837" left="489" width="12" height="14" font="5">18</text>
<text top="839" left="597" width="91" height="11" font="5">Proxy(cont.ts);</text>
<text top="851" left="489" width="12" height="14" font="5">19</text>
<text top="853" left="523" width="6" height="11" font="5">}</text>
<text top="864" left="489" width="12" height="14" font="5">20</text>
<text top="878" left="489" width="12" height="14" font="5">21</text>
<text top="881" left="551" width="154" height="11" font="5">setSensor(TempSensor ts) {</text>
<text top="892" left="489" width="12" height="14" font="5">22</text>
<text top="895" left="534" width="172" height="11" font="5">cont.ts = ((Proxy)ts).update;</text>
<text top="906" left="489" width="12" height="14" font="5">23</text>
<text top="908" left="523" width="6" height="11" font="5">}</text>
<text top="920" left="489" width="29" height="14" font="5">24 }</text>
<text top="971" left="488" width="12" height="15" font="0">25</text>
<text top="974" left="552" width="33" height="11" font="0">Proxy</text>
<text top="974" left="643" width="78" height="11" font="0">TempSensor {</text>
<text top="985" left="488" width="12" height="15" font="0">26</text>
<text top="988" left="525" width="137" height="11" font="0">TempSensor_v2 update;</text>
<text top="1000" left="488" width="12" height="15" font="0">27</text>
<text top="1003" left="525" width="20" height="11" font="0">...</text>
<text top="1014" left="488" width="31" height="15" font="0">28 }</text>
<text top="1047" left="393" width="104" height="17" font="7">Figure 8. Proxies.</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">12</text>
<text top="101" left="155" width="595" height="19" font="9">The idea of proxies is to guide objects of an updated callee class through the caller methods that</text>
<text top="119" left="140" width="610" height="19" font="9">require or return objects of type of the old callee class. The usage of proxies is exempliﬁed on the</text>
<text top="137" left="140" width="610" height="19" font="9">basis of method getSensor of class TempDisplay which returns an instance of callee class</text>
<text top="159" left="140" width="92" height="12" font="9">TempSensor</text>
<text top="155" left="238" width="512" height="19" font="9">(Line 6). After replacing callee class TempSensor by class TempSensor v2,</text>
<text top="173" left="140" width="610" height="19" font="9">method getSensor has to return an instance of the new callee class which is not possible because</text>
<text top="195" left="140" width="92" height="12" font="9">TempSensor</text>
<text top="191" left="237" width="513" height="19" font="9">and TempSensor v2 are not type compatible. To achieve type compatibility, we</text>
<text top="209" left="140" width="610" height="19" font="9">wrap the instance of TempSensor v2 with an instance of class Proxy (Line 18). Since the</text>
<text top="227" left="140" width="610" height="19" font="9">proxy extends class TempSensor, it can be returned by method getSensor. Technically, we</text>
<text top="245" left="140" width="610" height="19" font="9">use method allocateInstance from class sun.misc.Unsafe for the proxy instantiation, because</text>
<text top="262" left="140" width="610" height="19" font="9">it eases the creation of proxy instances even if the proxy’s super class has no default constructor.</text>
<text top="280" left="140" width="610" height="19" font="9">In order to use the returned object wrapped by the proxy at receiver side (i.e., within the class that</text>
<text top="298" left="140" width="610" height="19" font="9">called method getSensor), the object is unwrapped. That is, the proxy is only used to guide</text>
<text top="316" left="140" width="610" height="19" font="9">instances of the new callee class through type incompatible methods. The receiver will ﬁnally work</text>
<text top="334" left="140" width="537" height="19" font="9">with the new callee object and not with the proxy object, which avoids the self-problem <a href="pdfxml.html#32">[</a></text>
<text top="334" left="678" width="15" height="19" font="10"><a href="pdfxml.html#32">26</a></text>
<text top="334" left="693" width="57" height="19" font="9"><a href="pdfxml.html#32">]. </a>How to</text>
<text top="352" left="140" width="610" height="19" font="9">propagate instances of the updated callee class back to the caller (more precisely to the container) is</text>
<text top="370" left="140" width="177" height="19" font="9">exemplarily shown in Figure</text>
<text top="370" left="322" width="8" height="19" font="10"><a href="pdfxml.html#11">8</a></text>
<text top="370" left="333" width="417" height="19" font="9">(Line 22). Before method setSensor is called, its parameter (i.e,</text>
<text top="388" left="140" width="610" height="19" font="9">an instance of TempSensor v2) is wrapped by a proxy. In order to unwrap and use the received</text>
<text top="406" left="140" width="467" height="19" font="9">instance of class TempSensor v2, proxy ts must be cast to type Proxy.</text>
<text top="443" left="308" width="274" height="17" font="7">Listing 7. Bytecode modiﬁcations proxy: return.</text>
<text top="465" left="132" width="197" height="15" font="0">1 TempSensor getSensor() {</text>
<text top="478" left="132" width="6" height="15" font="0">2</text>
<text top="482" left="163" width="69" height="10" font="0">0 aload_0</text>
<text top="491" left="132" width="6" height="15" font="0">3</text>
<text top="495" left="163" width="76" height="10" font="0">1 astore_1</text>
<text top="505" left="132" width="6" height="15" font="0">4</text>
<text top="509" left="163" width="99" height="10" font="0">2 aconst_null</text>
<text top="518" left="132" width="6" height="15" font="0">5</text>
<text top="522" left="163" width="76" height="10" font="0">3 astore_2</text>
<text top="532" left="132" width="6" height="15" font="0">6</text>
<text top="536" left="163" width="69" height="10" font="0">4 aload_1</text>
<text top="545" left="132" width="6" height="15" font="0">7</text>
<text top="549" left="163" width="427" height="10" font="0">5 getfield #15 &lt;TempDisplay.fieldContainer1265725244704&gt;</text>
<text top="559" left="132" width="6" height="15" font="0">8</text>
<text top="562" left="163" width="274" height="10" font="0">8 checkcast #17 &lt;TempDisplay_Cont_1&gt;</text>
<text top="572" left="132" width="6" height="15" font="0">9</text>
<text top="576" left="157" width="297" height="10" font="0">11 getfield #21 &lt;TempDisplay_Cont_1.ts&gt;</text>
<text top="586" left="125" width="13" height="15" font="0">10</text>
<text top="589" left="157" width="84" height="10" font="0">14 astore_2</text>
<text top="599" left="125" width="13" height="15" font="0">11</text>
<text top="603" left="157" width="76" height="10" font="0">15 aload_2</text>
<text top="612" left="125" width="13" height="15" font="0">12</text>
<text top="616" left="157" width="366" height="10" font="0">16 invokestatic #27 &lt;TempSensor Proxy 1.newInst&gt;</text>
<text top="626" left="125" width="13" height="15" font="0">13</text>
<text top="630" left="157" width="221" height="10" font="0">19 checkcast #29 &lt;TempSensor&gt;</text>
<text top="639" left="125" width="13" height="15" font="0">14</text>
<text top="643" left="157" width="76" height="10" font="0">22 areturn</text>
<text top="653" left="125" width="28" height="15" font="0">15 }</text>
<text top="695" left="155" width="203" height="14" font="9">Proxy Bytecode Modiﬁcations.</text>
<text top="691" left="363" width="387" height="19" font="9">Up to this point, most of the required bytecode modiﬁcations</text>
<text top="709" left="140" width="610" height="19" font="9">described above could be processed using the source level API of Javassist which makes bytecode</text>
<text top="727" left="140" width="610" height="19" font="9">modiﬁcations easy to handle. However, the modiﬁcations required to apply proxies exceed the</text>
<text top="745" left="140" width="610" height="19" font="9">power of Javassist’s source level API. The source level API cannot terminate the type of local</text>
<text top="763" left="140" width="610" height="19" font="9">variables referenced through the method’s local variable table. Because parameters are stored in</text>
<text top="781" left="140" width="610" height="19" font="9">local variables by default, it is not possible to apply the code to unwrap them using the source level</text>
<text top="799" left="140" width="610" height="19" font="9">API. The same problem occurs when locally stored objects that have to be returned must be wrapped</text>
<text top="817" left="140" width="610" height="19" font="9">by a proxy. For that reasons, we manage the application of proxies manually, i.e., with the bytecode</text>
<text top="835" left="140" width="135" height="19" font="9">level API of Javassist.</text>
<text top="853" left="155" width="44" height="19" font="9">Listing</text>
<text top="853" left="205" width="8" height="19" font="10"><a href="pdfxml.html#12">7</a></text>
<text top="853" left="220" width="530" height="19" font="9">shows the bytecode modiﬁcations (here of method getSensor of example class</text>
<text top="875" left="140" width="102" height="12" font="9">TempDisplay</text>
<text top="871" left="242" width="508" height="19" font="9">) required to wrap returned objects (Lines 12 and 13). First, we call method</text>
<text top="893" left="140" width="65" height="12" font="9">newInst</text>
<text top="889" left="210" width="540" height="19" font="9">(Line 12) of the Proxy class which takes as parameter an object of the updated callee</text>
<text top="907" left="140" width="610" height="19" font="9">class (here of class TempSensor v2), wraps the object by a newly created proxy instance, and</text>
<text top="924" left="140" width="610" height="19" font="9">returns the proxy. Second, the returned proxy is casted to the type of the old callee class (here of</text>
<text top="942" left="140" width="246" height="19" font="9">example class TempSensor, Line 13).</text>
<text top="960" left="155" width="595" height="19" font="9">How to modify the bytecode in order to unwrap proxy based parameters (here of method</text>
<text top="983" left="140" width="83" height="12" font="9">setSensor</text>
<text top="978" left="227" width="346" height="19" font="9">of example class TempDisplay) is depicted in Listing</text>
<text top="978" left="578" width="8" height="19" font="10"><a href="pdfxml.html#13">8</a></text>
<text top="978" left="589" width="161" height="19" font="9">(Lines 2-5). First, we load</text>
<text top="996" left="140" width="610" height="19" font="9">the parameter stored in a local variable (Line 2). Second, we cast the parameter to the related proxy</text>
<text top="1014" left="140" width="610" height="19" font="9">type (Line 3). Third, we unwrap the updated class instance (here of class TempSensor v2) stored</text>
<text top="1032" left="140" width="610" height="19" font="9">in ﬁeld call of the proxy object (Line 4). Fourth, to avoid recurring unwrappings, the unwrapped</text>
<text top="1050" left="140" width="488" height="19" font="9">instance is stored in the local variable that previously stored the proxy (Line 5).</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="20" size="5" family="Times" color="#000000"/>
<text top="56" left="735" width="15" height="19" font="9">13</text>
<text top="102" left="294" width="302" height="17" font="7">Listing 8. Bytecode modiﬁcations proxy: parameters.</text>
<text top="124" left="132" width="6" height="15" font="0">1</text>
<text top="128" left="146" width="30" height="10" font="18"><b>void</b></text>
<text top="128" left="184" width="198" height="10" font="0">setSensor(TempSensor ts) {</text>
<text top="137" left="132" width="6" height="15" font="0">2</text>
<text top="141" left="163" width="69" height="10" font="0">0 aload 1</text>
<text top="151" left="132" width="6" height="15" font="0">3</text>
<text top="155" left="163" width="274" height="10" font="0">1 checkcast #23 &lt;TempSensor Proxy 1&gt;</text>
<text top="164" left="132" width="6" height="15" font="0">4</text>
<text top="168" left="163" width="305" height="10" font="0">4 getfield #34 &lt;TempSensor Proxy 1.call&gt;</text>
<text top="178" left="132" width="6" height="15" font="0">5</text>
<text top="182" left="163" width="76" height="10" font="0">7 astore 1</text>
<text top="191" left="132" width="6" height="15" font="0">6</text>
<text top="195" left="163" width="69" height="10" font="0">8 aload_0</text>
<text top="205" left="132" width="6" height="15" font="0">7</text>
<text top="209" left="163" width="69" height="10" font="0">9 aload_1</text>
<text top="218" left="132" width="6" height="15" font="0">8</text>
<text top="222" left="157" width="84" height="10" font="0">10 astore_3</text>
<text top="232" left="132" width="6" height="15" font="0">9</text>
<text top="235" left="157" width="84" height="10" font="0">11 astore_2</text>
<text top="245" left="125" width="13" height="15" font="0">10</text>
<text top="249" left="157" width="76" height="10" font="0">12 aload_2</text>
<text top="259" left="125" width="13" height="15" font="0">11</text>
<text top="262" left="157" width="434" height="10" font="0">13 getfield #36 &lt;TempDisplay.fieldContainer1265725244704&gt;</text>
<text top="272" left="125" width="13" height="15" font="0">12</text>
<text top="276" left="157" width="282" height="10" font="0">16 checkcast #17 &lt;TempDisplay_Cont_1&gt;</text>
<text top="285" left="125" width="13" height="15" font="0">13</text>
<text top="289" left="157" width="76" height="10" font="0">19 aload_3</text>
<text top="299" left="125" width="13" height="15" font="0">14</text>
<text top="303" left="157" width="297" height="10" font="0">20 putfield #38 &lt;TempDisplay_Cont_1.ts&gt;</text>
<text top="312" left="125" width="13" height="15" font="0">15</text>
<text top="316" left="157" width="15" height="10" font="0">23</text>
<text top="316" left="180" width="46" height="10" font="18"><b>return</b></text>
<text top="326" left="125" width="28" height="15" font="0">16 }</text>
<text top="385" left="140" width="293" height="13" font="9">4.3.5. Concurrent Updates of Multiple Classes.</text>
<text top="381" left="441" width="309" height="19" font="9">So far, we described the mechanisms and concepts</text>
<text top="399" left="140" width="24" height="19" font="9">of J</text>
<text top="401" left="164" width="17" height="15" font="0">AV</text>
<text top="399" left="180" width="11" height="19" font="9">A</text>
<text top="401" left="192" width="52" height="15" font="0">DAPTOR</text>
<text top="399" left="249" width="453" height="19" font="9">on the basis of the very simple weather station example given in Section</text>
<text top="399" left="707" width="8" height="19" font="10"><a href="pdfxml.html#3">2</a></text>
<text top="399" left="714" width="36" height="19" font="9"><a href="pdfxml.html#3">. </a>This</text>
<text top="416" left="140" width="610" height="19" font="9">example only consists of one single class update and the corresponding caller-side update. However,</text>
<text top="434" left="141" width="6" height="19" font="9">J</text>
<text top="437" left="147" width="17" height="15" font="0">AV</text>
<text top="434" left="162" width="11" height="19" font="9">A</text>
<text top="437" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="434" left="233" width="517" height="19" font="9">does not only allow the developer to update a single class but multiple classes in</text>
<text top="452" left="140" width="610" height="19" font="9">one step, which is essential to update complex real-world applications. On the one hand, this is</text>
<text top="470" left="140" width="610" height="19" font="9">because updates of real-world applications normally span many different classes. On the other</text>
<text top="488" left="140" width="610" height="19" font="9">hand, concurrent updates of multiple classes is essential for inheritance hierarchy updates, because</text>
<text top="506" left="140" width="610" height="19" font="9">superclass updates implicitly require to update and reload corresponding subclasses, too (note that</text>
<text top="524" left="140" width="557" height="19" font="9">we have to reload the subclasses in order to let them extend the new superclass version).</text>
<text top="570" left="250" width="69" height="11" font="13">Class Reloading</text>
<text top="801" left="250" width="85" height="11" font="13">Caller-Side Updates</text>
<text top="589" left="277" width="32" height="11" font="13">Class 1</text>
<text top="589" left="447" width="32" height="11" font="13">Class 3</text>
<text top="589" left="362" width="32" height="11" font="13">Class 2</text>
<text top="589" left="582" width="32" height="11" font="13">Class n</text>
<text top="582" left="520" width="11" height="14" font="0">...</text>
<text top="702" left="280" width="26" height="8" font="20"><b>Class 1</b></text>
<text top="709" left="284" width="19" height="8" font="16">State </text>
<text top="717" left="278" width="28" height="8" font="16">Mapping</text>
<text top="743" left="405" width="81" height="11" font="13">Reference Updates</text>
<text top="774" left="420" width="51" height="14" font="0">HotSwap</text>
<text top="702" left="365" width="28" height="8" font="20"><b>Class 2 </b></text>
<text top="709" left="369" width="19" height="8" font="16">State </text>
<text top="717" left="363" width="28" height="8" font="16">Mapping</text>
<text top="702" left="450" width="28" height="8" font="20"><b>Class 3 </b></text>
<text top="709" left="454" width="19" height="8" font="16">State </text>
<text top="717" left="448" width="28" height="8" font="16">Mapping</text>
<text top="702" left="585" width="28" height="8" font="20"><b>Class n </b></text>
<text top="709" left="589" width="19" height="8" font="16">State </text>
<text top="717" left="584" width="28" height="8" font="16">Mapping</text>
<text top="672" left="401" width="89" height="11" font="13">Caller-Side Detection</text>
<text top="701" left="518" width="11" height="14" font="0">...</text>
<text top="831" left="320" width="251" height="17" font="7">Figure 9. Concurrent multiple class updates.</text>
<text top="871" left="155" width="40" height="19" font="9">Figure</text>
<text top="871" left="201" width="8" height="19" font="10"><a href="pdfxml.html#13">9</a></text>
<text top="871" left="215" width="96" height="19" font="9">sketches how J</text>
<text top="874" left="310" width="17" height="15" font="0">AV</text>
<text top="871" left="326" width="11" height="19" font="9">A</text>
<text top="874" left="338" width="52" height="15" font="0">DAPTOR</text>
<text top="871" left="396" width="354" height="19" font="9">handles concurrent updates of multiple classes. At ﬁrst,</text>
<text top="889" left="141" width="6" height="19" font="9">J</text>
<text top="891" left="147" width="17" height="15" font="0">AV</text>
<text top="889" left="162" width="11" height="19" font="9">A</text>
<text top="891" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="889" left="231" width="409" height="19" font="9">reloads all classes with changed schemas (as described in Section</text>
<text top="889" left="644" width="19" height="19" font="10"><a href="pdfxml.html#7">4.2</a></text>
<text top="889" left="664" width="86" height="19" font="9"><a href="pdfxml.html#7">). </a>Afterwards,</text>
<text top="907" left="140" width="564" height="19" font="9">it identiﬁes all classes (callers) with references to the classes to be reloaded (see Section</text>
<text top="907" left="710" width="31" height="19" font="10"><a href="pdfxml.html#8">4.3.1</a></text>
<text top="907" left="741" width="9" height="19" font="9"><a href="pdfxml.html#8">).</a></text>
<text top="924" left="140" width="610" height="19" font="9">This information is gained in one atomic step for efﬁciency reasons. That is, having an overview</text>
<text top="942" left="140" width="610" height="19" font="9">about all changes required to update the running program allows us to create possible containers and</text>
<text top="960" left="140" width="610" height="19" font="9">proxies in one single step. In addition, we only have to touch each class one-time in order to modify</text>
<text top="978" left="140" width="296" height="19" font="9">its bytecode. However, in the next two steps, J</text>
<text top="981" left="436" width="17" height="15" font="0">AV</text>
<text top="978" left="452" width="11" height="19" font="9">A</text>
<text top="981" left="464" width="52" height="15" font="0">DAPTOR</text>
<text top="978" left="522" width="228" height="19" font="9">creates the new callee instances and</text>
<text top="996" left="140" width="257" height="19" font="9">maps the state (as we described in Section</text>
<text top="996" left="401" width="31" height="19" font="10"><a href="pdfxml.html#9">4.3.2</a></text>
<text top="996" left="435" width="22" height="19" font="9">and</text>
<text top="996" left="460" width="31" height="19" font="10"><a href="pdfxml.html#10">4.3.3</a></text>
<text top="996" left="491" width="109" height="19" font="9"><a href="pdfxml.html#10">). </a>If this is done, J</text>
<text top="999" left="600" width="17" height="15" font="0">AV</text>
<text top="996" left="616" width="11" height="19" font="9">A</text>
<text top="999" left="628" width="52" height="15" font="0">DAPTOR</text>
<text top="996" left="684" width="66" height="19" font="9">updates all</text>
<text top="1014" left="140" width="344" height="19" font="9">references conform to the workﬂow described in Section</text>
<text top="1014" left="488" width="31" height="19" font="10"><a href="pdfxml.html#10">4.3.4</a></text>
<text top="1014" left="519" width="231" height="19" font="9"><a href="pdfxml.html#10">. </a>Since we already gained information</text>
<text top="1032" left="140" width="610" height="19" font="9">about all dependencies between callers and callees, this can be efﬁciently done in one atomic step,</text>
<text top="1050" left="140" width="610" height="19" font="9">too. In the last update step, we update all modiﬁed and hotswapable classes at once using Java</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">14</text>
<text top="101" left="140" width="610" height="19" font="9">HotSwap. This includes not only all callers of reloaded classes, but also classes which are explicitly</text>
<text top="119" left="140" width="160" height="19" font="9">changed by the developer.</text>
<text top="137" left="155" width="89" height="19" font="9">In summary, J</text>
<text top="140" left="245" width="17" height="15" font="0">AV</text>
<text top="137" left="260" width="11" height="19" font="9">A</text>
<text top="140" left="272" width="52" height="15" font="0">DAPTOR</text>
<text top="137" left="330" width="420" height="19" font="9">allows us to ﬂexibly change applications during their runtime. The</text>
<text top="155" left="140" width="610" height="19" font="9">update granularity can vary from minor changes (i.e., of single classes) to system wide changes</text>
<text top="173" left="140" width="245" height="19" font="9">(i.e., of multiple classes). In addition, J</text>
<text top="176" left="386" width="17" height="15" font="0">AV</text>
<text top="173" left="401" width="11" height="19" font="9">A</text>
<text top="176" left="413" width="52" height="15" font="0">DAPTOR</text>
<text top="173" left="471" width="279" height="19" font="9">will only update the changed classes and the</text>
<text top="191" left="140" width="610" height="19" font="9">corresponding caller classes. All other classes remain untouched which minimizes the inﬂuence of</text>
<text top="209" left="140" width="217" height="19" font="9">the update on the running program.</text>
<text top="267" left="388" width="115" height="19" font="9">5. EVALUATION</text>
<text top="303" left="140" width="610" height="19" font="9">Our goal was to develop an update approach which allows running Java applications to be updated</text>
<text top="321" left="140" width="610" height="19" font="9">in every possible way (a feature only known from dynamic languages). In addition, the approach</text>
<text top="338" left="140" width="426" height="19" font="9">should not introduce performance drops. In order to check whether J</text>
<text top="341" left="566" width="17" height="15" font="0">AV</text>
<text top="338" left="582" width="11" height="19" font="9">A</text>
<text top="341" left="594" width="52" height="15" font="0">DAPTOR</text>
<text top="338" left="651" width="99" height="19" font="9">meets the goals,</text>
<text top="356" left="140" width="301" height="19" font="9">we applied it to different non-trivial case studies.</text>
<text top="400" left="140" width="97" height="13" font="9">5.1. HyperSQL</text>
<text top="423" left="140" width="610" height="19" font="9">To simulate a real-world scenario which requires ﬂexible runtime updates, we proceeded as follows.</text>
<text top="441" left="140" width="442" height="19" font="9">We chose a reasonable application to update, which was HyperSQL</text>
<text top="442" left="583" width="5" height="10" font="12">§</text>
<text top="441" left="596" width="154" height="19" font="9">amongst others used by</text>
<text top="463" left="140" width="70" height="13" font="9">OpenOfﬁce</text>
<text top="459" left="215" width="535" height="19" font="9">(we chose HyperSQL because it is a database management system for which runtime</text>
<text top="477" left="140" width="610" height="19" font="9">adaptation promises beneﬁts of no-downtime, it is entirely written in Java, and an open source</text>
<text top="495" left="140" width="610" height="19" font="9">application whose source code is available for the latest program version and earlier versions). We</text>
<text top="513" left="140" width="610" height="19" font="9">started version 1.8.0.9 of it downloaded from the HyperSQL website and applied all changes to</text>
<text top="531" left="140" width="610" height="19" font="9">evolve it to the next version 1.8.0.10 without shutting down the application. After program start, we</text>
<text top="549" left="140" width="337" height="19" font="9">ran the open source database benchmark PolePosition</text>
<text top="550" left="478" width="7" height="10" font="12">¶</text>
<text top="549" left="491" width="259" height="19" font="9">in order to generate and query some data</text>
<text top="567" left="140" width="397" height="19" font="9">which ensured that HyperSQL was fully activated and deployed.</text>
<text top="585" left="155" width="595" height="19" font="9">The new version of HyperSQL (released 9 month after version 1.8.0.9 came out) comes with</text>
<text top="603" left="140" width="610" height="19" font="9">a bunch of changes. It ﬁxes major bugs that cause null-pointer exceptions, problems with views,</text>
<text top="621" left="140" width="610" height="19" font="9">timing issues, corrupted data ﬁles, and deadlocks. Additionally, new and improved functionality</text>
<text top="639" left="140" width="610" height="19" font="9">such as new lock-ﬁle implementations and performance improvements to the web server are</text>
<text top="657" left="140" width="610" height="19" font="9">included. To lift the running program from version 1.8.0.9 to the new version 1.8.0.10, we had</text>
<text top="675" left="140" width="610" height="19" font="9">to update 33 of 353 classes. The updates affected many language constructs (Points 1 – 7 of</text>
<text top="692" left="140" width="34" height="19" font="9">Table</text>
<text top="692" left="181" width="5" height="19" font="10"><a href="pdfxml.html#2">I</a></text>
<text top="692" left="186" width="564" height="19" font="9"><a href="pdfxml.html#2">). </a>In case of 21 out of 33 classes the changes did not affect the class schema, i.e., the</text>
<text top="710" left="140" width="610" height="19" font="9">changes could be applied by our tool solely using Java HotSwap. Apart from that, 12 classes</text>
<text top="728" left="140" width="369" height="19" font="9">were affected by schema-changing program modiﬁcations. J</text>
<text top="731" left="510" width="17" height="15" font="0">AV</text>
<text top="728" left="525" width="11" height="19" font="9">A</text>
<text top="731" left="537" width="52" height="15" font="0">DAPTOR</text>
<text top="728" left="593" width="157" height="19" font="9">replaced them using class</text>
<text top="746" left="140" width="610" height="19" font="9">replacements. The state mappings that came along with the replacements span one-to-one mappings,</text>
<text top="764" left="140" width="370" height="19" font="9">added, and removed ﬁelds, i.e., they were automated by J</text>
<text top="767" left="510" width="17" height="15" font="0">AV</text>
<text top="764" left="526" width="11" height="19" font="9">A</text>
<text top="767" left="538" width="52" height="15" font="0">DAPTOR</text>
<text top="764" left="590" width="43" height="19" font="9">. Table</text>
<text top="764" left="640" width="10" height="19" font="10"><a href="pdfxml.html#15">II</a></text>
<text top="764" left="656" width="94" height="19" font="9">lists all classes</text>
<text top="782" left="140" width="610" height="19" font="9">that had to be replaced. Note that updating class NIOLockFile also included changes to the</text>
<text top="800" left="140" width="610" height="19" font="9">inheritance hierarchy. In addition, with class LockFile$HeartbeatRunner we had to update</text>
<text top="818" left="140" width="610" height="19" font="9">even a nested class. Inheritance hierarchy updates as well as updates that involve nested classes are</text>
<text top="836" left="140" width="91" height="19" font="9">supported by J</text>
<text top="839" left="231" width="17" height="15" font="0">AV</text>
<text top="836" left="247" width="11" height="19" font="9">A</text>
<text top="839" left="259" width="52" height="15" font="0">DAPTOR</text>
<text top="836" left="312" width="105" height="19" font="9">. However, Table</text>
<text top="836" left="421" width="10" height="19" font="10"><a href="pdfxml.html#15">II</a></text>
<text top="836" left="435" width="315" height="19" font="9">provides also information about the required caller</text>
<text top="854" left="140" width="610" height="19" font="9">updates, i.e., how many caller classes are updated in the context of short-lived objects, containers, or</text>
<text top="872" left="140" width="610" height="19" font="9">proxies. The number of references within method bodies that have to be changed to update the caller</text>
<text top="890" left="140" width="610" height="19" font="9">classes is given as well (in brackets). In 148 out of 197 cases (75.1 %) updates because of references</text>
<text top="908" left="140" width="610" height="19" font="9">to short-lived callee objects (via Java HotSwap) were required to update the callers. 21 caller classes</text>
<text top="926" left="140" width="595" height="19" font="9">(10.7 %) had to be updated through containers. 28 caller class updates (14.2 %) required proxies.</text>
<text top="944" left="155" width="595" height="19" font="9">In order to verify that HyperSQL was still correctly working (in a consistent state) after the update,</text>
<text top="961" left="140" width="610" height="19" font="9">we reran the PolePosition benchmark. In the result, HyperSQL passed the benchmark without errors,</text>
<text top="979" left="140" width="610" height="19" font="9">i.e., all database operations were correctly executed after the update. In a second test we checked</text>
<text top="1039" left="140" width="5" height="8" font="6"><a href="http://hsqldb.org/">§</a></text>
<text top="1042" left="146" width="137" height="10" font="1"><a href="http://hsqldb.org/">http://hsqldb.org/</a></text>
<text top="1053" left="140" width="7" height="8" font="6"><a href="http://polepos.sourceforge.net/">¶</a></text>
<text top="1056" left="148" width="236" height="10" font="1"><a href="http://polepos.sourceforge.net/">http://polepos.sourceforge.net/</a></text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="15" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="735" width="15" height="19" font="9">15</text>
<text top="102" left="180" width="82" height="11" font="0">Replaced Class</text>
<text top="102" left="490" width="81" height="11" font="0">Caller Updates</text>
<text top="115" left="180" width="84" height="11" font="0">Kind of Update</text>
<text top="115" left="351" width="148" height="11" font="0">Short-lived Objects (# Ref.)</text>
<text top="115" left="518" width="98" height="11" font="0">Container (# Ref.)</text>
<text top="115" left="635" width="75" height="11" font="0">Proxy (# Ref.)</text>
<text top="130" left="180" width="90" height="15" font="0">FontDialogSwing</text>
<text top="136" left="413" width="24" height="15" font="0">8 (9)</text>
<text top="136" left="556" width="22" height="15" font="0">0 (-)</text>
<text top="136" left="661" width="22" height="15" font="0">0 (-)</text>
<text top="143" left="180" width="48" height="15" font="0">structural</text>
<text top="157" left="180" width="122" height="15" font="0">HsqlDatabaseProperties</text>
<text top="164" left="407" width="37" height="15" font="0">11 (98)</text>
<text top="164" left="552" width="31" height="15" font="0">2 (25)</text>
<text top="164" left="654" width="37" height="15" font="0">11 (23)</text>
<text top="171" left="180" width="52" height="15" font="0">functional</text>
<text top="185" left="180" width="46" height="15" font="0">LockFile</text>
<text top="191" left="413" width="24" height="15" font="0">1 (9)</text>
<text top="191" left="552" width="31" height="15" font="0">10 (5)</text>
<text top="191" left="654" width="37" height="15" font="0">11 (47)</text>
<text top="198" left="180" width="52" height="15" font="0">functional</text>
<text top="212" left="180" width="139" height="15" font="0">LockFile$HeartbeatRunner</text>
<text top="219" left="413" width="24" height="15" font="0">2 (2)</text>
<text top="219" left="556" width="22" height="15" font="0">0 (-)</text>
<text top="219" left="661" width="22" height="15" font="0">0 (-)</text>
<text top="226" left="180" width="52" height="15" font="0">functional</text>
<text top="240" left="180" width="37" height="15" font="0">Logger</text>
<text top="246" left="407" width="37" height="15" font="0">22 (93)</text>
<text top="246" left="552" width="31" height="15" font="0">3 (93)</text>
<text top="246" left="660" width="24" height="15" font="0">3 (4)</text>
<text top="253" left="180" width="48" height="15" font="0">structural</text>
<text top="267" left="180" width="68" height="15" font="0">NIOLockFile</text>
<text top="274" left="414" width="22" height="15" font="0">0 (-)</text>
<text top="274" left="556" width="22" height="15" font="0">0 (-)</text>
<text top="274" left="661" width="22" height="15" font="0">0 (-)</text>
<text top="281" left="180" width="149" height="15" font="0">changed inheritance hierachy</text>
<text top="295" left="180" width="102" height="15" font="0">ScriptReaderZipped</text>
<text top="301" left="413" width="24" height="15" font="0">3 (3)</text>
<text top="301" left="556" width="22" height="15" font="0">0 (-)</text>
<text top="301" left="661" width="22" height="15" font="0">0 (-)</text>
<text top="308" left="180" width="52" height="15" font="0">functional</text>
<text top="322" left="180" width="56" height="15" font="0">SimpleLog</text>
<text top="329" left="407" width="37" height="15" font="0">9 (105)</text>
<text top="329" left="552" width="31" height="15" font="0">3 (27)</text>
<text top="329" left="661" width="22" height="15" font="0">0 (-)</text>
<text top="336" left="180" width="48" height="15" font="0">structural</text>
<text top="350" left="180" width="31" height="15" font="0">Token</text>
<text top="356" left="407" width="37" height="15" font="0">5 (671)</text>
<text top="356" left="556" width="22" height="15" font="0">0 (-)</text>
<text top="356" left="661" width="22" height="15" font="0">0 (-)</text>
<text top="363" left="180" width="48" height="15" font="0">structural</text>
<text top="377" left="180" width="28" height="15" font="0">Trace</text>
<text top="384" left="400" width="50" height="15" font="0">80 (1306)</text>
<text top="384" left="556" width="22" height="15" font="0">0 (-)</text>
<text top="384" left="661" width="22" height="15" font="0">0 (-)</text>
<text top="391" left="180" width="48" height="15" font="0">structural</text>
<text top="405" left="180" width="43" height="15" font="0">Transfer</text>
<text top="411" left="413" width="24" height="15" font="0">4 (6)</text>
<text top="411" left="556" width="22" height="15" font="0">0 (-)</text>
<text top="411" left="661" width="22" height="15" font="0">0 (-)</text>
<text top="418" left="180" width="48" height="15" font="0">structural</text>
<text top="432" left="180" width="26" height="15" font="0">View</text>
<text top="439" left="410" width="31" height="15" font="0">3 (37)</text>
<text top="439" left="552" width="31" height="15" font="0">3 (13)</text>
<text top="439" left="657" width="31" height="15" font="0">3 (16)</text>
<text top="446" left="180" width="52" height="15" font="0">functional</text>
<text top="476" left="140" width="610" height="17" font="7">Table II. HyperSQL: Required class reloadings because of schema changes. The table lists all classes to be</text>
<text top="491" left="140" width="610" height="17" font="7">reloaded. It furthermore provides information on the required caller updates, i.e., how many referring classes</text>
<text top="506" left="140" width="610" height="17" font="7">are updated in the context of short-lived objects, containers, or proxies. The number of updated references</text>
<text top="521" left="361" width="166" height="17" font="7">is given as well (in brackets).</text>
<text top="581" left="140" width="610" height="19" font="9">whether the updates were applied and active. Therefore, we hooked the JVM proﬁler VisualVM into</text>
<text top="599" left="140" width="610" height="19" font="9">the running application and checked what classes/methods were executed during the PolePosition</text>
<text top="617" left="140" width="610" height="19" font="9">benchmark. We found out that 5 of the 12 replaced classes were active and central part of program</text>
<text top="635" left="140" width="610" height="19" font="9">execution during the PolePosition benchmark which conﬁrms that they were updated correctly. The</text>
<text top="653" left="140" width="610" height="19" font="9">remaining 7 classes were correctly loaded into the JVM, but inactive during the benchmark. Thus,</text>
<text top="671" left="140" width="242" height="19" font="9">we could verify their correct execution.</text>
<text top="710" left="140" width="109" height="13" font="9">5.2. Refactorings</text>
<text top="733" left="140" width="529" height="19" font="9">With the HyperSQL case study we demonstrated the ﬂexibility and practicability of J</text>
<text top="736" left="670" width="17" height="15" font="0">AV</text>
<text top="733" left="685" width="11" height="19" font="9">A</text>
<text top="736" left="697" width="52" height="15" font="0">DAPTOR</text>
<text top="751" left="140" width="610" height="19" font="9">on the basis of a real-world application. However, we could continue indeﬁnitely updating speciﬁc</text>
<text top="769" left="140" width="610" height="19" font="9">real-world applications which demonstrate the capabilities of our tool and would end up each time</text>
<text top="787" left="140" width="610" height="19" font="9">with just another case study. The problem with case studies such as HyperSQL is that they present</text>
<text top="805" left="140" width="610" height="19" font="9">speciﬁc update scenarios, which may not cover all eventualities and thus do not allow us to draw</text>
<text top="823" left="140" width="271" height="19" font="9">conclusions on the general applicability of J</text>
<text top="825" left="412" width="17" height="15" font="0">AV</text>
<text top="823" left="427" width="11" height="19" font="9">A</text>
<text top="825" left="439" width="52" height="15" font="0">DAPTOR</text>
<text top="823" left="492" width="4" height="19" font="9">.</text>
<text top="841" left="155" width="215" height="19" font="9">To get a better understanding of J</text>
<text top="843" left="370" width="17" height="15" font="0">AV</text>
<text top="841" left="386" width="11" height="19" font="9">A</text>
<text top="843" left="398" width="52" height="15" font="0">DAPTOR</text>
<text top="841" left="451" width="299" height="19" font="9">’s general applicability, we followed a different</text>
<text top="858" left="140" width="610" height="19" font="9">path and checked if the tool would be able to dynamically apply common program updates, i.e,</text>
<text top="876" left="140" width="610" height="19" font="9">updates, that frequently occur in practice and do not rely on certain application scenarios. But, what</text>
<text top="894" left="140" width="400" height="19" font="9">are common program updates and how could we unbiased test if J</text>
<text top="897" left="540" width="17" height="15" font="0">AV</text>
<text top="894" left="556" width="11" height="19" font="9">A</text>
<text top="897" left="568" width="52" height="15" font="0">DAPTOR</text>
<text top="894" left="624" width="126" height="19" font="9">is able to apply them</text>
<text top="912" left="140" width="310" height="19" font="9">to running applications? We found Refactorings <a href="pdfxml.html#33">[</a></text>
<text top="912" left="451" width="15" height="19" font="10"><a href="pdfxml.html#33">32</a></text>
<text top="912" left="466" width="284" height="19" font="9"><a href="pdfxml.html#33">] </a>to be appropriate for our analysis. Actually,</text>
<text top="930" left="140" width="112" height="19" font="9">Dig and Johnson <a href="pdfxml.html#32">[</a></text>
<text top="930" left="253" width="8" height="19" font="10"><a href="pdfxml.html#32">9</a></text>
<text top="930" left="260" width="100" height="19" font="9"><a href="pdfxml.html#32">] </a>found out that:</text>
<text top="961" left="169" width="547" height="13" font="9">Refactorings cause more than 80 % of API changes that were not backwards-compatible.</text>
<text top="985" left="155" width="340" height="19" font="9">Once we decided to prove the general applicability of J</text>
<text top="988" left="495" width="17" height="15" font="0">AV</text>
<text top="985" left="511" width="11" height="19" font="9">A</text>
<text top="988" left="523" width="52" height="15" font="0">DAPTOR</text>
<text top="985" left="579" width="171" height="19" font="9">on the basis of refactorings,</text>
<text top="1003" left="140" width="610" height="19" font="9">we had to reason about a test setup which ensures the tests to be unbiased. Our tests base on</text>
<text top="1056" left="147" width="229" height="10" font="1"><a href="https://visualvm.dev.java.net/">https://visualvm.dev.java.net/</a></text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="21" size="6" family="Times" color="#000000"/>
	<fontspec id="22" size="15" family="Times" color="#ff0000"/>
<text top="56" left="140" width="15" height="19" font="9">16</text>
<text top="101" left="140" width="239" height="19" font="9">the refactorings presented by Fowler <a href="pdfxml.html#32">[</a></text>
<text top="101" left="379" width="15" height="19" font="10"><a href="pdfxml.html#32">11</a></text>
<text top="101" left="395" width="355" height="19" font="9"><a href="pdfxml.html#32">], </a>which is the standard reference regarding refactorings.</text>
<text top="119" left="140" width="610" height="19" font="9">To achieve an unbiased test setup, we simply took the example programs from Fowler and</text>
<text top="137" left="140" width="183" height="19" font="9">refactored them at runtime. J</text>
<text top="140" left="323" width="17" height="15" font="0">AV</text>
<text top="137" left="339" width="11" height="19" font="9">A</text>
<text top="140" left="351" width="52" height="15" font="0">DAPTOR</text>
<text top="137" left="409" width="341" height="19" font="9">was able to process all refactorings including possible</text>
<text top="155" left="140" width="610" height="19" font="9">state mappings. 61 out of the 72 refactorings (ca. 84 percent) required class reloadings. Reference</text>
<text top="173" left="140" width="610" height="19" font="9">updates because of class reloadings required containers in 57 out of 61 cases (ca. 93 %) and proxies</text>
<text top="191" left="140" width="610" height="19" font="9">in 3 out of 61 cases (ca. 5 percent). State mappings could be automatically processed in 41 out of</text>
<text top="209" left="140" width="597" height="19" font="9">61 cases (ca. 67 %), while mapping methods were required in 20 out of 61 cases (ca. 33 percent).</text>
<text top="227" left="155" width="418" height="19" font="9">To sum up, the results of our refactoring case study show that J</text>
<text top="229" left="574" width="17" height="15" font="0">AV</text>
<text top="227" left="589" width="11" height="19" font="9">A</text>
<text top="229" left="601" width="52" height="15" font="0">DAPTOR</text>
<text top="227" left="660" width="90" height="19" font="9">covers a large</text>
<text top="245" left="140" width="610" height="19" font="9">bandwidth of different update scenarios and chances are high that the tool performs well when</text>
<text top="262" left="140" width="293" height="19" font="9">it must update concrete real-world applications.</text>
<text top="311" left="140" width="110" height="13" font="9">5.3. Performance</text>
<text top="334" left="140" width="141" height="19" font="9">Having demonstrated J</text>
<text top="337" left="281" width="17" height="15" font="0">AV</text>
<text top="334" left="297" width="11" height="19" font="9">A</text>
<text top="337" left="309" width="52" height="15" font="0">DAPTOR</text>
<text top="334" left="361" width="389" height="19" font="9">’s capabilities regarding ﬂexible updates, it is time to take a look</text>
<text top="352" left="140" width="610" height="19" font="9">at the performance penalties induced by our tool, i.e., the execution speed of the changed program</text>
<text top="370" left="140" width="34" height="19" font="9">parts.</text>
<text top="860" left="333" width="39" height="9" font="6">No Update</text>
<text top="860" left="453" width="23" height="9" font="6">Callee</text>
<text top="860" left="564" width="21" height="9" font="6">Caller</text>
<text top="445" left="361" width="24" height="9" font="21"><b>Callee</b></text>
<text top="470" left="362" width="23" height="9" font="21"><b>Caller</b></text>
<text top="420" left="353" width="40" height="9" font="21"><b>No Update</b></text>
<text top="486" left="543" width="20" height="9" font="6">19,79</text>
<text top="486" left="488" width="5" height="9" font="6">0</text>
<text top="486" left="417" width="27" height="9" font="6">set&amp;get</text>
<text top="486" left="609" width="11" height="9" font="6">4,2</text>
<text top="478" left="425" width="11" height="9" font="6">set</text>
<text top="478" left="609" width="11" height="9" font="6">3,3</text>
<text top="478" left="488" width="5" height="9" font="6">0</text>
<text top="478" left="543" width="20" height="9" font="6">15,61</text>
<text top="470" left="488" width="5" height="9" font="6">0</text>
<text top="470" left="543" width="20" height="9" font="6">12,79</text>
<text top="470" left="425" width="11" height="9" font="6">get</text>
<text top="470" left="609" width="11" height="9" font="6">2,9</text>
<text top="453" left="609" width="11" height="9" font="6">7,3</text>
<text top="445" left="609" width="11" height="9" font="6">9,4</text>
<text top="420" left="609" width="11" height="9" font="6">2,7</text>
<text top="429" left="612" width="5" height="9" font="6">3</text>
<text top="412" left="590" width="50" height="9" font="21"><b>Outliers in %</b></text>
<text top="462" left="609" width="11" height="9" font="6">9,1</text>
<text top="437" left="609" width="11" height="9" font="6">2,9</text>
<text top="412" left="416" width="29" height="9" font="21"><b>Method</b></text>
<text top="453" left="548" width="9" height="9" font="6">38</text>
<text top="453" left="425" width="11" height="9" font="6">set</text>
<text top="445" left="548" width="9" height="9" font="6">46</text>
<text top="437" left="488" width="5" height="9" font="6">0</text>
<text top="420" left="545" width="16" height="9" font="6">13,8</text>
<text top="429" left="543" width="20" height="9" font="6">13,93</text>
<text top="412" left="465" width="49" height="9" font="21"><b>Median in ns</b></text>
<text top="429" left="425" width="11" height="9" font="6">set</text>
<text top="429" left="488" width="5" height="9" font="6">0</text>
<text top="412" left="532" width="42" height="9" font="21"><b>Mean in ns</b></text>
<text top="420" left="488" width="5" height="9" font="6">0</text>
<text top="462" left="545" width="16" height="9" font="6">53,5</text>
<text top="445" left="425" width="11" height="9" font="6">get</text>
<text top="462" left="417" width="27" height="9" font="6">set&amp;get</text>
<text top="453" left="488" width="5" height="9" font="6">0</text>
<text top="420" left="425" width="11" height="9" font="6">get</text>
<text top="437" left="543" width="20" height="9" font="6">13,73</text>
<text top="462" left="488" width="5" height="9" font="6">0</text>
<text top="445" left="488" width="5" height="9" font="6">0</text>
<text top="437" left="417" width="27" height="9" font="6">set&amp;get</text>
<text top="764" left="272" width="0" height="10" font="13">200000</text>
<text top="702" left="272" width="0" height="10" font="13">400000</text>
<text top="812" left="272" width="0" height="10" font="13">0</text>
<text top="641" left="272" width="0" height="10" font="13">600000</text>
<text top="580" left="272" width="0" height="10" font="13">800000</text>
<text top="521" left="272" width="0" height="10" font="13">1000000</text>
<text top="883" left="140" width="610" height="17" font="7">Figure 10. Method execution times in the presence of proxies. Meaning of the plotted elements: —— =</text>
<text top="901" left="140" width="52" height="17" font="7">box plot,</text>
<text top="900" left="210" width="58" height="19" font="9">= outlier,</text>
<text top="903" left="273" width="15" height="14" font="10">—</text>
<text top="900" left="294" width="280" height="19" font="9">= low concentration of overlapping outliers,</text>
<text top="900" left="600" width="150" height="19" font="9">= high concentration of</text>
<text top="918" left="382" width="127" height="19" font="9">overlapping outliers.</text>
<text top="960" left="155" width="437" height="19" font="9">Because we were primarily interested in getting to know how J</text>
<text top="963" left="593" width="17" height="15" font="0">AV</text>
<text top="960" left="608" width="11" height="19" font="9">A</text>
<text top="963" left="620" width="52" height="15" font="0">DAPTOR</text>
<text top="960" left="682" width="68" height="19" font="9">affects the</text>
<text top="978" left="140" width="610" height="19" font="9">performance of a real-world application, we chose our HyperSQL case study and proceeded</text>
<text top="996" left="140" width="610" height="19" font="9">as follows. We ran the PolePosition benchmark (mentioned above) immediately after runtime</text>
<text top="1014" left="140" width="610" height="19" font="9">updating HyperSQL to version 1.8.0.10 and compared the results with the benchmark results</text>
<text top="1032" left="140" width="610" height="19" font="9">of HyperSQL version 1.8.0.10 not updated at runtime. We could not measure any statistically</text>
<text top="1050" left="140" width="610" height="19" font="9">signiﬁcant difference, i.e, the benchmark results of the HyperSQL instance updated at runtime were</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="17" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="735" width="15" height="19" font="9">17</text>
<text top="101" left="140" width="610" height="19" font="9">as good as the results of the HyperSQL instance not updated at runtime. In other words, the runtime</text>
<text top="119" left="140" width="562" height="19" font="9">updates performed by us did not affect the performance of HyperSQL in a measurable way.</text>
<text top="137" left="155" width="595" height="19" font="9">However, even if we did not measure performance penalties because of our runtime update</text>
<text top="155" left="140" width="610" height="19" font="9">approach in a real-world scenario, we assumed that our approach does not come entirely without</text>
<text top="173" left="140" width="610" height="19" font="9">performance overhead in some borderline cases. To get evidence about this assumption, we</text>
<text top="191" left="140" width="610" height="19" font="9">additionally implemented a micro benchmark that is able to detect even minimal performance</text>
<text top="209" left="140" width="610" height="19" font="9">penalties. It measures the costs of crossing the version barrier from old program parts (i.e., callers)</text>
<text top="227" left="140" width="235" height="19" font="9">to the new ones (i.e., updated callees).</text>
<text top="245" left="155" width="595" height="19" font="9">To get reliable results, we ran ten samples of one million invocations of all major invocation types</text>
<text top="262" left="140" width="610" height="19" font="9">and for each calculated the average access time in nanoseconds. For containers and local updates,</text>
<text top="280" left="140" width="610" height="19" font="9">no statistically signiﬁcant performance overhead was measurable (calculated through a one-way</text>
<text top="298" left="140" width="610" height="19" font="9">analysis of variance), i.e., programs updated using containers and local updates perform as fast as</text>
<text top="316" left="140" width="610" height="19" font="9">the original program. One reason for the good results is the just-in-time compiler of the JVM that is</text>
<text top="334" left="140" width="366" height="19" font="9">able to optimize the code used to instrument the containers.</text>
<text top="352" left="155" width="63" height="19" font="9">In Section</text>
<text top="352" left="223" width="31" height="19" font="10"><a href="pdfxml.html#10">4.3.4</a></text>
<text top="352" left="254" width="496" height="19" font="9"><a href="pdfxml.html#10">, </a>we described the need for proxies to avoid implicit caller replacements in case</text>
<text top="370" left="140" width="610" height="19" font="9">the callee appears to be an argument of a caller method, returned by a caller method, or both. To</text>
<text top="388" left="140" width="610" height="19" font="9">ﬁgure out possible execution speed penalties due to our proxy approach, we again ran ten samples</text>
<text top="406" left="140" width="610" height="19" font="9">of one million (get-, set-, and set&amp;get-) method invocations and recorded the method access times.</text>
<text top="424" left="140" width="392" height="19" font="9">The boxplots of the recorded access times are shown in Figure</text>
<text top="424" left="537" width="15" height="19" font="10"><a href="pdfxml.html#16">10</a></text>
<text top="424" left="552" width="198" height="19" font="9"><a href="pdfxml.html#16">. </a>The average access times with</text>
<text top="446" left="140" width="67" height="13" font="9">No Update</text>
<text top="442" left="211" width="113" height="19" font="9">(left part of Figure</text>
<text top="442" left="328" width="15" height="19" font="10"><a href="pdfxml.html#16">10</a></text>
<text top="442" left="343" width="407" height="19" font="9"><a href="pdfxml.html#16">) </a>range from 13,73 ns to 13,93 ns, with a median access time value</text>
<text top="460" left="140" width="610" height="19" font="9">of 0 ns and only 2,7 % to 3 % outliers. When we reload the Callee and thus have to use proxies,</text>
<text top="478" left="140" width="367" height="19" font="9">the average method access times increase (middle of Figure</text>
<text top="478" left="511" width="15" height="19" font="10"><a href="pdfxml.html#16">10</a></text>
<text top="478" left="526" width="224" height="19" font="9"><a href="pdfxml.html#16">) </a>now ranging from 38 ns to 53,5 ns,</text>
<text top="496" left="140" width="610" height="19" font="9">while the median is still at 0 ns (7,3 % – 9,4 % outliers). That is, dynamic updates involving proxies</text>
<text top="514" left="140" width="261" height="19" font="9">introduce slight execution speed penalties.</text>
<text top="531" left="155" width="595" height="19" font="9">In order to get to know how the results scale, we put some workload on the methods and let</text>
<text top="549" left="140" width="403" height="19" font="9">them process statement System.out.println(&#34;Hello J</text>
<text top="556" left="545" width="17" height="10" font="0">A V</text>
<text top="554" left="562" width="9" height="12" font="9">A</text>
<text top="556" left="572" width="54" height="10" font="0">D A P T O R</text>
<text top="554" left="627" width="18" height="12" font="9">&#34;)</text>
<text top="549" left="645" width="105" height="19" font="9">. The results are</text>
<text top="567" left="140" width="104" height="19" font="9">shown in Figure</text>
<text top="567" left="251" width="15" height="19" font="10"><a href="pdfxml.html#18">11</a></text>
<text top="567" left="266" width="484" height="19" font="9"><a href="pdfxml.html#18">. </a>As one can see, the times to execute the method bodies are much higher</text>
<text top="585" left="140" width="610" height="19" font="9">than the method access times, which results in similar overall method execution times with and</text>
<text top="603" left="140" width="610" height="19" font="9">without proxies, ranging from 8892 ns to 11210 ns on average. That is, workload on methods (which</text>
<text top="621" left="140" width="610" height="19" font="9">should be the common case) renders the performance overhead introduced by proxies negligible. In</text>
<text top="639" left="140" width="610" height="19" font="9">addition, reloading the referring class (i.e., the Caller) as well, almost recovers the original method</text>
<text top="657" left="140" width="211" height="19" font="9">access times (right part of Figure</text>
<text top="657" left="356" width="15" height="19" font="10"><a href="pdfxml.html#16">10</a></text>
<text top="657" left="372" width="378" height="19" font="9"><a href="pdfxml.html#16">). </a>The average access times after reloading the caller, range</text>
<text top="675" left="140" width="562" height="19" font="9">from 12,79 ns to 19,79 ns, with a median access time value of 0 ns (2,9 % – 4,2 % outliers).</text>
<text top="693" left="155" width="595" height="19" font="9">All in all, the results of our HyperSQL case study and the micro benchmark conﬁrm that runtime</text>
<text top="711" left="140" width="143" height="19" font="9">program changes by J</text>
<text top="714" left="283" width="17" height="15" font="0">AV</text>
<text top="711" left="299" width="11" height="19" font="9">A</text>
<text top="714" left="311" width="52" height="15" font="0">DAPTOR</text>
<text top="711" left="370" width="380" height="19" font="9">produce only minimal performance overhead. Only proxies</text>
<text top="729" left="140" width="610" height="19" font="9">produce a measurable overhead. Caller updates through local changes and containers do not cause</text>
<text top="747" left="140" width="194" height="19" font="9">measurable performance drops.</text>
<text top="794" left="140" width="117" height="13" font="9">5.4. Update Speed</text>
<text top="817" left="140" width="266" height="19" font="9">Even if the contributions of our current J</text>
<text top="820" left="406" width="17" height="15" font="0">AV</text>
<text top="817" left="422" width="11" height="19" font="9">A</text>
<text top="820" left="434" width="52" height="15" font="0">DAPTOR</text>
<text top="817" left="493" width="257" height="19" font="9">implementation are others than applying</text>
<text top="835" left="140" width="305" height="19" font="9">updates the fastest way, we evaluated how well J</text>
<text top="838" left="445" width="17" height="15" font="0">AV</text>
<text top="835" left="461" width="11" height="19" font="9">A</text>
<text top="838" left="473" width="52" height="15" font="0">DAPTOR</text>
<text top="835" left="530" width="220" height="19" font="9">performs in this regard. That is, we</text>
<text top="853" left="140" width="123" height="19" font="9">measured the time J</text>
<text top="856" left="263" width="17" height="15" font="0">AV</text>
<text top="853" left="279" width="11" height="19" font="9">A</text>
<text top="856" left="291" width="52" height="15" font="0">DAPTOR</text>
<text top="853" left="347" width="403" height="19" font="9">pauses the application during the update process in order to avoid</text>
<text top="871" left="140" width="610" height="19" font="9">program inconsistencies. Our measurements base on two different programs representing different</text>
<text top="889" left="140" width="133" height="19" font="9">application scenarios.</text>
<text top="907" left="155" width="595" height="19" font="9">At ﬁrst, we measured the time required to update our HyperSQL case study under different</text>
<text top="924" left="140" width="610" height="19" font="9">conditions. With our ﬁrst test, we measured the time period required to update HyperSQL with</text>
<text top="942" left="140" width="610" height="19" font="9">an empty database (i.e., without any data object stored), which was 1407 milliseconds. In further</text>
<text top="960" left="140" width="610" height="19" font="9">tests, we ran the PolePosition benchmark creating hundreds, thousands, ten thousands, and hundred</text>
<text top="978" left="140" width="610" height="19" font="9">thousands of data objects before the update. The corresponding update times ranged from 1518</text>
<text top="996" left="140" width="610" height="19" font="9">milliseconds to 5346 milliseconds, which seems to be not outstanding fast but sufﬁcient in many</text>
<text top="1014" left="140" width="610" height="19" font="9">scenarios. By contrast, restarts and reinitializations of HyperSQL (e.g., ﬁlling caches, reloading data</text>
<text top="1032" left="140" width="610" height="19" font="9">objects, creating views, creating users, etc.), as we simulated them using PolePosition, took more</text>
<text top="1050" left="140" width="31" height="19" font="9">time.</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">18</text>
<text top="550" left="334" width="39" height="9" font="6">No Update</text>
<text top="550" left="453" width="23" height="9" font="6">Callee</text>
<text top="550" left="565" width="21" height="9" font="6">Caller</text>
<text top="135" left="361" width="24" height="9" font="21"><b>Callee</b></text>
<text top="160" left="362" width="23" height="9" font="21"><b>Caller</b></text>
<text top="111" left="353" width="40" height="9" font="21"><b>No Update</b></text>
<text top="177" left="481" width="23" height="9" font="6">10730</text>
<text top="177" left="417" width="27" height="9" font="6">set&amp;get</text>
<text top="169" left="425" width="11" height="9" font="6">set</text>
<text top="169" left="481" width="23" height="9" font="6">10730</text>
<text top="160" left="481" width="23" height="9" font="6">10729</text>
<text top="160" left="425" width="11" height="9" font="6">get</text>
<text top="102" left="416" width="29" height="9" font="21"><b>Method</b></text>
<text top="144" left="481" width="23" height="9" font="6">10729</text>
<text top="144" left="425" width="11" height="9" font="6">set</text>
<text top="135" left="481" width="23" height="9" font="6">10730</text>
<text top="111" left="482" width="21" height="9" font="6">11196</text>
<text top="119" left="481" width="23" height="9" font="6">10729</text>
<text top="119" left="425" width="11" height="9" font="6">set</text>
<text top="102" left="468" width="49" height="9" font="21"><b>Median in ns</b></text>
<text top="152" left="481" width="23" height="9" font="6">10729</text>
<text top="135" left="425" width="11" height="9" font="6">get</text>
<text top="152" left="417" width="27" height="9" font="6">set&amp;get</text>
<text top="111" left="425" width="11" height="9" font="6">get</text>
<text top="127" left="481" width="23" height="9" font="6">10729</text>
<text top="127" left="417" width="27" height="9" font="6">set&amp;get</text>
<text top="177" left="544" width="21" height="9" font="6">11168</text>
<text top="169" left="544" width="21" height="9" font="6">11134</text>
<text top="160" left="546" width="18" height="9" font="6">8892</text>
<text top="144" left="544" width="23" height="9" font="6">10922</text>
<text top="152" left="544" width="23" height="9" font="6">10897</text>
<text top="135" left="544" width="22" height="9" font="6">11210</text>
<text top="127" left="544" width="22" height="9" font="6">10811</text>
<text top="119" left="544" width="23" height="9" font="6">10805</text>
<text top="111" left="544" width="22" height="9" font="6">11094</text>
<text top="102" left="534" width="42" height="9" font="21"><b>Mean in ns</b></text>
<text top="177" left="609" width="11" height="9" font="6">7,1</text>
<text top="169" left="609" width="11" height="9" font="6">5,5</text>
<text top="160" left="609" width="11" height="9" font="6">0,2</text>
<text top="152" left="610" width="9" height="9" font="6">46</text>
<text top="144" left="612" width="5" height="9" font="6">3</text>
<text top="135" left="609" width="11" height="9" font="6">1,3</text>
<text top="127" left="609" width="11" height="9" font="6">2,9</text>
<text top="119" left="609" width="11" height="9" font="6">0,9</text>
<text top="111" left="609" width="11" height="9" font="6">4,7</text>
<text top="102" left="590" width="50" height="9" font="21"><b>Outliers in %</b></text>
<text top="502" left="272" width="0" height="10" font="13">0</text>
<text top="464" left="272" width="0" height="10" font="13">2000000</text>
<text top="411" left="272" width="0" height="10" font="13">4000000</text>
<text top="357" left="272" width="0" height="10" font="13">6000000</text>
<text top="304" left="272" width="0" height="10" font="13">8000000</text>
<text top="254" left="272" width="0" height="10" font="13">10000000</text>
<text top="573" left="140" width="610" height="17" font="7">Figure 11. Method execution times in the presence of proxies and workload. Meaning of the plotted</text>
<text top="590" left="140" width="159" height="17" font="7">elements: —— = box plot,</text>
<text top="589" left="317" width="58" height="19" font="9">= outlier,</text>
<text top="593" left="381" width="15" height="14" font="10">—</text>
<text top="589" left="402" width="280" height="19" font="9">= low concentration of overlapping outliers,</text>
<text top="589" left="708" width="42" height="19" font="9">= high</text>
<text top="607" left="330" width="231" height="19" font="9">concentration of overlapping outliers.</text>
<text top="669" left="155" width="595" height="19" font="9">The other application for which we measured the update times was the Snake demo we brieﬂy</text>
<text top="687" left="140" width="124" height="19" font="9">described in Section</text>
<text top="687" left="268" width="19" height="19" font="10"><a href="pdfxml.html#5">4.1</a></text>
<text top="687" left="291" width="109" height="19" font="9">and presented in <a href="pdfxml.html#33">[</a></text>
<text top="687" left="399" width="15" height="19" font="10"><a href="pdfxml.html#33">38</a></text>
<text top="687" left="415" width="335" height="19" font="9"><a href="pdfxml.html#33">]. </a>Compared to the update of HyperSQL, which affects</text>
<text top="705" left="140" width="610" height="19" font="9">wide parts of the system (the update spans changes made during 9 months of development), each</text>
<text top="723" left="140" width="610" height="19" font="9">Snake update step consists only of small changes to few classes. Thus, the Snake updates represent</text>
<text top="741" left="140" width="610" height="19" font="9">scenarios common to the software development process, i.e., frequent minor changes and immediate</text>
<text top="759" left="140" width="368" height="19" font="9">application of the changes. As our demo video (available on</text>
<text top="759" left="512" width="56" height="19" font="10"><a href="http://www.youtube.com/watch?v=jZm0hvlhC-E">YouTube</a></text>
<text top="760" left="568" width="12" height="10" font="12"><a href="http://www.youtube.com/watch?v=jZm0hvlhC-E">∗∗</a></text>
<text top="759" left="581" width="169" height="19" font="9">) suggests, the update times</text>
<text top="777" left="140" width="407" height="19" font="9">are rather short ranging from 28 milliseconds to 142 milliseconds.</text>
<text top="795" left="155" width="413" height="19" font="9">All in all, the update times we measured suggest that our current J</text>
<text top="798" left="569" width="17" height="15" font="0">AV</text>
<text top="795" left="584" width="11" height="19" font="9">A</text>
<text top="798" left="596" width="52" height="15" font="0">DAPTOR</text>
<text top="795" left="653" width="97" height="19" font="9">implementation</text>
<text top="813" left="140" width="610" height="19" font="9">could be beneﬁcial in many different scenarios (even if currently other DSU approaches such as</text>
<text top="831" left="140" width="86" height="19" font="9">presented in <a href="pdfxml.html#33">[</a></text>
<text top="831" left="226" width="15" height="19" font="10"><a href="pdfxml.html#33">49</a></text>
<text top="831" left="242" width="42" height="19" font="9"><a href="pdfxml.html#33">] </a>and <a href="pdfxml.html#32">[</a></text>
<text top="831" left="284" width="15" height="19" font="10"><a href="pdfxml.html#32">16</a></text>
<text top="831" left="300" width="450" height="19" font="9"><a href="pdfxml.html#32">] </a>may offer shorter update times). What is the bottleneck of our current</text>
<text top="849" left="141" width="6" height="19" font="9">J</text>
<text top="852" left="147" width="17" height="15" font="0">AV</text>
<text top="849" left="162" width="11" height="19" font="9">A</text>
<text top="852" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="849" left="233" width="405" height="19" font="9">implementation is JDI method referringObjects, which J</text>
<text top="852" left="637" width="17" height="15" font="0">AV</text>
<text top="849" left="653" width="11" height="19" font="9">A</text>
<text top="852" left="665" width="52" height="15" font="0">DAPTOR</text>
<text top="849" left="724" width="27" height="19" font="9">uses</text>
<text top="867" left="140" width="610" height="19" font="9">during state mapping to identify the callers of an outdated object. The execution times of this method</text>
<text top="885" left="140" width="610" height="19" font="9">notably increase the more objects are present in the JVM, even if the number of objects to be updated</text>
<text top="903" left="140" width="610" height="19" font="9">remains unchanged. However, high speed updates were not yet in our scope. Therefore, our current</text>
<text top="920" left="141" width="6" height="19" font="9">J</text>
<text top="923" left="147" width="17" height="15" font="0">AV</text>
<text top="920" left="162" width="11" height="19" font="9">A</text>
<text top="923" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="920" left="231" width="519" height="19" font="9">implementation is not optimized for them. But of course, optimizations to the update</text>
<text top="938" left="140" width="242" height="19" font="9">speed are subject to new versions of J</text>
<text top="941" left="382" width="17" height="15" font="0">AV</text>
<text top="938" left="398" width="11" height="19" font="9">A</text>
<text top="941" left="410" width="52" height="15" font="0">DAPTOR</text>
<text top="938" left="468" width="282" height="19" font="9">we are working on (we will discuss possible</text>
<text top="956" left="140" width="115" height="19" font="9">improvements of J</text>
<text top="959" left="255" width="17" height="15" font="0">AV</text>
<text top="956" left="271" width="11" height="19" font="9">A</text>
<text top="959" left="282" width="52" height="15" font="0">DAPTOR</text>
<text top="956" left="339" width="232" height="19" font="9">and ﬁrst benchmark results in Section</text>
<text top="956" left="575" width="8" height="19" font="10"><a href="pdfxml.html#22">7</a></text>
<text top="956" left="583" width="9" height="19" font="9"><a href="pdfxml.html#22">).</a></text>
<text top="1053" left="140" width="11" height="8" font="6"><a href="http://www.youtube.com/watch?v=jZm0hvlhC-E">∗∗</a></text>
<text top="1056" left="153" width="321" height="10" font="1"><a href="http://www.youtube.com/watch?v=jZm0hvlhC-E">http://www.youtube.com/watch?v=jZm0hvlhC-E</a></text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="19" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="735" width="15" height="19" font="9">19</text>
<text top="101" left="306" width="279" height="19" font="9">6. RELATED WORK AND COMPARISON</text>
<text top="137" left="140" width="610" height="19" font="9">In this section we provide an overview of recent work to overcome Java’s limitations regarding</text>
<text top="155" left="140" width="610" height="19" font="9">dynamic software updates. For better comparability and because of the broad range of related work</text>
<text top="173" left="140" width="610" height="19" font="9">ranging from theoretical to practical solutions, we focus on practice-oriented approaches which,</text>
<text top="191" left="140" width="610" height="19" font="9">like JavAdaptor, can be directly applied in real-world scenarios. We group the related work into</text>
<text top="209" left="140" width="610" height="19" font="9">three groups based on their main strategies: Customized Java Virtual Machines, Customized Class</text>
<text top="231" left="140" width="50" height="13" font="9">Loaders</text>
<text top="227" left="191" width="559" height="19" font="9">, and Wrappers. For each group we discuss the general mechanism and some representative</text>
<text top="245" left="140" width="73" height="19" font="9">approaches.</text>
<text top="262" left="155" width="595" height="19" font="9">In addition, we evaluate the quality of JavAdaptor and of the related work based on the</text>
<text top="280" left="140" width="155" height="19" font="9">criteria given in Section</text>
<text top="280" left="301" width="8" height="19" font="10"><a href="pdfxml.html#1">1</a></text>
<text top="280" left="309" width="441" height="19" font="9"><a href="pdfxml.html#1">. </a>That is, we analyze an approach’s ﬂexibility, platform dependency,</text>
<text top="302" left="140" width="79" height="13" font="9">performance</text>
<text top="298" left="224" width="526" height="19" font="9">and its inﬂuence on the program architecture. We chose the criteria because they let</text>
<text top="316" left="140" width="610" height="19" font="9">us describe the differences between the approaches. For instance, considering support for reliable</text>
<text top="334" left="140" width="610" height="19" font="9">(immediate) consistent program updates would be irrelevant, because no approach fulﬁlls this</text>
<text top="352" left="140" width="489" height="19" font="9">criterion. Furthermore, the criteria align with our goals presented in Section</text>
<text top="352" left="636" width="8" height="19" font="10"><a href="pdfxml.html#1">1</a></text>
<text top="352" left="643" width="107" height="19" font="9"><a href="pdfxml.html#1">. </a>We derived the</text>
<text top="370" left="140" width="610" height="19" font="9">criterion ﬂexibility from the fact that static software development allows the developer to change</text>
<text top="388" left="140" width="610" height="19" font="9">a program in any way, no matter when and where the changes must be applied. Runtime update</text>
<text top="406" left="140" width="610" height="19" font="9">approaches should provide the same ﬂexibility in order to cover all update scenarios. We further</text>
<text top="424" left="140" width="610" height="19" font="9">choose platform dependency because platform independence is one of the reasons for the success</text>
<text top="442" left="140" width="610" height="19" font="9">of Java, i.e., DSU approaches should not cause dependencies to speciﬁc JVM implementations. In</text>
<text top="460" left="140" width="46" height="19" font="9">Section</text>
<text top="460" left="192" width="8" height="19" font="10"><a href="pdfxml.html#1">1</a></text>
<text top="460" left="199" width="551" height="19" font="9"><a href="pdfxml.html#1">, </a>we argued that Java’s performance in terms of program execution speed is better than</text>
<text top="478" left="140" width="610" height="19" font="9">the performance of dynamic languages, which natively provide ﬂexible runtime updates. Ending</text>
<text top="496" left="140" width="610" height="19" font="9">up with an updated Java program whose execution speed is worse than the execution speed of the</text>
<text top="514" left="140" width="610" height="19" font="9">same updated program based on a dynamic language might be a good reason to prefer dynamic</text>
<text top="531" left="140" width="610" height="19" font="9">languages. Users virtually always prefer a good performing approach over a comparable but worse</text>
<text top="549" left="140" width="610" height="19" font="9">performing one (particularly when the program is supposed to be used in production). Finally, we</text>
<text top="567" left="140" width="610" height="19" font="9">pick up the program architecture criterion because in software development there is no such thing</text>
<text top="585" left="140" width="471" height="19" font="9">like “one architecture ﬁts all scenarios”. As already mentioned in Section</text>
<text top="585" left="617" width="8" height="19" font="10"><a href="pdfxml.html#1">1</a></text>
<text top="585" left="625" width="125" height="19" font="9"><a href="pdfxml.html#1">, </a>different scenarios</text>
<text top="603" left="140" width="610" height="19" font="9">require different architectures. Thus, DSU approaches should not restrict the usage of different</text>
<text top="621" left="140" width="610" height="19" font="9">architectures. However, different criteria might be of different importance to different stakeholders.</text>
<text top="639" left="140" width="610" height="19" font="9">For instance, users might emphasize ﬂexibility whereas administrators might attach great importance</text>
<text top="657" left="140" width="610" height="19" font="9">to platform independence. That is, in order to satisfy the stakeholders, a DSU approach must fulﬁll</text>
<text top="675" left="140" width="136" height="19" font="9">all mentioned criteria.</text>
<text top="722" left="140" width="245" height="13" font="9">6.1. Customized Java Virtual Machines</text>
<text top="745" left="140" width="155" height="19" font="9">As mentioned in Section</text>
<text top="745" left="300" width="8" height="19" font="10"><a href="pdfxml.html#4">3</a></text>
<text top="745" left="308" width="442" height="19" font="9"><a href="pdfxml.html#4">, </a>the JVM disallows the developer to reload a class whose schema has</text>
<text top="763" left="140" width="372" height="19" font="9">changed and thus forbids ﬂexible dynamic software updates.</text>
<text top="781" left="155" width="595" height="19" font="9">Therefore, researchers suggest virtual machine patches that enable to reload classes with changed</text>
<text top="799" left="140" width="260" height="19" font="9">schemas. For instance, Malabarba et al. <a href="pdfxml.html#32">[</a></text>
<text top="799" left="400" width="15" height="19" font="10"><a href="pdfxml.html#32">29</a></text>
<text top="799" left="415" width="335" height="19" font="9"><a href="pdfxml.html#32">] </a>add dynamic class loaders to their Dynamic Virtual</text>
<text top="821" left="140" width="54" height="13" font="9">Machine</text>
<text top="817" left="198" width="213" height="19" font="9">(DVM) for this purpose. JDrums <a href="pdfxml.html#33">[</a></text>
<text top="817" left="411" width="15" height="19" font="10"><a href="pdfxml.html#33">40</a></text>
<text top="817" left="426" width="324" height="19" font="9"><a href="pdfxml.html#33">] </a>is a JVM that uses handles to decouple classes and</text>
<text top="835" left="140" width="435" height="19" font="9">objects from each other in order to reload classes. The Jvolve VM <a href="pdfxml.html#33">[</a></text>
<text top="835" left="575" width="15" height="19" font="10"><a href="pdfxml.html#33">43</a></text>
<text top="835" left="591" width="159" height="19" font="9"><a href="pdfxml.html#33">] </a>decouples classes using</text>
<text top="853" left="140" width="610" height="19" font="9">meta-objects that can be easily changed to refer to updated classes. In addition to Java HotSwap,</text>
<text top="871" left="140" width="589" height="19" font="9">which allows the developer to redeﬁne methods bodies of already loaded classes, Dmitriev <a href="pdfxml.html#32">[</a></text>
<text top="871" left="730" width="15" height="19" font="10"><a href="pdfxml.html#32">10</a></text>
<text top="871" left="745" width="5" height="19" font="9"><a href="pdfxml.html#32">]</a></text>
<text top="889" left="140" width="610" height="19" font="9">patched the Hotspot JVM in such way that it supports even class schema changes. Unfortunately,</text>
<text top="907" left="140" width="426" height="19" font="9">unlike Java HotSwap, this feature never made it into a standard JVM.</text>
<text top="928" left="155" width="69" height="14" font="9">Flexibility.</text>
<text top="924" left="228" width="522" height="19" font="9">All in all, customized Java virtual machines perform well when it comes to ﬂexibility.</text>
<text top="942" left="140" width="610" height="19" font="9">They allow unanticipated changes of virtually all parts of a program. Furthermore, they all provide</text>
<text top="960" left="140" width="610" height="19" font="9">mechanisms to keep the program state beyond the update. Customized JVMs provide this ﬂexibility</text>
<text top="978" left="140" width="610" height="19" font="9">because the update mechanism is implemented within the JVM itself and not at application level</text>
<text top="996" left="140" width="385" height="19" font="9">which otherwise would complicate or prevent ﬂexible updates.</text>
<text top="1018" left="155" width="146" height="14" font="9">Platform Dependency.</text>
<text top="1014" left="305" width="445" height="19" font="9">Even if virtual machine customization seems to be the most natural way</text>
<text top="1032" left="140" width="610" height="19" font="9">to enhance Java’s runtime update capabilities (because it does not require to operate at application</text>
<text top="1050" left="140" width="610" height="19" font="9">level to apply the update approach), different problems arise from it. First of all, there is a standard</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">20</text>
<text top="101" left="140" width="421" height="19" font="9">which precisely deﬁnes the functionality and structure of a JVM <a href="pdfxml.html#32">[</a></text>
<text top="101" left="561" width="15" height="19" font="10"><a href="pdfxml.html#32">27</a></text>
<text top="101" left="576" width="174" height="19" font="9"><a href="pdfxml.html#32">]. </a>Changing the standard in</text>
<text top="119" left="140" width="610" height="19" font="9">order to add dynamic software updates is difﬁcult because it would require to change all existing</text>
<text top="137" left="140" width="610" height="19" font="9">JVM implementations. Thus, there are only slight chances that DSU becomes a standard. However,</text>
<text top="155" left="140" width="610" height="19" font="9">as long as DSU is not part of the JVM speciﬁcation it must be added via patches. One problem</text>
<text top="173" left="140" width="610" height="19" font="9">with JVM patches is that they base on a speciﬁc JVM implementation and might not be applicable</text>
<text top="191" left="140" width="610" height="19" font="9">to other JVMs. In addition, each new release of the JVM must be patched again. This might be</text>
<text top="209" left="140" width="610" height="19" font="9">difﬁcult (eventually impossible) in case the JVM implementation has largely changed in the new</text>
<text top="227" left="140" width="610" height="19" font="9">JVM version. Last but not least, companies rather prefer standard (certiﬁed) JVMs over customized</text>
<text top="245" left="140" width="610" height="19" font="9">ones to run their applications in productive mode. This is why dynamic software update approaches</text>
<text top="262" left="140" width="424" height="19" font="9">are needed that operate on top of different standard virtual machines.</text>
<text top="284" left="155" width="89" height="14" font="9">Performance.</text>
<text top="280" left="250" width="500" height="19" font="9">First of all we point out that it is virtually impossible to exactly measure and</text>
<text top="298" left="140" width="610" height="19" font="9">compare the performance of the referred approaches. Some JVMs are not available for download</text>
<text top="316" left="140" width="610" height="19" font="9">and those that are available do (partly) support only outdated Java versions (e.g., JDRUMS only</text>
<text top="334" left="140" width="610" height="19" font="9">executes programs based on Java version 1.2). Thus, we were not able to benchmark them and</text>
<text top="352" left="140" width="610" height="19" font="9">get meaningful benchmark results. Instead, we searched the literature for information regarding the</text>
<text top="370" left="140" width="610" height="19" font="9">performance. We found that the four patched JVMs signiﬁcantly differ in terms of performance (see</text>
<text top="388" left="140" width="5" height="19" font="9"><a href="pdfxml.html#33">[</a></text>
<text top="388" left="145" width="15" height="19" font="10"><a href="pdfxml.html#33">43</a></text>
<text top="388" left="161" width="41" height="19" font="9"><a href="pdfxml.html#33">] </a>and <a href="pdfxml.html#33">[</a></text>
<text top="388" left="202" width="15" height="19" font="10"><a href="pdfxml.html#33">49</a></text>
<text top="388" left="217" width="61" height="19" font="9"><a href="pdfxml.html#33">]). </a>DVM <a href="pdfxml.html#32">[</a></text>
<text top="388" left="278" width="15" height="19" font="10"><a href="pdfxml.html#32">29</a></text>
<text top="388" left="294" width="456" height="19" font="9"><a href="pdfxml.html#32">] </a>executes programs in interpreted mode only, which is commonly known</text>
<text top="406" left="140" width="132" height="19" font="9">to be slow. JDrums <a href="pdfxml.html#33">[</a></text>
<text top="406" left="272" width="15" height="19" font="10"><a href="pdfxml.html#33">40</a></text>
<text top="406" left="288" width="462" height="19" font="9"><a href="pdfxml.html#33">] </a>aims at lazy updates and uses transformer functions to migrate the state</text>
<text top="424" left="140" width="610" height="19" font="9">from old objects to their updated counterparts which introduces noticeable constant performance</text>
<text top="442" left="140" width="117" height="19" font="9">overhead. Jvolve <a href="pdfxml.html#33">[</a></text>
<text top="442" left="257" width="15" height="19" font="10"><a href="pdfxml.html#33">43</a></text>
<text top="442" left="273" width="477" height="19" font="9"><a href="pdfxml.html#33">] </a>immediately updates applications, i.e., it applies the updates in one step</text>
<text top="460" left="140" width="519" height="19" font="9">and thus avoids considerable performance penalties. W¨urthinger et al. present in <a href="pdfxml.html#33">[</a></text>
<text top="460" left="659" width="15" height="19" font="10"><a href="pdfxml.html#33">49</a></text>
<text top="460" left="675" width="75" height="19" font="9"><a href="pdfxml.html#33">] </a>a new and</text>
<text top="478" left="140" width="274" height="19" font="9">improved version of Dmitriev’s JVM patch <a href="pdfxml.html#32">[</a></text>
<text top="478" left="415" width="15" height="19" font="10"><a href="pdfxml.html#32">10</a></text>
<text top="478" left="430" width="297" height="19" font="9"><a href="pdfxml.html#32">] </a>that comes without any performance overhead.</text>
<text top="499" left="155" width="152" height="14" font="9">Program Architecture.</text>
<text top="496" left="313" width="437" height="19" font="9">As previously described, JVM customization aims at integrating the</text>
<text top="514" left="140" width="610" height="19" font="9">update mechanisms with the JVM which makes changes to the application architecture unnecessary.</text>
<text top="561" left="140" width="195" height="13" font="9">6.2. Customized Class Loaders</text>
<text top="584" left="140" width="610" height="19" font="9">As mentioned above, the basic idea of JVM patches is to enhance the JVM with capabilities to</text>
<text top="602" left="140" width="610" height="19" font="9">reload and thus update classes. In addition to the basic class loaders required to load and run a</text>
<text top="620" left="140" width="610" height="19" font="9">program, the class loading capabilities of a program can be extended even at application level by</text>
<text top="638" left="140" width="168" height="19" font="9">customized class loaders <a href="pdfxml.html#32">[</a></text>
<text top="638" left="308" width="15" height="19" font="10"><a href="pdfxml.html#32">25</a></text>
<text top="638" left="323" width="427" height="19" font="9"><a href="pdfxml.html#32">], </a>which is common technique to load updated versions of already</text>
<text top="655" left="140" width="462" height="19" font="9">loaded classes or components. For instance, the OSGi Service Platform <a href="pdfxml.html#32">[</a></text>
<text top="655" left="602" width="8" height="19" font="10"><a href="pdfxml.html#32">1</a></text>
<text top="655" left="610" width="140" height="19" font="9"><a href="pdfxml.html#32">] </a>or Oracles FastSwap</text>
<text top="673" left="140" width="5" height="19" font="9"><a href="pdfxml.html#33">[</a></text>
<text top="673" left="145" width="15" height="19" font="10"><a href="pdfxml.html#33">33</a></text>
<text top="673" left="161" width="414" height="19" font="9"><a href="pdfxml.html#33">] </a>utilize customized class loaders to update components. Javeleon <a href="pdfxml.html#32">[</a></text>
<text top="673" left="574" width="15" height="19" font="10"><a href="pdfxml.html#32">16</a></text>
<text top="673" left="590" width="160" height="19" font="9"><a href="pdfxml.html#32">] </a>allows to ﬂexibly update</text>
<text top="695" left="140" width="59" height="13" font="9">NetBeans</text>
<text top="691" left="204" width="525" height="19" font="9">based applications and thus uses customized class loaders, too. Zhang and Huang <a href="pdfxml.html#33">[</a></text>
<text top="691" left="730" width="15" height="19" font="10"><a href="pdfxml.html#33">50</a></text>
<text top="691" left="745" width="5" height="19" font="9"><a href="pdfxml.html#33">]</a></text>
<text top="709" left="140" width="605" height="19" font="9">presented Dynamic Update Transactions (DUT) which also make use of customized class loaders.</text>
<text top="731" left="155" width="69" height="14" font="9">Flexibility.</text>
<text top="727" left="231" width="519" height="19" font="9">Customized class loaders serve the ﬂexibility required to largely update running</text>
<text top="745" left="140" width="610" height="19" font="9">programs, i.e., they allow to update virtually all parts of a running program in an unanticipated</text>
<text top="763" left="140" width="406" height="19" font="9">way while preserving the program state. This is true for Javeleon <a href="pdfxml.html#32">[</a></text>
<text top="763" left="546" width="15" height="19" font="10"><a href="pdfxml.html#32">16</a></text>
<text top="763" left="561" width="189" height="19" font="9"><a href="pdfxml.html#32">] </a>and also for Dynamic Update</text>
<text top="785" left="140" width="79" height="13" font="9">Transactions</text>
<text top="781" left="223" width="51" height="19" font="9">(DUT) <a href="pdfxml.html#33">[</a></text>
<text top="781" left="274" width="15" height="19" font="10"><a href="pdfxml.html#33">50</a></text>
<text top="781" left="289" width="247" height="19" font="9"><a href="pdfxml.html#33">]. </a>In case of the OSGi Service Platform <a href="pdfxml.html#32">[</a></text>
<text top="781" left="536" width="8" height="19" font="10"><a href="pdfxml.html#32">1</a></text>
<text top="781" left="543" width="207" height="19" font="9"><a href="pdfxml.html#32">] </a>the state of a bundle is lost when</text>
<text top="799" left="140" width="138" height="19" font="9">it is refreshed, though.</text>
<text top="820" left="155" width="147" height="14" font="9">Platform Dependency.</text>
<text top="817" left="307" width="443" height="19" font="9">Because customization of class loaders is a standard feature in Java, it</text>
<text top="835" left="140" width="610" height="19" font="9">can be applied to all standard Java runtime environments. Javeleon additionally requires NetBeans</text>
<text top="853" left="140" width="163" height="19" font="9">components for execution.</text>
<text top="874" left="155" width="89" height="14" font="9">Performance.</text>
<text top="871" left="251" width="499" height="19" font="9">One issue with customized class loaders is that they reduce the application</text>
<text top="889" left="140" width="610" height="19" font="9">performance when applied to JVMs older than version 1.6. This is, because old and updated program</text>
<text top="907" left="140" width="610" height="19" font="9">parts are loaded by different class loaders which requires poor performing reﬂection-based version-</text>
<text top="924" left="140" width="168" height="19" font="9">barrier crossings. Cazzola <a href="pdfxml.html#32">[</a></text>
<text top="924" left="309" width="8" height="19" font="10"><a href="pdfxml.html#32">5</a></text>
<text top="924" left="316" width="434" height="19" font="9"><a href="pdfxml.html#32">] </a>found out that even simple reﬂective method invocations (as required</text>
<text top="942" left="140" width="610" height="19" font="9">for crossing the version barrier) slow down method invocations with a factor of up to 6.5 compared</text>
<text top="960" left="140" width="610" height="19" font="9">to direct method invocations. More complex version-barrier crossings might cause even higher</text>
<text top="978" left="140" width="610" height="19" font="9">performance penalties. However, with Java 1.6 this situation relaxed because the related JVM is</text>
<text top="996" left="140" width="196" height="19" font="9">able to optimize reﬂective calls.</text>
<text top="1018" left="155" width="152" height="14" font="9">Program Architecture.</text>
<text top="1014" left="313" width="437" height="19" font="9">Generally, the application of customized class loaders largely affects</text>
<text top="1032" left="140" width="610" height="19" font="9">the application architecture. More precisely, customized class loaders dictate how an application</text>
<text top="1050" left="140" width="610" height="19" font="9">must be designed and thus disallow alternative (tailor-made) designs. DUT requires methods</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="735" width="15" height="19" font="9">21</text>
<text top="101" left="140" width="610" height="19" font="9">that maintain the updates to be present in each class. Javeleon, FastSwap as well as the OSGi</text>
<text top="123" left="140" width="105" height="13" font="9">Service Platform</text>
<text top="119" left="250" width="501" height="19" font="9">require the applications to run on top of their infrastructure to be refactored into</text>
<text top="137" left="140" width="610" height="19" font="9">components (if not already done). This does not only alter the application architecture, it might be</text>
<text top="155" left="140" width="501" height="19" font="9">also inefﬁcient because even small changes require to replace whole components.</text>
<text top="194" left="140" width="91" height="13" font="9">6.3. Wrappers</text>
<text top="217" left="140" width="610" height="19" font="9">Another frequently used approach to provide Java with enhanced runtime update capabilities are</text>
<text top="235" left="140" width="230" height="19" font="9">wrappers (also known as decorators <a href="pdfxml.html#32">[</a></text>
<text top="235" left="370" width="15" height="19" font="10"><a href="pdfxml.html#32">13</a></text>
<text top="235" left="386" width="364" height="19" font="9"><a href="pdfxml.html#32">]). </a>Wrappers aim at wrapping old program parts in order to</text>
<text top="253" left="140" width="85" height="19" font="9">update them <a href="pdfxml.html#33">[</a></text>
<text top="253" left="225" width="15" height="19" font="10"><a href="pdfxml.html#33">39</a></text>
<text top="253" left="240" width="4" height="19" font="9"><a href="pdfxml.html#33">,</a></text>
<text top="253" left="248" width="15" height="19" font="10"><a href="pdfxml.html#33">37</a></text>
<text top="253" left="263" width="4" height="19" font="9"><a href="pdfxml.html#33">,</a></text>
<text top="253" left="271" width="15" height="19" font="10"><a href="pdfxml.html#33">45</a></text>
<text top="253" left="287" width="9" height="19" font="9"><a href="pdfxml.html#33">].</a></text>
<text top="271" left="155" width="595" height="19" font="9">To apply the updates introduced by a wrapper, all clients (callers) of the changed program</text>
<text top="289" left="140" width="610" height="19" font="9">parts must be updated, too. That is, all references to the original callee must be redirected to the</text>
<text top="307" left="140" width="589" height="19" font="9">corresponding wrapper instance that wraps the callee. To update the caller side, Gamma et al. <a href="pdfxml.html#32">[</a></text>
<text top="307" left="730" width="15" height="19" font="10"><a href="pdfxml.html#32">13</a></text>
<text top="307" left="745" width="5" height="19" font="9"><a href="pdfxml.html#32">]</a></text>
<text top="324" left="140" width="610" height="19" font="9">suggest that wrapper and wrappee extend the same superclass or (even more ﬂexible) implement the</text>
<text top="342" left="140" width="610" height="19" font="9">same interface. The application of the wrapping can be either statically predeﬁned before program</text>
<text top="360" left="140" width="610" height="19" font="9">start or triggered at runtime using method body redeﬁnitions based on Java HotSwap (as we did</text>
<text top="378" left="140" width="38" height="19" font="9">it in <a href="pdfxml.html#33">[</a></text>
<text top="378" left="179" width="15" height="19" font="10"><a href="pdfxml.html#33">39</a></text>
<text top="378" left="194" width="556" height="19" font="9"><a href="pdfxml.html#33">]). </a>However, the big conceptual drawback compared to JavAdaptor, JVM patches, and</text>
<text top="396" left="140" width="610" height="19" font="9">customized class loaders is that wrappers never really update (reload) classes but put them in a</text>
<text top="414" left="140" width="522" height="19" font="9">new context from which several limitations (particularly regarding our criteria) arise.</text>
<text top="436" left="155" width="69" height="14" font="9">Flexibility.</text>
<text top="432" left="230" width="520" height="19" font="9">Wrappers do not provide the same ﬂexibility as JavAdaptor, customized JVMs and</text>
<text top="450" left="140" width="246" height="19" font="9">customized class loaders do. Lasagne <a href="pdfxml.html#33">[</a></text>
<text top="450" left="387" width="15" height="19" font="10"><a href="pdfxml.html#33">45</a></text>
<text top="450" left="402" width="73" height="19" font="9"><a href="pdfxml.html#33">] </a>and JAC <a href="pdfxml.html#33">[</a></text>
<text top="450" left="475" width="15" height="19" font="10"><a href="pdfxml.html#33">37</a></text>
<text top="450" left="491" width="259" height="19" font="9"><a href="pdfxml.html#33">] </a>only allow anticipated runtime program</text>
<text top="468" left="140" width="610" height="19" font="9">updates, because the wrappings must be predeﬁned before application start. Nevertheless, wrappers</text>
<text top="486" left="140" width="481" height="19" font="9">can be also used in an unanticipated way, as we demonstrated in prior w<a href="pdfxml.html#33">ork[</a></text>
<text top="486" left="622" width="15" height="19" font="10"><a href="pdfxml.html#33">39</a></text>
<text top="486" left="637" width="113" height="19" font="9"><a href="pdfxml.html#33">]. </a>The big issue is</text>
<text top="504" left="140" width="550" height="19" font="9">that conceptually wrappers cannot remove ﬁelds or methods deﬁned in classes they wrap.</text>
<text top="525" left="155" width="148" height="14" font="9">Platform Dependency.</text>
<text top="522" left="309" width="357" height="19" font="9">The wrapper approach is a well-known design pattern <a href="pdfxml.html#32">[</a></text>
<text top="522" left="666" width="15" height="19" font="10"><a href="pdfxml.html#32">13</a></text>
<text top="522" left="681" width="69" height="19" font="9"><a href="pdfxml.html#32">], </a>which is</text>
<text top="540" left="140" width="610" height="19" font="9">fully implemented at application level and thus does not require speciﬁc platforms to act. However,</text>
<text top="558" left="140" width="610" height="19" font="9">to enlarge its ﬂexibility it must be combined with techniques which allow to (re-)deﬁne wrappings</text>
<text top="576" left="140" width="67" height="19" font="9">at runtime.</text>
<text top="597" left="155" width="89" height="14" font="9">Performance.</text>
<text top="593" left="250" width="500" height="19" font="9">There is one point with wrappers that cause signiﬁcant performance penalties:</text>
<text top="611" left="140" width="262" height="19" font="9">indirections due to object wrappings. In <a href="pdfxml.html#32">[</a></text>
<text top="611" left="403" width="15" height="19" font="10"><a href="pdfxml.html#32">15</a></text>
<text top="611" left="418" width="332" height="19" font="9"><a href="pdfxml.html#32">], </a>we measured the performance penalties caused by</text>
<text top="629" left="140" width="607" height="19" font="9">long wrapping chains, which raise by up to 50% compared to the same program without wrappers.</text>
<text top="651" left="155" width="152" height="14" font="9">Program Architecture.</text>
<text top="647" left="314" width="436" height="19" font="9">The principle drawback of wrappers is that an application must be</text>
<text top="665" left="140" width="610" height="19" font="9">completely refactored in order to prepare it for wrapper-based dynamic software updates. If the</text>
<text top="683" left="140" width="610" height="19" font="9">developer aims at avoiding poor performing reﬂective ﬁeld accesses, she has to allow read and</text>
<text top="701" left="140" width="610" height="19" font="9">write access to all ﬁelds of the old program part namely the object to be wrapped. Furthermore, all</text>
<text top="719" left="140" width="610" height="19" font="9">classes have to be forced to implement unique interfaces. In addition, all ﬁelds have to be of the type</text>
<text top="737" left="140" width="610" height="19" font="9">of the interface their classes implement. That is, similar to customized class loaders, the wrapper</text>
<text top="755" left="140" width="610" height="19" font="9">approach dictates the design of an application and, thus, restricts user-deﬁned application designs.</text>
<text top="773" left="140" width="610" height="19" font="9">In addition, the forced design has serious drawbacks because it violates encapsulation and causes</text>
<text top="791" left="140" width="110" height="19" font="9">the self-problem <a href="pdfxml.html#32">[</a></text>
<text top="791" left="250" width="15" height="19" font="10"><a href="pdfxml.html#32">26</a></text>
<text top="791" left="266" width="484" height="19" font="9"><a href="pdfxml.html#32">]. </a>Another problem with the design of several wrapper approaches is decreased</text>
<text top="809" left="140" width="225" height="19" font="9">reliability due to frequent type casts.</text>
<text top="848" left="140" width="102" height="13" font="9">6.4. JavAdaptor</text>
<text top="871" left="140" width="610" height="19" font="9">So far, all considered approaches have their strengths and weaknesses regarding the given criteria,</text>
<text top="889" left="140" width="610" height="19" font="9">i.e., no approach fulﬁlls them all. But, as we described above, their is a need for approaches that</text>
<text top="907" left="140" width="610" height="19" font="9">cover all criteria. In the following we compare JavAdaptor with the previously described approaches</text>
<text top="924" left="140" width="610" height="19" font="9">and discuss whether JavAdaptor fulﬁlls all criteria or not. An overview of the comparison results</text>
<text top="942" left="140" width="133" height="19" font="9">can be found in Table</text>
<text top="942" left="277" width="15" height="19" font="10"><a href="pdfxml.html#22">III</a></text>
<text top="942" left="293" width="4" height="19" font="9"><a href="pdfxml.html#22">.</a></text>
<text top="964" left="155" width="69" height="14" font="9">Flexibility.</text>
<text top="960" left="233" width="183" height="19" font="9">As demonstrated in Section</text>
<text top="960" left="424" width="8" height="19" font="10"><a href="pdfxml.html#14">5</a></text>
<text top="960" left="432" width="318" height="19" font="9"><a href="pdfxml.html#14">, </a>the ﬂexibility of our runtime update approach</text>
<text top="978" left="140" width="610" height="19" font="9">JavAdaptor is as good as the ﬂexibility that could be achieved by patched JVMs and customized</text>
<text top="996" left="140" width="610" height="19" font="9">class loaders. More precisely, it is on a par with Jvolve, JDrums, DVM, the HotSpot VM patch of</text>
<text top="1014" left="140" width="165" height="19" font="9">Dmitriev and W¨urthinger <a href="pdfxml.html#32">[</a></text>
<text top="1014" left="305" width="15" height="19" font="10"><a href="pdfxml.html#32">10</a></text>
<text top="1014" left="321" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="1014" left="328" width="15" height="19" font="10"><a href="pdfxml.html#33">49</a></text>
<text top="1014" left="344" width="135" height="19" font="9"><a href="pdfxml.html#33">], </a>Javeleon, and DUT.</text>
<text top="1036" left="155" width="153" height="14" font="9">Platform Dependency.</text>
<text top="1032" left="320" width="430" height="19" font="9">When it comes to platform independence, JavAdaptor clearly</text>
<text top="1050" left="140" width="610" height="19" font="9">outperforms many competitors. Without any JVM patches it runs on top of all standard JVMs that</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="22" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">22</text>
<text top="105" left="167" width="82" height="11" font="0">DSU Approach</text>
<text top="105" left="267" width="55" height="11" font="0">Flexibility</text>
<text top="105" left="341" width="128" height="11" font="0">Platform Independency</text>
<text top="105" left="487" width="70" height="11" font="0">Performance</text>
<text top="105" left="576" width="148" height="11" font="0">Architecture Independency</text>
<text top="128" left="178" width="60" height="11" font="0">JavAdaptor</text>
<text top="188" left="173" width="0" height="9" font="13">JVM</text>
<text top="151" left="194" width="33" height="11" font="0">Jvolve</text>
<text top="170" left="194" width="43" height="11" font="0">HotSpot</text>
<text top="189" left="194" width="42" height="11" font="0">JDrums</text>
<text top="208" left="194" width="28" height="11" font="0">DVM</text>
<text top="266" left="173" width="0" height="9" font="13">CCL</text>
<text top="231" left="194" width="46" height="11" font="0">Javeleon</text>
<text top="250" left="194" width="26" height="11" font="0">DUT</text>
<text top="269" left="194" width="50" height="11" font="0">FastSwap</text>
<text top="287" left="194" width="29" height="11" font="0">OSGi</text>
<text top="346" left="173" width="0" height="9" font="13">Wrapper</text>
<text top="310" left="194" width="4" height="11" font="0"><a href="pdfxml.html#33">[</a></text>
<text top="310" left="198" width="13" height="11" font="1"><a href="pdfxml.html#33">39</a></text>
<text top="310" left="210" width="4" height="11" font="0"><a href="pdfxml.html#33">]</a></text>
<text top="329" left="194" width="22" height="11" font="0">JAC</text>
<text top="348" left="194" width="44" height="11" font="0">Lasagne</text>
<text top="377" left="351" width="184" height="17" font="7">Table III. Overview comparison.</text>
<text top="442" left="140" width="610" height="19" font="9">provide Java HotSwap, which amongst others is a standard feature in the HotSpot VM, the JRockit</text>
<text top="460" left="140" width="536" height="19" font="9">VM, and IBM’s JVM. Furthermore, it does not require any library or framework to act.</text>
<text top="481" left="155" width="89" height="14" font="9">Performance.</text>
<text top="478" left="249" width="501" height="19" font="9">Another strength of JavAdaptor is its performance. As our benchmark results in</text>
<text top="496" left="140" width="46" height="19" font="9">Section</text>
<text top="496" left="190" width="8" height="19" font="10"><a href="pdfxml.html#14">5</a></text>
<text top="496" left="201" width="549" height="19" font="9">show, container based updates come along without performance penalties and proxy based</text>
<text top="514" left="140" width="610" height="19" font="9">updates only cause slight performance drops. JavAdaptor neither requires performance-dropping</text>
<text top="532" left="140" width="610" height="19" font="9">JVM patches nor reﬂection-based version-barrier crossings (which may be slow particularly on</text>
<text top="550" left="140" width="610" height="19" font="9">older JVMs) caused by customized class loaders. It also does not depend on a component</text>
<text top="568" left="140" width="610" height="19" font="9">framework, such as Javeleon, FastSwap or OSGi, whose execution causes additional performance</text>
<text top="585" left="140" width="610" height="19" font="9">overhead. Furthermore, JavAdaptor causes no wrapping chains and thus comes without the related</text>
<text top="603" left="140" width="122" height="19" font="9">performance issues.</text>
<text top="625" left="155" width="150" height="14" font="9">Program Architecture.</text>
<text top="621" left="310" width="440" height="19" font="9">Unlike customized JVMs, JavAdaptor requires to add a container ﬁeld</text>
<text top="639" left="140" width="610" height="19" font="9">to each class. However, the container ﬁeld is transparent to the user and can be easily integrated with</text>
<text top="657" left="140" width="610" height="19" font="9">the application to be updated without any changes to the architecture. By contrast, customized class</text>
<text top="675" left="140" width="610" height="19" font="9">loaders particularly in conjunction with component frameworks dictate the application design and,</text>
<text top="693" left="140" width="610" height="19" font="9">thus, render alternative (tailor-made) application designs impossible. This is also true for wrappers</text>
<text top="711" left="140" width="610" height="19" font="9">where the forced application design additionally causes serious drawbacks (for further details see</text>
<text top="729" left="140" width="46" height="19" font="9">Section</text>
<text top="729" left="190" width="19" height="19" font="10"><a href="pdfxml.html#21">6.3</a></text>
<text top="729" left="210" width="9" height="19" font="9"><a href="pdfxml.html#21">).</a></text>
<text top="786" left="294" width="303" height="19" font="9">7. ENHANCEMENTS AND OPTIMIZATIONS</text>
<text top="822" left="140" width="63" height="19" font="9">In Section</text>
<text top="822" left="207" width="8" height="19" font="10"><a href="pdfxml.html#5">4</a></text>
<text top="822" left="215" width="535" height="19" font="9"><a href="pdfxml.html#5">, </a>we described the basic concepts of our DSU approach and evaluated its practicability</text>
<text top="840" left="140" width="254" height="19" font="9">under real-world conditions in Section</text>
<text top="840" left="402" width="8" height="19" font="10"><a href="pdfxml.html#14">5</a></text>
<text top="840" left="410" width="340" height="19" font="9"><a href="pdfxml.html#14">. </a>Even if the results of our evaluation conﬁrm the</text>
<text top="858" left="140" width="610" height="19" font="9">practicability and usefulness of JavAdaptor, there is still space for improvements. In this section we</text>
<text top="876" left="140" width="253" height="19" font="9">summarize work in progress to improve J</text>
<text top="879" left="393" width="17" height="15" font="0">AV</text>
<text top="876" left="409" width="11" height="19" font="9">A</text>
<text top="879" left="421" width="52" height="15" font="0">DAPTOR</text>
<text top="876" left="474" width="276" height="19" font="9">. We point out that most of the here discussed</text>
<text top="894" left="140" width="412" height="19" font="9">improvements are inspired by existing work, such as presented in <a href="pdfxml.html#32">[</a></text>
<text top="894" left="552" width="15" height="19" font="10"><a href="pdfxml.html#32">11</a></text>
<text top="894" left="567" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="894" left="575" width="15" height="19" font="10"><a href="pdfxml.html#32">23</a></text>
<text top="894" left="591" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="894" left="598" width="15" height="19" font="10"><a href="pdfxml.html#32">16</a></text>
<text top="894" left="614" width="136" height="19" font="9"><a href="pdfxml.html#32">]. </a>However, we do not</text>
<text top="912" left="140" width="529" height="19" font="9">simply discuss the related work, but describe how to combine it with the existing J</text>
<text top="915" left="670" width="17" height="15" font="0">AV</text>
<text top="912" left="685" width="11" height="19" font="9">A</text>
<text top="915" left="697" width="52" height="15" font="0">DAPTOR</text>
<text top="930" left="140" width="52" height="19" font="9">concept.</text>
<text top="973" left="140" width="208" height="13" font="9">7.1. Update-Speed Improvements</text>
<text top="996" left="140" width="65" height="19" font="9">In Section</text>
<text top="996" left="212" width="19" height="19" font="10"><a href="pdfxml.html#17">5.4</a></text>
<text top="996" left="238" width="228" height="19" font="9">we evaluated the update speed of J</text>
<text top="999" left="466" width="17" height="15" font="0">AV</text>
<text top="996" left="482" width="11" height="19" font="9">A</text>
<text top="999" left="493" width="52" height="15" font="0">DAPTOR</text>
<text top="996" left="552" width="198" height="19" font="9">on the basis of our HyperSQL</text>
<text top="1014" left="140" width="322" height="19" font="9">and Snake case studies. We found the current J</text>
<text top="1017" left="462" width="17" height="15" font="0">AV</text>
<text top="1014" left="478" width="11" height="19" font="9">A</text>
<text top="1017" left="490" width="52" height="15" font="0">DAPTOR</text>
<text top="1014" left="550" width="200" height="19" font="9">implementation acceptable fast</text>
<text top="1032" left="140" width="610" height="19" font="9">in this regard, but stated that it could be further improved. From what we found out, the</text>
<text top="1050" left="140" width="162" height="19" font="9">bottleneck of our current J</text>
<text top="1053" left="302" width="17" height="15" font="0">AV</text>
<text top="1050" left="318" width="11" height="19" font="9">A</text>
<text top="1053" left="330" width="52" height="15" font="0">DAPTOR</text>
<text top="1050" left="386" width="364" height="19" font="9">implementation is JVMTI method referringObjects,</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="735" width="15" height="19" font="9">23</text>
<text top="101" left="140" width="610" height="19" font="9">which helps us to identify all objects referring to outdated objects. The problem with method</text>
<text top="124" left="140" width="148" height="12" font="9">referringObjects</text>
<text top="119" left="293" width="457" height="19" font="9">is, that it performs a full heap search every time we request the referring</text>
<text top="137" left="140" width="610" height="19" font="9">objects of an outdated object, which causes long program update times and thus long time periods</text>
<text top="155" left="140" width="586" height="19" font="9">of program unavailability if the program heap is large and/or many requests must be processed.</text>
<text top="197" left="253" width="5" height="12" font="13">1</text>
<text top="199" left="291" width="64" height="9" font="13">TempDisplay {</text>
<text top="208" left="253" width="5" height="12" font="13">2</text>
<text top="210" left="272" width="69" height="9" font="13">TempSensor ts;</text>
<text top="220" left="253" width="5" height="12" font="13">3</text>
<text top="222" left="272" width="79" height="9" font="13">IContainer cont;</text>
<text top="231" left="253" width="5" height="12" font="13">4</text>
<text top="233" left="272" width="15" height="9" font="13">...</text>
<text top="243" left="253" width="5" height="12" font="13">5</text>
<text top="245" left="272" width="74" height="9" font="13">TempDisplay() {</text>
<text top="254" left="253" width="5" height="12" font="13">6</text>
<text top="256" left="281" width="15" height="9" font="13">...</text>
<text top="266" left="253" width="5" height="12" font="13">7</text>
<text top="268" left="281" width="18" height="9" font="13">ts =</text>
<text top="268" left="321" width="65" height="9" font="13">TempSensor();</text>
<text top="277" left="253" width="5" height="12" font="13">8</text>
<text top="279" left="281" width="15" height="9" font="13">...</text>
<text top="289" left="253" width="5" height="12" font="13">9</text>
<text top="291" left="272" width="5" height="9" font="13">}</text>
<text top="300" left="249" width="10" height="12" font="13">10</text>
<text top="312" left="249" width="10" height="12" font="13">11</text>
<text top="314" left="295" width="74" height="9" font="13">displayTemp() {</text>
<text top="323" left="249" width="10" height="12" font="13">12</text>
<text top="325" left="281" width="86" height="9" font="13">ts.averageTemp();</text>
<text top="335" left="249" width="10" height="12" font="13">13</text>
<text top="337" left="272" width="5" height="9" font="13">}</text>
<text top="346" left="249" width="19" height="12" font="13">14 }</text>
<text top="197" left="421" width="10" height="12" font="13">15</text>
<text top="199" left="464" width="64" height="9" font="13">TempDisplay {</text>
<text top="208" left="421" width="10" height="12" font="13">16</text>
<text top="210" left="445" width="69" height="9" font="13">TempSensor ts;</text>
<text top="220" left="421" width="10" height="12" font="13">17</text>
<text top="222" left="445" width="79" height="9" font="13">IContainer cont;</text>
<text top="231" left="421" width="10" height="12" font="13">18</text>
<text top="233" left="445" width="15" height="9" font="13">...</text>
<text top="243" left="421" width="10" height="12" font="13">19</text>
<text top="245" left="445" width="74" height="9" font="13">TempDisplay() {</text>
<text top="254" left="421" width="10" height="12" font="13">20</text>
<text top="256" left="454" width="15" height="9" font="13">...</text>
<text top="266" left="421" width="10" height="12" font="13">21</text>
<text top="268" left="454" width="28" height="9" font="13">cont =</text>
<text top="268" left="504" width="60" height="9" font="13">Container();</text>
<text top="277" left="421" width="10" height="12" font="13">22</text>
<text top="279" left="454" width="43" height="9" font="13">cont.ts =</text>
<text top="279" left="519" width="81" height="9" font="13">TempSensor_v2();</text>
<text top="289" left="421" width="10" height="12" font="13">23</text>
<text top="291" left="454" width="15" height="9" font="13">...</text>
<text top="300" left="421" width="10" height="12" font="13">24</text>
<text top="302" left="445" width="5" height="9" font="13">}</text>
<text top="312" left="421" width="10" height="12" font="13">25</text>
<text top="323" left="421" width="10" height="12" font="13">26</text>
<text top="325" left="468" width="74" height="9" font="13">displayTemp() {</text>
<text top="335" left="421" width="10" height="12" font="13">27</text>
<text top="337" left="464" width="38" height="9" font="13">(cont ==</text>
<text top="337" left="529" width="99" height="9" font="13">|| cont.upToDate())</text>
<text top="336" left="631" width="5" height="11" font="13">{</text>
<text top="346" left="421" width="10" height="12" font="13">28</text>
<text top="348" left="463" width="147" height="9" font="13">cont = Container.mapState(ts);</text>
<text top="358" left="421" width="10" height="12" font="13">29</text>
<text top="359" left="454" width="5" height="11" font="13">}</text>
<text top="369" left="421" width="10" height="12" font="13">30</text>
<text top="371" left="454" width="111" height="9" font="13">cont.ts.currentTemp();</text>
<text top="381" left="421" width="10" height="12" font="13">31</text>
<text top="383" left="445" width="5" height="9" font="13">}</text>
<text top="392" left="421" width="19" height="12" font="13">32 }</text>
<text top="432" left="421" width="10" height="12" font="13">33</text>
<text top="434" left="464" width="45" height="9" font="13">Container</text>
<text top="434" left="566" width="59" height="9" font="13">IContainer {</text>
<text top="444" left="421" width="10" height="12" font="13">34</text>
<text top="446" left="444" width="82" height="9" font="13">TempSensor v2 ts;</text>
<text top="455" left="421" width="10" height="12" font="13">35</text>
<text top="457" left="444" width="15" height="9" font="13">...</text>
<text top="467" left="421" width="10" height="12" font="13">36</text>
<text top="469" left="541" width="89" height="9" font="13">Container mapState</text>
<text top="478" left="421" width="10" height="12" font="13">37</text>
<text top="480" left="549" width="79" height="9" font="13">(TempSensor old)</text>
<text top="480" left="631" width="5" height="11" font="13">{</text>
<text top="490" left="421" width="10" height="12" font="13">38</text>
<text top="492" left="453" width="77" height="9" font="13">Container cont =</text>
<text top="492" left="552" width="60" height="9" font="13">Container();</text>
<text top="501" left="421" width="10" height="12" font="13">39</text>
<text top="513" left="421" width="10" height="12" font="13">40</text>
<text top="515" left="453" width="77" height="9" font="13">// initialize ts</text>
<text top="524" left="421" width="10" height="12" font="13">41</text>
<text top="527" left="453" width="125" height="9" font="13">// map state from old -&gt; ts</text>
<text top="536" left="421" width="10" height="12" font="13">42</text>
<text top="547" left="421" width="10" height="12" font="13">43</text>
<text top="550" left="487" width="25" height="9" font="13">cont;</text>
<text top="559" left="421" width="10" height="12" font="13">44</text>
<text top="560" left="444" width="5" height="11" font="13">}</text>
<text top="570" left="421" width="19" height="12" font="13">45 }</text>
<text top="395" left="371" width="15" height="10" font="6">DSU</text>
<text top="614" left="499" width="55" height="9" font="6">+currentTemp()</text>
<text top="604" left="500" width="62" height="9" font="21"><b>TempSensor_v2</b></text>
<text top="614" left="288" width="59" height="9" font="6">+averageTemp()</text>
<text top="604" left="294" width="48" height="9" font="21"><b>TempSensor</b></text>
<text top="638" left="357" width="176" height="17" font="7">Figure 12. Lazy state mapping.</text>
<text top="673" left="155" width="545" height="19" font="9">An appropriate solution to the described problem are lazy state mappings as Kim <a href="pdfxml.html#32">[</a></text>
<text top="673" left="701" width="15" height="19" font="10"><a href="pdfxml.html#32">23</a></text>
<text top="673" left="716" width="34" height="19" font="9"><a href="pdfxml.html#32">] </a>and</text>
<text top="691" left="140" width="74" height="19" font="9">Gregersen <a href="pdfxml.html#32">[</a></text>
<text top="691" left="215" width="15" height="19" font="10"><a href="pdfxml.html#32">16</a></text>
<text top="691" left="230" width="520" height="19" font="9"><a href="pdfxml.html#32">] </a>use them in their DSU approaches. Different from our current implementation,</text>
<text top="709" left="140" width="610" height="19" font="9">in which we map the state and update the referring program parts in one atomic step, lazy state</text>
<text top="727" left="140" width="610" height="19" font="9">mappings operate on a per access basis. That is, the state transfer between the outdated and up-to-</text>
<text top="745" left="140" width="610" height="19" font="9">date object and the update of the referring program parts is carried out from within the program if</text>
<text top="763" left="140" width="259" height="19" font="9">and only if an outdated object is accessed.</text>
<text top="781" left="155" width="40" height="19" font="9">Figure</text>
<text top="781" left="201" width="15" height="19" font="10"><a href="pdfxml.html#23">12</a></text>
<text top="781" left="222" width="528" height="19" font="9">exempliﬁes how lazy state mappings work and how we are going to integrate them</text>
<text top="799" left="140" width="36" height="19" font="9">into J</text>
<text top="802" left="176" width="17" height="15" font="0">AV</text>
<text top="799" left="192" width="11" height="19" font="9">A</text>
<text top="802" left="204" width="52" height="15" font="0">DAPTOR</text>
<text top="799" left="256" width="494" height="19" font="9">. In order to dynamically change our small weather station program such that</text>
<text top="817" left="140" width="453" height="19" font="9">it computes and displays current instead of the average temperatures, J</text>
<text top="820" left="593" width="17" height="15" font="0">AV</text>
<text top="817" left="609" width="11" height="19" font="9">A</text>
<text top="820" left="621" width="52" height="15" font="0">DAPTOR</text>
<text top="817" left="679" width="71" height="19" font="9">updates the</text>
<text top="835" left="140" width="519" height="19" font="9">running program as follows. It processes all update steps we described in Section</text>
<text top="835" left="665" width="8" height="19" font="10"><a href="pdfxml.html#5">4</a></text>
<text top="835" left="672" width="78" height="19" font="9"><a href="pdfxml.html#5">, </a>but applies</text>
<text top="853" left="140" width="610" height="19" font="9">additional code to the program, which carries out the state mapping and updates the referring</text>
<text top="871" left="140" width="529" height="19" font="9">program parts without the need of method referringObjects. More precisely, J</text>
<text top="874" left="670" width="17" height="15" font="0">AV</text>
<text top="871" left="685" width="11" height="19" font="9">A</text>
<text top="874" left="697" width="52" height="15" font="0">DAPTOR</text>
<text top="889" left="140" width="610" height="19" font="9">modiﬁes the program code in such way that before each access to a potentially outdated object,</text>
<text top="907" left="140" width="610" height="19" font="9">it will be checked, whether the object must be updated or not. In the example depicted in Figure</text>
<text top="924" left="140" width="15" height="19" font="10"><a href="pdfxml.html#23">12</a></text>
<text top="924" left="156" width="594" height="19" font="9"><a href="pdfxml.html#23">, </a>this applies to all references to ﬁeld ts, which we must update using our container approach</text>
<text top="942" left="140" width="610" height="19" font="9">because we replaced class TempSensor with class version TempSensor v2 in order to add</text>
<text top="960" left="140" width="610" height="19" font="9">new method currentTemp. Concretely, before we access the up-to-date object (here of class</text>
<text top="983" left="140" width="116" height="12" font="9">TempSensor v2</text>
<text top="978" left="257" width="493" height="19" font="9">) stored in the container, we check whether the container object already exists</text>
<text top="996" left="140" width="229" height="19" font="9">and is up-to-date or not (see Figure</text>
<text top="996" left="375" width="15" height="19" font="10"><a href="pdfxml.html#23">12</a></text>
<text top="996" left="390" width="360" height="19" font="9"><a href="pdfxml.html#23">, </a>Line 27). In the latter case, a mapping method (in our</text>
<text top="1014" left="140" width="448" height="19" font="9">example method mapState) of the container class will be called (Figure</text>
<text top="1014" left="592" width="15" height="19" font="10"><a href="pdfxml.html#23">12</a></text>
<text top="1014" left="607" width="143" height="19" font="9"><a href="pdfxml.html#23">, </a>Line 28). This method</text>
<text top="1032" left="140" width="610" height="19" font="9">maps the state from outdated object (here of type TempSensor) to the up-to-date object (i.e., of</text>
<text top="1050" left="140" width="610" height="19" font="9">type TempSensor v2), applies the newly created object to a container instance, and returns the</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="24" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="23" size="7" family="Times" color="#dcd6b4"/>
	<fontspec id="24" size="7" family="Times" color="#424242"/>
<text top="56" left="140" width="15" height="19" font="9">24</text>
<text top="101" left="140" width="184" height="19" font="9">container instance (see Figure</text>
<text top="101" left="328" width="15" height="19" font="10"><a href="pdfxml.html#23">12</a></text>
<text top="101" left="344" width="406" height="19" font="9"><a href="pdfxml.html#23">, </a>Lines 36 – 44). After the state mapping, the newly created object</text>
<text top="119" left="140" width="430" height="19" font="9">can be accessed as usual, i.e., via the container instance (see Line 30).</text>
<text top="17" left="829" width="56" height="10" font="23"><b>NO OBJECT</b></text>
<text top="17" left="912" width="24" height="10" font="23"><b>100X</b></text>
<text top="17" left="977" width="29" height="10" font="23"><b>1000X</b></text>
<text top="17" left="1042" width="34" height="10" font="23"><b>10000X</b></text>
<text top="17" left="1107" width="40" height="10" font="23"><b>100000X</b></text>
<text top="31" left="767" width="46" height="9" font="6">NO UPDATE</text>
<text top="45" left="763" width="53" height="9" font="6">ACCESS TIME</text>
<text top="31" left="875" width="14" height="9" font="6">680</text>
<text top="31" left="943" width="14" height="9" font="6">861</text>
<text top="31" left="1010" width="14" height="9" font="6">878</text>
<text top="31" left="1077" width="14" height="9" font="6">895</text>
<text top="31" left="1145" width="14" height="9" font="6">916</text>
<text top="45" left="871" width="18" height="9" font="6">1407</text>
<text top="45" left="938" width="18" height="9" font="6">1518</text>
<text top="45" left="1005" width="18" height="9" font="6">1540</text>
<text top="45" left="1073" width="18" height="9" font="6">1809</text>
<text top="45" left="1140" width="18" height="9" font="6">5346</text>
<text top="289" left="285" width="6" height="11" font="13">0</text>
<text top="257" left="268" width="22" height="11" font="13">1500</text>
<text top="224" left="268" width="22" height="11" font="13">3000</text>
<text top="191" left="268" width="22" height="11" font="13">4500</text>
<text top="159" left="268" width="22" height="11" font="13">6000</text>
<text top="299" left="332" width="6" height="11" font="13">0</text>
<text top="299" left="393" width="17" height="11" font="13">671</text>
<text top="299" left="458" width="22" height="11" font="13">6710</text>
<text top="299" left="522" width="28" height="11" font="13">67100</text>
<text top="299" left="586" width="33" height="11" font="13">671000</text>
<text top="164" left="603" width="22" height="11" font="13">5346</text>
<text top="241" left="536" width="22" height="11" font="13">1809</text>
<text top="247" left="469" width="22" height="11" font="13">1540</text>
<text top="247" left="403" width="22" height="11" font="13">1518</text>
<text top="250" left="336" width="22" height="11" font="13">1407</text>
<text top="260" left="582" width="17" height="11" font="13">916</text>
<text top="261" left="515" width="17" height="11" font="13">895</text>
<text top="261" left="448" width="17" height="11" font="13">878</text>
<text top="262" left="382" width="17" height="11" font="13">861</text>
<text top="266" left="315" width="17" height="11" font="13">680</text>
<text top="143" left="434" width="68" height="11" font="24">DIAGRAMM 20</text>
<text top="297" left="261" width="0" height="11" font="14"><b>T</b></text>
<text top="291" left="261" width="0" height="11" font="14"><b>im</b></text>
<text top="280" left="261" width="0" height="11" font="14"><b>e </b></text>
<text top="272" left="261" width="0" height="11" font="14"><b>A</b></text>
<text top="265" left="261" width="0" height="11" font="14"><b>p</b></text>
<text top="259" left="261" width="0" height="11" font="14"><b>p</b></text>
<text top="253" left="261" width="0" height="11" font="14"><b>lic</b></text>
<text top="242" left="261" width="0" height="11" font="14"><b>ati</b></text>
<text top="230" left="261" width="0" height="11" font="14"><b>o</b></text>
<text top="224" left="261" width="0" height="11" font="14"><b>n</b></text>
<text top="218" left="261" width="0" height="11" font="14"><b> Pa</b></text>
<text top="203" left="261" width="0" height="11" font="14"><b>u</b></text>
<text top="197" left="261" width="0" height="11" font="14"><b>se</b></text>
<text top="186" left="261" width="0" height="11" font="14"><b>d</b></text>
<text top="180" left="261" width="0" height="11" font="14"><b> (i</b></text>
<text top="171" left="261" width="0" height="11" font="14"><b>n</b></text>
<text top="165" left="261" width="0" height="11" font="14"><b> m</b></text>
<text top="154" left="261" width="0" height="11" font="14"><b>s)</b></text>
<text top="316" left="412" width="113" height="11" font="14"><b>Number of Data Objects</b></text>
<text top="340" left="362" width="88" height="11" font="13">Lazy State Mapping</text>
<text top="340" left="507" width="89" height="11" font="13">Busy State Mapping</text>
<text top="365" left="258" width="375" height="17" font="7">Figure 13. Update speed HyperSQL: lazy vs. busy state mapping.</text>
<text top="400" left="155" width="595" height="19" font="9">After we described how we could provide our tool with lazy state mappings, let us present some</text>
<text top="418" left="140" width="610" height="19" font="9">update-speed numbers conﬁrming that lazily mapping the state and thus avoiding to use method</text>
<text top="441" left="140" width="148" height="12" font="9">referringObjects</text>
<text top="436" left="292" width="306" height="19" font="9">could signiﬁcantly improve the update speed of J</text>
<text top="439" left="598" width="17" height="15" font="0">AV</text>
<text top="436" left="614" width="11" height="19" font="9">A</text>
<text top="439" left="626" width="52" height="15" font="0">DAPTOR</text>
<text top="436" left="678" width="72" height="19" font="9">. In Section</text>
<text top="454" left="140" width="19" height="19" font="10"><a href="pdfxml.html#17">5.4</a></text>
<text top="454" left="166" width="229" height="19" font="9">we measured the update times of J</text>
<text top="457" left="396" width="17" height="15" font="0">AV</text>
<text top="454" left="411" width="11" height="19" font="9">A</text>
<text top="457" left="423" width="52" height="15" font="0">DAPTOR</text>
<text top="454" left="483" width="267" height="19" font="9">regarding our HyperSQL case study with</text>
<text top="472" left="140" width="610" height="19" font="9">zero, hundreds, thousands, ten thousands, and hundred thousands of data objects. The numbers</text>
<text top="490" left="140" width="305" height="19" font="9">ranged from 1407 to 5346 milliseconds. With a J</text>
<text top="493" left="445" width="17" height="15" font="0">AV</text>
<text top="490" left="461" width="11" height="19" font="9">A</text>
<text top="493" left="473" width="52" height="15" font="0">DAPTOR</text>
<text top="490" left="530" width="220" height="19" font="9">prototype which provides lazy state</text>
<text top="508" left="140" width="266" height="19" font="9">mappings as we sketched them in Figure</text>
<text top="508" left="412" width="15" height="19" font="10"><a href="pdfxml.html#23">12</a></text>
<text top="508" left="428" width="322" height="19" font="9"><a href="pdfxml.html#23">, </a>we were able to signiﬁcantly reduce the update-</text>
<text top="526" left="140" width="121" height="19" font="9">speed times. Figure</text>
<text top="526" left="266" width="15" height="19" font="10"><a href="pdfxml.html#24">13</a></text>
<text top="526" left="286" width="464" height="19" font="9">contrasts the old update-speed times with the new ones based on lazy state</text>
<text top="544" left="140" width="610" height="19" font="9">mappings. What can be seen is, that the update-speed numbers remain somewhat comparable as</text>
<text top="562" left="140" width="610" height="19" font="9">long as only few objects are on the heap of the JVM. But, in case of many objects on the heap</text>
<text top="579" left="140" width="282" height="19" font="9">(here hundred thousands of data objects), J</text>
<text top="582" left="422" width="17" height="15" font="0">AV</text>
<text top="579" left="438" width="11" height="19" font="9">A</text>
<text top="582" left="450" width="52" height="15" font="0">DAPTOR</text>
<text top="579" left="510" width="240" height="19" font="9">based on lazy state mappings clearly</text>
<text top="597" left="140" width="610" height="19" font="9">outperforms our current (i.e., busy) state mapping implementation, i.e, the prototype requires to</text>
<text top="615" left="140" width="392" height="19" font="9">pause the application only 916 milliseconds, whereas current J</text>
<text top="618" left="532" width="17" height="15" font="0">AV</text>
<text top="615" left="548" width="11" height="19" font="9">A</text>
<text top="618" left="560" width="52" height="15" font="0">DAPTOR</text>
<text top="615" left="618" width="132" height="19" font="9">causes an application</text>
<text top="633" left="140" width="203" height="19" font="9">pause time of 5346 milliseconds.</text>
<text top="484" left="768" width="5" height="10" font="23"><b>1</b></text>
<text top="484" left="833" width="11" height="10" font="23"><b>10</b></text>
<text top="484" left="897" width="16" height="10" font="23"><b>100</b></text>
<text top="484" left="962" width="21" height="10" font="23"><b>1000</b></text>
<text top="484" left="1027" width="27" height="10" font="23"><b>10000</b></text>
<text top="484" left="1091" width="32" height="10" font="23"><b>100000</b></text>
<text top="498" left="680" width="49" height="9" font="6">LAZY STATE </text>
<text top="508" left="685" width="37" height="9" font="6">MAPPING</text>
<text top="522" left="679" width="51" height="9" font="6">BUSY STATE </text>
<text top="531" left="685" width="37" height="9" font="6">MAPPING</text>
<text top="498" left="793" width="9" height="9" font="6">17</text>
<text top="498" left="861" width="9" height="9" font="6">16</text>
<text top="498" left="928" width="9" height="9" font="6">18</text>
<text top="498" left="995" width="9" height="9" font="6">18</text>
<text top="498" left="1063" width="9" height="9" font="6">15</text>
<text top="498" left="1130" width="9" height="9" font="6">15</text>
<text top="522" left="789" width="14" height="9" font="6">377</text>
<text top="522" left="856" width="14" height="9" font="6">441</text>
<text top="522" left="919" width="18" height="9" font="6">1369</text>
<text top="522" left="982" width="23" height="9" font="6">10169</text>
<text top="522" left="1045" width="27" height="9" font="6">214072</text>
<text top="522" left="1103" width="36" height="9" font="6">18595330</text>
<text top="840" left="246" width="6" height="11" font="13">1</text>
<text top="818" left="241" width="11" height="11" font="13">10</text>
<text top="796" left="235" width="17" height="11" font="13">100</text>
<text top="775" left="230" width="22" height="11" font="13">1000</text>
<text top="753" left="224" width="28" height="11" font="13">10000</text>
<text top="732" left="219" width="33" height="11" font="13">100000</text>
<text top="710" left="213" width="39" height="11" font="13">1000000</text>
<text top="688" left="207" width="44" height="11" font="13">10000000</text>
<text top="667" left="202" width="50" height="11" font="13">100000000</text>
<text top="849" left="297" width="6" height="11" font="13">1</text>
<text top="849" left="367" width="11" height="11" font="13">10</text>
<text top="849" left="437" width="17" height="11" font="13">100</text>
<text top="849" left="507" width="22" height="11" font="13">1000</text>
<text top="849" left="577" width="28" height="11" font="13">10000</text>
<text top="849" left="647" width="33" height="11" font="13">100000</text>
<text top="674" left="654" width="44" height="11" font="13">18595330</text>
<text top="716" left="587" width="33" height="11" font="13">214072</text>
<text top="744" left="517" width="28" height="11" font="13">10169</text>
<text top="763" left="447" width="22" height="11" font="13">1369</text>
<text top="774" left="377" width="17" height="11" font="13">441</text>
<text top="775" left="304" width="17" height="11" font="13">377</text>
<text top="805" left="645" width="11" height="11" font="13">15</text>
<text top="805" left="572" width="11" height="11" font="13">15</text>
<text top="804" left="499" width="11" height="11" font="13">18</text>
<text top="804" left="427" width="11" height="11" font="13">18</text>
<text top="805" left="354" width="11" height="11" font="13">16</text>
<text top="804" left="281" width="11" height="11" font="13">17</text>
<text top="826" left="195" width="0" height="11" font="14"><b>T</b></text>
<text top="820" left="195" width="0" height="11" font="14"><b>im</b></text>
<text top="809" left="195" width="0" height="11" font="14"><b>e </b></text>
<text top="801" left="195" width="0" height="11" font="14"><b>A</b></text>
<text top="794" left="195" width="0" height="11" font="14"><b>p</b></text>
<text top="788" left="195" width="0" height="11" font="14"><b>p</b></text>
<text top="782" left="195" width="0" height="11" font="14"><b>lic</b></text>
<text top="771" left="195" width="0" height="11" font="14"><b>ati</b></text>
<text top="759" left="195" width="0" height="11" font="14"><b>o</b></text>
<text top="753" left="195" width="0" height="11" font="14"><b>n</b></text>
<text top="747" left="195" width="0" height="11" font="14"><b> Pa</b></text>
<text top="732" left="195" width="0" height="11" font="14"><b>u</b></text>
<text top="726" left="195" width="0" height="11" font="14"><b>se</b></text>
<text top="715" left="195" width="0" height="11" font="14"><b>d</b></text>
<text top="709" left="195" width="0" height="11" font="14"><b> (i</b></text>
<text top="700" left="195" width="0" height="11" font="14"><b>n</b></text>
<text top="694" left="195" width="0" height="11" font="14"><b> m</b></text>
<text top="683" left="195" width="0" height="11" font="14"><b>s)</b></text>
<text top="866" left="378" width="207" height="11" font="14"><b>Number of Objects scheduled for an Update</b></text>
<text top="884" left="370" width="95" height="12" font="12">Lazy State Mapping</text>
<text top="884" left="518" width="97" height="12" font="12">Busy State Mapping</text>
<text top="911" left="140" width="610" height="17" font="7">Figure 14. Update speed in correspondence to the number of objects to be updated: lazy vs. busy state</text>
<text top="926" left="419" width="53" height="17" font="7">mapping.</text>
<text top="960" left="155" width="202" height="19" font="9">The numbers presented in Figure</text>
<text top="960" left="360" width="15" height="19" font="10"><a href="pdfxml.html#24">14</a></text>
<text top="960" left="379" width="371" height="19" font="9">further underpin the beneﬁt of lazy state mappings. Different</text>
<text top="978" left="140" width="610" height="19" font="9">from our HyperSQL case study, where the number of objects to be updated remained unchanged</text>
<text top="996" left="140" width="610" height="19" font="9">with each benchmark conﬁguration, the here presented results outline how the application pause</text>
<text top="1014" left="140" width="587" height="19" font="9">times develop depending on the number of objects scheduled for an update. As shown in Figure</text>
<text top="1014" left="731" width="15" height="19" font="10"><a href="pdfxml.html#24">14</a></text>
<text top="1014" left="746" width="4" height="19" font="9"><a href="pdfxml.html#24">,</a></text>
<text top="1032" left="140" width="325" height="19" font="9">the application pause times caused by our current J</text>
<text top="1035" left="465" width="17" height="15" font="0">AV</text>
<text top="1032" left="481" width="11" height="19" font="9">A</text>
<text top="1035" left="493" width="52" height="15" font="0">DAPTOR</text>
<text top="1032" left="551" width="199" height="19" font="9">implementation further increase</text>
<text top="1050" left="140" width="610" height="19" font="9">dependent on the number of objects to be updated, which is because with each object update</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1173" width="892">
	<fontspec id="25" size="8" family="Times" color="#000000"/>
<text top="56" left="735" width="15" height="19" font="9">25</text>
<text top="101" left="141" width="6" height="19" font="9">J</text>
<text top="104" left="147" width="17" height="15" font="0">AV</text>
<text top="101" left="162" width="11" height="19" font="9">A</text>
<text top="104" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="101" left="232" width="518" height="19" font="9">must call method referringObjects. By contrast, the application pause times</text>
<text top="119" left="140" width="47" height="19" font="9">of our J</text>
<text top="122" left="187" width="17" height="15" font="0">AV</text>
<text top="119" left="203" width="11" height="19" font="9">A</text>
<text top="122" left="215" width="52" height="15" font="0">DAPTOR</text>
<text top="119" left="271" width="479" height="19" font="9">prototype based on lazy state mappings are signiﬁcantly shorter and moreover,</text>
<text top="137" left="140" width="531" height="19" font="9">remain virtually unchanged regardless of the number of objects that require an update.</text>
<text top="155" left="155" width="595" height="19" font="9">Because the tests with our prototype show signiﬁcant update-speed improvements, we are</text>
<text top="173" left="140" width="472" height="19" font="9">currently working to complete the integration of lazy state mappings into J</text>
<text top="176" left="612" width="17" height="15" font="0">AV</text>
<text top="173" left="628" width="11" height="19" font="9">A</text>
<text top="176" left="640" width="52" height="15" font="0">DAPTOR</text>
<text top="173" left="693" width="57" height="19" font="9">. What is</text>
<text top="191" left="140" width="610" height="19" font="9">still missing, is support for lazy state mappings within the Java system classes. Nevertheless, we are</text>
<text top="209" left="140" width="237" height="19" font="9">optimistic to provide a fully working J</text>
<text top="212" left="377" width="17" height="15" font="0">AV</text>
<text top="209" left="393" width="11" height="19" font="9">A</text>
<text top="212" left="405" width="52" height="15" font="0">DAPTOR</text>
<text top="209" left="461" width="238" height="19" font="9">version with lazy state mappings soon.</text>
<text top="258" left="140" width="326" height="13" font="9">7.2. Solutions Towards Consistent Program Updates</text>
<text top="281" left="140" width="434" height="19" font="9">The HyperSQL as well as the Snake case study show that J</text>
<text top="284" left="574" width="17" height="15" font="0">AV</text>
<text top="281" left="590" width="11" height="19" font="9">A</text>
<text top="284" left="602" width="52" height="15" font="0">DAPTOR</text>
<text top="281" left="665" width="85" height="19" font="9">could update</text>
<text top="299" left="140" width="610" height="19" font="9">programs without compromising their correctness, i.e., the programs consistency. This is, because</text>
<text top="317" left="141" width="6" height="19" font="9">J</text>
<text top="320" left="147" width="17" height="15" font="0">AV</text>
<text top="317" left="162" width="11" height="19" font="9">A</text>
<text top="320" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="317" left="233" width="517" height="19" font="9">already includes mechanisms aiming at consistent program updates. For instance,</text>
<text top="335" left="141" width="6" height="19" font="9">J</text>
<text top="338" left="147" width="17" height="15" font="0">AV</text>
<text top="335" left="162" width="11" height="19" font="9">A</text>
<text top="338" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="335" left="230" width="520" height="19" font="9">permits updates only if the program sources compile without errors. Another example</text>
<text top="353" left="140" width="53" height="19" font="9">is, that J</text>
<text top="356" left="193" width="17" height="15" font="0">AV</text>
<text top="353" left="209" width="11" height="19" font="9">A</text>
<text top="356" left="221" width="52" height="15" font="0">DAPTOR</text>
<text top="353" left="278" width="472" height="19" font="9">pauses the application during the update in order to ensure that all changed</text>
<text top="371" left="140" width="610" height="19" font="9">program parts are present within the JVM. However, similar to other DSU approaches, the current</text>
<text top="389" left="141" width="6" height="19" font="9">J</text>
<text top="392" left="147" width="17" height="15" font="0">AV</text>
<text top="389" left="162" width="11" height="19" font="9">A</text>
<text top="392" left="174" width="52" height="15" font="0">DAPTOR</text>
<text top="389" left="234" width="516" height="19" font="9">implementation does not ensure program consistency at all beyond the update.</text>
<text top="407" left="140" width="376" height="19" font="9">Therefore, we discuss how to improve our tool in this regard.</text>
<text top="455" left="152" width="5" height="13" font="12">1</text>
<text top="457" left="195" width="71" height="10" font="12">TempDisplay {</text>
<text top="468" left="152" width="5" height="13" font="12">2</text>
<text top="470" left="173" width="77" height="10" font="12">TempSensor ts;</text>
<text top="481" left="152" width="5" height="13" font="12">3</text>
<text top="483" left="173" width="88" height="10" font="12">IContainer cont;</text>
<text top="494" left="152" width="5" height="13" font="12">4</text>
<text top="496" left="173" width="17" height="10" font="12">...</text>
<text top="507" left="152" width="5" height="13" font="12">5</text>
<text top="509" left="199" width="73" height="10" font="12">displayTemp()</text>
<text top="509" left="314" width="122" height="10" font="12">InterruptedException {</text>
<text top="519" left="152" width="5" height="13" font="12">6</text>
<text top="522" left="251" width="32" height="10" font="12">(ts) {</text>
<text top="532" left="152" width="5" height="13" font="12">7</text>
<text top="535" left="193" width="56" height="10" font="12">ts.wait();</text>
<text top="545" left="152" width="5" height="13" font="12">8</text>
<text top="548" left="193" width="96" height="10" font="12">ts.requestTemp();</text>
<text top="558" left="152" width="5" height="13" font="12">9</text>
<text top="561" left="193" width="17" height="10" font="12">...</text>
<text top="571" left="147" width="11" height="13" font="12">10</text>
<text top="574" left="183" width="6" height="10" font="12">}</text>
<text top="584" left="147" width="11" height="13" font="12">11</text>
<text top="586" left="173" width="6" height="10" font="12">}</text>
<text top="597" left="147" width="11" height="13" font="12">12</text>
<text top="610" left="147" width="11" height="13" font="12">13</text>
<text top="612" left="199" width="83" height="10" font="12">measureTemp() {</text>
<text top="623" left="147" width="11" height="13" font="12">14</text>
<text top="625" left="251" width="28" height="10" font="12">(ts){</text>
<text top="636" left="147" width="11" height="13" font="12">15</text>
<text top="638" left="193" width="96" height="10" font="12">ts.averageTemp();</text>
<text top="649" left="147" width="11" height="13" font="12">16</text>
<text top="651" left="193" width="68" height="10" font="12">ts.notify();</text>
<text top="661" left="147" width="11" height="13" font="12">17</text>
<text top="664" left="183" width="6" height="10" font="12">}</text>
<text top="674" left="147" width="11" height="13" font="12">18</text>
<text top="677" left="173" width="6" height="10" font="12">}</text>
<text top="687" left="147" width="22" height="13" font="12">19 }</text>
<text top="455" left="447" width="11" height="13" font="12">20</text>
<text top="457" left="495" width="71" height="10" font="12">TempDisplay {</text>
<text top="468" left="447" width="11" height="13" font="12">21</text>
<text top="470" left="473" width="77" height="10" font="12">TempSensor ts;</text>
<text top="481" left="447" width="11" height="13" font="12">22</text>
<text top="483" left="473" width="88" height="10" font="12">IContainer cont;</text>
<text top="494" left="447" width="11" height="13" font="12">23</text>
<text top="496" left="473" width="17" height="10" font="12">...</text>
<text top="507" left="447" width="11" height="13" font="12">24</text>
<text top="509" left="499" width="73" height="10" font="12">displayTemp()</text>
<text top="509" left="614" width="113" height="10" font="12">InterruptedException</text>
<text top="508" left="730" width="5" height="13" font="12">{</text>
<text top="519" left="447" width="11" height="13" font="12">25</text>
<text top="522" left="551" width="23" height="10" font="12">(ts)</text>
<text top="521" left="577" width="5" height="13" font="12">{</text>
<text top="532" left="447" width="11" height="13" font="12">26</text>
<text top="535" left="493" width="56" height="10" font="12">ts.wait();</text>
<text top="545" left="447" width="11" height="13" font="12">27</text>
<text top="548" left="493" width="96" height="10" font="12">ts.requestTemp();</text>
<text top="558" left="447" width="11" height="13" font="12">28</text>
<text top="561" left="493" width="17" height="10" font="12">...</text>
<text top="571" left="447" width="11" height="13" font="12">29</text>
<text top="573" left="483" width="5" height="13" font="12">}</text>
<text top="584" left="447" width="11" height="13" font="12">30</text>
<text top="586" left="473" width="5" height="13" font="12">}</text>
<text top="597" left="447" width="11" height="13" font="12">31</text>
<text top="610" left="447" width="11" height="13" font="12">32</text>
<text top="612" left="499" width="83" height="10" font="12">measureTemp() {</text>
<text top="623" left="447" width="11" height="13" font="12">33</text>
<text top="625" left="551" width="56" height="10" font="12">(cont.ts){</text>
<text top="636" left="447" width="11" height="13" font="12">34</text>
<text top="638" left="498" width="124" height="10" font="12">cont.ts.currentTemp();</text>
<text top="649" left="447" width="11" height="13" font="12">35</text>
<text top="651" left="498" width="96" height="10" font="12">cont.ts.notify();</text>
<text top="661" left="447" width="11" height="13" font="12">36</text>
<text top="664" left="483" width="6" height="10" font="12">}</text>
<text top="674" left="447" width="11" height="13" font="12">37</text>
<text top="677" left="473" width="6" height="10" font="12">}</text>
<text top="687" left="447" width="22" height="13" font="12">38 }</text>
<text top="733" left="479" width="11" height="13" font="12">39</text>
<text top="736" left="527" width="51" height="10" font="12">Container</text>
<text top="736" left="641" width="66" height="10" font="12">IContainer {</text>
<text top="746" left="479" width="11" height="13" font="12">40</text>
<text top="748" left="505" width="92" height="10" font="12">TempSensor v2 ts;</text>
<text top="759" left="479" width="11" height="13" font="12">41</text>
<text top="761" left="505" width="17" height="10" font="12">...</text>
<text top="772" left="479" width="22" height="13" font="12">42 }</text>
<text top="834" left="555" width="72" height="11" font="12">+ currentTemp()</text>
<text top="822" left="555" width="72" height="11" font="12">+requestTemp()</text>
<text top="810" left="556" width="78" height="11" font="25"><b>TempSensor_v2</b></text>
<text top="833" left="256" width="75" height="11" font="12">+averageTemp()</text>
<text top="821" left="256" width="72" height="11" font="12">+requestTemp()</text>
<text top="809" left="263" width="61" height="11" font="25"><b>TempSensor</b></text>
<text top="589" left="640" width="45" height="11" font="14"><b> Deadlock</b></text>
<text top="737" left="433" width="17" height="12" font="13">DSU</text>
<text top="859" left="275" width="341" height="17" font="7">Figure 15. Deadlocks because of dynamic software updates.</text>
<text top="928" left="140" width="177" height="13" font="9">7.2.1. Thread-safe Updates.</text>
<text top="924" left="325" width="271" height="19" font="9">One issue, we plan to tackle with future J</text>
<text top="927" left="596" width="17" height="15" font="0">AV</text>
<text top="924" left="612" width="11" height="19" font="9">A</text>
<text top="927" left="624" width="52" height="15" font="0">DAPTOR</text>
<text top="924" left="683" width="67" height="19" font="9">versions is</text>
<text top="942" left="140" width="610" height="19" font="9">the lack of support for thread-safe updates of multi-threaded applications. Currently, updates of</text>
<text top="960" left="140" width="610" height="19" font="9">multi-threaded applications may cause deadlocks and thus inconsistencies under certain conditions.</text>
<text top="978" left="140" width="253" height="19" font="9">Such a scenario is depicted in Figure</text>
<text top="978" left="401" width="15" height="19" font="10"><a href="pdfxml.html#25">15</a></text>
<text top="978" left="416" width="334" height="19" font="9"><a href="pdfxml.html#25">. </a>In the example, two different threads alternately</text>
<text top="996" left="140" width="610" height="19" font="9">access TempSensor ts of class TempDisplay of our small weather station. The ﬁrst thread</text>
<text top="1014" left="140" width="610" height="19" font="9">periodically instructs ts to measure the temperature (by calling method measureTemp) whereas</text>
<text top="1032" left="140" width="610" height="19" font="9">the second thread is responsible for displaying the measured temperature (by calling method</text>
<text top="1055" left="140" width="102" height="12" font="9">displayTemp</text>
<text top="1050" left="242" width="508" height="19" font="9">). Because measuring and displaying the temperature at the same time would cause</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="26" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">26</text>
<text top="101" left="140" width="589" height="19" font="9">unexpected program behavior, access to TempSensor ts must be synchronized (see Figure</text>
<text top="101" left="735" width="15" height="19" font="10"><a href="pdfxml.html#25">15</a></text>
<text top="119" left="140" width="200" height="19" font="9">Lines 6 – 10 and Lines 14 – 17).</text>
<text top="137" left="155" width="171" height="19" font="9">What could happen when J</text>
<text top="140" left="326" width="17" height="15" font="0">AV</text>
<text top="137" left="342" width="11" height="19" font="9">A</text>
<text top="140" left="354" width="52" height="15" font="0">DAPTOR</text>
<text top="137" left="411" width="339" height="19" font="9">updates a multi-threaded application such as shown in</text>
<text top="155" left="140" width="40" height="19" font="9">Figure</text>
<text top="155" left="186" width="15" height="19" font="10"><a href="pdfxml.html#25">15</a></text>
<text top="155" left="206" width="544" height="19" font="9">(note that for clarity reasons the lazy state mapping related code is hidden) is, that for</text>
<text top="173" left="140" width="610" height="19" font="9">some methods the necessary method body redeﬁnitions already took effect, while other methods</text>
<text top="191" left="140" width="610" height="19" font="9">remain unaffected, which is due to the principles of Java HotSwap (remember that method body</text>
<text top="209" left="140" width="610" height="19" font="9">redeﬁnitions would not affect methods active on the stack at the moment of redeﬁnition). In</text>
<text top="227" left="140" width="242" height="19" font="9">our example (see right side of Figure</text>
<text top="227" left="389" width="15" height="19" font="10"><a href="pdfxml.html#25">15</a></text>
<text top="227" left="404" width="346" height="19" font="9"><a href="pdfxml.html#25">), </a>method measureTemp (Lines 32 – 37) is already</text>
<text top="245" left="140" width="610" height="19" font="9">redeﬁned and thus refers to an object of up-to-date class version TempSensor v2, whereas</text>
<text top="262" left="140" width="610" height="19" font="9">method displayTemp (Lines 24 – 30) is still active on the stack with the old method body</text>
<text top="280" left="140" width="610" height="19" font="9">referring to outdated TempSensor ts. What appears to be the problem here is that method</text>
<text top="303" left="140" width="55" height="12" font="9">notify</text>
<text top="298" left="202" width="45" height="19" font="9">(Figure</text>
<text top="298" left="253" width="15" height="19" font="10"><a href="pdfxml.html#25">15</a></text>
<text top="298" left="268" width="482" height="19" font="9"><a href="pdfxml.html#25">, </a>Line 35) would not activate the thread executing method displayTemp</text>
<text top="316" left="140" width="587" height="19" font="9">because method notify is executed on a different object. In other words, we have a deadlock.</text>
<text top="361" left="154" width="5" height="13" font="12">1</text>
<text top="363" left="196" width="71" height="10" font="12">TempDisplay {</text>
<text top="374" left="154" width="5" height="13" font="12">2</text>
<text top="376" left="174" width="76" height="10" font="12">TempSensor ts;</text>
<text top="387" left="154" width="5" height="13" font="12">3</text>
<text top="389" left="174" width="88" height="10" font="12">IContainer cont;</text>
<text top="399" left="154" width="5" height="13" font="12">4</text>
<text top="402" left="174" width="17" height="10" font="12">...</text>
<text top="412" left="154" width="5" height="13" font="12">5</text>
<text top="415" left="200" width="73" height="10" font="12">displayTemp()</text>
<text top="415" left="314" width="121" height="10" font="12">InterruptedException {</text>
<text top="425" left="154" width="5" height="13" font="12">6</text>
<text top="428" left="252" width="73" height="10" font="12">(ts.syncObj){</text>
<text top="438" left="154" width="5" height="13" font="12">7</text>
<text top="441" left="194" width="101" height="10" font="12">ts.syncObj.wait();</text>
<text top="451" left="154" width="5" height="13" font="12">8</text>
<text top="454" left="194" width="95" height="10" font="12">ts.requestTemp();</text>
<text top="464" left="154" width="5" height="13" font="12">9</text>
<text top="466" left="194" width="17" height="10" font="12">...</text>
<text top="477" left="148" width="11" height="13" font="12">10</text>
<text top="479" left="184" width="6" height="10" font="12">}</text>
<text top="490" left="148" width="11" height="13" font="12">11</text>
<text top="492" left="174" width="6" height="10" font="12">}</text>
<text top="503" left="148" width="11" height="13" font="12">12</text>
<text top="516" left="148" width="11" height="13" font="12">13</text>
<text top="518" left="200" width="82" height="10" font="12">measureTemp() {</text>
<text top="529" left="148" width="11" height="13" font="12">14</text>
<text top="531" left="252" width="73" height="10" font="12">(ts.syncObj){</text>
<text top="541" left="148" width="11" height="13" font="12">15</text>
<text top="544" left="194" width="95" height="10" font="12">ts.averageTemp();</text>
<text top="554" left="148" width="11" height="13" font="12">16</text>
<text top="557" left="194" width="112" height="10" font="12">ts.syncObj.notify();</text>
<text top="567" left="148" width="11" height="13" font="12">17</text>
<text top="570" left="184" width="6" height="10" font="12">}</text>
<text top="580" left="148" width="11" height="13" font="12">18</text>
<text top="583" left="174" width="6" height="10" font="12">}</text>
<text top="593" left="148" width="22" height="13" font="12">19 }</text>
<text top="361" left="448" width="11" height="13" font="12">20</text>
<text top="363" left="496" width="71" height="10" font="12">TempDisplay {</text>
<text top="374" left="448" width="11" height="13" font="12">21</text>
<text top="376" left="474" width="76" height="10" font="12">TempSensor ts;</text>
<text top="387" left="448" width="11" height="13" font="12">22</text>
<text top="389" left="474" width="87" height="10" font="12">IContainer cont;</text>
<text top="399" left="448" width="11" height="13" font="12">23</text>
<text top="402" left="474" width="17" height="10" font="12">...</text>
<text top="412" left="448" width="11" height="13" font="12">24</text>
<text top="415" left="500" width="73" height="10" font="12">displayTemp()</text>
<text top="415" left="614" width="112" height="10" font="12">InterruptedException</text>
<text top="414" left="729" width="5" height="13" font="12">{</text>
<text top="425" left="448" width="11" height="13" font="12">25</text>
<text top="428" left="552" width="67" height="10" font="12">(ts.syncObj)</text>
<text top="427" left="622" width="5" height="13" font="12">{</text>
<text top="438" left="448" width="11" height="13" font="12">26</text>
<text top="441" left="495" width="101" height="10" font="12">ts.syncObj.wait();</text>
<text top="451" left="448" width="11" height="13" font="12">27</text>
<text top="454" left="495" width="95" height="10" font="12">ts.requestTemp();</text>
<text top="464" left="448" width="11" height="13" font="12">28</text>
<text top="466" left="495" width="17" height="10" font="12">...</text>
<text top="477" left="448" width="11" height="13" font="12">29</text>
<text top="479" left="484" width="5" height="13" font="12">}</text>
<text top="490" left="448" width="11" height="13" font="12">30</text>
<text top="491" left="474" width="5" height="13" font="12">}</text>
<text top="503" left="448" width="11" height="13" font="12">31</text>
<text top="516" left="448" width="11" height="13" font="12">32</text>
<text top="518" left="500" width="82" height="10" font="12">measureTemp() {</text>
<text top="529" left="448" width="11" height="13" font="12">33</text>
<text top="531" left="552" width="101" height="10" font="12">(cont.ts.syncObj){</text>
<text top="541" left="448" width="11" height="13" font="12">34</text>
<text top="544" left="500" width="123" height="10" font="12">cont.ts.currentTemp();</text>
<text top="554" left="448" width="11" height="13" font="12">35</text>
<text top="557" left="500" width="140" height="10" font="12">cont.ts.syncObj.notify();</text>
<text top="567" left="448" width="11" height="13" font="12">36</text>
<text top="570" left="484" width="6" height="10" font="12">}</text>
<text top="580" left="448" width="11" height="13" font="12">37</text>
<text top="583" left="474" width="6" height="10" font="12">}</text>
<text top="593" left="448" width="22" height="13" font="12">38 }</text>
<text top="639" left="479" width="11" height="13" font="12">39</text>
<text top="641" left="527" width="51" height="10" font="12">Container</text>
<text top="641" left="641" width="66" height="10" font="12">IContainer {</text>
<text top="652" left="479" width="11" height="13" font="12">40</text>
<text top="654" left="505" width="92" height="10" font="12">TempSensor v2 ts;</text>
<text top="665" left="479" width="11" height="13" font="12">41</text>
<text top="667" left="505" width="17" height="10" font="12">...</text>
<text top="678" left="479" width="22" height="13" font="12">42 }</text>
<text top="495" left="632" width="18" height="11" font="14"><b> No </b></text>
<text top="495" left="650" width="45" height="11" font="25"><b>Deadlock</b></text>
<text top="752" left="252" width="75" height="11" font="12">+averageTemp()</text>
<text top="741" left="252" width="65" height="11" font="12">+requestTemp</text>
<text top="729" left="252" width="43" height="11" font="12">+syncObj</text>
<text top="717" left="263" width="61" height="11" font="25"><b>TempSensor</b></text>
<text top="752" left="553" width="69" height="11" font="12">+currentTemp()</text>
<text top="741" left="553" width="65" height="11" font="12">+requestTemp</text>
<text top="729" left="553" width="43" height="11" font="12">+syncObj</text>
<text top="717" left="556" width="78" height="11" font="25"><b>TempSensor_v2</b></text>
<text top="638" left="438" width="17" height="12" font="13">DSU</text>
<text top="777" left="240" width="410" height="17" font="7">Figure 16. Deadlock prevention through shared synchronization objects.</text>
<text top="815" left="155" width="595" height="19" font="9">To prevent deadlocks in multi-threaded applications such as sketched above, Gregersen proposes</text>
<text top="833" left="140" width="610" height="19" font="9">the usage of special synchronization objects which could be shared beyond different class</text>
<text top="851" left="140" width="59" height="19" font="9">versions <a href="pdfxml.html#32">[</a></text>
<text top="851" left="199" width="15" height="19" font="10"><a href="pdfxml.html#32">16</a></text>
<text top="851" left="215" width="52" height="19" font="9"><a href="pdfxml.html#32">]. </a>Figure</text>
<text top="851" left="270" width="15" height="19" font="10"><a href="pdfxml.html#26">16</a></text>
<text top="851" left="288" width="378" height="19" font="9">shows how those synchronization objects could be applied to J</text>
<text top="853" left="666" width="17" height="15" font="0">AV</text>
<text top="851" left="682" width="11" height="19" font="9">A</text>
<text top="853" left="693" width="52" height="15" font="0">DAPTOR</text>
<text top="851" left="746" width="4" height="19" font="9">.</text>
<text top="869" left="140" width="610" height="19" font="9">Here class TempSensor gets an additional ﬁeld syncObj of type Object, which, instead of the</text>
<text top="891" left="140" width="92" height="12" font="9">TempSensor</text>
<text top="887" left="239" width="333" height="19" font="9">object itself, is used for synchronization (see Figure</text>
<text top="887" left="578" width="15" height="19" font="10"><a href="pdfxml.html#26">16</a></text>
<text top="887" left="593" width="157" height="19" font="9"><a href="pdfxml.html#26">, </a>Lines 6 and 14). If the</text>
<text top="904" left="140" width="610" height="19" font="9">application must be updated and again the necessary method body redeﬁnitions take effect for one</text>
<text top="922" left="140" width="399" height="19" font="9">method (in our example for method measureTemp, see Figure</text>
<text top="922" left="543" width="15" height="19" font="10"><a href="pdfxml.html#26">16</a></text>
<text top="922" left="559" width="191" height="19" font="9"><a href="pdfxml.html#26">, </a>Lines 32 – 37) but not for the</text>
<text top="940" left="140" width="265" height="19" font="9">other (i.e., method displayTemp, Figure</text>
<text top="940" left="409" width="15" height="19" font="10"><a href="pdfxml.html#26">16</a></text>
<text top="940" left="424" width="326" height="19" font="9"><a href="pdfxml.html#26">, </a>Lines 24 – 30), no deadlock occurs. This is, because</text>
<text top="958" left="140" width="610" height="19" font="9">the outdated object (here of type TempSensor) and its up-to-date counterpart (in our example an</text>
<text top="976" left="140" width="599" height="19" font="9">object of type TempSensor v2) share the same synchronization object (i.e., object syncObj).</text>
<text top="1018" left="140" width="182" height="13" font="9">7.2.2. State-Loss Prevention.</text>
<text top="1014" left="330" width="238" height="19" font="9">Another shortcoming of our current J</text>
<text top="1017" left="568" width="17" height="15" font="0">AV</text>
<text top="1014" left="583" width="11" height="19" font="9">A</text>
<text top="1017" left="595" width="52" height="15" font="0">DAPTOR</text>
<text top="1014" left="653" width="97" height="19" font="9">implementation</text>
<text top="1032" left="140" width="610" height="19" font="9">is, that it may cause program inconsistencies because of state losses. To illustrate the problem, we</text>
<text top="1050" left="140" width="610" height="19" font="9">use a slightly different version of our small weather station program to be updated at runtime (see</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="27" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="735" width="15" height="19" font="9">27</text>
<text top="108" left="153" width="5" height="13" font="12">1</text>
<text top="110" left="196" width="71" height="10" font="12">TempDisplay {</text>
<text top="120" left="153" width="5" height="13" font="12">2</text>
<text top="123" left="174" width="76" height="10" font="12">TempSensor ts;</text>
<text top="133" left="153" width="5" height="13" font="12">3</text>
<text top="136" left="174" width="88" height="10" font="12">IContainer cont;</text>
<text top="146" left="153" width="5" height="13" font="12">4</text>
<text top="149" left="174" width="17" height="10" font="12">...</text>
<text top="159" left="153" width="5" height="13" font="12">5</text>
<text top="162" left="200" width="82" height="10" font="12">displayTemp() {</text>
<text top="172" left="153" width="5" height="13" font="12">6</text>
<text top="175" left="212" width="6" height="10" font="12">(</text>
<text top="175" left="240" width="15" height="10" font="12">) {</text>
<text top="185" left="153" width="5" height="13" font="12">7</text>
<text top="187" left="194" width="130" height="10" font="12">ts.tempUnit = &#34;Celsius&#34;;</text>
<text top="198" left="153" width="5" height="13" font="12">8</text>
<text top="200" left="194" width="17" height="10" font="12">...</text>
<text top="211" left="153" width="5" height="13" font="12">9</text>
<text top="213" left="184" width="6" height="10" font="12">}</text>
<text top="224" left="148" width="11" height="13" font="12">10</text>
<text top="226" left="174" width="6" height="10" font="12">}</text>
<text top="237" left="148" width="11" height="13" font="12">11</text>
<text top="250" left="148" width="11" height="13" font="12">12</text>
<text top="252" left="200" width="82" height="10" font="12">measureTemp() {</text>
<text top="262" left="148" width="11" height="13" font="12">13</text>
<text top="275" left="148" width="11" height="13" font="12">14</text>
<text top="288" left="148" width="11" height="13" font="12">15</text>
<text top="301" left="148" width="11" height="13" font="12">16</text>
<text top="304" left="194" width="95" height="10" font="12">ts.averageTemp();</text>
<text top="314" left="148" width="11" height="13" font="12">17</text>
<text top="317" left="174" width="6" height="10" font="12">}</text>
<text top="327" left="148" width="22" height="13" font="12">18 }</text>
<text top="108" left="448" width="11" height="13" font="12">19</text>
<text top="110" left="496" width="71" height="10" font="12">TempDisplay {</text>
<text top="120" left="448" width="11" height="13" font="12">20</text>
<text top="123" left="474" width="76" height="10" font="12">TempSensor ts;</text>
<text top="133" left="448" width="11" height="13" font="12">21</text>
<text top="136" left="474" width="87" height="10" font="12">IContainer cont;</text>
<text top="146" left="448" width="11" height="13" font="12">22</text>
<text top="149" left="474" width="17" height="10" font="12">...</text>
<text top="159" left="448" width="11" height="13" font="12">23</text>
<text top="162" left="500" width="73" height="10" font="12">displayTemp()</text>
<text top="161" left="576" width="5" height="13" font="12">{</text>
<text top="172" left="448" width="11" height="13" font="12">24</text>
<text top="175" left="512" width="6" height="10" font="12">(</text>
<text top="175" left="540" width="6" height="10" font="12">)</text>
<text top="174" left="549" width="5" height="13" font="12">{</text>
<text top="185" left="448" width="11" height="13" font="12">25</text>
<text top="187" left="494" width="130" height="10" font="12">ts.tempUnit = &#34;Celsius&#34;;</text>
<text top="198" left="448" width="11" height="13" font="12">26</text>
<text top="200" left="494" width="17" height="10" font="12">...</text>
<text top="211" left="448" width="11" height="13" font="12">27</text>
<text top="212" left="484" width="5" height="13" font="12">}</text>
<text top="224" left="448" width="11" height="13" font="12">28</text>
<text top="225" left="474" width="5" height="13" font="12">}</text>
<text top="237" left="448" width="11" height="13" font="12">29</text>
<text top="250" left="448" width="11" height="13" font="12">30</text>
<text top="252" left="500" width="82" height="10" font="12">measureTemp() {</text>
<text top="262" left="448" width="11" height="13" font="12">31</text>
<text top="265" left="496" width="43" height="10" font="12">(cont ==</text>
<text top="265" left="568" width="110" height="10" font="12">|| cont.upToDate())</text>
<text top="264" left="681" width="5" height="13" font="12">{</text>
<text top="275" left="448" width="11" height="13" font="12">32</text>
<text top="278" left="494" width="169" height="10" font="12">cont = Container.mapState(ts));</text>
<text top="288" left="448" width="11" height="13" font="12">33</text>
<text top="290" left="484" width="5" height="13" font="12">}</text>
<text top="301" left="448" width="11" height="13" font="12">34</text>
<text top="304" left="484" width="123" height="10" font="12">cont.ts.currentTemp();</text>
<text top="314" left="448" width="11" height="13" font="12">35</text>
<text top="317" left="474" width="6" height="10" font="12">}</text>
<text top="327" left="448" width="22" height="13" font="12">36 }</text>
<text top="373" left="483" width="11" height="13" font="12">37</text>
<text top="376" left="531" width="51" height="10" font="12">Container</text>
<text top="376" left="646" width="66" height="10" font="12">IContainer {</text>
<text top="386" left="483" width="11" height="13" font="12">38</text>
<text top="388" left="509" width="92" height="10" font="12">TempSensor v2 ts;</text>
<text top="399" left="483" width="11" height="13" font="12">39</text>
<text top="401" left="509" width="17" height="10" font="12">...</text>
<text top="412" left="483" width="22" height="13" font="12">40 }</text>
<text top="370" left="428" width="17" height="12" font="13">DSU</text>
<text top="475" left="254" width="75" height="11" font="12">+averageTemp()</text>
<text top="463" left="254" width="47" height="11" font="12">+tempUnit</text>
<text top="452" left="263" width="61" height="11" font="25"><b>TempSensor</b></text>
<text top="475" left="560" width="69" height="11" font="12">+currentTemp()</text>
<text top="463" left="560" width="47" height="11" font="12">+tempUnit</text>
<text top="452" left="560" width="78" height="11" font="25"><b>TempSensor_v2</b></text>
<text top="500" left="272" width="346" height="17" font="7">Figure 17. State losses because of dynamic software updates.</text>
<text top="566" left="140" width="40" height="19" font="9">Figure</text>
<text top="566" left="185" width="15" height="19" font="10"><a href="pdfxml.html#27">17</a></text>
<text top="566" left="201" width="549" height="19" font="9"><a href="pdfxml.html#27">). </a>Here, we again have the situation that for one method (i.e., method measureTemp)</text>
<text top="584" left="140" width="610" height="19" font="9">the necessary method body redeﬁnition through Java HotSwap took effect, while the other method</text>
<text top="602" left="140" width="610" height="19" font="9">(in our example method displayTemp) is still active on the stack with the old method body. Now</text>
<text top="620" left="140" width="610" height="19" font="9">it could be the case, that the outdated method remains active on the stack while the state of the</text>
<text top="638" left="140" width="610" height="19" font="9">referred outdated object (in our case the TempSensor object referred by ts) is already mapped</text>
<text top="655" left="140" width="610" height="19" font="9">to an object of the new class version (here of type TempSensor v2), because another thread</text>
<text top="673" left="140" width="533" height="19" font="9">executed the redeﬁned method including the state mapping related code (see Figure</text>
<text top="673" left="679" width="15" height="19" font="10"><a href="pdfxml.html#27">17</a></text>
<text top="673" left="694" width="56" height="19" font="9"><a href="pdfxml.html#27">, </a>method</text>
<text top="696" left="140" width="102" height="12" font="9">measureTemp</text>
<text top="691" left="242" width="508" height="19" font="9">, Lines 31 – 33). The problem is, that the still active outdated method may change</text>
<text top="709" left="140" width="483" height="19" font="9">the state of the outdated referred object (such as sketched in Line 25 of Figure</text>
<text top="709" left="628" width="15" height="19" font="10"><a href="pdfxml.html#27">17</a></text>
<text top="709" left="643" width="107" height="19" font="9"><a href="pdfxml.html#27">) </a>and because the</text>
<text top="727" left="140" width="520" height="19" font="9">state transfer already happened, those state changes would be lost on the new object.</text>
<text top="745" left="155" width="266" height="19" font="9">What solves the problem depicted in Figure</text>
<text top="745" left="424" width="15" height="19" font="10"><a href="pdfxml.html#27">17</a></text>
<text top="745" left="443" width="307" height="19" font="9">is, to intercept the access to an outdated object and</text>
<text top="763" left="140" width="610" height="19" font="9">to redirect this access to the corresponding up-to-date object. The challenge is, that the interception</text>
<text top="781" left="140" width="488" height="19" font="9">and redirection of direct object accesses (such as depicted in Line 25 of Figure</text>
<text top="781" left="633" width="15" height="19" font="10"><a href="pdfxml.html#27">17</a></text>
<text top="781" left="648" width="102" height="19" font="9"><a href="pdfxml.html#27">) </a>is not possible,</text>
<text top="799" left="140" width="610" height="19" font="9">because of the missing indirection between caller and callee required to hook into the access path.</text>
<text top="817" left="140" width="351" height="19" font="9">The solution for this problem is delivered by Fowler <a href="pdfxml.html#32">[</a></text>
<text top="817" left="491" width="15" height="19" font="10"><a href="pdfxml.html#32">11</a></text>
<text top="817" left="507" width="243" height="19" font="9"><a href="pdfxml.html#32">] </a>who argues that, compared to direct</text>
<text top="835" left="140" width="511" height="19" font="9">accesses, getter and setter methods allow us to ﬂexibly manage accesses to objects.</text>
<text top="853" left="155" width="40" height="19" font="9">Figure</text>
<text top="853" left="201" width="15" height="19" font="10"><a href="pdfxml.html#28">18</a></text>
<text top="853" left="221" width="529" height="19" font="9">shows how we plan to use getter and setter methods to prevent state losses because</text>
<text top="871" left="140" width="610" height="19" font="9">of redeﬁnitions of active methods. Here, again method displayTemp scheduled for redeﬁnition</text>
<text top="889" left="140" width="353" height="19" font="9">is active on the stack (see Lines 43 – 48 of Figure</text>
<text top="889" left="502" width="15" height="19" font="10"><a href="pdfxml.html#28">18</a></text>
<text top="889" left="517" width="233" height="19" font="9"><a href="pdfxml.html#28">), </a>while the redeﬁnition of method</text>
<text top="911" left="140" width="102" height="12" font="9">measureTemp</text>
<text top="907" left="247" width="503" height="19" font="9">already took effect (Lines 50 – 56). Only difference to the example depicted in</text>
<text top="924" left="140" width="40" height="19" font="9">Figure</text>
<text top="924" left="185" width="15" height="19" font="10"><a href="pdfxml.html#27">17</a></text>
<text top="924" left="205" width="545" height="19" font="9">is, that we now access all objects, especially the outdated object of type TempSensor</text>
<text top="942" left="140" width="508" height="19" font="9">referenced by ﬁeld ts, via getter and setter methods (e.g., see Line 45 of Figure</text>
<text top="942" left="653" width="15" height="19" font="10"><a href="pdfxml.html#28">18</a></text>
<text top="942" left="668" width="82" height="19" font="9"><a href="pdfxml.html#28">). </a>To redirect</text>
<text top="960" left="140" width="610" height="19" font="9">object accesses from within outdated active methods to the up-to-date object, we redeﬁne all</text>
<text top="978" left="140" width="610" height="19" font="9">methods of old class versions (in our example method setTempUnit of old class version</text>
<text top="1001" left="140" width="92" height="12" font="9">TempSensor</text>
<text top="996" left="233" width="517" height="19" font="9">, Line 45) referenced by the outdated method as follows (see Lines 75 – 81, Figure</text>
<text top="1014" left="140" width="15" height="19" font="10"><a href="pdfxml.html#28">18</a></text>
<text top="1014" left="156" width="594" height="19" font="9"><a href="pdfxml.html#28">). </a>First of all, we check whether the state mapping already took place (Line 76), e.g., because of</text>
<text top="1032" left="140" width="610" height="19" font="9">the execution of an up-to-date method (such as in our example method measureTemp, see Lines</text>
<text top="1050" left="140" width="610" height="19" font="9">51 – 54). In case the state mapping is pending, we process the state mapping (Line 77). Next, we</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="28" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">28</text>
<text top="100" left="429" width="11" height="13" font="12">39</text>
<text top="103" left="477" width="71" height="10" font="12">TempDisplay {</text>
<text top="113" left="429" width="11" height="13" font="12">40</text>
<text top="116" left="455" width="77" height="10" font="12">TempSensor ts;</text>
<text top="126" left="429" width="11" height="13" font="12">41</text>
<text top="128" left="455" width="88" height="10" font="12">IContainer cont;</text>
<text top="139" left="429" width="11" height="13" font="12">42</text>
<text top="141" left="455" width="17" height="10" font="12">...</text>
<text top="152" left="429" width="11" height="13" font="12">43</text>
<text top="154" left="482" width="73" height="10" font="12">displayTemp()</text>
<text top="153" left="559" width="5" height="12" font="12">{</text>
<text top="164" left="429" width="11" height="13" font="12">44</text>
<text top="167" left="494" width="6" height="10" font="12">(</text>
<text top="167" left="522" width="6" height="10" font="12">)</text>
<text top="166" left="531" width="5" height="12" font="12">{</text>
<text top="177" left="429" width="11" height="13" font="12">45</text>
<text top="179" left="476" width="175" height="10" font="12">getTS().setTempUnit(&#34;Celsius&#34;);</text>
<text top="190" left="429" width="11" height="13" font="12">46</text>
<text top="192" left="476" width="17" height="10" font="12">...</text>
<text top="203" left="429" width="11" height="13" font="12">47</text>
<text top="204" left="466" width="5" height="12" font="12">}</text>
<text top="215" left="429" width="11" height="13" font="12">48</text>
<text top="217" left="455" width="5" height="12" font="12">}</text>
<text top="228" left="429" width="11" height="13" font="12">49</text>
<text top="241" left="429" width="11" height="13" font="12">50</text>
<text top="243" left="482" width="83" height="10" font="12">measureTemp() {</text>
<text top="254" left="429" width="11" height="13" font="12">51</text>
<text top="256" left="487" width="71" height="10" font="12">(getCont() ==</text>
<text top="256" left="588" width="139" height="10" font="12">|| getCont().upToDate())</text>
<text top="255" left="731" width="5" height="12" font="12">{</text>
<text top="266" left="429" width="11" height="13" font="12">52</text>
<text top="269" left="486" width="209" height="10" font="12">setCont(Container.mapState(getTS()));</text>
<text top="279" left="429" width="11" height="13" font="12">53</text>
<text top="282" left="486" width="203" height="10" font="12">getTS().setNewTS(getCont().getTS());</text>
<text top="292" left="429" width="11" height="13" font="12">54</text>
<text top="293" left="476" width="5" height="12" font="12">}</text>
<text top="305" left="429" width="11" height="13" font="12">55</text>
<text top="307" left="476" width="181" height="10" font="12">getCont().getTS().currentTemp();</text>
<text top="317" left="429" width="11" height="13" font="12">56</text>
<text top="320" left="455" width="6" height="10" font="12">}</text>
<text top="330" left="429" width="11" height="13" font="12">57</text>
<text top="343" left="429" width="11" height="13" font="12">58</text>
<text top="356" left="429" width="11" height="13" font="12">59</text>
<text top="358" left="455" width="109" height="10" font="12">TempSensor getTS() {</text>
<text top="368" left="429" width="11" height="13" font="12">60</text>
<text top="371" left="503" width="17" height="10" font="12">ts;</text>
<text top="381" left="429" width="11" height="13" font="12">61</text>
<text top="384" left="455" width="6" height="10" font="12">}</text>
<text top="394" left="429" width="11" height="13" font="12">62</text>
<text top="396" left="455" width="17" height="10" font="12">...</text>
<text top="407" left="429" width="22" height="13" font="12">63 }</text>
<text top="100" left="152" width="5" height="13" font="12">1</text>
<text top="102" left="195" width="72" height="10" font="12">TempDisplay {</text>
<text top="113" left="152" width="5" height="13" font="12">2</text>
<text top="115" left="173" width="78" height="10" font="12">TempSensor ts;</text>
<text top="126" left="152" width="5" height="13" font="12">3</text>
<text top="128" left="173" width="89" height="10" font="12">IContainer cont;</text>
<text top="138" left="152" width="5" height="13" font="12">4</text>
<text top="141" left="173" width="17" height="10" font="12">...</text>
<text top="151" left="152" width="5" height="13" font="12">5</text>
<text top="153" left="199" width="83" height="10" font="12">displayTemp() {</text>
<text top="164" left="152" width="5" height="13" font="12">6</text>
<text top="166" left="212" width="6" height="10" font="12">(</text>
<text top="166" left="240" width="15" height="10" font="12">) {</text>
<text top="177" left="152" width="5" height="13" font="12">7</text>
<text top="179" left="194" width="176" height="10" font="12">getTS().setTempUnit(&#34;Celsius&#34;);</text>
<text top="189" left="152" width="5" height="13" font="12">8</text>
<text top="192" left="194" width="17" height="10" font="12">...</text>
<text top="202" left="152" width="5" height="13" font="12">9</text>
<text top="205" left="183" width="6" height="10" font="12">}</text>
<text top="215" left="147" width="11" height="13" font="12">10</text>
<text top="217" left="173" width="6" height="10" font="12">}</text>
<text top="228" left="147" width="11" height="13" font="12">11</text>
<text top="240" left="147" width="11" height="13" font="12">12</text>
<text top="243" left="199" width="83" height="10" font="12">measureTemp() {</text>
<text top="253" left="147" width="11" height="13" font="12">13</text>
<text top="266" left="147" width="11" height="13" font="12">14</text>
<text top="279" left="147" width="11" height="13" font="12">15</text>
<text top="291" left="147" width="11" height="13" font="12">16</text>
<text top="304" left="147" width="11" height="13" font="12">17</text>
<text top="307" left="183" width="125" height="10" font="12">getTS().averageTemp();</text>
<text top="317" left="147" width="11" height="13" font="12">18</text>
<text top="319" left="173" width="6" height="10" font="12">}</text>
<text top="330" left="147" width="11" height="13" font="12">19</text>
<text top="342" left="147" width="11" height="13" font="12">20</text>
<text top="355" left="147" width="11" height="13" font="12">21</text>
<text top="358" left="173" width="110" height="10" font="12">TempSensor getTS() {</text>
<text top="368" left="147" width="11" height="13" font="12">22</text>
<text top="370" left="221" width="17" height="10" font="12">ts;</text>
<text top="381" left="147" width="11" height="13" font="12">23</text>
<text top="383" left="173" width="6" height="10" font="12">}</text>
<text top="393" left="147" width="11" height="13" font="12">24</text>
<text top="396" left="173" width="17" height="10" font="12">...</text>
<text top="406" left="147" width="22" height="13" font="12">25 }</text>
<text top="269" left="389" width="17" height="12" font="13">DSU</text>
<text top="441" left="429" width="11" height="13" font="12">64</text>
<text top="443" left="477" width="51" height="10" font="12">Container</text>
<text top="443" left="592" width="66" height="10" font="12">IContainer {</text>
<text top="454" left="429" width="11" height="13" font="12">65</text>
<text top="456" left="455" width="93" height="10" font="12">TempSensor v2 ts;</text>
<text top="466" left="429" width="11" height="13" font="12">66</text>
<text top="469" left="455" width="17" height="10" font="12">...</text>
<text top="479" left="429" width="11" height="13" font="12">67</text>
<text top="492" left="429" width="11" height="13" font="12">68</text>
<text top="495" left="455" width="17" height="10" font="12">...</text>
<text top="505" left="429" width="22" height="13" font="12">69 }</text>
<text top="549" left="429" width="11" height="13" font="12">70</text>
<text top="551" left="477" width="66" height="10" font="12">TempSensor {</text>
<text top="562" left="429" width="11" height="13" font="12">71</text>
<text top="564" left="456" width="88" height="10" font="12">String tempUnit;</text>
<text top="574" left="429" width="11" height="13" font="12">72</text>
<text top="577" left="456" width="71" height="10" font="12">Object newTS;</text>
<text top="587" left="429" width="11" height="13" font="12">73</text>
<text top="590" left="456" width="17" height="10" font="12">...</text>
<text top="600" left="429" width="11" height="13" font="12">74</text>
<text top="613" left="429" width="11" height="13" font="12">75</text>
<text top="616" left="482" width="143" height="10" font="12">setTempUnit(String unit) {</text>
<text top="626" left="429" width="11" height="13" font="12">76</text>
<text top="629" left="477" width="49" height="10" font="12">(newTS ==</text>
<text top="629" left="556" width="117" height="10" font="12">|| newTS.upToDate())</text>
<text top="628" left="676" width="5" height="13" font="12">{</text>
<text top="639" left="429" width="11" height="13" font="12">77</text>
<text top="641" left="476" width="86" height="10" font="12">//map state from</text>
<text top="641" left="592" width="109" height="10" font="12">-&gt; up-to-date object</text>
<text top="652" left="429" width="11" height="13" font="12">78</text>
<text top="654" left="476" width="158" height="10" font="12">//assign up-to-date object to</text>
<text top="665" left="429" width="11" height="13" font="12">79</text>
<text top="666" left="466" width="5" height="13" font="12">}</text>
<text top="678" left="429" width="11" height="13" font="12">80</text>
<text top="680" left="466" width="234" height="10" font="12">((TempSensor v2) newTS).setTempUnit(unit);</text>
<text top="691" left="429" width="11" height="13" font="12">81</text>
<text top="693" left="456" width="6" height="10" font="12">}</text>
<text top="704" left="429" width="11" height="13" font="12">82</text>
<text top="706" left="456" width="17" height="10" font="12">...</text>
<text top="716" left="429" width="22" height="13" font="12">83 }</text>
<text top="549" left="148" width="11" height="13" font="12">26</text>
<text top="552" left="196" width="66" height="10" font="12">TempSensor {</text>
<text top="562" left="148" width="11" height="13" font="12">27</text>
<text top="565" left="174" width="88" height="10" font="12">String tempUnit;</text>
<text top="575" left="148" width="11" height="13" font="12">28</text>
<text top="578" left="174" width="71" height="10" font="12">Object newTS;</text>
<text top="588" left="148" width="11" height="13" font="12">29</text>
<text top="590" left="174" width="17" height="10" font="12">...</text>
<text top="601" left="148" width="11" height="13" font="12">30</text>
<text top="614" left="148" width="11" height="13" font="12">31</text>
<text top="616" left="201" width="143" height="10" font="12">setTempUnit(String unit) {</text>
<text top="627" left="148" width="11" height="13" font="12">32</text>
<text top="640" left="148" width="11" height="13" font="12">33</text>
<text top="653" left="148" width="11" height="13" font="12">34</text>
<text top="665" left="148" width="11" height="13" font="12">35</text>
<text top="668" left="185" width="86" height="10" font="12">tempUnit = unit;</text>
<text top="678" left="148" width="11" height="13" font="12">36</text>
<text top="681" left="174" width="6" height="10" font="12">}</text>
<text top="691" left="148" width="11" height="13" font="12">37</text>
<text top="694" left="174" width="17" height="10" font="12">...</text>
<text top="704" left="148" width="22" height="13" font="12">38 }</text>
<text top="745" left="429" width="11" height="13" font="12">84</text>
<text top="747" left="477" width="83" height="10" font="12">TempSensor_v2 {</text>
<text top="757" left="429" width="11" height="13" font="12">85</text>
<text top="760" left="456" width="17" height="10" font="12">...</text>
<text top="770" left="429" width="11" height="13" font="12">86</text>
<text top="783" left="429" width="11" height="13" font="12">87</text>
<text top="786" left="482" width="143" height="10" font="12">setTempUnit(String unit) {</text>
<text top="796" left="429" width="11" height="13" font="12">88</text>
<text top="799" left="466" width="86" height="10" font="12">tempUnit = unit;</text>
<text top="809" left="429" width="11" height="13" font="12">89</text>
<text top="812" left="456" width="6" height="10" font="12">}</text>
<text top="822" left="429" width="11" height="13" font="12">90</text>
<text top="824" left="456" width="17" height="10" font="12">...</text>
<text top="835" left="429" width="22" height="13" font="12">91 }</text>
<text top="603" left="389" width="17" height="12" font="13">DSU</text>
<text top="700" left="726" width="8" height="16" font="7">2</text>
<text top="162" left="703" width="8" height="16" font="7">1</text>
<text top="861" left="353" width="184" height="17" font="7">Figure 18. State-loss prevention.</text>
<text top="915" left="140" width="610" height="19" font="9">couple the outdated and the up-to-date object by assigning the up-to-date object to a ﬁeld of the</text>
<text top="932" left="140" width="610" height="19" font="9">outdated object (Line 78). Note that the ﬁeld refers to the same object as the applied container,</text>
<text top="950" left="140" width="610" height="19" font="9">which ensures that outdated active method as well as up-to-date method access the same object.</text>
<text top="968" left="140" width="610" height="19" font="9">Finally, we forward the method call to the method of the up-to-date object (Line 80). After this</text>
<text top="986" left="140" width="610" height="19" font="9">is done, every access to a ﬁeld of an outdated object from within an active outdated method (e.g.,</text>
<text top="1004" left="140" width="127" height="19" font="9">see Access 1, Figure</text>
<text top="1004" left="271" width="15" height="19" font="10"><a href="pdfxml.html#28">18</a></text>
<text top="1004" left="287" width="463" height="19" font="9"><a href="pdfxml.html#28">) </a>will be redirected to the corresponding up-to-date object (such as through</text>
<text top="1022" left="140" width="159" height="19" font="9">Access 2 shown in Figure</text>
<text top="1022" left="303" width="15" height="19" font="10"><a href="pdfxml.html#28">18</a></text>
<text top="1022" left="318" width="159" height="19" font="9"><a href="pdfxml.html#28">) </a>and no state will be lost.</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="29" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="735" width="15" height="19" font="9">29</text>
<text top="105" left="140" width="319" height="13" font="9">7.2.3. Handling of Binary-Incompatible Updates.</text>
<text top="101" left="467" width="284" height="19" font="9">So far, we discussed how getter and setter</text>
<text top="119" left="140" width="610" height="19" font="9">methods in conjunction with redeﬁnitions of methods of outdated class version can help us to</text>
<text top="137" left="140" width="610" height="19" font="9">prevent state losses because of active methods scheduled for redeﬁnition. But, getters, setters, and</text>
<text top="155" left="140" width="610" height="19" font="9">redeﬁnitions of old methods could do a lot more for us. Coming back to our motivating example,</text>
<text top="173" left="140" width="610" height="19" font="9">where we are going to remove method averageTemp by method currentTemp and therefore</text>
<text top="191" left="140" width="610" height="19" font="9">have to replace class TempSensor and update calling class TempDisplay, conﬂicts such as</text>
<text top="209" left="140" width="118" height="19" font="9">depicted in Figure</text>
<text top="209" left="265" width="15" height="19" font="10"><a href="pdfxml.html#29">19</a></text>
<text top="209" left="287" width="463" height="19" font="9">can occur. As in the previous examples, method displayTemp to be</text>
<text top="227" left="140" width="610" height="19" font="9">redeﬁned is active on the stack with the old method body. What is the problem here is, that the</text>
<text top="245" left="140" width="610" height="19" font="9">method continues to call method averageTemp even if this method is removed in new class</text>
<text top="262" left="140" width="508" height="19" font="9">version TempSensor v2, which is referred to as a binary-incompatible update <a href="pdfxml.html#32">[</a></text>
<text top="262" left="649" width="15" height="19" font="10"><a href="pdfxml.html#32">14</a></text>
<text top="262" left="664" width="9" height="19" font="9"><a href="pdfxml.html#32">].</a></text>
<text top="312" left="153" width="5" height="13" font="12">1</text>
<text top="315" left="196" width="71" height="10" font="12">TempDisplay {</text>
<text top="325" left="153" width="5" height="13" font="12">2</text>
<text top="328" left="174" width="76" height="10" font="12">TempSensor ts;</text>
<text top="338" left="153" width="5" height="13" font="12">3</text>
<text top="341" left="174" width="88" height="10" font="12">IContainer cont;</text>
<text top="351" left="153" width="5" height="13" font="12">4</text>
<text top="354" left="174" width="17" height="10" font="12">...</text>
<text top="364" left="153" width="5" height="13" font="12">5</text>
<text top="367" left="200" width="82" height="10" font="12">displayTemp() {</text>
<text top="377" left="153" width="5" height="13" font="12">6</text>
<text top="379" left="212" width="6" height="10" font="12">(</text>
<text top="379" left="240" width="15" height="10" font="12">) {</text>
<text top="390" left="153" width="5" height="13" font="12">7</text>
<text top="392" left="194" width="95" height="10" font="12">ts.averageTemp();</text>
<text top="403" left="153" width="5" height="13" font="12">8</text>
<text top="405" left="194" width="17" height="10" font="12">...</text>
<text top="416" left="153" width="5" height="13" font="12">9</text>
<text top="418" left="184" width="6" height="10" font="12">}</text>
<text top="429" left="148" width="11" height="13" font="12">10</text>
<text top="431" left="174" width="6" height="10" font="12">}</text>
<text top="442" left="148" width="22" height="13" font="12">11 }</text>
<text top="312" left="448" width="11" height="13" font="12">12</text>
<text top="315" left="496" width="71" height="10" font="12">TempDisplay {</text>
<text top="325" left="448" width="11" height="13" font="12">13</text>
<text top="328" left="474" width="76" height="10" font="12">TempSensor ts;</text>
<text top="338" left="448" width="11" height="13" font="12">14</text>
<text top="341" left="474" width="87" height="10" font="12">IContainer cont;</text>
<text top="351" left="448" width="11" height="13" font="12">15</text>
<text top="354" left="474" width="17" height="10" font="12">...</text>
<text top="364" left="448" width="11" height="13" font="12">16</text>
<text top="367" left="500" width="73" height="10" font="12">displayTemp()</text>
<text top="366" left="576" width="5" height="13" font="12">{</text>
<text top="377" left="448" width="11" height="13" font="12">17</text>
<text top="379" left="512" width="6" height="10" font="12">(</text>
<text top="379" left="540" width="6" height="10" font="12">)</text>
<text top="379" left="549" width="5" height="13" font="12">{</text>
<text top="390" left="448" width="11" height="13" font="12">18</text>
<text top="392" left="494" width="95" height="10" font="12">ts.averageTemp();</text>
<text top="403" left="448" width="11" height="13" font="12">19</text>
<text top="405" left="494" width="17" height="10" font="12">...</text>
<text top="416" left="448" width="11" height="13" font="12">20</text>
<text top="417" left="484" width="5" height="13" font="12">}</text>
<text top="429" left="448" width="11" height="13" font="12">21</text>
<text top="430" left="474" width="5" height="13" font="12">}</text>
<text top="442" left="448" width="22" height="13" font="12">22 }</text>
<text top="488" left="481" width="11" height="13" font="12">35</text>
<text top="490" left="529" width="51" height="10" font="12">Container</text>
<text top="490" left="644" width="66" height="10" font="12">IContainer {</text>
<text top="501" left="481" width="11" height="13" font="12">36</text>
<text top="503" left="508" width="94" height="10" font="12">TempSensor_v2 ts;</text>
<text top="514" left="481" width="11" height="13" font="12">37</text>
<text top="516" left="508" width="17" height="10" font="12">...</text>
<text top="527" left="481" width="22" height="13" font="12">38 }</text>
<text top="489" left="415" width="17" height="12" font="13">DSU</text>
<text top="578" left="254" width="75" height="11" font="12">+averageTemp()</text>
<text top="566" left="263" width="61" height="11" font="25"><b>TempSensor</b></text>
<text top="578" left="558" width="69" height="11" font="12">+currentTemp()</text>
<text top="566" left="558" width="78" height="11" font="25"><b>TempSensor_v2</b></text>
<text top="603" left="330" width="230" height="17" font="7">Figure 19. Binary-incompatible updates.</text>
<text top="646" left="155" width="595" height="19" font="9">Currently, we allow caller related methods such as method displayTemp to refer to removed</text>
<text top="664" left="140" width="610" height="19" font="9">methods, ﬁelds, or super types, which is no big deal as long as those accesses are read only and</text>
<text top="682" left="140" width="610" height="19" font="9">thus do not result in program state changes. However, read only accesses may be the exception</text>
<text top="700" left="140" width="610" height="19" font="9">and methods such as removed method averageTemp may alter the program state, which</text>
<text top="718" left="140" width="610" height="19" font="9">possibly results in wrong program behavior (e.g., method averageTemp could overwrite the</text>
<text top="736" left="140" width="610" height="19" font="9">temperature computed by up-to-date method currentTemp with average temperatures). To avoid</text>
<text top="754" left="140" width="610" height="19" font="9">inconsistencies because of binary-incompatible updates, we must somehow invalidate accesses to</text>
<text top="772" left="140" width="258" height="19" font="9">removed methods, ﬁelds, and super types.</text>
<text top="790" left="155" width="40" height="19" font="9">Figure</text>
<text top="790" left="199" width="15" height="19" font="10"><a href="pdfxml.html#30">20</a></text>
<text top="790" left="218" width="532" height="19" font="9">shows how we intend to invalidate accesses to the removed elements. Just like for state-</text>
<text top="808" left="140" width="610" height="19" font="9">loss prevention purposes, we redeﬁne the methods within the old class versions. What is different</text>
<text top="826" left="140" width="610" height="19" font="9">is that we do not add state mapping code and forward the calls to the up-to-date class version. We</text>
<text top="844" left="140" width="610" height="19" font="9">simply remove the original method bodies and corresponding to whether the removed element is a</text>
<text top="862" left="140" width="586" height="19" font="9">ﬁeld or a method, throw NoSuchMethodError (such as in our example depicted in Figure</text>
<text top="862" left="731" width="15" height="19" font="10"><a href="pdfxml.html#30">20</a></text>
<text top="862" left="746" width="4" height="19" font="9"><a href="pdfxml.html#30">,</a></text>
<text top="879" left="140" width="610" height="19" font="9">Line 57) or NoSuchFieldError, which does not cause unwanted program state changes and</text>
<text top="897" left="140" width="316" height="19" font="9">thus has no inﬂuence on the program’s consistency.</text>
<text top="946" left="140" width="161" height="13" font="9">7.2.4. Reﬂection Support.</text>
<text top="942" left="309" width="441" height="19" font="9">We do not only focus on improved update speeds, thread-safe updates,</text>
<text top="960" left="140" width="610" height="19" font="9">state-loss prevention, and the handling of binary-incompatible updates. Additionally, we are</text>
<text top="978" left="140" width="610" height="19" font="9">working on solutions to overcome several problems the different versions of a class present in the</text>
<text top="996" left="140" width="529" height="19" font="9">JVM may cause. The main issue to overcome is the limited support of our current J</text>
<text top="999" left="670" width="17" height="15" font="0">AV</text>
<text top="996" left="685" width="11" height="19" font="9">A</text>
<text top="999" left="697" width="52" height="15" font="0">DAPTOR</text>
<text top="1014" left="140" width="610" height="19" font="9">implementation for reﬂective calls of reloaded (updated) classes. Under certain conditions those</text>
<text top="1032" left="140" width="610" height="19" font="9">calls may address old versions of a reloaded class and not the latest class version, which may result</text>
<text top="1050" left="140" width="610" height="19" font="9">in wrong program behavior. This would be for instance the case when the class object of the class</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="30" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">30</text>
<text top="100" left="433" width="11" height="13" font="12">29</text>
<text top="102" left="481" width="71" height="10" font="12">TempDisplay {</text>
<text top="113" left="433" width="11" height="13" font="12">30</text>
<text top="115" left="460" width="77" height="10" font="12">TempSensor ts;</text>
<text top="126" left="433" width="11" height="13" font="12">31</text>
<text top="128" left="460" width="88" height="10" font="12">IContainer cont;</text>
<text top="138" left="433" width="11" height="13" font="12">32</text>
<text top="141" left="460" width="17" height="10" font="12">...</text>
<text top="151" left="433" width="11" height="13" font="12">33</text>
<text top="153" left="486" width="73" height="10" font="12">displayTemp()</text>
<text top="153" left="563" width="5" height="12" font="12">{</text>
<text top="164" left="433" width="11" height="13" font="12">34</text>
<text top="166" left="498" width="6" height="10" font="12">(</text>
<text top="166" left="526" width="6" height="10" font="12">)</text>
<text top="165" left="535" width="5" height="12" font="12">{</text>
<text top="177" left="433" width="11" height="13" font="12">35</text>
<text top="179" left="480" width="124" height="10" font="12">getTS().averageTemp();</text>
<text top="189" left="433" width="11" height="13" font="12">36</text>
<text top="192" left="480" width="17" height="10" font="12">...</text>
<text top="202" left="433" width="11" height="13" font="12">37</text>
<text top="204" left="470" width="5" height="12" font="12">}</text>
<text top="215" left="433" width="11" height="13" font="12">38</text>
<text top="216" left="460" width="5" height="12" font="12">}</text>
<text top="228" left="433" width="11" height="13" font="12">39</text>
<text top="240" left="433" width="11" height="13" font="12">40</text>
<text top="253" left="433" width="11" height="13" font="12">41</text>
<text top="256" left="460" width="109" height="10" font="12">TempSensor getTS() {</text>
<text top="266" left="433" width="11" height="13" font="12">42</text>
<text top="268" left="507" width="17" height="10" font="12">ts;</text>
<text top="279" left="433" width="11" height="13" font="12">43</text>
<text top="281" left="460" width="6" height="10" font="12">}</text>
<text top="291" left="433" width="11" height="13" font="12">44</text>
<text top="294" left="460" width="17" height="10" font="12">...</text>
<text top="304" left="433" width="22" height="13" font="12">45 }</text>
<text top="100" left="153" width="5" height="13" font="12">1</text>
<text top="102" left="195" width="72" height="10" font="12">TempDisplay {</text>
<text top="113" left="153" width="5" height="13" font="12">2</text>
<text top="115" left="174" width="78" height="10" font="12">TempSensor ts;</text>
<text top="126" left="153" width="5" height="13" font="12">3</text>
<text top="128" left="174" width="89" height="10" font="12">IContainer cont;</text>
<text top="138" left="153" width="5" height="13" font="12">4</text>
<text top="141" left="174" width="17" height="10" font="12">...</text>
<text top="151" left="153" width="5" height="13" font="12">5</text>
<text top="153" left="200" width="83" height="10" font="12">displayTemp() {</text>
<text top="164" left="153" width="5" height="13" font="12">6</text>
<text top="166" left="212" width="6" height="10" font="12">(</text>
<text top="166" left="241" width="15" height="10" font="12">) {</text>
<text top="177" left="153" width="5" height="13" font="12">7</text>
<text top="179" left="194" width="125" height="10" font="12">getTS().averageTemp();</text>
<text top="189" left="153" width="5" height="13" font="12">8</text>
<text top="192" left="194" width="17" height="10" font="12">...</text>
<text top="202" left="153" width="5" height="13" font="12">9</text>
<text top="205" left="184" width="6" height="10" font="12">}</text>
<text top="215" left="147" width="11" height="13" font="12">10</text>
<text top="217" left="174" width="6" height="10" font="12">}</text>
<text top="228" left="147" width="11" height="13" font="12">11</text>
<text top="240" left="147" width="11" height="13" font="12">12</text>
<text top="253" left="147" width="11" height="13" font="12">13</text>
<text top="256" left="174" width="110" height="10" font="12">TempSensor getTS() {</text>
<text top="266" left="147" width="11" height="13" font="12">14</text>
<text top="268" left="222" width="17" height="10" font="12">ts;</text>
<text top="279" left="147" width="11" height="13" font="12">15</text>
<text top="281" left="174" width="6" height="10" font="12">}</text>
<text top="291" left="147" width="11" height="13" font="12">16</text>
<text top="294" left="174" width="17" height="10" font="12">...</text>
<text top="304" left="147" width="22" height="13" font="12">17 }</text>
<text top="217" left="392" width="17" height="12" font="13">DSU</text>
<text top="338" left="433" width="11" height="13" font="12">46</text>
<text top="340" left="482" width="51" height="10" font="12">Container</text>
<text top="340" left="596" width="66" height="10" font="12">IContainer {</text>
<text top="351" left="433" width="11" height="13" font="12">47</text>
<text top="353" left="460" width="94" height="10" font="12">TempSensor_v2 ts;</text>
<text top="364" left="433" width="11" height="13" font="12">48</text>
<text top="366" left="460" width="17" height="10" font="12">...</text>
<text top="377" left="433" width="11" height="13" font="12">49</text>
<text top="389" left="433" width="11" height="13" font="12">50</text>
<text top="392" left="460" width="17" height="10" font="12">...</text>
<text top="402" left="433" width="22" height="13" font="12">51 }</text>
<text top="448" left="433" width="11" height="13" font="12">52</text>
<text top="451" left="481" width="66" height="10" font="12">TempSensor {</text>
<text top="461" left="433" width="11" height="13" font="12">53</text>
<text top="463" left="459" width="88" height="10" font="12">String tempUnit;</text>
<text top="474" left="433" width="11" height="13" font="12">54</text>
<text top="476" left="459" width="71" height="10" font="12">Object newTS;</text>
<text top="487" left="433" width="11" height="13" font="12">55</text>
<text top="489" left="459" width="17" height="10" font="12">...</text>
<text top="500" left="433" width="11" height="13" font="12">56</text>
<text top="502" left="480" width="83" height="10" font="12">averageTemp() {</text>
<text top="513" left="433" width="11" height="13" font="12">57</text>
<text top="515" left="522" width="201" height="10" font="12">NoSuchMethodError(&#34;Method Removed&#34;);</text>
<text top="526" left="433" width="11" height="13" font="12">58</text>
<text top="528" left="459" width="6" height="10" font="12">}</text>
<text top="539" left="433" width="11" height="13" font="12">59</text>
<text top="551" left="433" width="11" height="13" font="12">60</text>
<text top="564" left="433" width="11" height="13" font="12">61</text>
<text top="567" left="459" width="17" height="10" font="12">...</text>
<text top="577" left="433" width="22" height="13" font="12">62 }</text>
<text top="448" left="148" width="11" height="13" font="12">18</text>
<text top="451" left="196" width="66" height="10" font="12">TempSensor {</text>
<text top="461" left="148" width="11" height="13" font="12">19</text>
<text top="463" left="175" width="88" height="10" font="12">String tempUnit;</text>
<text top="474" left="148" width="11" height="13" font="12">20</text>
<text top="476" left="175" width="71" height="10" font="12">Object newTS;</text>
<text top="487" left="148" width="11" height="13" font="12">21</text>
<text top="489" left="175" width="17" height="10" font="12">...</text>
<text top="500" left="148" width="11" height="13" font="12">22</text>
<text top="502" left="195" width="83" height="10" font="12">averageTemp() {</text>
<text top="513" left="148" width="11" height="13" font="12">23</text>
<text top="526" left="148" width="11" height="13" font="12">24</text>
<text top="528" left="175" width="6" height="10" font="12">}</text>
<text top="539" left="148" width="11" height="13" font="12">25</text>
<text top="551" left="148" width="11" height="13" font="12">26</text>
<text top="564" left="148" width="11" height="13" font="12">27</text>
<text top="567" left="175" width="17" height="10" font="12">...</text>
<text top="577" left="148" width="22" height="13" font="12">28 }</text>
<text top="521" left="392" width="17" height="12" font="13">DSU</text>
<text top="186" left="687" width="8" height="16" font="7">1</text>
<text top="603" left="297" width="296" height="17" font="7">Figure 20. Support for binary-incompatible updates.</text>
<text top="662" left="140" width="610" height="19" font="9">to be reloaded was cached before the update. Each reﬂective call based on this cached class object</text>
<text top="680" left="140" width="214" height="19" font="9">would access the old class version.</text>
<text top="698" left="155" width="595" height="19" font="9">With our solutions for state-loss prevention and binary-incompatible updates, which basically</text>
<text top="716" left="140" width="610" height="19" font="9">forward all requests (including the reﬂective ones) to the most recent version of a class/instance,</text>
<text top="734" left="140" width="610" height="19" font="9">we already cover many different kinds of reﬂective requests. What the approaches not yet fully</text>
<text top="752" left="140" width="610" height="19" font="9">cover are string-based reﬂective calls in combination with type checks (e.g., via instanceof).</text>
<text top="770" left="140" width="610" height="19" font="9">Those calls could be supported with two different strategies. First, we could modify the Reﬂection</text>
<text top="788" left="140" width="610" height="19" font="9">API in such way that it redirects even string-based reﬂective calls to the most recent class version.</text>
<text top="806" left="140" width="610" height="19" font="9">Second, we could parse the .class ﬁles for occurrences of string-based reﬂective calls and change</text>
<text top="824" left="140" width="610" height="19" font="9">the strings representing a class name to the up-to-date class name. However, further investigations</text>
<text top="842" left="140" width="415" height="19" font="9">are necessary to ﬁnd an optimal solution for the described problem.</text>
<text top="902" left="140" width="165" height="13" font="9">7.3. Long-term Objectives</text>
<text top="924" left="140" width="610" height="19" font="9">So far we discussed solutions for issues already solved by other DSU approaches such as Kim’s</text>
<text top="942" left="140" width="195" height="19" font="9">proxy based DSU approach <a href="pdfxml.html#32">[</a></text>
<text top="942" left="335" width="15" height="19" font="10"><a href="pdfxml.html#32">23</a></text>
<text top="942" left="351" width="110" height="19" font="9"><a href="pdfxml.html#32">] </a>and Javeleon <a href="pdfxml.html#32">[</a></text>
<text top="942" left="460" width="15" height="19" font="10"><a href="pdfxml.html#32">16</a></text>
<text top="942" left="476" width="274" height="19" font="9"><a href="pdfxml.html#32">]. </a>What remains an open question to the</text>
<text top="960" left="140" width="610" height="19" font="9">whole research community is, how to reliably (immediately) apply updates and fully ensure</text>
<text top="978" left="140" width="402" height="19" font="9">program consistency beyond the updates. Gupta et al. state in <a href="pdfxml.html#32">[</a></text>
<text top="978" left="543" width="15" height="19" font="10"><a href="pdfxml.html#32">18</a></text>
<text top="978" left="558" width="192" height="19" font="9"><a href="pdfxml.html#32">] </a>that the consistency problem</text>
<text top="996" left="140" width="518" height="19" font="9">is undecidable. Nevertheless, a lot of related work exists facing the problem (see <a href="pdfxml.html#33">[</a></text>
<text top="996" left="658" width="15" height="19" font="10"><a href="pdfxml.html#33">47</a></text>
<text top="996" left="674" width="4" height="19" font="9"><a href="pdfxml.html#33">,</a></text>
<text top="996" left="682" width="15" height="19" font="10"><a href="pdfxml.html#32">24</a></text>
<text top="996" left="698" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="996" left="707" width="15" height="19" font="10"><a href="pdfxml.html#33">42</a></text>
<text top="996" left="722" width="4" height="19" font="9"><a href="pdfxml.html#33">,</a></text>
<text top="996" left="731" width="15" height="19" font="10"><a href="pdfxml.html#32">20</a></text>
<text top="996" left="746" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="1014" left="140" width="15" height="19" font="10"><a href="pdfxml.html#32">30</a></text>
<text top="1014" left="156" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="1014" left="164" width="8" height="19" font="10"><a href="pdfxml.html#32">2</a></text>
<text top="1014" left="172" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="1014" left="181" width="15" height="19" font="10"><a href="pdfxml.html#32">22</a></text>
<text top="1014" left="196" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="1014" left="205" width="15" height="19" font="10"><a href="pdfxml.html#32">28</a></text>
<text top="1014" left="220" width="4" height="19" font="9"><a href="pdfxml.html#32">,</a></text>
<text top="1014" left="229" width="15" height="19" font="10"><a href="pdfxml.html#33">49</a></text>
<text top="1014" left="244" width="506" height="19" font="9"><a href="pdfxml.html#33">]). </a>But, to our best knowledge, some approaches provide approximated solutions</text>
<text top="1032" left="140" width="610" height="19" font="9">only, whereas others are not applicable in real-world scenarios (e.g., due to the lack of tool support,</text>
<text top="1050" left="140" width="443" height="19" font="9">etc.) or may reject the scheduled update. That is, our big goal with J</text>
<text top="1053" left="583" width="17" height="15" font="0">AV</text>
<text top="1050" left="599" width="11" height="19" font="9">A</text>
<text top="1053" left="611" width="52" height="15" font="0">DAPTOR</text>
<text top="1050" left="670" width="81" height="19" font="9">is to provide</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="31" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="735" width="15" height="19" font="9">31</text>
<text top="101" left="140" width="610" height="19" font="9">an update mechanism which fully ensures program consistency, is useful in practice, and reliably</text>
<text top="119" left="140" width="98" height="19" font="9">applies updates.</text>
<text top="160" left="140" width="98" height="13" font="9">7.4. Discussion</text>
<text top="183" left="140" width="417" height="19" font="9">When looking at the enhancements we are going to integrate into J</text>
<text top="186" left="558" width="17" height="15" font="0">AV</text>
<text top="183" left="574" width="11" height="19" font="9">A</text>
<text top="186" left="585" width="52" height="15" font="0">DAPTOR</text>
<text top="183" left="638" width="112" height="19" font="9">, one may wonder</text>
<text top="201" left="140" width="435" height="19" font="9">if those enhancements would compromise one of the contributions of J</text>
<text top="204" left="575" width="17" height="15" font="0">AV</text>
<text top="201" left="591" width="11" height="19" font="9">A</text>
<text top="204" left="603" width="52" height="15" font="0">DAPTOR</text>
<text top="201" left="660" width="90" height="19" font="9">claimed in this</text>
<text top="219" left="140" width="610" height="19" font="9">paper, e.g., its performance. Particularly, the system-wide usage of getter and setter methods (note</text>
<text top="237" left="140" width="610" height="19" font="9">that the getters and setters have to be created for all class and instance ﬁelds of all classes including</text>
<text top="255" left="140" width="610" height="19" font="9">the system classes of Java) would probably cause signiﬁcant performance penalties. But, contrary to</text>
<text top="273" left="140" width="610" height="19" font="9">expectations, ﬁrst benchmark results show that this is virtually not the case, which is because of the</text>
<text top="291" left="140" width="610" height="19" font="9">excellent optimization capabilities of the JVM and its just-in-time compiler (we found that the JVM</text>
<text top="309" left="140" width="610" height="19" font="9">is able to optimize getter-and-setter-based ﬁeld accesses to such an extent, that they are as fast as</text>
<text top="327" left="140" width="610" height="19" font="9">direct ﬁeld accesses). In addition, other DSU approaches such as Kim’s proxy based DSU approach</text>
<text top="345" left="140" width="5" height="19" font="9"><a href="pdfxml.html#32">[</a></text>
<text top="345" left="145" width="15" height="19" font="10"><a href="pdfxml.html#32">23</a></text>
<text top="345" left="161" width="101" height="19" font="9"><a href="pdfxml.html#32">] </a>and Javeleon <a href="pdfxml.html#32">[</a></text>
<text top="345" left="261" width="15" height="19" font="10"><a href="pdfxml.html#32">16</a></text>
<text top="345" left="277" width="473" height="19" font="9"><a href="pdfxml.html#32">], </a>which base on lazy state mappings and use system-wide getter and setter</text>
<text top="363" left="140" width="610" height="19" font="9">methods for similar purposes as we will do, show that those kinds of enhancements must not cause</text>
<text top="381" left="140" width="424" height="19" font="9">signiﬁcant performance drops. For instance Gregersen estimates in <a href="pdfxml.html#32">[</a></text>
<text top="381" left="564" width="15" height="19" font="10"><a href="pdfxml.html#32">17</a></text>
<text top="381" left="579" width="171" height="19" font="9"><a href="pdfxml.html#32">] </a>the performance overhead</text>
<text top="398" left="140" width="185" height="19" font="9">of Javeleon at moderate 15 %.</text>
<text top="416" left="155" width="360" height="19" font="9">All in all, we are optimistic to provide a stable version of J</text>
<text top="419" left="515" width="17" height="15" font="0">AV</text>
<text top="416" left="531" width="11" height="19" font="9">A</text>
<text top="419" left="542" width="52" height="15" font="0">DAPTOR</text>
<text top="416" left="599" width="151" height="19" font="9">with fast and thread-safe</text>
<text top="434" left="140" width="610" height="19" font="9">updates, improved state-loss prevention, optimized handling of binary-incompatible updates, and</text>
<text top="452" left="140" width="610" height="19" font="9">better support for reﬂective calls, soon. As already mentioned, preliminary results of experiments</text>
<text top="470" left="140" width="37" height="19" font="9">with J</text>
<text top="473" left="177" width="17" height="15" font="0">AV</text>
<text top="470" left="193" width="11" height="19" font="9">A</text>
<text top="473" left="205" width="52" height="15" font="0">DAPTOR</text>
<text top="470" left="261" width="489" height="19" font="9">prototypes suggest that the planned enhancements must not heavily compromise</text>
<text top="488" left="140" width="529" height="19" font="9">the performance of the updated program. Another fact that makes us conﬁdent to ﬁt J</text>
<text top="491" left="670" width="17" height="15" font="0">AV</text>
<text top="488" left="685" width="11" height="19" font="9">A</text>
<text top="491" left="697" width="52" height="15" font="0">DAPTOR</text>
<text top="506" left="140" width="610" height="19" font="9">with high quality solutions for the mentioned issues is, that we can (to some extent) build on</text>
<text top="524" left="140" width="367" height="19" font="9">solutions of related DSU approaches (such as presented in <a href="pdfxml.html#32">[</a></text>
<text top="524" left="508" width="15" height="19" font="10"><a href="pdfxml.html#32">23</a></text>
<text top="524" left="523" width="40" height="19" font="9"><a href="pdfxml.html#32">] </a>and <a href="pdfxml.html#32">[</a></text>
<text top="524" left="563" width="15" height="19" font="10"><a href="pdfxml.html#32">16</a></text>
<text top="524" left="578" width="164" height="19" font="9"><a href="pdfxml.html#32">]) </a>facing similar problems.</text>
<text top="579" left="386" width="118" height="19" font="9">8. CONCLUSION</text>
<text top="615" left="140" width="610" height="19" font="9">Dynamic software updates are a often requested approach to update applications while improving</text>
<text top="633" left="140" width="610" height="19" font="9">the user experience and avoiding down times. Furthermore, DSU supports the software developers</text>
<text top="651" left="140" width="535" height="19" font="9">because they do not need to restart their applications to test the changed program parts.</text>
<text top="669" left="155" width="595" height="19" font="9">However, different from dynamic languages, native DSU support for Java is severely limited.</text>
<text top="687" left="140" width="610" height="19" font="9">Thus, approaches are needed that overcome Java’s limitations regarding dynamic software updates.</text>
<text top="705" left="140" width="63" height="19" font="9">In Section</text>
<text top="705" left="207" width="8" height="19" font="10"><a href="pdfxml.html#1">1</a></text>
<text top="705" left="218" width="22" height="19" font="9">and</text>
<text top="705" left="245" width="8" height="19" font="10"><a href="pdfxml.html#19">6</a></text>
<text top="705" left="252" width="498" height="19" font="9"><a href="pdfxml.html#19">, </a>we argue that a DSU approach should provide ﬂexible runtime program updates</text>
<text top="723" left="140" width="610" height="19" font="9">without serious performance drops. Additionally, it should be platform independent and should</text>
<text top="741" left="140" width="286" height="19" font="9">not dictate the program architecture. With J</text>
<text top="744" left="426" width="17" height="15" font="0">AV</text>
<text top="741" left="442" width="11" height="19" font="9">A</text>
<text top="744" left="454" width="52" height="15" font="0">DAPTOR</text>
<text top="741" left="507" width="243" height="19" font="9">, we overcome Java’s limited runtime</text>
<text top="759" left="140" width="610" height="19" font="9">update support and add the runtime update capabilities known from dynamic languages to Java.</text>
<text top="777" left="140" width="92" height="19" font="9">Furthermore, J</text>
<text top="779" left="232" width="17" height="15" font="0">AV</text>
<text top="777" left="248" width="11" height="19" font="9">A</text>
<text top="779" left="260" width="52" height="15" font="0">DAPTOR</text>
<text top="777" left="317" width="433" height="19" font="9">is (to our best knowledge) the ﬁrst approach that fulﬁlls all proposed</text>
<text top="794" left="140" width="610" height="19" font="9">quality criteria: it is ﬂexible, runs on every major (unmodiﬁed) JVM, performs well, and does</text>
<text top="812" left="140" width="610" height="19" font="9">not dictate the architecture of the program. Conceptually, it combines schema changing class</text>
<text top="830" left="140" width="610" height="19" font="9">replacements with class renaming and caller updates based on Java HotSwap with the help of</text>
<text top="848" left="140" width="142" height="19" font="9">containers and proxies.</text>
<text top="866" left="155" width="435" height="19" font="9">With different non-trivial case studies, we have demonstrated that J</text>
<text top="869" left="591" width="17" height="15" font="0">AV</text>
<text top="866" left="606" width="11" height="19" font="9">A</text>
<text top="869" left="618" width="52" height="15" font="0">DAPTOR</text>
<text top="866" left="677" width="73" height="19" font="9">ﬁts runtime</text>
<text top="884" left="140" width="610" height="19" font="9">updates of real-world applications executed under real-world conditions. Nevertheless, there is</text>
<text top="902" left="140" width="610" height="19" font="9">still space for improvements. Currently we are working on the integration of the improvements</text>
<text top="920" left="140" width="24" height="19" font="9">to J</text>
<text top="923" left="165" width="17" height="15" font="0">AV</text>
<text top="920" left="180" width="11" height="19" font="9">A</text>
<text top="923" left="192" width="52" height="15" font="0">DAPTOR</text>
<text top="920" left="251" width="129" height="19" font="9">described in Section</text>
<text top="920" left="386" width="8" height="19" font="10"><a href="pdfxml.html#22">7</a></text>
<text top="920" left="393" width="276" height="19" font="9"><a href="pdfxml.html#22">, </a>which tackle some issues of the current J</text>
<text top="923" left="670" width="17" height="15" font="0">AV</text>
<text top="920" left="685" width="11" height="19" font="9">A</text>
<text top="923" left="697" width="52" height="15" font="0">DAPTOR</text>
<text top="938" left="140" width="610" height="19" font="9">implementation. However, in the long run, we will focus on the development of solutions to be</text>
<text top="956" left="140" width="98" height="19" font="9">integrated into J</text>
<text top="959" left="238" width="17" height="15" font="0">AV</text>
<text top="956" left="254" width="11" height="19" font="9">A</text>
<text top="959" left="266" width="52" height="15" font="0">DAPTOR</text>
<text top="956" left="322" width="428" height="19" font="9">that fully ensure the program consistency in the presence of immediate</text>
<text top="974" left="140" width="607" height="19" font="9">runtime updates, which is still not possible with any existing DSU approach applicable in practice.</text>
<text top="1029" left="378" width="134" height="15" font="0">ACKNOWLEDGEMENT</text>
<text top="1051" left="140" width="610" height="17" font="7">We would like to thank Shigeru Chiba for providing the invaluable bytecode modiﬁcation tool Javassist.</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="32" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="140" width="15" height="19" font="9">32</text>
<text top="102" left="140" width="610" height="17" font="7">Furthermore, we thank Janet Feigenspan for calculating the statistical signiﬁcance of our benchmark results.</text>
<text top="120" left="140" width="308" height="17" font="7">Mario Pukall’s work is part of the RAMSES project</text>
<text top="119" left="448" width="11" height="10" font="12">††</text>
<text top="120" left="465" width="285" height="17" font="7">which is funded by DFG (Project SA 465/31-2).</text>
<text top="135" left="140" width="509" height="17" font="7">K¨astner’s work is supported in part by the European Union (ERC grant ScalPL #203099).</text>
<text top="192" left="405" width="80" height="15" font="0">REFERENCES</text>
<text top="216" left="152" width="438" height="15" font="0">1. The OSGi Alliance. OSGi Service Platform Core Speciﬁcation, December 2011.</text>
<text top="219" left="598" width="152" height="10" font="1"><a href="http://www.osgi.org/Download/File?url=/download/r4v42/r4.core.pdf">http://www.osgi.org/</a></text>
<text top="233" left="168" width="343" height="10" font="1"><a href="http://www.osgi.org/Download/File?url=/download/r4v42/r4.core.pdf">Download/File?url=/download/r4v42/r4.core.pdf</a></text>
<text top="229" left="511" width="3" height="15" font="0"><a href="http://www.osgi.org/Download/File?url=/download/r4v42/r4.core.pdf">.</a></text>
<text top="243" left="152" width="598" height="15" font="0">2. R. Bazzi, A., K. Makris, P. Nayeri, and J. Shen. Dynamic Software Updates: the State Mapping Problem. In</text>
<text top="259" left="168" width="406" height="11" font="0">Proceedings of the International Workshop on Hot Topics in Software Upgrades</text>
<text top="256" left="574" width="147" height="15" font="0">, pages 7:1–7:2. ACM, 2009.</text>
<text top="269" left="152" width="598" height="15" font="0">3. J. Bon´er. What are the key issues for commercial AOP use: how does AspectWerkz address them? In Proceedings</text>
<text top="286" left="168" width="380" height="11" font="0">of the International Conference on Aspect-Oriented Software Development</text>
<text top="283" left="548" width="92" height="15" font="0">, pages 1–2, 2004.</text>
<text top="296" left="152" width="598" height="15" font="0">4. G. Bracha. Objects as Software Services, 2005. Invited talk at the International Conference on Object-Oriented</text>
<text top="310" left="168" width="276" height="15" font="0">Programming, Systems, Languages, and Applications.</text>
<text top="323" left="152" width="598" height="15" font="0">5. W. Cazzola. SmartReﬂection: Efﬁcient Introspection in Java. Journal of Object Technology, 3(11):117–132, 2004.</text>
<text top="337" left="152" width="598" height="15" font="0">6. S. Chiba. Load-Time Structural Reﬂection in Java. In Proceedings of the European Conference on Object-Oriented</text>
<text top="353" left="168" width="70" height="11" font="0">Programming</text>
<text top="350" left="238" width="167" height="15" font="0">, pages 313–336. Springer, 2000.</text>
<text top="364" left="152" width="598" height="15" font="0">7. S. Chiba and M. Nishizawa. An Easy-to-Use Toolkit for Efﬁcient Java Bytecode Translators. In Proceedings of</text>
<text top="380" left="168" width="442" height="11" font="0">the International Conference on Generative Programming and Component Engineering</text>
<text top="377" left="610" width="140" height="15" font="0">, pages 364 – 376. Springer,</text>
<text top="390" left="168" width="29" height="15" font="0">2003.</text>
<text top="404" left="152" width="555" height="15" font="0">8. Markus Dahm. Byte Code Engineering. In Java-Informations-Tage, pages 1 – 11. Springer-Verlag, 1999.</text>
<text top="417" left="152" width="598" height="15" font="0">9. D. Dig and R. Johnson. How do APIs Evolve? A Story of Refactoring. Journal of Software Maintenance and</text>
<text top="434" left="168" width="172" height="11" font="0">Evolution: Research and Practice</text>
<text top="431" left="340" width="96" height="15" font="0">, 18:83–107, 2006.</text>
<text top="444" left="146" width="604" height="15" font="0">10. M. Dmitriev. Safe Class and Data Evolution in Large and Long-Lived Java Applications. PhD thesis, University</text>
<text top="458" left="168" width="94" height="15" font="0">of Glasgow, 2001.</text>
<text top="471" left="146" width="477" height="15" font="0">11. M. Fowler. Refactoring: Improving the Design of Existing Code. Addison-Wesley, 2006.</text>
<text top="485" left="146" width="476" height="15" font="0">12. B. Fulgham and I. Gouy. The Computer Language Benchmarks Game, December 2011.</text>
<text top="488" left="628" width="122" height="10" font="1"><a href="http://shootout.alioth.debian.org/">http://shootout.</a></text>
<text top="502" left="168" width="137" height="10" font="1"><a href="http://shootout.alioth.debian.org/">alioth.debian.org/</a></text>
<text top="498" left="305" width="3" height="15" font="0"><a href="http://shootout.alioth.debian.org/">.</a></text>
<text top="511" left="146" width="604" height="15" font="0">13. E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns: Abstraction and Reuse of Object-Oriented</text>
<text top="528" left="168" width="36" height="11" font="0">Design</text>
<text top="525" left="204" width="128" height="15" font="0">. Addison-Wesley, 2004.</text>
<text top="538" left="146" width="604" height="15" font="0">14. J. Gosling, B. Joy, G. Steele, and G. Bracha. Java(TM) Language Speciﬁcation, The (3rd Edition). Addison-Wesley,</text>
<text top="552" left="168" width="29" height="15" font="0">2005.</text>
<text top="565" left="146" width="604" height="15" font="0">15. S. G¨otz and M. Pukall. On Performance of Delegation in Java. In Proceedings of the International Workshop on</text>
<text top="582" left="168" width="169" height="11" font="0">Hot Topics in Software Upgrades</text>
<text top="579" left="337" width="127" height="15" font="0">, pages 1–6. ACM, 2009.</text>
<text top="592" left="146" width="604" height="15" font="0">16. A. R. Gregersen. Extending Netbeans with Dynamic Update of Active Modules. PhD thesis, University of Southern</text>
<text top="606" left="168" width="82" height="15" font="0">Denmark, 2010.</text>
<text top="619" left="146" width="604" height="15" font="0">17. A. R. Gregersen and B. N. Jørgensen. Run-time Phenomena in Dynamic Software Updating: Causes and Effects.</text>
<text top="633" left="168" width="582" height="15" font="0">In Proceedings of the Workshop on Principles of Software Evolution and ERCIM Workshop on Software Evolution,</text>
<text top="646" left="168" width="127" height="15" font="0">pages 6–15. ACM, 2011.</text>
<text top="659" left="146" width="604" height="15" font="0">18. D. Gupta, P. Jalote, and G. Barua. A Formal Framework for On-line Software Version Change. IEEE Transactions</text>
<text top="676" left="168" width="127" height="11" font="0">on Software Engineering</text>
<text top="673" left="294" width="117" height="15" font="0">, 22(2):120–131, 1996.</text>
<text top="686" left="146" width="604" height="15" font="0">19. Michael Haupt. Virtual Machine Support for Aspect-Oriented Programming Languages. PhD thesis, Software</text>
<text top="700" left="168" width="322" height="15" font="0">Technology Group, Darmstadt University of Technology, 2006.</text>
<text top="713" left="146" width="604" height="15" font="0">20. M. Hicks and S. Nettles. Dynamic Software Updating. ACM Transactions on Programming Languages and</text>
<text top="730" left="168" width="40" height="11" font="0">Systems</text>
<text top="727" left="208" width="129" height="15" font="0">, 27(6):1049–1096, 2005.</text>
<text top="740" left="146" width="567" height="15" font="0">21. J. Kabanov. JRebel Tool Demo. In Proceedings of the Workshop on Bytecode Semantics, pages 1–6, 2010.</text>
<text top="754" left="146" width="604" height="15" font="0">22. F. Karablieh and R. A. Bazzi. Heterogeneous Checkpointing for Multithreaded Applications. In Proceedings of</text>
<text top="770" left="168" width="242" height="11" font="0">the Symposium on Reliable Distributed Systems</text>
<text top="767" left="410" width="152" height="15" font="0">, pages 140–149. IEEE, 2002.</text>
<text top="780" left="146" width="604" height="15" font="0">23. D. K. Kim. Applying Dynamic Software Updates to Computationally-Intensive Applications. PhD thesis, Virginia</text>
<text top="794" left="168" width="245" height="15" font="0">Polytechnic Institute and State University, 2009.</text>
<text top="807" left="146" width="604" height="15" font="0">24. J. Kramer and J. Magee. The Evolving Philosophers Problem: Dynamic Change Management. IEEE Transactions</text>
<text top="824" left="168" width="127" height="11" font="0">on Software Engineering</text>
<text top="821" left="294" width="139" height="15" font="0">, 16(11):1293 –1306, 1990.</text>
<text top="834" left="146" width="604" height="15" font="0">25. S. Liang and G. Bracha. Dynamic Class Loading in the Java Virtual Machine. In Proceedings of the Conference</text>
<text top="851" left="168" width="374" height="11" font="0">on Object-Oriented Programming, Systems, Languages, and Applications</text>
<text top="848" left="542" width="146" height="15" font="0">, pages 36 – 44. ACM, 1998.</text>
<text top="861" left="146" width="604" height="15" font="0">26. H. Lieberman. Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems. In</text>
<text top="878" left="168" width="545" height="11" font="0">Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications</text>
<text top="875" left="713" width="37" height="15" font="0">, pages</text>
<text top="888" left="168" width="114" height="15" font="0">214–223. ACM, 1986.</text>
<text top="902" left="146" width="564" height="15" font="0">27. T. Lindholm and F. Yellin. The Java Virtual Machine Speciﬁcation – Second Edition. Prentice Hall, 1999.</text>
<text top="915" left="146" width="544" height="15" font="0">28. K. Makris. Whole-Program Dynamic Software Updating. PhD thesis, Arizona State University, 2009.</text>
<text top="928" left="146" width="604" height="15" font="0">29. S. Malabarba, R. Pandey, J. Gragg, E. Barr, and J. F. Barnes. Runtime Support for Type-safe dynamic Java Classes.</text>
<text top="942" left="168" width="572" height="15" font="0">In Proceedings of the European Conference on Object-Oriented Programming, pages 337 – 361. Springer, 2000.</text>
<text top="955" left="146" width="604" height="15" font="0">30. Y. Murarka, U. Bellur, and R. K. Joshi. Safety Analysis for Dynamic Update of Object Oriented Programs. In</text>
<text top="972" left="168" width="333" height="11" font="0">Proceedings of the Asia Paciﬁc Software Engineering Conference</text>
<text top="969" left="501" width="152" height="15" font="0">, pages 225–232. IEEE, 2006.</text>
<text top="982" left="146" width="604" height="15" font="0">31. A. Nicoara, G. Alonso, and T. Roscoe. Controlled, Systematic, and Efﬁcient Code Replacement for Running Java</text>
<text top="996" left="168" width="391" height="15" font="0">Programs. In Proceedings of the EuroSys Conference, pages 233–246, 2008.</text>
<text top="1053" left="140" width="10" height="8" font="6"><a href="http://wwwiti.cs.uni-magdeburg.de/iti_db/forschung/ramses/index.htm">††</a></text>
<text top="1056" left="151" width="511" height="10" font="1"><a href="http://wwwiti.cs.uni-magdeburg.de/iti_db/forschung/ramses/index.htm">http://wwwiti.cs.uni-magdeburg.de/iti_db/forschung/ramses/index.htm</a></text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
<page number="33" position="absolute" top="0" left="0" height="1173" width="892">
<text top="56" left="735" width="15" height="19" font="9">33</text>
<text top="104" left="146" width="604" height="15" font="0">32. W. F. Opdyke and R. E. Johnson. Refactoring: An Aid in Designing Application Frameworks and Evolving Object-</text>
<text top="117" left="168" width="582" height="15" font="0">Oriented Systems. In Proceedings of the Symposium on Object-Oriented Programming Emphasizing Practical</text>
<text top="134" left="168" width="64" height="11" font="0">Applications</text>
<text top="130" left="232" width="159" height="15" font="0">, pages 145 – 161. ACM, 1990.</text>
<text top="144" left="146" width="551" height="15" font="0">33. Oracle. BEA WebLogic Server Using FastSwap to Minimize Redeployment, December 2011.</text>
<text top="148" left="712" width="38" height="10" font="1"><a href="http://download.oracle.com/docs/cd/E13222_01/wls/essex/TechPreview/pdf/FastSwap.pdf">http:</a></text>
<text top="161" left="168" width="572" height="10" font="1"><a href="http://download.oracle.com/docs/cd/E13222_01/wls/essex/TechPreview/pdf/FastSwap.pdf">//download.oracle.com/docs/cd/E13222_01/wls/essex/TechPreview/pdf/FastSwap.</a></text>
<text top="175" left="168" width="23" height="10" font="1"><a href="http://download.oracle.com/docs/cd/E13222_01/wls/essex/TechPreview/pdf/FastSwap.pdf">pdf</a></text>
<text top="171" left="191" width="3" height="15" font="0"><a href="http://download.oracle.com/docs/cd/E13222_01/wls/essex/TechPreview/pdf/FastSwap.pdf">.</a></text>
<text top="184" left="146" width="340" height="15" font="0">34. Oracle. Java Platform Debugger Architecture, December 2011.</text>
<text top="188" left="491" width="259" height="10" font="1"><a href="http://download.oracle.com/javase/6/docs/technotes/guides/jpda/">http://download.oracle.com/javase/</a></text>
<text top="202" left="168" width="221" height="10" font="1"><a href="http://download.oracle.com/javase/6/docs/technotes/guides/jpda/">6/docs/technotes/guides/jpda/</a></text>
<text top="198" left="389" width="3" height="15" font="0"><a href="http://download.oracle.com/javase/6/docs/technotes/guides/jpda/">.</a></text>
<text top="211" left="146" width="393" height="15" font="0">35. Oracle. Java Virtual Machine Tool Interface Version 1.2, December 2011.</text>
<text top="215" left="544" width="206" height="10" font="1"><a href="http://download.oracle.com/javase/6/docs/platform/jvmti/jvmti.html">http://download.oracle.com/</a></text>
<text top="228" left="168" width="297" height="10" font="1"><a href="http://download.oracle.com/javase/6/docs/platform/jvmti/jvmti.html">javase/6/docs/platform/jvmti/jvmti.html</a></text>
<text top="225" left="465" width="3" height="15" font="0"><a href="http://download.oracle.com/javase/6/docs/platform/jvmti/jvmti.html">.</a></text>
<text top="238" left="146" width="604" height="15" font="0">36. A. Orso, A. Rao, and M. Harrold. A Technique for Dynamic Updating of Java Software. In Proceedings of the</text>
<text top="255" left="168" width="262" height="11" font="0">International Conference on Software Maintenance</text>
<text top="252" left="429" width="152" height="15" font="0">, pages 649–658. IEEE, 2002.</text>
<text top="265" left="146" width="604" height="15" font="0">37. R. Pawlak, L. Duchien, G. Florin, and L. Seinturier. Dynamic Wrappers: Handling the Composition Issue with</text>
<text top="278" left="168" width="582" height="15" font="0">JAC. In Proceedings of the Conference on Technology of Object-Oriented Languages and Systems, pages 56–65.</text>
<text top="292" left="168" width="62" height="15" font="0">IEEE, 2001.</text>
<text top="305" left="146" width="604" height="15" font="0">38. M. Pukall, A. Grebhahn, R. Schr¨oter, C. K¨astner, W. Cazzola, and S. G¨otz. JavAdaptor: Unrestricted Dynamic</text>
<text top="319" left="168" width="582" height="15" font="0">Software Updates for Java. In Proceedings of the International Conference on Software Engineering, pages 989–</text>
<text top="332" left="168" width="89" height="15" font="0">991. ACM, 2011.</text>
<text top="346" left="146" width="604" height="15" font="0">39. M. Pukall, C. K¨astner, and G. Saake. Towards Unanticipated Runtime Adaptation of Java Applications. In</text>
<text top="362" left="168" width="334" height="11" font="0">Proceedings of the Asia-Paciﬁc Software Engineering Conference</text>
<text top="359" left="502" width="139" height="15" font="0">, pages 85–92. IEEE, 2008.</text>
<text top="373" left="146" width="604" height="15" font="0">40. T. Ritzau and J. Andersson. Dynamic Deployment of Java Applications. In Proceedings of Java for Embedded</text>
<text top="389" left="168" width="94" height="11" font="0">Systems Workshop</text>
<text top="386" left="262" width="92" height="15" font="0">, pages 1–9, 2000.</text>
<text top="399" left="146" width="604" height="15" font="0">41. Y. Sato, S. f, and M. Tatsubori. A Selective, Just-in-Time Aspect Weaver. In Proceedings of the International</text>
<text top="416" left="168" width="357" height="11" font="0">Conference on Generative Programming and Component Engineering</text>
<text top="413" left="525" width="124" height="15" font="0">, pages 189 – 208, 2003.</text>
<text top="426" left="146" width="604" height="15" font="0">42. G. Stoyle, M. Hicks, G. Bierman, P. Sewell, and I. Neamtiu. Mutatis Mutandis: Safe and Flexible Dynamic Software</text>
<text top="440" left="168" width="582" height="15" font="0">Updating. In Proceedings of the ACM Conference on Principles of Programming Languages, pages 183–194. ACM,</text>
<text top="453" left="168" width="29" height="15" font="0">2005.</text>
<text top="467" left="146" width="604" height="15" font="0">43. S. Subramanian, M. Hicks, and K. S. McKinley. Dynamic Software Updates: A VM-Centric Approach. In</text>
<text top="483" left="168" width="443" height="11" font="0">Proceedings of the Conference on Programming Language Design and Implementation</text>
<text top="480" left="611" width="134" height="15" font="0">, pages 1–12. ACM, 2009.</text>
<text top="496" left="146" width="604" height="15" font="0">44. ´Eric Tanter, Jacques Noy´e, Denis Caromel, and Pierre Cointe. Partial behavioral reﬂection: spatial and temporal</text>
<text top="509" left="168" width="582" height="15" font="0">selection of reiﬁcation. In Proceedings of the Conference on Object-Oriented Programming Systems, Languages</text>
<text top="526" left="168" width="145" height="11" font="0">and Applications (OOPSLA)</text>
<text top="523" left="313" width="105" height="15" font="0">, pages 27–46, 2003.</text>
<text top="536" left="146" width="604" height="15" font="0">45. E. Truyen, B. Vanhaute, W. Joosen, P. Verbaeten, and B. Nørregaard Jørgensen. Dynamic and Selective</text>
<text top="550" left="168" width="582" height="15" font="0">Combination of Extensions in Component-Based Applications. In Proceedings of the International Conference</text>
<text top="566" left="168" width="127" height="11" font="0">on Software Engineering</text>
<text top="563" left="294" width="152" height="15" font="0">, pages 233–242. IEEE, 2001.</text>
<text top="577" left="146" width="604" height="15" font="0">46. W. Vanderperren and D. Suvee. Optimizing JAsCo dynamic AOP through HotSwap and Jutta. In Proceedings of</text>
<text top="593" left="168" width="211" height="11" font="0">the AOSD Workshop on Dynamic Aspects</text>
<text top="590" left="379" width="118" height="15" font="0">, pages 120–134, 2004.</text>
<text top="603" left="146" width="604" height="15" font="0">47. Y. Vandewoude, P. Ebraert, Y. Berbers, and T. D’Hondt. Tranquility: A Low Disruptive Alternative to Quiescence</text>
<text top="617" left="168" width="546" height="15" font="0">for Ensuring Safe Dynamic Updates. IEEE Transactions on Software Engineering, 33(12):856 –868, 2007.</text>
<text top="630" left="146" width="436" height="15" font="0">48. B. Venners. Inside the Java 2 Virtual Machine. Computing McGraw-Hill., 2000.</text>
<text top="644" left="146" width="548" height="15" font="0">49. T. W¨urthinger. Dynamic Code Evolution for Java. PhD thesis, Johannes Kepler University Linz, 2011.</text>
<text top="657" left="146" width="604" height="15" font="0">50. S. Zhang and L. Huang. Type-Safe Dynamic Update Transaction. In Proceedings of the Computer Software and</text>
<text top="674" left="168" width="125" height="11" font="0">Applications Conference</text>
<text top="671" left="293" width="152" height="15" font="0">, pages 335–340. IEEE, 2007.</text>
<text top="1088" left="140" width="225" height="15" font="0">Copyright c 2011 John Wiley &amp; Sons, Ltd.</text>
<text top="1092" left="611" width="102" height="11" font="0">Softw. Pract. Exper.</text>
<text top="1088" left="716" width="34" height="15" font="0">(2011)</text>
<text top="1105" left="140" width="78" height="11" font="0">Prepared using</text>
<text top="1105" left="221" width="64" height="12" font="0">speauth.cls</text>
<text top="1102" left="659" width="91" height="15" font="0">DOI: 10.1002/spe</text>
</page>
</pdf2xml>
