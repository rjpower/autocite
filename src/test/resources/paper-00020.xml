<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="0" size="24" family="Helvetica" color="#231f20"/>
	<fontspec id="1" size="15" family="Helvetica" color="#231f20"/>
	<fontspec id="2" size="9" family="Times" color="#231f20"/>
	<fontspec id="3" size="15" family="Times" color="#231f20"/>
	<fontspec id="4" size="11" family="Times" color="#231f20"/>
	<fontspec id="5" size="9" family="Times" color="#231f20"/>
	<fontspec id="6" size="9" family="Times" color="#231f20"/>
<text top="109" left="254" width="407" height="25" font="0"><b>Impact of FPGA Architecture on</b></text>
<text top="139" left="187" width="540" height="25" font="0"><b>Resource Sharing in High-Level Synthesis</b></text>
<text top="171" left="146" width="106" height="17" font="1">Stefan Hadjis</text>
<text top="168" left="252" width="6" height="12" font="2">1</text>
<text top="171" left="260" width="121" height="17" font="1">, Andrew Canis</text>
<text top="168" left="381" width="6" height="12" font="2">1</text>
<text top="171" left="388" width="139" height="17" font="1">, Jason Anderson</text>
<text top="168" left="526" width="6" height="12" font="2">1</text>
<text top="171" left="534" width="118" height="17" font="1">, Jongsok Choi</text>
<text top="168" left="652" width="6" height="12" font="2">1</text>
<text top="171" left="660" width="96" height="17" font="1">, Kevin Nam</text>
<text top="168" left="756" width="6" height="12" font="2">1</text>
<text top="171" left="763" width="5" height="17" font="1">,</text>
<text top="189" left="289" width="122" height="17" font="1">Stephen Brown</text>
<text top="187" left="411" width="6" height="12" font="2">1</text>
<text top="189" left="418" width="201" height="17" font="1">, and Tomasz Czajkowski</text>
<text top="187" left="619" width="6" height="11" font="2">‡</text>
<text top="219" left="210" width="6" height="12" font="2">1</text>
<text top="222" left="217" width="487" height="17" font="1">ECE Department, University of Toronto, Toronto, ON, Canada</text>
<text top="239" left="232" width="6" height="11" font="2">‡</text>
<text top="241" left="238" width="444" height="17" font="1">Altera Toronto Technology Centre, Toronto, ON, Canada</text>
<text top="288" left="81" width="97" height="16" font="3"><b>ABSTRACT</b></text>
<text top="310" left="81" width="359" height="13" font="4">Resource sharing is a key area-reduction approach in high-</text>
<text top="324" left="81" width="359" height="13" font="4">level synthesis (HLS) in which a single hardware functional</text>
<text top="338" left="81" width="359" height="13" font="4">unit is used to implement multiple operations in the high-</text>
<text top="353" left="81" width="359" height="13" font="4">level circuit speciﬁcation. We show that the utility of shar-</text>
<text top="367" left="81" width="359" height="13" font="4">ing depends on the underlying FPGA logic element archi-</text>
<text top="381" left="81" width="359" height="13" font="4">tecture and that diﬀerent sharing trade-oﬀs exist when 4-</text>
<text top="395" left="81" width="359" height="13" font="4">LUTs vs. 6-LUTs are used. We further show that certain</text>
<text top="409" left="81" width="359" height="13" font="4">multi-operator patterns occur multiple times in programs,</text>
<text top="423" left="81" width="359" height="13" font="4">creating additional opportunities for sharing larger compos-</text>
<text top="437" left="81" width="359" height="13" font="4">ite functional units comprised of patterns of interconnected</text>
<text top="451" left="81" width="359" height="13" font="4">operators. A sharing cost/beneﬁt analysis is used to in-</text>
<text top="465" left="81" width="359" height="13" font="4">form decisions made in the binding phase of an HLS tool,</text>
<text top="480" left="81" width="359" height="13" font="4">whose RTL output is targeted to Altera commercial FPGA</text>
<text top="494" left="81" width="359" height="13" font="4">families: Stratix IV (dual-output 6-LUTs) and Cyclone II</text>
<text top="508" left="81" width="61" height="13" font="4">(4-LUTs).</text>
<text top="546" left="81" width="270" height="16" font="3"><b>Categories and Subject Descriptors</b></text>
<text top="569" left="81" width="248" height="13" font="4">B.7 [Integrated Circuits]: Design Aids</text>
<text top="607" left="81" width="77" height="16" font="3"><b>Keywords</b></text>
<text top="630" left="81" width="359" height="13" font="4">Field-programmable gate arrays, FPGAs, high-level synthe-</text>
<text top="644" left="81" width="121" height="13" font="4">sis, resource sharing</text>
<text top="682" left="81" width="13" height="16" font="3"><b>1.</b></text>
<text top="682" left="112" width="143" height="16" font="3"><b>INTRODUCTION</b></text>
<text top="701" left="94" width="345" height="13" font="4">High-level synthesis (HLS) refers to the automatic compi-</text>
<text top="715" left="81" width="359" height="13" font="4">lation of a program speciﬁed in a high-level language (such</text>
<text top="729" left="81" width="359" height="13" font="4">as C) into a hardware circuit. There are several traditional</text>
<text top="743" left="81" width="359" height="13" font="4">steps in HLS. Allocation determines the number and types of</text>
<text top="757" left="81" width="359" height="13" font="4">functional units to be used in the hardware implementation.</text>
<text top="771" left="81" width="359" height="13" font="4">This is followed by scheduling, which assigns operations in</text>
<text top="786" left="81" width="359" height="13" font="4">the program speciﬁcation to speciﬁc clock cycles and gen-</text>
<text top="800" left="81" width="359" height="13" font="4">erates a corresponding ﬁnite state machine (FSM). Binding</text>
<text top="814" left="81" width="359" height="13" font="4">then assigns the operations in the program to speciﬁc func-</text>
<text top="828" left="81" width="359" height="13" font="4">tional units in a manner consistent with the allocation and</text>
<text top="842" left="81" width="110" height="13" font="4">scheduling results.</text>
<text top="856" left="94" width="345" height="13" font="4">A well-studied area-reduction optimization in the binding</text>
<text top="870" left="81" width="359" height="13" font="4">step is called resource sharing, which involves assigning mul-</text>
<text top="884" left="81" width="359" height="13" font="4">tiple operations to the same hardware unit. Consider, for</text>
<text top="898" left="81" width="359" height="13" font="4">example, two additions that are scheduled to execute in dif-</text>
<text top="913" left="81" width="359" height="13" font="4">ferent clock cycles. Such additions may be implemented by</text>
<text top="977" left="81" width="359" height="11" font="5">Permission to make digital or hard copies of all or part of this work for</text>
<text top="990" left="81" width="359" height="11" font="5">personal or classroom use is granted without fee provided that copies are</text>
<text top="1004" left="81" width="358" height="11" font="5">not made or distributed for proﬁt or commercial advantage and that copies</text>
<text top="1017" left="81" width="359" height="11" font="5">bear this notice and the full citation on the ﬁrst page. To copy otherwise, to</text>
<text top="1031" left="81" width="358" height="11" font="5">republish, to post on servers or to redistribute to lists, requires prior speciﬁc</text>
<text top="1044" left="81" width="115" height="11" font="5">permission and/or a fee.</text>
<text top="1058" left="81" width="297" height="11" font="6"><i>FPGA’12, </i>February 22–24, 2012, Monterey, California, USA.</text>
<text top="1071" left="81" width="280" height="11" font="5">Copyright 2012 ACM 978-1-4503-1155-7/12/02 ...$10.00.</text>
<text top="290" left="475" width="359" height="13" font="4">the same adder in hardware – the additions share the hard-</text>
<text top="304" left="475" width="359" height="13" font="4">ware adder. Resource sharing is accomplished by adding</text>
<text top="318" left="475" width="359" height="13" font="4">multiplexers (MUXes) to the inputs of the shared functional</text>
<text top="332" left="475" width="359" height="13" font="4">unit, with the FSM controlling the MUXes to steer the cor-</text>
<text top="346" left="475" width="359" height="13" font="4">rect data to the adder based on the state. Since MUXes are</text>
<text top="361" left="475" width="359" height="13" font="4">costly to implement in FPGAs, resource sharing has gener-</text>
<text top="375" left="475" width="359" height="13" font="4">ally been thought to have little value for FPGAs, except in</text>
<text top="389" left="475" width="359" height="13" font="4">cases where the resource being shared is large or is scarce in</text>
<text top="403" left="475" width="106" height="13" font="4">the target device.</text>
<text top="417" left="489" width="345" height="13" font="4">In this paper, we examine the impact of the FPGA logic</text>
<text top="431" left="475" width="359" height="13" font="4">element architecture on the eﬀectiveness of resource shar-</text>
<text top="445" left="475" width="359" height="13" font="4">ing. We conduct our analysis using two commercial Altera</text>
<text top="460" left="475" width="359" height="13" font="4">FPGA families: 1) Cyclone II [2] (4-LUTs) and 2) Stratix</text>
<text top="474" left="475" width="359" height="13" font="4">IV [3] (dual-output 6-LUTs). One of the contributions of</text>
<text top="488" left="475" width="359" height="13" font="4">this paper is to show conclusively the cases for which re-</text>
<text top="502" left="475" width="359" height="13" font="4">source sharing is advantageous for FPGAs. Results show</text>
<text top="516" left="475" width="359" height="13" font="4">that certain operators (e.g. addition) that are not worth</text>
<text top="530" left="475" width="359" height="13" font="4">sharing in Cyclone II are indeed worth sharing in Stratix</text>
<text top="544" left="475" width="359" height="13" font="4">IV. This is due to the larger LUT size, which permits por-</text>
<text top="558" left="475" width="359" height="13" font="4">tions of the sharing multiplexer circuitry to be combined</text>
<text top="573" left="475" width="359" height="13" font="4">into the same LUTs that implement the operators them-</text>
<text top="587" left="475" width="359" height="13" font="4">selves. We then show that there exist patterns of operators</text>
<text top="601" left="475" width="359" height="13" font="4">that occur commonly in circuits and that such patterns can</text>
<text top="615" left="475" width="359" height="13" font="4">be considered as composite operators that can be shared to</text>
<text top="629" left="475" width="359" height="13" font="4">provide area reductions. We use the sharing analysis re-</text>
<text top="643" left="475" width="359" height="13" font="4">sults to drive decisions made in the binding phase of the</text>
<text top="657" left="475" width="359" height="13" font="4">LegUp open source HLS tool [13] built within the LLVM</text>
<text top="671" left="475" width="81" height="13" font="4">compiler [11].</text>
<text top="708" left="475" width="13" height="16" font="3"><b>2.</b></text>
<text top="708" left="507" width="326" height="16" font="3"><b>BACKGROUND AND RELATED WORK</b></text>
<text top="727" left="489" width="345" height="13" font="4">Recent research on resource sharing that speciﬁcally tar-</text>
<text top="741" left="475" width="359" height="13" font="4">gets FPGAs includes [9, 8, 5, 14, 4]. The work of Cong</text>
<text top="755" left="475" width="359" height="13" font="4">and Jiang [6] bears the most similarity to our own in that</text>
<text top="769" left="475" width="359" height="13" font="4">it applied graph-based techniques to identify commonly oc-</text>
<text top="783" left="475" width="359" height="13" font="4">curring patterns of operators in the HLS of FPGA circuits,</text>
<text top="798" left="475" width="359" height="13" font="4">and then shared such patterns in binding for resource re-</text>
<text top="812" left="475" width="359" height="13" font="4">duction. Some of the area savings achieved, however, were</text>
<text top="826" left="475" width="359" height="13" font="4">through the sharing of multipliers implemented using LUTs</text>
<text top="840" left="475" width="359" height="13" font="4">instead of using hard IP blocks. Implementing multipliers</text>
<text top="854" left="475" width="359" height="13" font="4">using LUTs is very costly, and thus oﬀers substantial sharing</text>
<text top="868" left="475" width="84" height="13" font="4">opportunities.</text>
<text top="882" left="489" width="345" height="13" font="4">The two commercial FPGAs targeted in this study have</text>
<text top="896" left="475" width="359" height="13" font="4">considerably diﬀerent logic element architectures. In Cy-</text>
<text top="911" left="475" width="359" height="13" font="4">clone II, combinational logic functions are implemented us-</text>
<text top="925" left="475" width="358" height="13" font="4">ing 4-input LUTs. Stratix IV logic elements are referred</text>
<text top="939" left="475" width="359" height="13" font="4">to as adaptive logic modules (ALMs). An ALM contains</text>
<text top="953" left="475" width="359" height="13" font="4">a dual-output 6-LUT, which receives 8 inputs. Each of the</text>
<text top="967" left="475" width="359" height="13" font="4">outputs corresponds to an adaptive LUT (ALUT). The ALM</text>
<text top="981" left="475" width="358" height="13" font="4">can implement any single logic function of 6 variables, or al-</text>
<text top="995" left="475" width="358" height="13" font="4">ternately, can be fractured to implement two separate logic</text>
<text top="1009" left="475" width="359" height="13" font="4">functions (using both outputs) – i.e. two ALUTs. The ALM</text>
<text top="1023" left="475" width="359" height="13" font="4">can implement two functions of 4 variables, two functions</text>
<text top="1038" left="475" width="359" height="13" font="4">with 5 and 3 variables, respectively, as well as several other</text>
<text top="1052" left="475" width="359" height="13" font="4">combinations. In both architectures, a bypassable ﬂip-ﬂop</text>
<text top="1066" left="475" width="192" height="13" font="4">is present for each LUT output.</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="7" size="27" family="Times" color="#000000"/>
	<fontspec id="8" size="12" family="Times" color="#000000"/>
	<fontspec id="9" size="12" family="Times" color="#000000"/>
	<fontspec id="10" size="11" family="Times" color="#000000"/>
<text top="67" left="240" width="88" height="10" font="10">D = E + F; </text>
<text top="240" left="147" width="226" height="13" font="4">Figure 1: Illustration of sharing.</text>
<text top="265" left="81" width="358" height="13" font="4">Table 1: Area data for individual 32-bit operators</text>
<text top="279" left="81" width="358" height="13" font="4">in the unshareable and shareable scenarios (ratios</text>
<text top="293" left="81" width="236" height="13" font="4">represent shareable/unshareable).</text>
<text top="308" left="183" width="67" height="12" font="2">Cyclone II</text>
<text top="308" left="332" width="66" height="12" font="2">Stratix IV</text>
<text top="320" left="145" width="292" height="12" font="2">Unshareable Shareable Unshareable Shareable</text>
<text top="332" left="172" width="24" height="12" font="2">LEs</text>
<text top="332" left="246" width="24" height="12" font="2">LEs</text>
<text top="332" left="313" width="39" height="12" font="2">ALMs</text>
<text top="332" left="386" width="39" height="12" font="2">ALMs</text>
<text top="346" left="83" width="59" height="12" font="2">Add/Sub</text>
<text top="346" left="178" width="13" height="12" font="2">32</text>
<text top="346" left="233" width="49" height="12" font="2">96 (3.00)</text>
<text top="346" left="326" width="13" height="12" font="2">16</text>
<text top="346" left="381" width="49" height="12" font="2">25 (1.56)</text>
<text top="358" left="95" width="47" height="12" font="2">Bitwise</text>
<text top="358" left="178" width="13" height="12" font="2">32</text>
<text top="358" left="233" width="49" height="12" font="2">64 (2.00)</text>
<text top="358" left="326" width="13" height="12" font="2">32</text>
<text top="358" left="381" width="49" height="12" font="2">32 (1.00)</text>
<text top="371" left="84" width="58" height="12" font="2">Compare</text>
<text top="371" left="178" width="13" height="12" font="2">32</text>
<text top="371" left="233" width="49" height="12" font="2">96 (3.00)</text>
<text top="371" left="326" width="13" height="12" font="2">24</text>
<text top="371" left="381" width="49" height="12" font="2">46 (1.92)</text>
<text top="383" left="119" width="23" height="12" font="2">Div</text>
<text top="383" left="172" width="25" height="12" font="2">1118</text>
<text top="383" left="227" width="62" height="12" font="2">1182 (1.06)</text>
<text top="383" left="323" width="19" height="12" font="2">568</text>
<text top="383" left="378" width="55" height="12" font="2">599 (1.05)</text>
<text top="396" left="112" width="30" height="12" font="2">Mod</text>
<text top="396" left="172" width="25" height="12" font="2">1119</text>
<text top="396" left="227" width="62" height="12" font="2">1183 (1.06)</text>
<text top="396" left="323" width="19" height="12" font="2">581</text>
<text top="396" left="378" width="55" height="12" font="2">613 (1.06)</text>
<text top="408" left="110" width="32" height="12" font="2">Mult</text>
<text top="408" left="175" width="19" height="12" font="2">689</text>
<text top="408" left="230" width="55" height="12" font="2">747 (1.08)</text>
<text top="408" left="323" width="19" height="12" font="2">221</text>
<text top="408" left="378" width="55" height="12" font="2">362 (1.64)</text>
<text top="421" left="111" width="31" height="12" font="2">Shift</text>
<text top="421" left="175" width="19" height="12" font="2">173</text>
<text top="421" left="230" width="55" height="12" font="2">215 (1.24)</text>
<text top="421" left="326" width="13" height="12" font="2">75</text>
<text top="421" left="381" width="49" height="12" font="2">94 (1.25)</text>
<text top="468" left="81" width="13" height="16" font="3"><b>3.</b></text>
<text top="468" left="112" width="312" height="16" font="3"><b>SHARING INDIVIDUAL OPERATORS</b></text>
<text top="487" left="94" width="345" height="13" font="4">We ﬁrst investigate the value of sharing individual oper-</text>
<text top="501" left="81" width="359" height="13" font="4">ators outside the context of a larger circuit. For each type</text>
<text top="515" left="81" width="359" height="13" font="4">of operator, we wish to know whether any area savings may</text>
<text top="529" left="81" width="359" height="13" font="4">arise from sharing its hardware implementation vs. the case</text>
<text top="543" left="81" width="359" height="13" font="4">of instantiating additional instances of the operator. An ex-</text>
<text top="557" left="81" width="359" height="13" font="4">ample of resource sharing is illustrated in Fig. 1 for two C</text>
<text top="572" left="81" width="359" height="13" font="4">statements: A = B + C and D = E + F. Fig. 1(a) shows an</text>
<text top="586" left="81" width="359" height="13" font="4">implementation without sharing, using two adders; Fig. 1(b)</text>
<text top="600" left="81" width="359" height="13" font="4">depicts the shareable case, in which the same two adders are</text>
<text top="614" left="81" width="358" height="13" font="4">now implemented using the same functional unit. We wish</text>
<text top="628" left="81" width="359" height="13" font="4">to compare the area consumed by both possible implemen-</text>
<text top="642" left="81" width="359" height="13" font="4">tations, shareable vs. unshareable, for various types of op-</text>
<text top="656" left="81" width="359" height="13" font="4">erators. The utility of sharing clearly depends on how the</text>
<text top="670" left="81" width="183" height="13" font="4">multiplexers are implemented.</text>
<text top="685" left="94" width="345" height="13" font="4">We created two diﬀerent Verilog implementations for each</text>
<text top="699" left="81" width="360" height="13" font="4">operator type in the LLVM intermediate representation (IR).</text>
<text top="713" left="81" width="359" height="13" font="4">The ﬁrst implementation contains a single instance of the</text>
<text top="727" left="81" width="359" height="13" font="4">operator. The second contains the operator instance with 2-</text>
<text top="741" left="81" width="359" height="13" font="4">to-1 multiplexers on its inputs. We implemented these two</text>
<text top="755" left="81" width="359" height="13" font="4">subcircuits in FPGAs to measure their area. The subcircuits</text>
<text top="769" left="81" width="359" height="13" font="4">were synthesized using Quartus II ver. 11.0. To measure</text>
<text top="783" left="81" width="359" height="13" font="4">area, we use logic element count (LE) for Cyclone II and the</text>
<text top="798" left="81" width="359" height="13" font="4">number of adaptive logic modules (ALMs) for Stratix IV. We</text>
<text top="812" left="81" width="367" height="13" font="4">use the Quartus II INI variable fit_pack_for_density_light</text>
<text top="826" left="81" width="359" height="13" font="4">to direct the tool to minimize circuit area when packing logic</text>
<text top="840" left="81" width="184" height="13" font="4">into ALMs/LEs and LABs [1].</text>
<text top="854" left="94" width="345" height="13" font="4">Table 1 provides area results for sharing individual 32-bit-</text>
<text top="868" left="81" width="359" height="13" font="4">wide operators in Cyclone II and Stratix IV FPGAs. Each</text>
<text top="882" left="81" width="359" height="13" font="4">row of the table corresponds to an operator type. The row</text>
<text top="896" left="81" width="359" height="13" font="4">labeled bitwise represents the AND, OR, and XOR operators,</text>
<text top="911" left="81" width="359" height="13" font="4">all of which consume the same area. The left side of the ta-</text>
<text top="925" left="81" width="359" height="13" font="4">ble gives results for Cyclone II; the right side gives results for</text>
<text top="939" left="81" width="359" height="13" font="4">Stratix IV. Area is shown for both the unshareable (columns</text>
<text top="953" left="81" width="359" height="13" font="4">labeled unshareable) and shareable scenarios (columns la-</text>
<text top="967" left="81" width="359" height="13" font="4">beled shareable). For the data corresponding to shareable</text>
<text top="981" left="81" width="359" height="13" font="4">operators, values in parentheses give the ratio in area vs. the</text>
<text top="995" left="81" width="359" height="13" font="4">unshareable case. Sharing provides a beneﬁt when the ra-</text>
<text top="1009" left="81" width="359" height="13" font="4">tio reported is less than 2; that is, less area is consumed by</text>
<text top="1023" left="81" width="359" height="13" font="4">sharing the operator in hardware than by instantiating two</text>
<text top="1038" left="81" width="154" height="13" font="4">instances of the operator.</text>
<text top="1052" left="94" width="345" height="13" font="4">Table 1 illustrates that in both FPGA architectures, shar-</text>
<text top="1066" left="81" width="359" height="13" font="4">ing is useful (from the area-reduction perspective) for mod-</text>
<text top="85" left="475" width="359" height="13" font="4">ulus, division, multiplication (implemented with LUTs) and</text>
<text top="100" left="475" width="358" height="13" font="4">bitwise shift. Modulus and division are implemented with</text>
<text top="114" left="475" width="359" height="13" font="4">LUTs in both architectures and consume considerable area</text>
<text top="128" left="475" width="359" height="13" font="4">in comparison with multiplexers. The shift represents a bar-</text>
<text top="142" left="475" width="359" height="13" font="4">rel shift. In Stratix IV, sharing is also beneﬁcial for addition,</text>
<text top="156" left="475" width="359" height="13" font="4">subtraction, comparison, as well as all of the bitwise oper-</text>
<text top="170" left="475" width="358" height="13" font="4">ations: AND, OR, XOR. The larger LUTs in Stratix IV allow</text>
<text top="184" left="475" width="359" height="13" font="4">some (or all) of the sharing MUXes to be combined into</text>
<text top="199" left="475" width="359" height="13" font="4">the same LUTs that implement the operators, and thus, for</text>
<text top="213" left="475" width="353" height="13" font="4">Stratix IV, sharing is useful for a broader set of operators.</text>
<text top="227" left="489" width="345" height="13" font="4">Regarding the bitwise operator data for Stratix IV in Ta-</text>
<text top="241" left="475" width="359" height="13" font="4">ble 1, in the unshareable case, a 32-bit bitwise logical op-</text>
<text top="255" left="475" width="359" height="13" font="4">erator uses 32 ALMs; in the shareable case, 32 ALMs are</text>
<text top="269" left="475" width="359" height="13" font="4">also consumed. In the unshareable case, however, each out-</text>
<text top="283" left="475" width="359" height="13" font="4">put is a function of just 2 primary inputs. Since ALMs are</text>
<text top="297" left="475" width="359" height="13" font="4">dual-output and can implement any two functions of up to</text>
<text top="312" left="475" width="359" height="13" font="4">4 inputs, the unshareable case should have consumed just</text>
<text top="326" left="475" width="359" height="13" font="4">16 ALMs. Quartus did not produce an area-minimal imple-</text>
<text top="340" left="475" width="142" height="13" font="4">mentation for this case.</text>
<text top="398" left="475" width="13" height="16" font="3"><b>4.</b></text>
<text top="398" left="507" width="312" height="16" font="3"><b>SHARING COMPOSITE OPERATORS</b></text>
<text top="416" left="489" width="345" height="13" font="4">We now consider composite operators (patterns), which</text>
<text top="430" left="475" width="359" height="13" font="4">are groups of individual operators that connect to one an-</text>
<text top="445" left="475" width="359" height="13" font="4">other in speciﬁc ways. We begin by deﬁning the key concepts</text>
<text top="459" left="475" width="235" height="13" font="4">used in our pattern analysis algorithm:</text>
<text top="487" left="489" width="345" height="13" font="4">Pattern graph: A directed dataﬂow graph representing</text>
<text top="501" left="475" width="359" height="13" font="4">a computational pattern. Each node in the graph is a two-</text>
<text top="515" left="475" width="359" height="13" font="4">operand operation from the LLVM IR. Each pattern graph</text>
<text top="529" left="475" width="359" height="13" font="4">has a single root (output) node. The number of nodes in a</text>
<text top="543" left="475" width="359" height="13" font="4">pattern graph is referred to as its size. We require the nodes</text>
<text top="557" left="475" width="359" height="13" font="4">in a pattern graph to reside in the same basic block, where a</text>
<text top="572" left="475" width="359" height="13" font="4">basic block is a contiguous set of instructions with a single</text>
<text top="586" left="475" width="212" height="13" font="4">entry point and a single exit point.</text>
<text top="600" left="489" width="345" height="13" font="4">PatternMap: A container for pattern graphs that or-</text>
<text top="614" left="475" width="359" height="13" font="4">ganizes pattern graphs based on size and functionality. A</text>
<text top="628" left="475" width="359" height="13" font="4">key operation performed by the PatternMap is the testing</text>
<text top="642" left="475" width="359" height="13" font="4">of two patterns for equivalence. The equivalence checking</text>
<text top="656" left="475" width="359" height="13" font="4">accounts for patterns which are functionally but not topo-</text>
<text top="670" left="475" width="359" height="13" font="4">logically equivalent due to the order of operands in commu-</text>
<text top="685" left="475" width="359" height="13" font="4">tative operations. Note that pattern graphs with diﬀerent</text>
<text top="699" left="475" width="359" height="13" font="4">schedules are not considered functionality equivalent. That</text>
<text top="713" left="475" width="359" height="13" font="4">is, the corresponding nodes in two equivalent pattern graphs</text>
<text top="727" left="475" width="29" height="12" font="4">must</text>
<text top="727" left="510" width="324" height="13" font="4">have corresponding cycle assignments in the schedule</text>
<text top="741" left="475" width="359" height="13" font="4">(e.g. if two operators are chained together in a single cycle</text>
<text top="755" left="475" width="359" height="13" font="4">in one pattern graph, the corresponding operators must be</text>
<text top="769" left="475" width="359" height="13" font="4">chained in the equivalent pattern graph). HLS scheduling</text>
<text top="783" left="475" width="222" height="13" font="4">results are used to detect such cases.</text>
<text top="798" left="489" width="345" height="13" font="4">Finally, note that two pattern graphs may contain the</text>
<text top="812" left="475" width="358" height="13" font="4">same set of operators connected in the same way, yet corre-</text>
<text top="826" left="475" width="359" height="13" font="4">sponding operators in the graphs have diﬀerent bit widths.</text>
<text top="840" left="475" width="359" height="13" font="4">It is undesirable to consider the two pattern graphs as equiv-</text>
<text top="854" left="475" width="359" height="13" font="4">alent if there is a large “gap” in their operator bit widths.</text>
<text top="868" left="475" width="359" height="13" font="4">For example, it would not be advantageous to force an 8-bit</text>
<text top="882" left="475" width="359" height="13" font="4">addition to be realized with a 32-bit adder in hardware. We</text>
<text top="896" left="475" width="359" height="13" font="4">developed a simple bit width analysis pass within LLVM</text>
<text top="911" left="475" width="359" height="13" font="4">that computes the required bit widths of operators. Two</text>
<text top="925" left="475" width="359" height="13" font="4">pattern graphs are not considered as equivalent to one an-</text>
<text top="939" left="475" width="359" height="13" font="4">other if their corresponding operators diﬀer in bit width by</text>
<text top="953" left="475" width="358" height="13" font="4">more than 10 (determined empirically). We also consider</text>
<text top="967" left="475" width="354" height="13" font="4">operator bit widths in our binding phase, described below.</text>
<text top="981" left="489" width="345" height="13" font="4">Valid operations for patterns: We do not allow all op-</text>
<text top="995" left="475" width="359" height="13" font="4">erations to be included in pattern graphs. We exclude opera-</text>
<text top="1009" left="475" width="359" height="13" font="4">tors with constant inputs, as certain area-reducing synthesis</text>
<text top="1023" left="475" width="359" height="13" font="4">optimizations are already possible for such cases. In addi-</text>
<text top="1038" left="475" width="359" height="13" font="4">tion, we do not allow division and modulus to be included</text>
<text top="1052" left="475" width="359" height="13" font="4">in pattern graphs. The FPGA implementation of such oper-</text>
<text top="1066" left="475" width="359" height="13" font="4">ators is so large that, where possible, they should be left as</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="11" size="6" family="Times" color="#231f20"/>
<text top="95" left="81" width="358" height="13" font="4">Table 2: Area for sequential patterns of operators</text>
<text top="109" left="81" width="358" height="13" font="4">in the unshareable and shareable scenarios (ratios</text>
<text top="123" left="81" width="236" height="13" font="4">represent shareable/unshareable).</text>
<text top="138" left="239" width="67" height="12" font="2">Cyclone II</text>
<text top="138" left="370" width="66" height="12" font="2">Stratix IV</text>
<text top="150" left="209" width="257" height="12" font="2">Unshared Shareable Unshared Shareable</text>
<text top="163" left="157" width="49" height="12" font="2">Pattern</text>
<text top="163" left="228" width="24" height="12" font="2">LEs</text>
<text top="163" left="293" width="24" height="12" font="2">LEs</text>
<text top="163" left="350" width="39" height="12" font="2">ALMs</text>
<text top="163" left="415" width="39" height="12" font="2">ALMs</text>
<text top="176" left="82" width="123" height="12" font="2">Add Add Add Add</text>
<text top="176" left="231" width="19" height="12" font="2">128</text>
<text top="176" left="277" width="55" height="12" font="2">288 (2.25)</text>
<text top="176" left="364" width="13" height="12" font="2">64</text>
<text top="176" left="410" width="49" height="12" font="2">73 (1.14)</text>
<text top="188" left="149" width="56" height="12" font="2">Add Sub</text>
<text top="188" left="234" width="13" height="12" font="2">64</text>
<text top="188" left="277" width="55" height="12" font="2">160 (2.50)</text>
<text top="188" left="364" width="13" height="12" font="2">32</text>
<text top="188" left="410" width="49" height="12" font="2">42 (1.31)</text>
<text top="201" left="141" width="65" height="12" font="2">Add XOR</text>
<text top="201" left="234" width="13" height="12" font="2">64</text>
<text top="201" left="277" width="55" height="12" font="2">128 (2.00)</text>
<text top="201" left="364" width="13" height="12" font="2">33</text>
<text top="201" left="410" width="49" height="12" font="2">42 (1.27)</text>
<text top="213" left="109" width="97" height="12" font="2">Add XOR Add</text>
<text top="213" left="234" width="13" height="12" font="2">96</text>
<text top="213" left="277" width="55" height="12" font="2">192 (2.00)</text>
<text top="213" left="364" width="13" height="12" font="2">48</text>
<text top="213" left="410" width="49" height="12" font="2">58 (1.21)</text>
<text top="226" left="130" width="76" height="12" font="2">OR OR OR</text>
<text top="226" left="234" width="13" height="12" font="2">96</text>
<text top="226" left="277" width="55" height="12" font="2">128 (1.33)</text>
<text top="226" left="364" width="13" height="12" font="2">64</text>
<text top="226" left="410" width="49" height="12" font="2">51 (0.80)</text>
<text top="238" left="136" width="70" height="12" font="2">XOR XOR</text>
<text top="238" left="234" width="13" height="12" font="2">64</text>
<text top="238" left="280" width="49" height="12" font="2">96 (1.50)</text>
<text top="238" left="364" width="13" height="12" font="2">32</text>
<text top="238" left="410" width="49" height="12" font="2">32 (1.00)</text>
<text top="273" left="81" width="359" height="13" font="4">isolated operators and shared as much as possible (by wide</text>
<text top="287" left="81" width="181" height="13" font="4">multipliexers on their inputs).</text>
<text top="313" left="81" width="22" height="16" font="3"><b>4.1</b></text>
<text top="313" left="121" width="218" height="16" font="3"><b>Pattern Discovery Approach</b></text>
<text top="332" left="94" width="345" height="13" font="4">All pattern graphs up to a maximum size S are discov-</text>
<text top="346" left="81" width="359" height="13" font="4">ered as follows: We iterate over all instructions in the pro-</text>
<text top="360" left="81" width="359" height="13" font="4">gram. Once a valid instruction is found, this becomes the</text>
<text top="374" left="81" width="359" height="13" font="4">root instruction, r, of a new pattern graph of size 1. We</text>
<text top="388" left="81" width="359" height="13" font="4">then perform a breadth-ﬁrst search of the predecessors of</text>
<text top="403" left="81" width="6" height="12" font="4">r</text>
<text top="402" left="87" width="352" height="13" font="4">, adding all combinations of predecessors one at a time, to</text>
<text top="417" left="81" width="359" height="13" font="4">discover all graphs rooted at r. Each new graph is added to</text>
<text top="431" left="81" width="359" height="13" font="4">the PatternMap object and we stop once graph sizes exceed</text>
<text top="445" left="81" width="8" height="12" font="4">S</text>
<text top="445" left="95" width="345" height="13" font="4">or all graphs have been discovered. We then continue to</text>
<text top="459" left="81" width="359" height="13" font="4">the next instruction. In this work, we ﬁnd all patterns up</text>
<text top="473" left="81" width="61" height="13" font="4">to size 10.</text>
<text top="497" left="81" width="22" height="16" font="3"><b>4.2</b></text>
<text top="497" left="121" width="192" height="16" font="3"><b>Pattern Sharing Analysis</b></text>
<text top="515" left="94" width="349" height="13" font="4">We applied the pattern discovery approach described above</text>
<text top="529" left="81" width="359" height="13" font="4">to identify commonly occurring patterns in a suite of 13 C</text>
<text top="543" left="81" width="365" height="13" font="4">benchmark programs – the 12 CHStone HLS benchmarks [10],</text>
<text top="557" left="81" width="359" height="13" font="4">as well as dhrystone. Table 2 presents a sharing analysis for</text>
<text top="572" left="81" width="359" height="13" font="4">6 patterns we found to be common. Each pattern listed oc-</text>
<text top="586" left="81" width="359" height="13" font="4">curs multiple times in at least one of the benchmarks. Our</text>
<text top="600" left="81" width="359" height="13" font="4">purpose here is not to exhaustively list all patterns that oc-</text>
<text top="614" left="81" width="359" height="13" font="4">cur more than once in any benchmark; rather, our aim is</text>
<text top="628" left="81" width="359" height="13" font="4">to provide an illustrative analysis for the most commonly</text>
<text top="642" left="81" width="359" height="13" font="4">occurring patterns in these particular 13 benchmarks. The</text>
<text top="656" left="81" width="359" height="13" font="4">left column lists the pattern names, where each name deﬁnes</text>
<text top="670" left="81" width="359" height="13" font="4">the operators involved. For example, Add_Add_Add_Add is a</text>
<text top="685" left="81" width="317" height="13" font="4">pattern with 4 addition operators connected serially.</text>
<text top="699" left="94" width="345" height="13" font="4">We follow the same analysis approach as described in Sec-</text>
<text top="713" left="81" width="359" height="13" font="4">tion 3. We created two Verilog modules for each pattern:</text>
<text top="727" left="81" width="359" height="13" font="4">one representing the unshareable case, a second having 2-</text>
<text top="741" left="81" width="359" height="13" font="4">to-1 MUXes on each input, representing the shareable case.</text>
<text top="755" left="81" width="359" height="13" font="4">The left side of Table 2 gives results for Cyclone II; the</text>
<text top="769" left="81" width="359" height="13" font="4">right side for Stratix IV. All operators in patterns are 32</text>
<text top="783" left="81" width="359" height="13" font="4">bits wide. For the columns of the table representing area,</text>
<text top="798" left="81" width="359" height="13" font="4">resource sharing provides a “win” if the ratio in parenthe-</text>
<text top="812" left="81" width="359" height="13" font="4">ses is less than 2 (see Section 3). The results in Table 2</text>
<text top="826" left="81" width="359" height="13" font="4">are for sequential patterns, with registers on edges between</text>
<text top="840" left="81" width="60" height="13" font="4">operators.</text>
<text top="854" left="94" width="345" height="13" font="4">For Cyclone II, we observe that sharing is beneﬁcial in</text>
<text top="868" left="81" width="359" height="13" font="4">2 of the 6 patterns (OR_OR_OR and XOR_XOR) from the area</text>
<text top="882" left="81" width="359" height="13" font="4">perspective. For Stratix IV, sharing is beneﬁcial for all 6</text>
<text top="896" left="81" width="359" height="13" font="4">patterns. For one of the patterns, OR_OR_OR, the shareable</text>
<text top="911" left="81" width="359" height="13" font="4">implementation consumed less area than the unshareable</text>
<text top="925" left="81" width="359" height="13" font="4">implementation. We investigated this and found that Quar-</text>
<text top="939" left="81" width="359" height="13" font="4">tus did not produce an area-minimal implementation for this</text>
<text top="953" left="81" width="359" height="13" font="4">pattern in the unshareable scenario, which we attribute to</text>
<text top="967" left="81" width="359" height="13" font="4">algorithmic noise. We also analyzed the impact of resource</text>
<text top="981" left="81" width="359" height="13" font="4">sharing for combinational patterns (i.e. patterns without</text>
<text top="995" left="81" width="359" height="13" font="4">registers on edges between operators) and found sharing to</text>
<text top="1009" left="81" width="359" height="13" font="4">be less beneﬁcial, owing to the ability of Quartus II to col-</text>
<text top="1023" left="81" width="359" height="13" font="4">lapse chained operators together into LUTs, thereby reduc-</text>
<text top="1038" left="81" width="359" height="13" font="4">ing the opportunities for collapsing the sharing MUXes into</text>
<text top="1052" left="81" width="198" height="13" font="4">the same LUTs as the operators.</text>
<text top="1066" left="94" width="345" height="13" font="4">We conclude that it is quite challenging to predict up-front</text>
<text top="85" left="475" width="359" height="13" font="4">when sharing will provide an area beneﬁt, as it depends on</text>
<text top="100" left="475" width="359" height="13" font="4">the speciﬁc technology mapping and packing decisions made</text>
<text top="114" left="475" width="359" height="13" font="4">by Quartus, which appear to depend on the speciﬁc pattern</text>
<text top="128" left="475" width="358" height="13" font="4">implemented. However, we observe two general trends: 1)</text>
<text top="142" left="475" width="359" height="13" font="4">Sharing is more likely to be beneﬁcial for composite oper-</text>
<text top="156" left="475" width="359" height="13" font="4">ators that consume signiﬁcant area, particularly when the</text>
<text top="170" left="475" width="359" height="13" font="4">MUXes that facilitate sharing can be rolled into the same</text>
<text top="184" left="475" width="359" height="13" font="4">LUTs as those implementing portions of the operator func-</text>
<text top="199" left="475" width="358" height="13" font="4">tionality. 2) Sharing is more advantageous when registers</text>
<text top="213" left="475" width="359" height="13" font="4">are present in patterns – registers prevent an eﬃcient map-</text>
<text top="227" left="475" width="359" height="13" font="4">ping of operators into LUTs, thereby leaving LUTs under-</text>
<text top="241" left="475" width="349" height="13" font="4">utilized, with free inputs to accommodate MUX circuitry.</text>
<text top="276" left="475" width="13" height="16" font="3"><b>5.</b></text>
<text top="276" left="507" width="79" height="16" font="3"><b>BINDING</b></text>
<text top="295" left="489" width="345" height="13" font="4">For each pattern size (in descending order) we choose pairs</text>
<text top="309" left="475" width="359" height="13" font="4">of functionally-equivalent pattern graphs to be implemented</text>
<text top="323" left="475" width="359" height="13" font="4">by (bound to) a single shareable composite operator in the</text>
<text top="337" left="475" width="359" height="13" font="4">hardware. Any two graphs whose operations happen in non-</text>
<text top="351" left="475" width="309" height="13" font="4">overlapping clock cycles are candidates for sharing.</text>
<text top="365" left="489" width="345" height="13" font="4">Consider two sharing candidates, patterns P 1 and P 2.</text>
<text top="379" left="475" width="359" height="13" font="4">We compute a sharing cost for the pair by summing the bit</text>
<text top="394" left="475" width="304" height="13" font="4">width diﬀerences in their corresponding operators:</text>
<text top="422" left="486" width="80" height="12" font="4">SharingCost</text>
<text top="422" left="570" width="11" height="13" font="4">=</text>
<text top="419" left="611" width="20" height="5" font="4">X</text>
<text top="441" left="585" width="71" height="9" font="11">n1∈P 1,n2∈P 2</text>
<text top="422" left="658" width="176" height="13" font="4">|width(n1) − width(n2)| (1)</text>
<text top="461" left="475" width="359" height="13" font="4">where n1 and n2 are corresponding operators in pattern</text>
<text top="475" left="475" width="359" height="13" font="4">graphs P 1 and P 2, respectively. The intuition behind (1)</text>
<text top="490" left="475" width="359" height="13" font="4">is that it is desirable for operation widths between pattern</text>
<text top="504" left="475" width="358" height="13" font="4">graphs sharing resources to be as closely aligned as possible.</text>
<text top="518" left="489" width="345" height="13" font="4">However, two additional optimizations are possible that</text>
<text top="532" left="475" width="192" height="13" font="4">provide further area reductions:</text>
<text top="546" left="489" width="345" height="13" font="4">1. Variable Lifetime Analysis: Our binding approach</text>
<text top="560" left="475" width="359" height="13" font="4">only pairs pattern graphs whose output values have non-</text>
<text top="574" left="475" width="358" height="13" font="4">overlapping lifetimes. Otherwise, separate output registers</text>
<text top="588" left="475" width="359" height="13" font="4">are required to store the values produced by each pattern.</text>
<text top="602" left="475" width="359" height="13" font="4">If pattern graph output value lifetimes do not overlap, a sin-</text>
<text top="617" left="475" width="359" height="13" font="4">gle register can be used. The LLVM compiler already has</text>
<text top="631" left="475" width="358" height="13" font="4">a pass to determine a variable’s lifetime in terms of basic</text>
<text top="645" left="475" width="358" height="13" font="4">blocks spanned. We combine the results of this pass with</text>
<text top="659" left="475" width="358" height="13" font="4">the output of scheduling to determine the cycle-by-cycle life-</text>
<text top="673" left="475" width="135" height="13" font="4">times of each variable.</text>
<text top="687" left="489" width="345" height="13" font="4">2. Shared Input Variables: If two patterns share an</text>
<text top="701" left="475" width="359" height="13" font="4">input variable, then adding a MUX on the input is unneces-</text>
<text top="715" left="475" width="359" height="13" font="4">sary if the patterns are bound to the same hardware, saving</text>
<text top="730" left="475" width="359" height="13" font="4">MUX area. Hence, our binding algorithm prefers to pair</text>
<text top="744" left="475" width="223" height="13" font="4">patterns with shared input variables.</text>
<text top="758" left="489" width="345" height="13" font="4">After computing the sharing cost using (1) for a pair of</text>
<text top="772" left="475" width="359" height="13" font="4">candidate patterns (based on their operator bitwidths), we</text>
<text top="786" left="475" width="359" height="13" font="4">adjust the computed cost to account for shared input vari-</text>
<text top="800" left="475" width="359" height="13" font="4">ables between the patterns. Speciﬁcally, we count the num-</text>
<text top="814" left="475" width="359" height="13" font="4">ber of shared input variables that feed into the two patterns</text>
<text top="829" left="475" width="359" height="13" font="4">and reduce the sharing cost for each such shared input vari-</text>
<text top="843" left="475" width="211" height="13" font="4">able (cost determined empirically).</text>
<text top="857" left="489" width="345" height="13" font="4">Finally, we apply a greedy algorithm to bind pairs of pat-</text>
<text top="871" left="475" width="359" height="13" font="4">tern graphs to shared hardware units. Sharing candidates</text>
<text top="885" left="475" width="359" height="13" font="4">with the lowest cost are selected and bound to a single hard-</text>
<text top="899" left="475" width="359" height="13" font="4">ware unit. Note that owing to the costs of implementing</text>
<text top="913" left="475" width="359" height="13" font="4">MUXes in FPGAs, we allow a composite operator hardware</text>
<text top="927" left="475" width="359" height="13" font="4">unit to be shared at most twice. Once we have exhausted</text>
<text top="941" left="475" width="359" height="13" font="4">binding pattern graphs of a given size, we proceed to binding</text>
<text top="956" left="475" width="359" height="13" font="4">pattern graphs of the next smaller size. The problem is that</text>
<text top="970" left="475" width="359" height="13" font="4">of ﬁnding a minimum cost graph matching, and though we</text>
<text top="984" left="475" width="358" height="13" font="4">found that a greedy approach suﬃces, more sophisticated</text>
<text top="998" left="475" width="222" height="13" font="4">algorithms can be applied (e.g. [12]).</text>
<text top="1033" left="475" width="13" height="16" font="3"><b>6.</b></text>
<text top="1033" left="507" width="209" height="16" font="3"><b>EXPERIMENTAL STUDY</b></text>
<text top="1052" left="489" width="345" height="13" font="4">We now present results for resource sharing in HLS bind-</text>
<text top="1066" left="475" width="359" height="13" font="4">ing for a set of 13 benchmark C programs – the 12 CHStone</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="12" size="6" family="Times" color="#000000"/>
	<fontspec id="13" size="7" family="Times" color="#000000"/>
	<fontspec id="14" size="8" family="Times" color="#231f20"/>
<text top="96" left="186" width="542" height="13" font="4">Table 3: Area results for resource sharing using hard multipliers/DSP blocks.</text>
<text top="111" left="322" width="67" height="12" font="2">Cyclone II</text>
<text top="111" left="603" width="66" height="12" font="2">Stratix IV</text>
<text top="124" left="302" width="49" height="12" font="2">Sharing</text>
<text top="124" left="363" width="130" height="12" font="2">Sharing Div/Mod +</text>
<text top="124" left="583" width="49" height="12" font="2">Sharing</text>
<text top="124" left="644" width="130" height="12" font="2">Sharing Div/Mod +</text>
<text top="136" left="140" width="216" height="12" font="2">Benchmark No Sharing Div/Mod</text>
<text top="136" left="401" width="55" height="12" font="2">Patterns</text>
<text top="136" left="497" width="140" height="12" font="2">No Sharing Div/Mod</text>
<text top="136" left="682" width="55" height="12" font="2">Patterns</text>
<text top="149" left="170" width="42" height="12" font="2">adpcm</text>
<text top="149" left="237" width="32" height="12" font="2">22541</text>
<text top="149" left="292" width="68" height="12" font="2">21476 (0.95)</text>
<text top="149" left="394" width="68" height="12" font="2">19049 (0.85)</text>
<text top="149" left="521" width="25" height="12" font="2">8585</text>
<text top="149" left="576" width="62" height="12" font="2">8064 (0.94)</text>
<text top="149" left="678" width="62" height="12" font="2">7943 (0.93)</text>
<text top="162" left="193" width="20" height="12" font="2">aes</text>
<text top="162" left="237" width="32" height="12" font="2">18923</text>
<text top="162" left="292" width="68" height="12" font="2">15418 (0.81)</text>
<text top="162" left="394" width="68" height="12" font="2">15477 (0.82)</text>
<text top="162" left="521" width="25" height="12" font="2">9582</text>
<text top="162" left="576" width="62" height="12" font="2">8136 (0.85)</text>
<text top="162" left="678" width="62" height="12" font="2">7929 (0.83)</text>
<text top="174" left="161" width="52" height="12" font="2">blowﬁsh</text>
<text top="174" left="237" width="32" height="12" font="2">11571</text>
<text top="174" left="292" width="68" height="12" font="2">11571 (1.00)</text>
<text top="174" left="397" width="62" height="12" font="2">9306 (0.80)</text>
<text top="174" left="521" width="25" height="12" font="2">6082</text>
<text top="174" left="576" width="62" height="12" font="2">6082 (1.00)</text>
<text top="174" left="678" width="62" height="12" font="2">5215 (0.86)</text>
<text top="187" left="177" width="36" height="12" font="2">dfadd</text>
<text top="187" left="240" width="25" height="12" font="2">7012</text>
<text top="187" left="295" width="62" height="12" font="2">7012 (1.00)</text>
<text top="187" left="397" width="62" height="12" font="2">6364 (0.91)</text>
<text top="187" left="521" width="25" height="12" font="2">3327</text>
<text top="187" left="576" width="62" height="12" font="2">3327 (1.00)</text>
<text top="187" left="678" width="62" height="12" font="2">2966 (0.89)</text>
<text top="199" left="180" width="33" height="12" font="2">dfdiv</text>
<text top="199" left="237" width="32" height="12" font="2">15286</text>
<text top="199" left="292" width="68" height="12" font="2">13267 (0.87)</text>
<text top="199" left="394" width="68" height="12" font="2">13195 (0.86)</text>
<text top="199" left="521" width="25" height="12" font="2">7043</text>
<text top="199" left="576" width="62" height="12" font="2">5949 (0.84)</text>
<text top="199" left="678" width="62" height="12" font="2">5915 (0.84)</text>
<text top="212" left="176" width="37" height="12" font="2">dfmul</text>
<text top="212" left="240" width="25" height="12" font="2">3903</text>
<text top="212" left="295" width="62" height="12" font="2">3903 (1.00)</text>
<text top="212" left="397" width="62" height="12" font="2">3797 (0.97)</text>
<text top="212" left="521" width="25" height="12" font="2">1893</text>
<text top="212" left="576" width="62" height="12" font="2">1893 (1.00)</text>
<text top="212" left="678" width="62" height="12" font="2">1824 (0.96)</text>
<text top="224" left="182" width="31" height="12" font="2">dfsin</text>
<text top="224" left="237" width="32" height="12" font="2">27860</text>
<text top="224" left="292" width="68" height="12" font="2">27982 (1.00)</text>
<text top="224" left="394" width="68" height="12" font="2">26996 (0.97)</text>
<text top="224" left="518" width="32" height="12" font="2">12630</text>
<text top="224" left="573" width="68" height="12" font="2">11529 (0.91)</text>
<text top="224" left="675" width="68" height="12" font="2">11094 (0.88)</text>
<text top="237" left="187" width="25" height="12" font="2">gsm</text>
<text top="237" left="237" width="32" height="12" font="2">10479</text>
<text top="237" left="292" width="68" height="12" font="2">10479 (1.00)</text>
<text top="237" left="394" width="68" height="12" font="2">10659 (1.02)</text>
<text top="237" left="521" width="25" height="12" font="2">4914</text>
<text top="237" left="576" width="62" height="12" font="2">4914 (1.00)</text>
<text top="237" left="678" width="62" height="12" font="2">4537 (0.92)</text>
<text top="249" left="185" width="27" height="12" font="2">jpeg</text>
<text top="249" left="237" width="32" height="12" font="2">35792</text>
<text top="249" left="292" width="68" height="12" font="2">34981 (0.98)</text>
<text top="249" left="394" width="68" height="12" font="2">34316 (0.96)</text>
<text top="249" left="518" width="32" height="12" font="2">17148</text>
<text top="249" left="573" width="68" height="12" font="2">16703 (0.97)</text>
<text top="249" left="675" width="68" height="12" font="2">16246 (0.95)</text>
<text top="262" left="183" width="30" height="12" font="2">mips</text>
<text top="262" left="240" width="25" height="12" font="2">3103</text>
<text top="262" left="295" width="62" height="12" font="2">3103 (1.00)</text>
<text top="262" left="397" width="62" height="12" font="2">2986 (0.96)</text>
<text top="262" left="521" width="25" height="12" font="2">1610</text>
<text top="262" left="576" width="62" height="12" font="2">1610 (1.00)</text>
<text top="262" left="678" width="62" height="12" font="2">1493 (0.93)</text>
<text top="274" left="168" width="45" height="12" font="2">motion</text>
<text top="274" left="240" width="25" height="12" font="2">4049</text>
<text top="274" left="295" width="62" height="12" font="2">4049 (1.00)</text>
<text top="274" left="397" width="62" height="12" font="2">3897 (0.96)</text>
<text top="274" left="521" width="25" height="12" font="2">1988</text>
<text top="274" left="576" width="62" height="12" font="2">1988 (1.00)</text>
<text top="274" left="678" width="62" height="12" font="2">1878 (0.94)</text>
<text top="287" left="192" width="21" height="12" font="2">sha</text>
<text top="287" left="237" width="32" height="12" font="2">11932</text>
<text top="287" left="292" width="68" height="12" font="2">11932 (1.00)</text>
<text top="287" left="394" width="68" height="12" font="2">12307 (1.03)</text>
<text top="287" left="521" width="25" height="12" font="2">5909</text>
<text top="287" left="576" width="62" height="12" font="2">5909 (1.00)</text>
<text top="287" left="678" width="62" height="12" font="2">5856 (0.99)</text>
<text top="299" left="149" width="64" height="12" font="2">dhrystone</text>
<text top="299" left="240" width="25" height="12" font="2">5277</text>
<text top="299" left="295" width="62" height="12" font="2">5277 (1.00)</text>
<text top="299" left="397" width="62" height="12" font="2">5277 (1.00)</text>
<text top="299" left="521" width="25" height="12" font="2">2598</text>
<text top="299" left="576" width="62" height="12" font="2">2598 (1.00)</text>
<text top="299" left="678" width="62" height="12" font="2">2598 (1.00)</text>
<text top="312" left="149" width="64" height="12" font="2">Geomean:</text>
<text top="312" left="225" width="56" height="12" font="2">10419.82</text>
<text top="312" left="299" width="56" height="12" font="2">10093.65</text>
<text top="312" left="405" width="48" height="12" font="2">9677.25</text>
<text top="312" left="510" width="48" height="12" font="2">4980.59</text>
<text top="312" left="583" width="48" height="12" font="2">4788.06</text>
<text top="312" left="686" width="48" height="12" font="2">4558.11</text>
<text top="324" left="173" width="40" height="12" font="2">Ratio:</text>
<text top="324" left="240" width="26" height="12" font="2">1.00</text>
<text top="324" left="313" width="26" height="12" font="2">0.97</text>
<text top="324" left="415" width="26" height="12" font="2">0.93</text>
<text top="324" left="521" width="26" height="12" font="2">1.00</text>
<text top="324" left="594" width="26" height="12" font="2">0.96</text>
<text top="324" left="696" width="26" height="12" font="2">0.92</text>
<text top="336" left="173" width="40" height="12" font="2">Ratio:</text>
<text top="336" left="313" width="26" height="12" font="2">1.00</text>
<text top="336" left="415" width="26" height="12" font="2">0.96</text>
<text top="336" left="594" width="26" height="12" font="2">1.00</text>
<text top="336" left="696" width="26" height="12" font="2">0.95</text>
<text top="595" left="81" width="359" height="13" font="4">Figure 2: Normalized area results with soft (LUT-</text>
<text top="609" left="81" width="130" height="13" font="4">based) multipliers.</text>
<text top="642" left="81" width="359" height="13" font="4">benchmarks, as well as dhrystone. For both target FPGA</text>
<text top="656" left="81" width="359" height="13" font="4">families, we evaluated several sharing scenarios that succes-</text>
<text top="670" left="81" width="359" height="13" font="4">sively represent greater amounts of resource sharing: 1) No</text>
<text top="685" left="81" width="359" height="13" font="4">sharing; 2) sharing dividers and remainders (mod); 3) sce-</text>
<text top="699" left="81" width="359" height="13" font="4">nario #2 + sharing multipliers; and 4) Scenarios #2 + #3</text>
<text top="713" left="81" width="359" height="13" font="4">+ sharing composite operator patterns. The work in [6] im-</text>
<text top="727" left="81" width="359" height="13" font="4">plemented multipliers with LUTs instead of hard IP blocks,</text>
<text top="741" left="81" width="359" height="13" font="4">i.e. DSP blocks in Stratix IV and embedded multipliers in</text>
<text top="755" left="81" width="359" height="13" font="4">Cyclone II. To permit comparison with [6], we implemented</text>
<text top="769" left="81" width="359" height="13" font="4">the benchmarks in two ways: 1) with LUT-based multipli-</text>
<text top="783" left="81" width="359" height="13" font="4">ers, and 2) using hard multipliers. Scenario #3 applies only</text>
<text top="798" left="81" width="306" height="13" font="4">to the case of multipliers implemented with LUTs.</text>
<text top="812" left="94" width="353" height="13" font="4">Table 3 gives area results for Cyclone II (left) and Stratix IV</text>
<text top="826" left="81" width="370" height="13" font="4">(right) when multipliers are implemented using hard IP blocks.</text>
<text top="840" left="81" width="359" height="13" font="4">Ratios in parentheses show the area reduction vs. the no</text>
<text top="854" left="81" width="359" height="13" font="4">sharing case. Observe that sharing division/modulus alone</text>
<text top="868" left="81" width="359" height="13" font="4">provides 3% and 4% average area reduction for Cyclone II</text>
<text top="882" left="81" width="359" height="13" font="4">and Stratix IV, respectively. Sharing patterns provides an</text>
<text top="896" left="81" width="359" height="13" font="4">additional 4% and 5% area reduction, on average, for Cy-</text>
<text top="911" left="81" width="217" height="13" font="4">clone II and Stratix IV respectively.</text>
<text top="925" left="94" width="345" height="13" font="4">Fig. 2 summarizes the average area results across all cir-</text>
<text top="939" left="81" width="359" height="13" font="4">cuits for the case when multipliers are implemented with</text>
<text top="953" left="81" width="359" height="13" font="4">LUTs. Larger area reductions are observed, as expected,</text>
<text top="967" left="81" width="359" height="13" font="4">owing to the signiﬁcant amount of area needed to realize</text>
<text top="981" left="81" width="359" height="13" font="4">multipliers with LUTs. For Cyclone II, a 16% reduction in</text>
<text top="995" left="81" width="358" height="13" font="4">LEs is observed when all forms of sharing are turned on (left</text>
<text top="1009" left="81" width="359" height="13" font="4">bars for each scenario); for Stratix IV, a 12% reduction in</text>
<text top="1023" left="81" width="159" height="13" font="4">ALMs is seen (right bars).</text>
<text top="1038" left="94" width="345" height="13" font="4">The pattern sharing approach introduced in this work pro-</text>
<text top="1052" left="81" width="359" height="13" font="4">vides a larger beneﬁt in Stratix IV (4-5%) vs. Cyclone II (2-</text>
<text top="1066" left="81" width="359" height="13" font="4">4%), due to the ability to exploit ALM under-utilization by</text>
<text top="365" left="475" width="359" height="13" font="4">combining MUX and operator functionality together into</text>
<text top="379" left="475" width="359" height="13" font="4">LUTs. While speed performance results are omitted for</text>
<text top="393" left="475" width="359" height="13" font="4">space reasons, we found that resource sharing reduced speed</text>
<text top="407" left="475" width="359" height="13" font="4">by 11%, on average, in both Cyclone II and Stratix IV, when</text>
<text top="422" left="475" width="216" height="13" font="4">all forms of sharing were turned on.</text>
<text top="455" left="475" width="13" height="16" font="3"><b>7.</b></text>
<text top="455" left="507" width="316" height="16" font="3"><b>CONCLUSIONS AND FUTURE WORK</b></text>
<text top="474" left="489" width="345" height="13" font="4">We investigated resource sharing for FPGAs and demon-</text>
<text top="488" left="475" width="359" height="13" font="4">strated that diﬀerent resource sharing tradeoﬀs exist de-</text>
<text top="502" left="475" width="365" height="13" font="4">pending on the logic element architecture of the target FPGA.</text>
<text top="516" left="475" width="359" height="13" font="4">On average, resource sharing provides area reductions of 7-</text>
<text top="530" left="475" width="359" height="13" font="4">16% for Cyclone II, and 8-12% for Stratix IV, depending on</text>
<text top="544" left="475" width="359" height="13" font="4">whether multipliers are implemented using hard IP blocks</text>
<text top="558" left="475" width="359" height="13" font="4">or LUTs. Directions for future work include modifying the</text>
<text top="573" left="475" width="359" height="13" font="4">scheduling phase of HLS to encourage the generation of com-</text>
<text top="587" left="475" width="359" height="13" font="4">posite operator patterns with registers at speciﬁc points, in</text>
<text top="601" left="475" width="359" height="13" font="4">order to allow MUXes to be more easily combined together</text>
<text top="615" left="475" width="315" height="13" font="4">in LUTs with portions of the operator functionality.</text>
<text top="649" left="475" width="13" height="16" font="3"><b>8.</b></text>
<text top="649" left="507" width="120" height="16" font="3"><b>REFERENCES</b></text>
<text top="666" left="484" width="278" height="10" font="14">[1] Altera QUIP. http://www.altera.com/education/</text>
<text top="677" left="503" width="187" height="10" font="14">univ/research/unv-quip.html, 2009.</text>
<text top="689" left="484" width="330" height="10" font="14">[2] Altera, Corp., Cyclone II FPGA Family Data Sheet, 2011.</text>
<text top="702" left="484" width="328" height="10" font="14">[3] Altera, Corp., Stratix IV FPGA Family Data Sheet, 2011.</text>
<text top="714" left="484" width="340" height="10" font="14">[4] E. Casseau and B. Le Gal. High-level synthesis for the design</text>
<text top="725" left="503" width="295" height="10" font="14">of FPGA-based signal processing systems. In IEEE Int’l</text>
<text top="735" left="503" width="327" height="10" font="14">Symp. on Systems, Architectures, Modeling, and Simulation,</text>
<text top="746" left="503" width="105" height="10" font="14">pages 25 – 32, 2009.</text>
<text top="758" left="484" width="321" height="10" font="14">[5] D. Chen, et al. Optimality study of resource binding with</text>
<text top="769" left="503" width="300" height="10" font="14">multi-Vdds. In IEEE/ACM DAC, pages 580 – 585, 2006.</text>
<text top="781" left="484" width="326" height="10" font="14">[6] J. Cong, et al. Pattern-based behavior synthesis for FPGA</text>
<text top="792" left="503" width="302" height="10" font="14">resource reduction. In ACM FPGA, pages 107–116, 2008.</text>
<text top="804" left="484" width="298" height="10" font="14">[7] J. Cong, et al. High-level synthesis for FPGAs: From</text>
<text top="815" left="503" width="268" height="10" font="14">prototyping to deployment. IEEE Trans. on CAD,</text>
<text top="826" left="503" width="107" height="10" font="14">30(4):473–491, 2011.</text>
<text top="838" left="484" width="322" height="10" font="14">[8] J. Cong and J. Xu. Simultaneous FU and register binding</text>
<text top="849" left="503" width="320" height="10" font="14">based on network ﬂow method. In ACM/IEEE DATE, pages</text>
<text top="860" left="503" width="96" height="10" font="14">1057 – 1062, 2008.</text>
<text top="872" left="484" width="343" height="10" font="14">[9] S. Cromar, et al. FPGA-targeted high-level binding algorithm</text>
<text top="883" left="503" width="288" height="10" font="14">for power and area reduction with glitch-estimation. In</text>
<text top="893" left="503" width="219" height="10" font="14">ACM/IEEE DAC, pages 838 – 843, 2009.</text>
<text top="906" left="478" width="320" height="10" font="14">[10] Y. Hara, et al. Proposal and quantitative analysis of the</text>
<text top="916" left="503" width="297" height="10" font="14">CHStone benchmark program suite for practical C-based</text>
<text top="927" left="503" width="330" height="10" font="14">high-level synthesis. J. of Information Processing, 17:242–254,</text>
<text top="938" left="503" width="27" height="10" font="14">2009.</text>
<text top="950" left="478" width="334" height="10" font="14">[11] http://www.llvm.org. The LLVM Compiler Infrastructure</text>
<text top="961" left="503" width="72" height="10" font="14">Project, 2010.</text>
<text top="973" left="478" width="315" height="10" font="14">[12] V. Kolmogorov. Blossom v: A new implementation of a</text>
<text top="984" left="503" width="300" height="10" font="14">minimum cost perfect matching algorithm. Mathematical</text>
<text top="995" left="503" width="253" height="10" font="14">Programming Computation 1, 1(1):43–67, 2009.</text>
<text top="1007" left="478" width="342" height="10" font="14">[13] A. Canis, et al. LegUp: high-level synthesis for FPGA-based</text>
<text top="1018" left="503" width="303" height="10" font="14">processor/accelerator systems. ACM FPGA, pages 33–37,</text>
<text top="1028" left="503" width="27" height="10" font="14">2011.</text>
<text top="1041" left="478" width="331" height="10" font="14">[14] W. Sun, et al. FPGA pipeline synthesis design exploration</text>
<text top="1051" left="503" width="318" height="10" font="14">using module selection and resource sharing. IEEE Tran. on</text>
<text top="1062" left="503" width="149" height="10" font="14">CAD, 26(2):254 – 265, 2007.</text>
</page>
</pdf2xml>
