<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="999" width="659">
	<fontspec id="0" size="9" family="Times" color="#000000"/>
	<fontspec id="1" size="17" family="Times" color="#000000"/>
	<fontspec id="2" size="12" family="Times" color="#000000"/>
	<fontspec id="3" size="12" family="Times" color="#000000"/>
	<fontspec id="4" size="12" family="Times" color="#000000"/>
	<fontspec id="5" size="9" family="Times" color="#000000"/>
	<fontspec id="6" size="15" family="Times" color="#000000"/>
	<fontspec id="7" size="9" family="Times" color="#0000ff"/>
<text top="50" left="78" width="71" height="11" font="0">J Supercomput</text>
<text top="64" left="78" width="161" height="11" font="0">DOI 10.1007/s11227-011-0725-y</text>
<text top="138" left="78" width="416" height="18" font="1"><b>Central force optimization on a GPU: a case study</b></text>
<text top="160" left="78" width="295" height="18" font="1"><b>in high performance metaheuristics</b></text>
<text top="215" left="78" width="122" height="14" font="2"><b>Robert C. Green II</b></text>
<text top="212" left="203" width="115" height="19" font="3">· <b>Lingfeng Wang </b>·</text>
<text top="233" left="78" width="96" height="14" font="2"><b>Mansoor Alam</b></text>
<text top="230" left="177" width="137" height="19" font="3">· <b>Richard A. Formato</b></text>
<text top="330" left="78" width="232" height="11" font="0">© Springer Science+Business Media, LLC 2012</text>
<text top="376" left="78" width="505" height="14" font="2"><b>Abstract </b>Central Force Optimization (CFO) is a new and deterministic population</text>
<text top="395" left="78" width="505" height="14" font="4">based metaheuristic algorithm that has been demonstrated to be competitive with</text>
<text top="414" left="78" width="505" height="14" font="4">other metaheuristic algorithms such as Genetic Algorithms (GA), Particle Swarm Op-</text>
<text top="434" left="78" width="505" height="14" font="4">timization (PSO), and Group Search Optimization (GSO). While CFO often shows</text>
<text top="453" left="78" width="505" height="14" font="4">superiority in terms of functional evaluations and solution quality, the algorithm is</text>
<text top="472" left="78" width="505" height="14" font="4">complex and typically requires increased computational time. In order to decrease the</text>
<text top="491" left="78" width="505" height="14" font="4">computational time required for convergence when using CFO, this study presents</text>
<text top="510" left="78" width="505" height="14" font="4">the ﬁrst parallel implementation of CFO on a Graphics Processing Unit (GPU) us-</text>
<text top="529" left="78" width="505" height="14" font="4">ing the NVIDIA Compute Uniﬁed Device Architecture (CUDA). Two versions of</text>
<text top="548" left="78" width="505" height="14" font="4">the CFO algorithm, Parameter-Free CFO (PF-CFO) and Pseudo-Random CFO (PR-</text>
<text top="567" left="78" width="505" height="14" font="4">CFO), are implemented using CUDA on a NVIDIA Quadro 1000M and examined</text>
<text top="586" left="78" width="505" height="14" font="4">using four test problems ranging from 10 to 50 dimensions. Discussion is made con-</text>
<text top="605" left="78" width="505" height="14" font="4">cerning the implementation of the CFO algorithms in terms of problem decomposi-</text>
<text top="624" left="78" width="505" height="14" font="4">tion, memory access, scalability, and divergent code. Results demonstrate substantial</text>
<text top="643" left="78" width="505" height="14" font="4">speedups ranging from roughly 1 to 28 depending on problem size and complex-</text>
<text top="662" left="78" width="19" height="14" font="4">ity.</text>
<text top="711" left="78" width="230" height="14" font="2"><b>Keywords </b>Central force optimization</text>
<text top="707" left="311" width="267" height="19" font="3">· Graphics processing unit · CUDA · Parallel</text>
<text top="730" left="78" width="64" height="14" font="4">computing</text>
<text top="726" left="145" width="96" height="19" font="3">· Metaheuristics</text>
<text top="797" left="78" width="65" height="11" font="0">R.C. Green II</text>
<text top="794" left="146" width="123" height="16" font="5">· L. Wang ( ) · M. Alam</text>
<text top="811" left="78" width="458" height="11" font="0">Department of Electrical Engineering and Computer Science, University of Toledo, Toledo, OH</text>
<text top="826" left="78" width="60" height="11" font="0">43606, USA</text>
<text top="840" left="78" width="34" height="11" font="0">e-mail:</text>
<text top="840" left="115" width="141" height="11" font="7"><a href="mailto:Lingfeng.Wang@utoledo.edu">Lingfeng.Wang@utoledo.edu</a></text>
<text top="870" left="78" width="66" height="11" font="0">R.A. Formato</text>
<text top="884" left="78" width="386" height="11" font="0">Cataldo &amp; Fisher, LLC, 400 TradeCenter, Suite 5900, Woburn, MA 01801, USA</text>
<text top="899" left="78" width="34" height="11" font="0">e-mail:</text>
<text top="899" left="115" width="63" height="11" font="7"><a href="mailto:rf2@ieee.org">rf2@ieee.org</a></text>
</page>
<page number="2" position="absolute" top="0" left="0" height="999" width="659">
	<fontspec id="8" size="12" family="Times" color="#0000ff"/>
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="84" left="78" width="96" height="14" font="2"><b>1 Introduction</b></text>
<text top="116" left="78" width="505" height="14" font="4">Metaheuristic algorithms, speciﬁcally those that may be classiﬁed as population</text>
<text top="134" left="78" width="505" height="14" font="4">based intelligent search (PIS), have proven to be quite useful in solving a wide range</text>
<text top="151" left="78" width="505" height="14" font="4">of problems across many ﬁelds. Among the reasons that these algorithms have proven</text>
<text top="169" left="78" width="505" height="14" font="4">so successful when applied to difﬁcult problems is their inclusion of intelligence and</text>
<text top="187" left="78" width="505" height="14" font="4">parallelism. Intelligence is typically achieved by mimicking some aspect of the nat-</text>
<text top="204" left="78" width="505" height="14" font="4">ural world. These aspects may include evolution, swarming, immune systems, and</text>
<text top="222" left="78" width="505" height="14" font="4">ant colonies. Parallelism is achieved by using populations of individuals that concur-</text>
<text top="239" left="78" width="505" height="14" font="4">rently search for and sample possible solutions. This can be seen in algorithms like</text>
<text top="257" left="78" width="505" height="14" font="4">evolutionary algorithms (EA), particle swarm optimization (PSO), artiﬁcial immune</text>
<text top="275" left="78" width="505" height="14" font="4">systems (AIS), and ant colony optimization (ACO). The intelligence that is added</text>
<text top="292" left="78" width="505" height="14" font="4">into these algorithms through this mimicry of nature allows them to solve a wide</text>
<text top="310" left="78" width="274" height="14" font="4">variety of problems efﬁciently and accurately.</text>
<text top="327" left="96" width="487" height="14" font="4">A secondary method of implementing parallelism is through the use of parallel and</text>
<text top="345" left="78" width="505" height="14" font="4">distributed computer platforms coupled with parallel programming languages such</text>
<text top="363" left="78" width="505" height="14" font="4">as MPI, OpenMP, and CUDA. This allows computationally intensive portions of the</text>
<text top="380" left="78" width="505" height="14" font="4">algorithms to be parallelized over multiple processes, nodes, and cores. The combina-</text>
<text top="398" left="78" width="505" height="14" font="4">tion of these two types of parallelism—population-based parallelism and code-based</text>
<text top="415" left="78" width="505" height="14" font="4">parallelism—allows the performance of these algorithms to be increased dramati-</text>
<text top="433" left="78" width="32" height="14" font="4">cally.</text>
<text top="451" left="96" width="487" height="14" font="4">A recent development in the area of population based metaheuristics is an algo-</text>
<text top="468" left="78" width="505" height="14" font="4">rithm called Central Force Optimization (CFO). CFO is a new metaheuristic that has</text>
<text top="486" left="78" width="278" height="14" font="4">been proposed and developed in recent years [</text>
<text top="486" left="356" width="7" height="14" font="8"><a href="pdfxml.html#20">3</a></text>
<text top="486" left="363" width="4" height="14" font="4">,</text>
<text top="486" left="371" width="7" height="14" font="8"><a href="pdfxml.html#20">4</a></text>
<text top="486" left="379" width="4" height="14" font="4"><a href="pdfxml.html#20">,</a></text>
<text top="486" left="386" width="7" height="14" font="8"><a href="pdfxml.html#20">6</a></text>
<text top="486" left="394" width="7" height="14" font="4"><a href="pdfxml.html#20">–</a></text>
<text top="486" left="401" width="15" height="14" font="8"><a href="pdfxml.html#21">11</a></text>
<text top="486" left="416" width="167" height="14" font="4">]. CFO uses a population of</text>
<text top="503" left="78" width="505" height="14" font="4">probes that are spread across a search space. These probes are both attracted and re-</text>
<text top="521" left="78" width="505" height="14" font="4">pelled by other probes based on the their gravitational pull toward each other (which</text>
<text top="539" left="78" width="505" height="14" font="4">is directly related to their ﬁtness). The algorithm differentiates itself as it includes no</text>
<text top="556" left="78" width="505" height="14" font="4">stochastic behavior. While this algorithm has been shown to be extremely promis-</text>
<text top="574" left="78" width="505" height="14" font="4">ing in terms of solution quality and functional evaluations, the computational time</text>
<text top="591" left="78" width="505" height="14" font="4">required to solve optimization problems is often high when compared with other al-</text>
<text top="609" left="78" width="505" height="14" font="4">gorithms. As such, the this work introduces the ﬁrst implementation and analysis of</text>
<text top="627" left="78" width="402" height="14" font="4">this algorithm on the graphics processing unit (GPU) using CUDA.</text>
<text top="644" left="96" width="487" height="14" font="4">The remainder of this paper will review the state-of-the-art regarding the CFO</text>
<text top="662" left="78" width="505" height="14" font="4">algorithm, present a brief overview of GPU computing and the NVIDA CUDA plat-</text>
<text top="679" left="78" width="505" height="14" font="4">form, discuss the implementation of CFO using CUDA, present the collected results,</text>
<text top="697" left="78" width="505" height="14" font="4">and discuss the implications of this work as well as future options for extending this</text>
<text top="715" left="78" width="54" height="14" font="4">research.</text>
<text top="765" left="78" width="184" height="14" font="2"><b>2 Central force optimization</b></text>
<text top="797" left="78" width="505" height="14" font="4">This section will present the basics of the CFO algorithm and review the state-of-the-</text>
<text top="815" left="78" width="174" height="14" font="4">art concerning the algorithm.</text>
<text top="847" left="78" width="99" height="14" font="4">2.1 Background</text>
<text top="879" left="78" width="505" height="14" font="4">The CFO algorithm is a novel and relatively new metaheuristic that is based on the</text>
<text top="897" left="78" width="505" height="14" font="4">movement of probes through space. These probes are scattered throughout the search</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="999" width="659">
	<fontspec id="9" size="6" family="Times" color="#000000"/>
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="84" left="78" width="505" height="14" font="4">space and, as time progresses, they slowly move toward the probe that has achieved</text>
<text top="102" left="78" width="505" height="14" font="4">the highest mass or ﬁtness. The algorithm is based on three equations as detailed in</text>
<text top="120" left="78" width="5" height="14" font="4">(</text>
<text top="120" left="83" width="7" height="14" font="8"><a href="pdfxml.html#3">1</a></text>
<text top="120" left="90" width="17" height="14" font="4">)–(</text>
<text top="120" left="108" width="7" height="14" font="8"><a href="pdfxml.html#3">3</a></text>
<text top="120" left="115" width="9" height="14" font="4">).</text>
<text top="156" left="291" width="9" height="13" font="3">F</text>
<text top="152" left="305" width="22" height="19" font="3">= γ</text>
<text top="146" left="332" width="12" height="13" font="3">m</text>
<text top="150" left="343" width="6" height="10" font="0">1</text>
<text top="146" left="350" width="12" height="13" font="3">m</text>
<text top="150" left="362" width="6" height="10" font="0">2</text>
<text top="167" left="343" width="6" height="13" font="3">r</text>
<text top="165" left="350" width="6" height="10" font="0">2</text>
<text top="156" left="565" width="17" height="14" font="4">(1)</text>
<text top="199" left="292" width="7" height="13" font="3">a</text>
<text top="195" left="303" width="34" height="19" font="3">= −γ</text>
<text top="188" left="341" width="12" height="13" font="3">m</text>
<text top="193" left="353" width="6" height="10" font="0">2</text>
<text top="184" left="361" width="5" height="19" font="3">ˆr</text>
<text top="210" left="347" width="6" height="13" font="3">r</text>
<text top="208" left="354" width="6" height="10" font="0">2</text>
<text top="199" left="565" width="17" height="14" font="4">(2)</text>
<text top="241" left="226" width="21" height="13" font="3">R(t</text>
<text top="237" left="251" width="66" height="19" font="3">+ t) = R</text>
<text top="245" left="317" width="6" height="10" font="0">0</text>
<text top="237" left="326" width="24" height="19" font="3">+ V</text>
<text top="245" left="350" width="6" height="10" font="0">0</text>
<text top="241" left="368" width="4" height="13" font="3">t</text>
<text top="237" left="377" width="12" height="19" font="3">+</text>
<text top="230" left="393" width="7" height="14" font="4">1</text>
<text top="251" left="393" width="7" height="14" font="4">2</text>
<text top="241" left="402" width="24" height="13" font="3">a t</text>
<text top="237" left="428" width="6" height="10" font="0">2</text>
<text top="240" left="565" width="17" height="14" font="4">(3)</text>
<text top="277" left="78" width="65" height="14" font="4">Equation <a href="pdfxml.html#3">(</a></text>
<text top="277" left="143" width="7" height="14" font="8"><a href="pdfxml.html#3">1</a></text>
<text top="277" left="151" width="432" height="14" font="4"><a href="pdfxml.html#3">) </a>describes the magnitude of the force, F , between two bodies with</text>
<text top="295" left="78" width="59" height="14" font="4">masses m</text>
<text top="300" left="137" width="6" height="10" font="0">1</text>
<text top="295" left="149" width="38" height="14" font="4">and m</text>
<text top="300" left="187" width="6" height="10" font="0">2</text>
<text top="295" left="199" width="384" height="14" font="4">that are separated by a distance, r. The value of γ is constant.</text>
<text top="313" left="78" width="63" height="14" font="4">Equation (</text>
<text top="313" left="141" width="7" height="14" font="8"><a href="pdfxml.html#3">2</a></text>
<text top="313" left="148" width="287" height="14" font="4">) describes the direction (denoted by unit vector</text>
<text top="309" left="441" width="142" height="19" font="3">ˆr) and magnitude of the</text>
<text top="331" left="78" width="225" height="14" font="4">acceleration pointing toward mass m</text>
<text top="336" left="303" width="6" height="10" font="0">1</text>
<text top="331" left="315" width="46" height="14" font="4">from m</text>
<text top="336" left="361" width="6" height="10" font="0">2</text>
<text top="331" left="367" width="73" height="14" font="4">. Equation <a href="pdfxml.html#3">(</a></text>
<text top="331" left="440" width="7" height="14" font="8"><a href="pdfxml.html#3">3</a></text>
<text top="331" left="448" width="135" height="14" font="4"><a href="pdfxml.html#3">) </a>shows the change in</text>
<text top="349" left="78" width="246" height="14" font="4">position of each mass over time where R</text>
<text top="354" left="324" width="6" height="10" font="0">0</text>
<text top="349" left="335" width="102" height="14" font="4">is the position, V</text>
<text top="354" left="436" width="6" height="10" font="0">0</text>
<text top="349" left="447" width="136" height="14" font="4">is the velocity, a is the</text>
<text top="367" left="78" width="101" height="14" font="4">acceleration, and</text>
<text top="367" left="194" width="4" height="13" font="3">t</text>
<text top="367" left="204" width="379" height="14" font="4">is the change in time. As these equations model actual, physical</text>
<text top="385" left="78" width="494" height="14" font="4">reality, they must be modiﬁed and adjusted when applied to optimization via CFO.</text>
<text top="403" left="96" width="487" height="14" font="4">In order to represent a solution to a problem, CFO deﬁnes each probe as having a</text>
<text top="421" left="78" width="505" height="14" font="4">position vector (R), an acceleration vector (A), and a mass (M) that is a user-deﬁned</text>
<text top="439" left="78" width="505" height="14" font="4">function of that probe’s ﬁtness. The position vector is a representation of the probes</text>
<text top="456" left="78" width="505" height="14" font="4">current coordinates’ with regards to each dimension of the search space. External</text>
<text top="474" left="78" width="505" height="14" font="4">minimum and maximum vectors are also created by this algorithm in order to deﬁne</text>
<text top="492" left="78" width="505" height="14" font="4">the bounds of each dimension of the search space. The acceleration vector is identical</text>
<text top="510" left="78" width="505" height="14" font="4">to the position vector except that it stores values with regards to changes in position</text>
<text top="528" left="78" width="357" height="14" font="4">and may or may not have a minimum or maximum value <a href="pdfxml.html#21">[</a></text>
<text top="528" left="434" width="15" height="14" font="8"><a href="pdfxml.html#21">20</a></text>
<text top="528" left="449" width="4" height="14" font="4">,</text>
<text top="528" left="458" width="15" height="14" font="8"><a href="pdfxml.html#21">21</a></text>
<text top="528" left="473" width="110" height="14" font="4"><a href="pdfxml.html#21">]. </a>Each probe also</text>
<text top="546" left="78" width="505" height="14" font="4">has a ﬁtness value that is tracked. The previous equations are then updated to become:</text>
<text top="596" left="187" width="7" height="13" font="3">a</text>
<text top="591" left="196" width="7" height="10" font="5">p</text>
<text top="603" left="195" width="5" height="10" font="5">j</text>
<text top="600" left="201" width="15" height="15" font="5">−1</text>
<text top="592" left="220" width="27" height="19" font="3">= G</text>
<text top="577" left="264" width="9" height="10" font="5">N</text>
<text top="581" left="272" width="6" height="8" font="9">p</text>
<text top="617" left="248" width="5" height="10" font="5">k</text>
<text top="614" left="254" width="40" height="15" font="5">=1,k=p</text>
<text top="596" left="296" width="35" height="13" font="3">U (F )</text>
<text top="592" left="334" width="16" height="19" font="3">· F</text>
<text top="592" left="353" width="6" height="10" font="5">α</text>
<text top="583" left="371" width="16" height="13" font="3">(R</text>
<text top="579" left="387" width="5" height="10" font="5">k</text>
<text top="590" left="387" width="5" height="10" font="5">j</text>
<text top="587" left="393" width="15" height="15" font="5">−1</text>
<text top="579" left="411" width="25" height="19" font="3">− R</text>
<text top="577" left="437" width="7" height="10" font="5">p</text>
<text top="590" left="436" width="5" height="10" font="5">j</text>
<text top="587" left="442" width="15" height="15" font="5">−1</text>
<text top="583" left="457" width="6" height="13" font="3">)</text>
<text top="604" left="362" width="20" height="19" font="3">|(R</text>
<text top="605" left="383" width="5" height="10" font="5">k</text>
<text top="615" left="383" width="5" height="10" font="5">j</text>
<text top="612" left="389" width="15" height="15" font="5">−1</text>
<text top="604" left="407" width="25" height="19" font="3">− R</text>
<text top="603" left="433" width="7" height="10" font="5">p</text>
<text top="615" left="432" width="5" height="10" font="5">j</text>
<text top="612" left="438" width="15" height="15" font="5">−1</text>
<text top="608" left="453" width="6" height="13" font="3">)</text>
<text top="604" left="459" width="4" height="19" font="3">|</text>
<text top="606" left="463" width="6" height="10" font="5">β</text>
<text top="596" left="565" width="17" height="14" font="4">(4)</text>
<text top="643" left="272" width="9" height="13" font="3">F</text>
<text top="639" left="287" width="28" height="19" font="3">= M</text>
<text top="639" left="316" width="5" height="10" font="5">k</text>
<text top="650" left="315" width="5" height="10" font="5">j</text>
<text top="647" left="321" width="15" height="15" font="5">−1</text>
<text top="639" left="339" width="28" height="19" font="3">− M</text>
<text top="637" left="368" width="7" height="10" font="5">p</text>
<text top="650" left="367" width="5" height="10" font="5">j</text>
<text top="647" left="373" width="15" height="15" font="5">−1</text>
<text top="642" left="565" width="17" height="14" font="4">(5)</text>
<text top="681" left="253" width="10" height="13" font="3">R</text>
<text top="676" left="264" width="7" height="10" font="5">p</text>
<text top="688" left="264" width="5" height="10" font="5">j</text>
<text top="677" left="276" width="25" height="19" font="3">= R</text>
<text top="676" left="302" width="7" height="10" font="5">p</text>
<text top="688" left="301" width="5" height="10" font="5">j</text>
<text top="685" left="307" width="15" height="15" font="5">−1</text>
<text top="677" left="325" width="12" height="19" font="3">+</text>
<text top="670" left="342" width="7" height="14" font="4">1</text>
<text top="691" left="342" width="7" height="14" font="4">2</text>
<text top="681" left="351" width="11" height="13" font="3">A</text>
<text top="676" left="362" width="7" height="10" font="5">p</text>
<text top="688" left="362" width="5" height="10" font="5">j</text>
<text top="685" left="368" width="15" height="15" font="5">−1</text>
<text top="681" left="395" width="4" height="13" font="3">t</text>
<text top="677" left="401" width="6" height="10" font="0">2</text>
<text top="681" left="565" width="17" height="14" font="4">(6)</text>
<text top="718" left="78" width="54" height="14" font="4">where N</text>
<text top="723" left="131" width="7" height="10" font="5">p</text>
<text top="718" left="145" width="438" height="14" font="4">is the number of probes, p is the current probe, G is the gravitational</text>
<text top="736" left="78" width="459" height="14" font="4">constant, α and β are constants that would be 1 and 3 in the real world, M</text>
<text top="733" left="538" width="5" height="10" font="5">k</text>
<text top="736" left="550" width="33" height="14" font="4">is the</text>
<text top="754" left="78" width="505" height="14" font="4">ﬁtness of probe k, j is the current time step, and U is the unit step function. The</text>
<text top="772" left="78" width="505" height="14" font="4">equivalent to mass in these equations is the unit step function, U (F ), multiplied by</text>
<text top="789" left="78" width="242" height="14" font="4">the difference between ﬁtness values (M</text>
<text top="787" left="320" width="5" height="10" font="5">k</text>
<text top="797" left="319" width="5" height="10" font="5">j</text>
<text top="794" left="325" width="15" height="15" font="5">−1</text>
<text top="786" left="344" width="28" height="19" font="3">− M</text>
<text top="784" left="373" width="7" height="10" font="5">p</text>
<text top="797" left="372" width="5" height="10" font="5">j</text>
<text top="794" left="378" width="15" height="15" font="5">−1</text>
<text top="789" left="393" width="14" height="14" font="4">) [</text>
<text top="789" left="407" width="7" height="14" font="8"><a href="pdfxml.html#20">3</a></text>
<text top="789" left="414" width="9" height="14" font="4">].</text>
<text top="807" left="96" width="487" height="14" font="4">This algorithm is particularly sensitive to the initial probe distribution (IPD). Mul-</text>
<text top="825" left="78" width="505" height="14" font="4">tiple suggestions have been made with regards to how the IPD should be calculated</text>
<text top="843" left="78" width="505" height="14" font="4">including placing all probes in a manner that is uniformly spaced across the axes</text>
<text top="861" left="78" width="505" height="14" font="4">of each dimension, uniformly spaced on the diagonals of a speciﬁc problem, or in</text>
<text top="879" left="78" width="505" height="14" font="4">a random fashion. The sensitivity of CFO to IPD should be considered wisely when</text>
<text top="897" left="78" width="505" height="14" font="4">working on an optimization problem, though the previously suggested methodologies</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="84" left="78" width="505" height="14" font="4">work quite well. One beneﬁt of this sensitivity to IPD that has already been demon-</text>
<text top="102" left="78" width="446" height="14" font="4">strated is the ability of CFO to map topologies of mathematical functions [</text>
<text top="102" left="524" width="7" height="14" font="8"><a href="pdfxml.html#20">5</a></text>
<text top="102" left="531" width="9" height="14" font="4"><a href="pdfxml.html#20">].</a></text>
<text top="120" left="96" width="487" height="14" font="4">Probe retrieval (correcting errant probes that have gone beyond the problem</text>
<text top="138" left="78" width="440" height="14" font="4">bounds) is also important when using CFO. The initial algorithm uses <a href="pdfxml.html#4">(</a></text>
<text top="138" left="517" width="7" height="14" font="8"><a href="pdfxml.html#4">7</a></text>
<text top="138" left="525" width="58" height="14" font="4"><a href="pdfxml.html#4">) </a>to repo-</text>
<text top="156" left="78" width="493" height="14" font="4">sition dimensions of probes that have exceeded their minimum value. Equation <a href="pdfxml.html#4">(</a></text>
<text top="156" left="570" width="7" height="14" font="8"><a href="pdfxml.html#4">8</a></text>
<text top="156" left="578" width="5" height="14" font="4"><a href="pdfxml.html#4">)</a></text>
<text top="174" left="78" width="505" height="14" font="4">is then used to reposition dimensions of probes that have exceeded their maximum</text>
<text top="192" left="78" width="505" height="14" font="4">value. In these equations, i references the current dimension, j is the current time</text>
<text top="211" left="78" width="239" height="14" font="4">step, p is the current probe number, X</text>
<text top="215" left="316" width="18" height="10" font="0">min</text>
<text top="211" left="340" width="243" height="14" font="4">is a vector of minimum values for each</text>
<text top="229" left="78" width="82" height="14" font="4">dimension, X</text>
<text top="233" left="159" width="20" height="10" font="0">max</text>
<text top="229" left="184" width="347" height="14" font="4">is a vector of maximum values for each dimension, and F</text>
<text top="233" left="531" width="15" height="10" font="0">rep</text>
<text top="229" left="551" width="32" height="14" font="4">is the</text>
<text top="247" left="78" width="458" height="14" font="4">reposition factor which may be chosen by the user, but is typically set to 0.5.</text>
<text top="281" left="162" width="59" height="13" font="3">R(p, i, j )</text>
<text top="277" left="223" width="26" height="19" font="3">= X</text>
<text top="286" left="249" width="18" height="10" font="0">min</text>
<text top="281" left="268" width="17" height="13" font="3">(i)</text>
<text top="277" left="287" width="24" height="19" font="3">+ F</text>
<text top="286" left="311" width="15" height="10" font="0">rep</text>
<text top="277" left="330" width="129" height="19" font="3">∗ (R(p, i, j − 1) − X</text>
<text top="286" left="458" width="18" height="10" font="0">min</text>
<text top="281" left="477" width="22" height="13" font="3">(i))</text>
<text top="281" left="565" width="17" height="14" font="4">(7)</text>
<text top="308" left="160" width="59" height="13" font="3">R(p, i, j )</text>
<text top="304" left="221" width="26" height="19" font="3">= X</text>
<text top="313" left="248" width="20" height="10" font="0">max</text>
<text top="308" left="268" width="17" height="13" font="3">(i)</text>
<text top="304" left="287" width="24" height="19" font="3">− F</text>
<text top="313" left="311" width="15" height="10" font="0">rep</text>
<text top="304" left="330" width="28" height="19" font="3">∗ (X</text>
<text top="313" left="357" width="20" height="10" font="0">max</text>
<text top="308" left="378" width="17" height="13" font="3">(i)</text>
<text top="304" left="397" width="104" height="19" font="3">− R(p, i, j − 1))</text>
<text top="308" left="565" width="17" height="14" font="4">(8)</text>
<text top="342" left="96" width="487" height="14" font="4">In order to improve the basic algorithm and introduce some semblance of stochas-</text>
<text top="360" left="78" width="505" height="14" font="4">ticity, the basic CFO algorithm has been modiﬁed by the original author twice. The</text>
<text top="378" left="78" width="485" height="14" font="4">second version of this algorithm is known as PR-CFO (Pseudo-Random CFO) [</text>
<text top="378" left="563" width="15" height="14" font="8"><a href="pdfxml.html#21">11</a></text>
<text top="378" left="578" width="5" height="14" font="4"><a href="pdfxml.html#21">]</a></text>
<text top="396" left="78" width="505" height="14" font="4">and has been adjusted to include characteristics that are nearly stochastic. The steps</text>
<text top="414" left="78" width="207" height="14" font="4">in PR-CFO are listed in Algorithm</text>
<text top="414" left="289" width="7" height="14" font="8"><a href="pdfxml.html#4">1</a></text>
<text top="414" left="296" width="4" height="14" font="4">.</text>
<text top="462" left="78" width="196" height="14" font="2"><b>Algorithm 1 </b>PR-CFO algorithm</text>
<text top="482" left="93" width="257" height="14" font="4">Initialize position and acceleration vectors;</text>
<text top="500" left="93" width="94" height="14" font="4">Evaluate ﬁtness</text>
<text top="518" left="93" width="40" height="14" font="2"><b>repeat</b></text>
<text top="536" left="108" width="143" height="14" font="4">Update probe positions;</text>
<text top="554" left="108" width="136" height="14" font="4">Retrieve errant probes;</text>
<text top="572" left="108" width="144" height="14" font="4">Calculate ﬁtness values;</text>
<text top="590" left="108" width="169" height="14" font="4">Compute new accelerations;</text>
<text top="608" left="108" width="74" height="14" font="4">Increment F</text>
<text top="612" left="182" width="15" height="10" font="0">rep</text>
<text top="608" left="201" width="15" height="14" font="4">by</text>
<text top="608" left="231" width="9" height="13" font="3">F</text>
<text top="612" left="241" width="15" height="10" font="0">rep</text>
<text top="608" left="256" width="4" height="14" font="4">;</text>
<text top="626" left="108" width="22" height="14" font="2"><b>if </b>F</text>
<text top="630" left="130" width="15" height="10" font="0">rep</text>
<text top="626" left="148" width="12" height="13" font="3">&gt;</text>
<text top="626" left="163" width="40" height="14" font="4">1 <b>then</b></text>
<text top="644" left="123" width="9" height="13" font="3">F</text>
<text top="648" left="132" width="15" height="10" font="0">rep</text>
<text top="640" left="150" width="29" height="19" font="3">← F</text>
<text top="641" left="182" width="18" height="10" font="0">min</text>
<text top="650" left="179" width="15" height="10" font="0">rep</text>
<text top="661" left="108" width="36" height="14" font="2"><b>end if</b></text>
<text top="679" left="108" width="145" height="14" font="4">Shrink the search space;</text>
<text top="697" left="93" width="174" height="14" font="2"><b>until </b>Stopping criteria is met</text>
<text top="752" left="96" width="487" height="14" font="4">The PR-CFO algorithm extends the basic CFO algorithm through the addition of</text>
<text top="770" left="78" width="505" height="14" font="4">“almost” stochastic variations that are completely calculable and allow the algorithm</text>
<text top="788" left="78" width="505" height="14" font="4">to remain deterministic. The changes are made to the classic CFO algorithm through</text>
<text top="806" left="78" width="505" height="14" font="4">the injection of pseudo-randomness in two different areas: The repositioning factor</text>
<text top="824" left="78" width="469" height="14" font="4">used during probe retrieval and the dynamic manipulation of variable bounds [</text>
<text top="824" left="547" width="15" height="14" font="8"><a href="pdfxml.html#21">11</a></text>
<text top="824" left="562" width="9" height="14" font="4"><a href="pdfxml.html#21">].</a></text>
<text top="843" left="96" width="487" height="14" font="4">PR-CFO is further modiﬁed in order to create an algorithm known as PF-CFO</text>
<text top="861" left="78" width="142" height="14" font="4">(Parameter Free CFO) [</text>
<text top="861" left="220" width="15" height="14" font="8"><a href="pdfxml.html#21">10</a></text>
<text top="861" left="235" width="348" height="14" font="4"><a href="pdfxml.html#21">]. </a>The reason for this modiﬁcation is that, like many meta-</text>
<text top="879" left="78" width="505" height="14" font="4">heuristics, CFO has a large number of parameters that must be tweaked in order to</text>
<text top="897" left="78" width="505" height="14" font="4">generate sufﬁciently good results. This version is almost identical to PR-CFO and</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="999" width="659">
	<fontspec id="10" size="9" family="Times" color="#000000"/>
	<fontspec id="11" size="8" family="Times" color="#000000"/>
	<fontspec id="12" size="8" family="Times" color="#000000"/>
	<fontspec id="13" size="9" family="Times" color="#000000"/>
	<fontspec id="14" size="12" family="Times" color="#000000"/>
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="79" left="78" width="128" height="11" font="10"><b>Table 1 </b>Typical values of</text>
<text top="93" left="78" width="147" height="11" font="0">parameters that are ﬁxed when</text>
<text top="108" left="78" width="136" height="11" font="0">using the PF-CFO algorithm</text>
<text top="89" left="252" width="48" height="11" font="0">Parameter</text>
<text top="89" left="555" width="27" height="11" font="0">Value</text>
<text top="121" left="252" width="9" height="11" font="5">N</text>
<text top="124" left="261" width="3" height="9" font="11">t</text>
<text top="121" left="555" width="24" height="11" font="0">1000</text>
<text top="140" left="252" width="8" height="11" font="5">F</text>
<text top="136" left="262" width="14" height="9" font="12">Init</text>
<text top="144" left="260" width="13" height="9" font="12">rep</text>
<text top="140" left="555" width="15" height="11" font="0">0.5</text>
<text top="158" left="262" width="8" height="11" font="5">F</text>
<text top="161" left="270" width="13" height="9" font="12">rep</text>
<text top="158" left="555" width="15" height="11" font="0">0.1</text>
<text top="177" left="252" width="8" height="11" font="5">F</text>
<text top="173" left="262" width="16" height="9" font="12">min</text>
<text top="181" left="260" width="13" height="9" font="12">rep</text>
<text top="176" left="555" width="21" height="11" font="0">0.05</text>
<text top="195" left="252" width="9" height="11" font="0">G</text>
<text top="195" left="555" width="6" height="11" font="0">2</text>
<text top="214" left="252" width="7" height="11" font="5">α</text>
<text top="213" left="555" width="6" height="11" font="0">1</text>
<text top="232" left="252" width="7" height="11" font="5">β</text>
<text top="232" left="555" width="6" height="11" font="0">2</text>
<text top="283" left="78" width="115" height="11" font="10"><b>Table 2 </b>Guidelines for</text>
<text top="297" left="78" width="102" height="11" font="0">choosing the value of</text>
<text top="312" left="78" width="152" height="11" font="13"><i>maxProbesPerDimension </i>based</text>
<text top="326" left="78" width="151" height="11" font="0">upon the number of dimensions</text>
<text top="340" left="78" width="13" height="11" font="0">(N</text>
<text top="344" left="91" width="5" height="9" font="11">d</text>
<text top="340" left="98" width="96" height="11" font="0">) in a given problem</text>
<text top="293" left="252" width="9" height="11" font="5">N</text>
<text top="297" left="261" width="5" height="9" font="11">d</text>
<text top="293" left="461" width="121" height="11" font="13"><i>maxProbesPerDimension</i></text>
<text top="325" left="252" width="9" height="11" font="5">N</text>
<text top="329" left="261" width="5" height="9" font="11">d</text>
<text top="322" left="270" width="17" height="16" font="5">≤ 6</text>
<text top="325" left="461" width="12" height="11" font="0">14</text>
<text top="343" left="252" width="6" height="11" font="0">7</text>
<text top="340" left="261" width="20" height="16" font="5">≤ N</text>
<text top="347" left="281" width="5" height="9" font="11">d</text>
<text top="340" left="290" width="23" height="16" font="5">≤ 10</text>
<text top="343" left="461" width="12" height="11" font="0">12</text>
<text top="362" left="252" width="12" height="11" font="0">11</text>
<text top="359" left="267" width="20" height="16" font="5">≤ N</text>
<text top="366" left="287" width="5" height="9" font="11">d</text>
<text top="359" left="296" width="23" height="16" font="5">≤ 15</text>
<text top="362" left="461" width="12" height="11" font="0">10</text>
<text top="380" left="252" width="12" height="11" font="0">16</text>
<text top="377" left="267" width="20" height="16" font="5">≤ N</text>
<text top="384" left="287" width="5" height="9" font="11">d</text>
<text top="377" left="296" width="23" height="16" font="5">≤ 20</text>
<text top="380" left="467" width="6" height="11" font="0">8</text>
<text top="399" left="252" width="12" height="11" font="0">21</text>
<text top="396" left="267" width="20" height="16" font="5">≤ N</text>
<text top="403" left="287" width="5" height="9" font="11">d</text>
<text top="396" left="296" width="23" height="16" font="5">≤ 30</text>
<text top="399" left="467" width="6" height="11" font="0">6</text>
<text top="417" left="252" width="21" height="11" font="0">Else</text>
<text top="417" left="467" width="6" height="11" font="0">4</text>
<text top="473" left="78" width="505" height="14" font="4">compensates for the number of parameters that must be chosen by ﬁxing a wide ar-</text>
<text top="491" left="78" width="505" height="14" font="4">ray of internal parameters at speciﬁc values. The values that are ﬁxed can be seen</text>
<text top="510" left="78" width="49" height="14" font="4">in Table</text>
<text top="510" left="131" width="7" height="14" font="8"><a href="pdfxml.html#5">1</a></text>
<text top="510" left="143" width="440" height="14" font="4">and a reference for choosing the value of <i>maxProbesPerDimension </i>is in-</text>
<text top="528" left="78" width="93" height="14" font="4">cluded in Table</text>
<text top="528" left="174" width="7" height="14" font="8"><a href="pdfxml.html#5">2</a></text>
<text top="528" left="182" width="287" height="14" font="4"><a href="pdfxml.html#5">. </a>The PF-CFO algorithm is shown in Algorithm</text>
<text top="528" left="473" width="7" height="14" font="8"><a href="pdfxml.html#6">2</a></text>
<text top="528" left="485" width="48" height="14" font="4">where γ</text>
<text top="533" left="533" width="20" height="10" font="0">start</text>
<text top="524" left="556" width="26" height="19" font="3">= 0,</text>
<text top="546" left="78" width="8" height="13" font="3">γ</text>
<text top="551" left="85" width="19" height="10" font="0">stop</text>
<text top="542" left="108" width="126" height="19" font="3">= 1, and γ = 0.05.</text>
<text top="585" left="78" width="112" height="14" font="4">2.2 Previous work</text>
<text top="624" left="78" width="505" height="14" font="4">The majority of the current work pertaining to CFO has been published in a series</text>
<text top="642" left="78" width="64" height="14" font="4">of papers <a href="pdfxml.html#20">[</a></text>
<text top="642" left="142" width="7" height="14" font="8"><a href="pdfxml.html#20">3</a></text>
<text top="642" left="150" width="4" height="14" font="4"><a href="pdfxml.html#20">,</a></text>
<text top="642" left="157" width="7" height="14" font="8"><a href="pdfxml.html#20">4</a></text>
<text top="642" left="165" width="4" height="14" font="4"><a href="pdfxml.html#20">,</a></text>
<text top="642" left="173" width="7" height="14" font="8"><a href="pdfxml.html#20">6</a></text>
<text top="642" left="180" width="7" height="14" font="4">–</text>
<text top="642" left="188" width="15" height="14" font="8"><a href="pdfxml.html#21">11</a></text>
<text top="642" left="202" width="380" height="14" font="4">] with additional works appearing as the algorithm continues to</text>
<text top="660" left="78" width="105" height="14" font="4">prove its mettle [</text>
<text top="660" left="183" width="15" height="14" font="8"><a href="pdfxml.html#21">15</a></text>
<text top="660" left="198" width="4" height="14" font="4"><a href="pdfxml.html#21">,</a></text>
<text top="660" left="206" width="15" height="14" font="8"><a href="pdfxml.html#21">20</a></text>
<text top="660" left="221" width="4" height="14" font="4">,</text>
<text top="660" left="230" width="15" height="14" font="8"><a href="pdfxml.html#21">21</a></text>
<text top="660" left="245" width="338" height="14" font="4">]. Some of the studies and applications completed with</text>
<text top="678" left="78" width="505" height="14" font="4">regards to CFO include its application to the Fano Load Equalizer and linear ar-</text>
<text top="697" left="78" width="147" height="14" font="4">ray synthesis problems [</text>
<text top="697" left="225" width="7" height="14" font="8"><a href="pdfxml.html#20">3</a></text>
<text top="697" left="232" width="351" height="14" font="4">], applications to linear and circular arrays as compared to</text>
<text top="715" left="78" width="349" height="14" font="4">quadrature programming method (QPM), PSO, and GA [</text>
<text top="715" left="427" width="7" height="14" font="8"><a href="pdfxml.html#20">7</a></text>
<text top="715" left="434" width="4" height="14" font="4">,</text>
<text top="715" left="443" width="15" height="14" font="8"><a href="pdfxml.html#21">15</a></text>
<text top="715" left="458" width="125" height="14" font="4"><a href="pdfxml.html#21">], </a>applications in the</text>
<text top="733" left="78" width="143" height="14" font="4">PBM benchmark suite <a href="pdfxml.html#20">[</a></text>
<text top="733" left="220" width="7" height="14" font="8"><a href="pdfxml.html#20">7</a></text>
<text top="733" left="228" width="4" height="14" font="4"><a href="pdfxml.html#20">,</a></text>
<text top="733" left="235" width="7" height="14" font="8"><a href="pdfxml.html#21">9</a></text>
<text top="733" left="243" width="4" height="14" font="4"><a href="pdfxml.html#21">,</a></text>
<text top="733" left="250" width="15" height="14" font="8"><a href="pdfxml.html#21">19</a></text>
<text top="733" left="265" width="318" height="14" font="4">], a comparison with Group Search Optimizer (GSO)</text>
<text top="751" left="78" width="61" height="14" font="4">and PSO <a href="pdfxml.html#21">[</a></text>
<text top="751" left="139" width="7" height="14" font="8"><a href="pdfxml.html#21">8</a></text>
<text top="751" left="147" width="370" height="14" font="4"><a href="pdfxml.html#21">], </a>and a comparison with PSO when training neural networks[</text>
<text top="751" left="517" width="15" height="14" font="8"><a href="pdfxml.html#21">12</a></text>
<text top="751" left="532" width="9" height="14" font="4"><a href="pdfxml.html#21">].</a></text>
<text top="769" left="96" width="406" height="14" font="4">A new and interesting modiﬁcation is made to the CFO algorithm in [</text>
<text top="769" left="502" width="15" height="14" font="8"><a href="pdfxml.html#21">20</a></text>
<text top="769" left="517" width="4" height="14" font="4"><a href="pdfxml.html#21">,</a></text>
<text top="769" left="524" width="15" height="14" font="8"><a href="pdfxml.html#21">21</a></text>
<text top="769" left="538" width="44" height="14" font="4">] where</text>
<text top="788" left="78" width="505" height="14" font="4">the algorithm is applied to antenna optimization. In order to improve the performance</text>
<text top="806" left="78" width="505" height="14" font="4">of CFO, the authors present a technique called acceleration clipping. In this method,</text>
<text top="824" left="78" width="271" height="14" font="4">the magnitude of the acceleration vector, A</text>
<text top="829" left="349" width="5" height="10" font="5">j</text>
<text top="824" left="363" width="219" height="14" font="4">, is compared to the diagonal length</text>
<text top="842" left="78" width="294" height="14" font="4">of the search space multiplied by a new factor, A</text>
<text top="847" left="371" width="20" height="10" font="0">max</text>
<text top="842" left="392" width="115" height="14" font="4">. If at any point A</text>
<text top="847" left="507" width="5" height="10" font="5">j</text>
<text top="842" left="525" width="58" height="14" font="4">should be</text>
<text top="860" left="78" width="155" height="14" font="4">greater than or equal to A</text>
<text top="865" left="233" width="20" height="10" font="0">max</text>
<text top="857" left="256" width="161" height="19" font="3">× DiagonalLength, then A</text>
<text top="865" left="417" width="5" height="10" font="5">j</text>
<text top="857" left="427" width="26" height="19" font="3">= A</text>
<text top="865" left="453" width="20" height="10" font="0">max</text>
<text top="857" left="476" width="26" height="19" font="3">× A</text>
<text top="865" left="502" width="5" height="10" font="5">j</text>
<text top="860" left="509" width="74" height="14" font="4">. The results</text>
<text top="879" left="78" width="505" height="14" font="4">of the work demonstrate that CFO using acceleration clipping is competitive with a</text>
<text top="897" left="78" width="251" height="14" font="4">method called differential evolution (DE).</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="83" left="78" width="194" height="14" font="2"><b>Algorithm 2 </b>PF-CFO algorithm</text>
<text top="104" left="93" width="148" height="14" font="2"><b>for </b><i>probesPerDimension</i></text>
<text top="100" left="244" width="246" height="19" font="3">= 4 → <i>maxProbesPerDimension </i>by 2 <b>do</b></text>
<text top="121" left="108" width="184" height="14" font="4">Calculate number of probes, N</text>
<text top="126" left="292" width="7" height="10" font="5">p</text>
<text top="121" left="300" width="4" height="14" font="4">;</text>
<text top="139" left="108" width="30" height="14" font="2"><b>for </b>γ</text>
<text top="136" left="143" width="22" height="19" font="3">= γ</text>
<text top="144" left="165" width="20" height="10" font="0">start</text>
<text top="136" left="189" width="27" height="19" font="3">→ γ</text>
<text top="144" left="216" width="19" height="10" font="0">stop</text>
<text top="139" left="239" width="15" height="14" font="4">by</text>
<text top="140" left="270" width="8" height="13" font="3">γ</text>
<text top="139" left="284" width="16" height="14" font="2"><b>do</b></text>
<text top="157" left="123" width="150" height="14" font="4">Initialize position vector;</text>
<text top="175" left="123" width="174" height="14" font="4">Initialize acceleration vector;</text>
<text top="193" left="123" width="208" height="14" font="4">Compute initial probe distribution;</text>
<text top="211" left="123" width="183" height="14" font="4">Calculate initial ﬁtness values;</text>
<text top="229" left="123" width="40" height="14" font="2"><b>repeat</b></text>
<text top="247" left="137" width="143" height="14" font="4">Update probe positions;</text>
<text top="265" left="137" width="136" height="14" font="4">Retrieve errant probes;</text>
<text top="283" left="137" width="144" height="14" font="4">Calculate ﬁtness values;</text>
<text top="301" left="137" width="169" height="14" font="4">Compute new accelerations;</text>
<text top="319" left="137" width="74" height="14" font="4">Increment F</text>
<text top="324" left="211" width="15" height="10" font="0">rep</text>
<text top="319" left="231" width="15" height="14" font="4">by</text>
<text top="319" left="261" width="9" height="13" font="3">F</text>
<text top="324" left="271" width="15" height="10" font="0">rep</text>
<text top="319" left="286" width="4" height="14" font="4">;</text>
<text top="337" left="137" width="22" height="14" font="2"><b>if </b>F</text>
<text top="341" left="160" width="15" height="10" font="0">rep</text>
<text top="337" left="178" width="12" height="13" font="3">&gt;</text>
<text top="337" left="193" width="40" height="14" font="4">1 <b>then</b></text>
<text top="355" left="153" width="9" height="13" font="3">F</text>
<text top="359" left="162" width="15" height="10" font="0">rep</text>
<text top="351" left="180" width="29" height="19" font="3">← F</text>
<text top="352" left="211" width="18" height="10" font="0">min</text>
<text top="361" left="209" width="15" height="10" font="0">rep</text>
<text top="373" left="137" width="36" height="14" font="2"><b>end if</b></text>
<text top="390" left="137" width="157" height="14" font="4">Shrink the decision space;</text>
<text top="408" left="123" width="174" height="14" font="2"><b>until </b>Stopping criteria is met</text>
<text top="426" left="108" width="46" height="14" font="2"><b>end for</b></text>
<text top="444" left="93" width="46" height="14" font="2"><b>end for</b></text>
<text top="492" left="78" width="118" height="14" font="2"><b>3 GPU computing</b></text>
<text top="526" left="78" width="505" height="14" font="4">GPU computing is a promising technology that has become a staple of main stream</text>
<text top="544" left="78" width="505" height="14" font="4">computational science in the last few years. World wide there have been many large</text>
<text top="562" left="78" width="505" height="14" font="4">installations of GPUs along with plans for even larger installations. The GPU has</text>
<text top="579" left="78" width="505" height="14" font="4">an advantage over the CPU when considering problem formulations that lend them-</text>
<text top="597" left="78" width="505" height="14" font="4">selves well to data parallelism. The ability of the GPU to leverage data parallelism</text>
<text top="615" left="78" width="505" height="14" font="4">originally evolved in order to produce high quality graphics, but has also proven to</text>
<text top="633" left="78" width="505" height="14" font="4">be highly beneﬁcial to scientiﬁc computation. Due to the nature of GPUs and their</text>
<text top="651" left="78" width="505" height="14" font="4">focus on graphics processing, it has only recently become possible for scientists and</text>
<text top="668" left="78" width="485" height="14" font="4">researchers to use these compute devices through APIs and SDKs such as CUDA <a href="pdfxml.html#21">[</a></text>
<text top="668" left="563" width="15" height="14" font="8"><a href="pdfxml.html#21">17</a></text>
<text top="668" left="578" width="5" height="14" font="4"><a href="pdfxml.html#21">]</a></text>
<text top="686" left="78" width="86" height="14" font="4">and OpenCL <a href="pdfxml.html#21">[</a></text>
<text top="686" left="163" width="15" height="14" font="8"><a href="pdfxml.html#21">13</a></text>
<text top="686" left="178" width="404" height="14" font="4">]. For a detailed review of the evolution of the GPU technology and</text>
<text top="704" left="78" width="295" height="14" font="4">some of its applications, the reader is referred to <a href="pdfxml.html#21">[</a></text>
<text top="704" left="373" width="15" height="14" font="8"><a href="pdfxml.html#21">18</a></text>
<text top="704" left="388" width="195" height="14" font="4">]. While there are many methods</text>
<text top="722" left="78" width="492" height="14" font="4">of programming GPUs, this work concerns itself with CUDA and NVIDIA GPUs.</text>
<text top="756" left="78" width="309" height="14" font="4">3.1 Compute Uniﬁed Device Architecture (CUDA)</text>
<text top="790" left="78" width="505" height="14" font="4">The NVIDIA CUDA architecture is an NVIDIA product that allows the programming</text>
<text top="808" left="78" width="505" height="14" font="4">of NVIDIA based GPUs. The CUDA extensions for C allow programmers to access</text>
<text top="826" left="78" width="505" height="14" font="4">the computational abilities of NVIDIA GPUs without having to map algorithms to</text>
<text top="843" left="78" width="505" height="14" font="4">graphics concepts such as shaders, vertices, and the like. As CUDA based devices</text>
<text top="861" left="78" width="342" height="14" font="4">are distinctly single instruction multiple thread (SIMT) <a href="pdfxml.html#21">[</a></text>
<text top="861" left="420" width="15" height="14" font="8"><a href="pdfxml.html#21">17</a></text>
<text top="861" left="435" width="148" height="14" font="4">], the CUDA Extensions</text>
<text top="879" left="78" width="505" height="14" font="4">for C give programmers and scientists access to a platform that focuses on quickly</text>
<text top="897" left="78" width="505" height="14" font="4">improving the performance of data parallel applications. In order to program and</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="84" left="78" width="505" height="14" font="4">utilize these devices well, a thorough knowledge of the hardware architecture and</text>
<text top="102" left="78" width="233" height="14" font="4">necessary software constructs are vital.</text>
<text top="119" left="96" width="487" height="14" font="4">The deﬁnition of CUDA’s hardware and software is built around the concepts of</text>
<text top="137" left="78" width="505" height="14" font="4">threads, blocks, and grids. Threads are single worker items that are comparable to</text>
<text top="155" left="78" width="505" height="14" font="4">typical CPU threads. Threads on the GPU are executed in collections of 32 called</text>
<text top="173" left="78" width="505" height="14" font="4">warps. Each thread in a warp performs the same instruction on different data. Dif-</text>
<text top="190" left="78" width="505" height="14" font="4">ferentiating between unique threads is easy as every thread has a set of identiﬁers</text>
<text top="208" left="78" width="505" height="14" font="4">through the use of the <i>threadIdx </i>variable. While threads are combined to form warps,</text>
<text top="226" left="78" width="505" height="14" font="4">these warps are grouped into work units called blocks that are 2 or 3 dimensional.</text>
<text top="244" left="78" width="505" height="14" font="4">Blocks also have their own identiﬁers through the use of the <i>blockIdx </i>variable. The</text>
<text top="261" left="78" width="505" height="14" font="4">only restriction on blocks is that the total number of threads in a single block must</text>
<text top="279" left="78" width="413" height="14" font="4">not exceed either 512 or 1,024 depending on the given architecture [</text>
<text top="279" left="491" width="15" height="14" font="8"><a href="pdfxml.html#21">17</a></text>
<text top="279" left="506" width="77" height="14" font="4"><a href="pdfxml.html#21">]. </a>Each GPU</text>
<text top="297" left="78" width="505" height="14" font="4">also has a single grid which is made up of either one or two dimensional groupings</text>
<text top="315" left="78" width="505" height="14" font="4">of blocks. The dimensions of blocks and grids may be accessed via the <i>blockDim </i>and</text>
<text top="332" left="78" width="112" height="14" font="14"><i>gridDim </i>variables.</text>
<text top="350" left="96" width="487" height="14" font="4">Each of these constructs also has access to unique types of memory. Each thread</text>
<text top="368" left="78" width="505" height="14" font="4">has access to its own set of local memory and registers. Each thread in a single block</text>
<text top="386" left="78" width="505" height="14" font="4">has access to shared memory that is only accessible to threads inside that block. All</text>
<text top="403" left="78" width="505" height="14" font="4">threads also have access to larger and slower memory stores called global, constant,</text>
<text top="421" left="78" width="505" height="14" font="4">and texture memory. Contrary to intuition, the performance of local memory is as</text>
<text top="439" left="78" width="505" height="14" font="4">slow as global memory (they are stored in the same location), with shared mem-</text>
<text top="456" left="78" width="505" height="14" font="4">ory and registers being good options for quicker access. Threads also have access to</text>
<text top="474" left="78" width="505" height="14" font="4">constant, texture, and surface memory which may be used to improve performance</text>
<text top="492" left="78" width="505" height="14" font="4">in different situations. For example, texture memory is stored on chip and performs</text>
<text top="510" left="78" width="423" height="14" font="4">well when the pattern of memory access demonstrates spatial locality <a href="pdfxml.html#21">[</a></text>
<text top="510" left="501" width="15" height="14" font="8"><a href="pdfxml.html#21">22</a></text>
<text top="510" left="516" width="9" height="14" font="4"><a href="pdfxml.html#21">].</a></text>
<text top="527" left="96" width="487" height="14" font="4">In order to compile and run code using the GPU, one further feature must be</text>
<text top="545" left="78" width="505" height="14" font="4">used: Kernels. Kernels are functions that are modiﬁed in two ways: A keyword spec-</text>
<text top="563" left="78" width="505" height="14" font="4">iﬁer is added to the function declaration and additional syntax is used to launch</text>
<text top="581" left="78" width="505" height="14" font="4">the kernel. The keywords used in conjunction with the function declaration are</text>
<text top="598" left="78" width="505" height="14" font="4">__<i>global</i>__, __<i>host</i>__, and __<i>device</i>__. A function deﬁned using the __<i>device</i>__ key-</text>
<text top="616" left="78" width="505" height="14" font="4">word is executed on the GPU and is callable only from another __<i>device</i>__ kernel.</text>
<text top="634" left="78" width="505" height="14" font="4">The __<i>host</i>__ keyword is identical except that these functions pertain solely to the</text>
<text top="652" left="78" width="505" height="14" font="4">host. The __<i>global</i>__ keyword declares a function that is callable from the host and</text>
<text top="669" left="78" width="505" height="14" font="4">executed on the device. A kernel that is deﬁned with the __<i>global</i>__ keyword can</text>
<text top="687" left="78" width="505" height="14" font="4">be launched with the addition of information to a function call. This modiﬁcation</text>
<text top="705" left="78" width="218" height="14" font="4">consists of the syntax <i>functionName</i></text>
<text top="701" left="300" width="283" height="19" font="3">≪ · · · ≫ (). Further details regarding this are</text>
<text top="723" left="78" width="167" height="14" font="4">found in multiple sources [</text>
<text top="723" left="245" width="15" height="14" font="8"><a href="pdfxml.html#21">14</a></text>
<text top="723" left="260" width="4" height="14" font="4"><a href="pdfxml.html#21">,</a></text>
<text top="723" left="268" width="15" height="14" font="8"><a href="pdfxml.html#21">17</a></text>
<text top="723" left="283" width="4" height="14" font="4">,</text>
<text top="723" left="292" width="15" height="14" font="8"><a href="pdfxml.html#21">22</a></text>
<text top="723" left="307" width="276" height="14" font="4">]. In this work, functions are always invoked</text>
<text top="740" left="78" width="120" height="14" font="4">using <i>functionName</i></text>
<text top="737" left="201" width="382" height="19" font="3">≪ <i>numBlocks</i>, <i>threadsPerBlock </i>≫ (). This automatically allo-</text>
<text top="758" left="78" width="505" height="14" font="4">cates a grid on the GPU containing <i>numBlocks </i>blocks, each with <i>threadsPerBlock</i></text>
<text top="776" left="78" width="47" height="14" font="4">threads.</text>
<text top="828" left="78" width="224" height="14" font="2"><b>4 Implementing CFO using CUDA</b></text>
<text top="861" left="78" width="505" height="14" font="4">The most difﬁcult aspect of using the CUDA architecture is the successful mapping</text>
<text top="879" left="78" width="505" height="14" font="4">of the algorithm to the architecture in a way that is clear (code should be cleanly for-</text>
<text top="897" left="78" width="505" height="14" font="4">matted and easy to understand/update/maintain) and leverages the power of the GPU</text>
</page>
<page number="8" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="79" left="78" width="505" height="11" font="10"><b>Table 3 </b>A listing of the complexity and average computation time for each step of the PR-CFO algorithm</text>
<text top="108" left="78" width="21" height="11" font="0">Step</text>
<text top="108" left="154" width="56" height="11" font="0">Description</text>
<text top="108" left="345" width="56" height="11" font="0">Complexity</text>
<text top="108" left="456" width="126" height="11" font="0">Average computation time</text>
<text top="139" left="78" width="6" height="11" font="0">1</text>
<text top="139" left="154" width="116" height="11" font="0">Compute New Positions</text>
<text top="140" left="345" width="9" height="11" font="5">N</text>
<text top="143" left="354" width="6" height="9" font="11">p</text>
<text top="136" left="364" width="21" height="16" font="5">× N</text>
<text top="143" left="385" width="5" height="9" font="11">d</text>
<text top="139" left="463" width="31" height="11" font="0">0.02%</text>
<text top="158" left="78" width="6" height="11" font="0">2</text>
<text top="158" left="154" width="108" height="11" font="0">Retrieve Errant Probes</text>
<text top="158" left="345" width="9" height="11" font="5">N</text>
<text top="161" left="354" width="6" height="9" font="11">p</text>
<text top="155" left="364" width="21" height="16" font="5">× N</text>
<text top="162" left="385" width="5" height="9" font="11">d</text>
<text top="158" left="463" width="31" height="11" font="0">0.01%</text>
<text top="176" left="78" width="6" height="11" font="0">3</text>
<text top="176" left="154" width="136" height="11" font="0">Evaluate Objective Function</text>
<text top="177" left="345" width="9" height="11" font="5">N</text>
<text top="180" left="354" width="6" height="9" font="11">p</text>
<text top="176" left="463" width="31" height="11" font="0">0.02%</text>
<text top="195" left="78" width="6" height="11" font="0">4</text>
<text top="195" left="154" width="99" height="11" font="0">Update Acceleration</text>
<text top="195" left="345" width="9" height="11" font="5">N</text>
<text top="192" left="355" width="5" height="9" font="12">2</text>
<text top="199" left="354" width="6" height="9" font="11">p</text>
<text top="192" left="364" width="21" height="16" font="5">× N</text>
<text top="192" left="386" width="5" height="9" font="12">2</text>
<text top="201" left="385" width="5" height="9" font="11">d</text>
<text top="195" left="457" width="37" height="11" font="0">99.94%</text>
<text top="252" left="78" width="505" height="14" font="4">architecture. This section will detail the implementation of the CFO algorithm using</text>
<text top="270" left="78" width="505" height="14" font="4">CUDA on NVIDIA GPUs. Some discussion will also be made regarding typical is-</text>
<text top="288" left="78" width="505" height="14" font="4">sues that must be addressed when implementing an algorithm using CUDA. These</text>
<text top="307" left="78" width="505" height="14" font="4">include problem decomposition, scalability, divergent code paths, and memory ac-</text>
<text top="325" left="78" width="29" height="14" font="4">cess.</text>
<text top="364" left="78" width="291" height="14" font="4">4.1 Implementation and problem decomposition</text>
<text top="404" left="78" width="505" height="14" font="4">The ﬁrst step in implementing CFO using CUDA was examining the algorithm and</text>
<text top="422" left="78" width="505" height="14" font="4">determining what aspects of the algorithm are most computationally intensive. In</text>
<text top="440" left="78" width="505" height="14" font="4">order to do this, the CFO algorithm was divided into multiple, distinct algorithmic</text>
<text top="459" left="78" width="505" height="14" font="4">steps: (1) Compute New Positions, (2) Retrieve Errant Probes, (3) Evaluate Objective</text>
<text top="477" left="78" width="505" height="14" font="4">Function, and (4) Update Acceleration. Each of these steps was examined regard-</text>
<text top="495" left="78" width="505" height="14" font="4">ing its computational complexity and the average percentage of computational time</text>
<text top="513" left="78" width="505" height="14" font="4">it took during a normal run. In this case, all test functions were ﬁrst examined us-</text>
<text top="532" left="78" width="505" height="14" font="4">ing the PF-CFO algorithm. The resulting choices for parameters were then used for</text>
<text top="550" left="78" width="505" height="14" font="4">benchmarking the PR-CFO algorithm where the amount of time spent in each step</text>
<text top="568" left="78" width="404" height="14" font="4">was averaged over all functions. This analysis is detailed in Table</text>
<text top="568" left="487" width="7" height="14" font="8"><a href="pdfxml.html#8">3</a></text>
<text top="568" left="494" width="89" height="14" font="4">. Note that the</text>
<text top="586" left="78" width="297" height="14" font="4">overall worst case complexity of PR-CFO is O(N</text>
<text top="584" left="376" width="6" height="10" font="0">2</text>
<text top="593" left="374" width="7" height="10" font="5">p</text>
<text top="583" left="385" width="26" height="19" font="3">× N</text>
<text top="583" left="412" width="6" height="10" font="0">2</text>
<text top="594" left="411" width="6" height="10" font="5">d</text>
<text top="587" left="419" width="6" height="13" font="3">)</text>
<text top="583" left="427" width="41" height="19" font="3">= O(n</text>
<text top="584" left="469" width="6" height="10" font="0">4</text>
<text top="587" left="475" width="6" height="13" font="3">)</text>
<text top="586" left="485" width="98" height="14" font="4">in step (4) of the</text>
<text top="605" left="78" width="505" height="14" font="4">algorithm. This is also demonstrated by the severe percentage of computational time</text>
<text top="623" left="78" width="505" height="14" font="4">that is taken by this same step, 99% on average. This analysis clearly shows that the</text>
<text top="641" left="78" width="505" height="14" font="4">most intensive computational step is step (4). For this reason, the focus of this work</text>
<text top="659" left="78" width="323" height="14" font="4">is the parallelization of step (4) of the CFO algorithm.</text>
<text top="678" left="96" width="487" height="14" font="4">The original C++ code that was used for benchmarking the PR-CFO algorithm</text>
<text top="696" left="78" width="119" height="14" font="4">is shown in Listing</text>
<text top="696" left="203" width="7" height="14" font="8"><a href="pdfxml.html#9">1</a></text>
<text top="696" left="216" width="367" height="14" font="4">where j is the current iteration, Alpha is the α value, Beta</text>
<text top="714" left="78" width="505" height="14" font="4">is the β value, and U () is the unit step function. Note the four loops that lead to a</text>
<text top="733" left="78" width="115" height="14" font="4">complexity of O(n</text>
<text top="730" left="193" width="6" height="10" font="0">4</text>
<text top="733" left="199" width="6" height="13" font="3">)</text>
<text top="733" left="205" width="378" height="14" font="4">. In order to translate this C++ code into CUDA, the two outer</text>
<text top="751" left="78" width="505" height="14" font="4">loops are mapped to two of the essential CUDA constructs: Blocks and threads. The</text>
<text top="769" left="78" width="505" height="14" font="4">two outermost loops translate directly to the number of blocks used and the number</text>
<text top="787" left="78" width="138" height="14" font="4">of threads per block (N</text>
<text top="792" left="215" width="7" height="10" font="5">p</text>
<text top="787" left="227" width="84" height="14" font="4">blocks with N</text>
<text top="792" left="311" width="6" height="10" font="5">d</text>
<text top="787" left="321" width="261" height="14" font="4">threads per block). This eliminates the outer</text>
<text top="806" left="78" width="505" height="14" font="4">two loops, and the variables p and i are replaced by <i>blockIdx</i>.<i>x </i>and <i>threadIdx</i>.<i>x</i>. This</text>
<text top="824" left="78" width="505" height="14" font="4">mapping is used as it is highly parallel (each block is assigned a single probe and</text>
<text top="842" left="78" width="505" height="14" font="4">each thread a single dimension). In order to clearly demonstrate the changes made</text>
<text top="860" left="78" width="505" height="14" font="4">when moving the serial code to CUDA, the original code for the PR-CFO algorithm</text>
<text top="879" left="78" width="114" height="14" font="4">is shown in Listing</text>
<text top="879" left="195" width="7" height="14" font="8"><a href="pdfxml.html#9">1</a></text>
<text top="879" left="203" width="380" height="14" font="4"><a href="pdfxml.html#9">. </a>The code (including all kernels) used to implement the CUDA</text>
<text top="897" left="78" width="261" height="14" font="4">version of the algorithm is shown in Listing</text>
<text top="897" left="343" width="7" height="14" font="8"><a href="pdfxml.html#10">2</a></text>
<text top="897" left="350" width="4" height="14" font="4">.</text>
</page>
<page number="9" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="96" left="84" width="6" height="11" font="0">1</text>
<text top="96" left="106" width="213" height="11" font="10"><b>f o r </b>( <b>i n t </b>p = 0 ; p &lt; Np ; p ++) {</text>
<text top="111" left="84" width="6" height="11" font="0">2</text>
<text top="111" left="121" width="54" height="11" font="10"><b>f o r </b>( <b>i n t</b></text>
<text top="111" left="185" width="97" height="11" font="0">i = 0 ; i &lt; Nd ;</text>
<text top="111" left="293" width="40" height="11" font="0">i ++) {</text>
<text top="125" left="84" width="6" height="11" font="0">3</text>
<text top="139" left="84" width="6" height="11" font="0">4</text>
<text top="139" left="133" width="107" height="11" font="0">A[ p ] [ i ] [ j ] = 0 ;</text>
<text top="153" left="84" width="6" height="11" font="0">5</text>
<text top="167" left="84" width="6" height="11" font="0">6</text>
<text top="167" left="135" width="213" height="11" font="10"><b>f o r </b>( <b>i n t </b>k = 0 ; k &lt; Np ; k ++) {</text>
<text top="182" left="84" width="6" height="11" font="0">7</text>
<text top="182" left="150" width="10" height="11" font="10"><b>i f</b></text>
<text top="182" left="171" width="69" height="11" font="0">( k ! = p ) {</text>
<text top="196" left="84" width="6" height="11" font="0">8</text>
<text top="196" left="162" width="84" height="11" font="0">SumSQ = 0 . 0 ;</text>
<text top="210" left="84" width="6" height="11" font="0">9</text>
<text top="224" left="78" width="12" height="11" font="0">10</text>
<text top="224" left="164" width="213" height="11" font="10"><b>f o r </b>( <b>i n t </b>L = 0 ; L &lt; Nd ; L++) {</text>
<text top="238" left="78" width="12" height="11" font="0">11</text>
<text top="238" left="176" width="214" height="11" font="0">SumSQ = SumSQ + pow ( R [ k ] [ L ] [ j ]</text>
<text top="235" left="397" width="121" height="16" font="5">− R[ p ] [ L ] [ j ] , 2 ) ;</text>
<text top="253" left="78" width="12" height="11" font="0">12</text>
<text top="253" left="163" width="6" height="11" font="0">}</text>
<text top="267" left="78" width="12" height="11" font="0">13</text>
<text top="267" left="164" width="104" height="11" font="10"><b>i f </b>( SumSQ ! = 0 ) {</text>
<text top="281" left="78" width="12" height="11" font="0">14</text>
<text top="281" left="176" width="141" height="11" font="0">Denom = s q r t ( SumSQ ) ;</text>
<text top="295" left="78" width="12" height="11" font="0">15</text>
<text top="295" left="178" width="62" height="11" font="0">N u m e r a t o r</text>
<text top="295" left="263" width="77" height="11" font="0">= U(M[ k ] [ j ]</text>
<text top="292" left="347" width="78" height="16" font="5">− M[ p ] [ j ] ) ;</text>
<text top="309" left="78" width="12" height="11" font="0">16</text>
<text top="309" left="178" width="62" height="11" font="0">N u m e r a t o r</text>
<text top="306" left="256" width="169" height="16" font="5">∗= (M[ k ] [ j ] − M[ p ] [ j ] ) ;</text>
<text top="324" left="78" width="12" height="11" font="0">17</text>
<text top="324" left="176" width="178" height="11" font="0">A[ p ] [ i ] [ j ] += ( R [ k ] [ i ] [ j ]</text>
<text top="321" left="361" width="93" height="16" font="5">− R[ p ] [ i ] [ j ] )</text>
<text top="338" left="78" width="12" height="11" font="0">18</text>
<text top="335" left="263" width="277" height="16" font="5">∗ pow ( Numerator , Alpha ) / pow ( Denom , Beta ) ;</text>
<text top="352" left="78" width="12" height="11" font="0">19</text>
<text top="352" left="163" width="6" height="11" font="0">}</text>
<text top="366" left="78" width="12" height="11" font="0">20</text>
<text top="366" left="148" width="6" height="11" font="0">}</text>
<text top="380" left="78" width="12" height="11" font="0">21</text>
<text top="380" left="134" width="6" height="11" font="0">}</text>
<text top="394" left="78" width="12" height="11" font="0">22</text>
<text top="394" left="120" width="6" height="11" font="0">}</text>
<text top="409" left="78" width="12" height="11" font="0">23</text>
<text top="409" left="105" width="6" height="11" font="0">}</text>
<text top="439" left="78" width="458" height="11" font="10"><b>Listing 1 </b>Serial code used for calculating acceleration in the PF-CFO and PR-CFO algorithms</text>
<text top="508" left="78" width="120" height="14" font="4">4.2 Memory access</text>
<text top="548" left="78" width="505" height="14" font="4">In terms of memory access, one way of improving performance is through the use</text>
<text top="567" left="78" width="152" height="14" font="4">of memory coalescence <a href="pdfxml.html#21">[</a></text>
<text top="567" left="229" width="15" height="14" font="8"><a href="pdfxml.html#21">16</a></text>
<text top="567" left="244" width="4" height="14" font="4">,</text>
<text top="567" left="252" width="15" height="14" font="8"><a href="pdfxml.html#21">17</a></text>
<text top="567" left="267" width="316" height="14" font="4">]. The concept of memory coalescence suggests that</text>
<text top="585" left="78" width="505" height="14" font="4">memory locations should be read sequentially by each consecutive thread in any given</text>
<text top="603" left="78" width="505" height="14" font="4">warp. Within the CFO algorithm, this is a difﬁcult task to accomplish due to the na-</text>
<text top="622" left="78" width="505" height="14" font="4">ture of the algorithm. It appears that noncoalesced memory access occurs multiple</text>
<text top="640" left="78" width="386" height="14" font="4">times in this algorithm (e.g., line 20 and lines 25–28 in Listing</text>
<text top="640" left="469" width="7" height="14" font="8"><a href="pdfxml.html#10">2</a></text>
<text top="640" left="476" width="106" height="14" font="4">). While each oc-</text>
<text top="658" left="78" width="505" height="14" font="4">currence of noncoalesced memory reads involve different variables, the basic prob-</text>
<text top="677" left="78" width="505" height="14" font="4">lem remains the same in all instances. Take, for example, the occurrence on line 20.</text>
<text top="695" left="78" width="505" height="14" font="4">The CFO algorithm simultaneously needs to access dimension L of both the current</text>
<text top="713" left="78" width="505" height="14" font="4">probe (probe p) and a different probe (probe k). On one hand, this causes a decrease</text>
<text top="732" left="78" width="505" height="14" font="4">in performance as it is a noncoalesced read from memory. Obviously, dimension L of</text>
<text top="750" left="78" width="505" height="14" font="4">probe p cannot be spatially located next to dimension L of each probe k in memory.</text>
<text top="768" left="78" width="505" height="14" font="4">On the other hand, every thread in a given warp is accessing one unique memory lo-</text>
<text top="787" left="78" width="56" height="14" font="4">cation (R</text>
<text top="783" left="134" width="449" height="19" font="3">[p ∗ <i>Nd </i>+ L]) while also accessing one memory location that is not unique</text>
<text top="805" left="78" width="16" height="14" font="4">(R</text>
<text top="801" left="94" width="489" height="19" font="3">[k ∗<i>Nd</i>+L]). In this case, this type of memory access does not lead to a severe drop</text>
<text top="823" left="78" width="505" height="14" font="4">in performance. This is mainly because parameters passed to __<i>global</i>__ kernels are</text>
<text top="842" left="78" width="481" height="14" font="4">passed to the device via constant memory in devices of compute capability 2.x <a href="pdfxml.html#21">[</a></text>
<text top="842" left="559" width="15" height="14" font="8"><a href="pdfxml.html#21">17</a></text>
<text top="842" left="574" width="9" height="14" font="4">].</text>
<text top="860" left="78" width="505" height="14" font="4">This results in two beneﬁts: A single read from this type of memory can be broadcast</text>
<text top="879" left="78" width="505" height="14" font="4">to nearby threads in order to reduce memory reads and this type of memory is cached,</text>
<text top="897" left="78" width="434" height="14" font="4">so consecutive reads of the same location do not incur additional costs [</text>
<text top="897" left="512" width="15" height="14" font="8"><a href="pdfxml.html#21">22</a></text>
<text top="897" left="527" width="56" height="14" font="4"><a href="pdfxml.html#21">]. </a>By this</text>
</page>
<page number="10" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="96" left="84" width="6" height="11" font="0">1</text>
<text top="96" left="106" width="335" height="11" font="0">_ _ h o s t _ _ _ _ d e v i c e _ _ <b>d o u b l e </b>U n i t S t e p ( <b>d o u b l e </b>X) {</text>
<text top="111" left="84" width="6" height="11" font="0">2</text>
<text top="111" left="136" width="82" height="11" font="10"><b>i f </b>(X &lt; 0 . 0 ) {</text>
<text top="125" left="84" width="6" height="11" font="0">3</text>
<text top="125" left="163" width="75" height="11" font="10"><b>r e t u r n </b>0 . 0 ;</text>
<text top="139" left="84" width="6" height="11" font="0">4</text>
<text top="139" left="134" width="6" height="11" font="0">}</text>
<text top="153" left="84" width="6" height="11" font="0">5</text>
<text top="153" left="135" width="75" height="11" font="10"><b>r e t u r n </b>1 . 0 ;</text>
<text top="167" left="84" width="6" height="11" font="0">6</text>
<text top="167" left="105" width="6" height="11" font="0">}</text>
<text top="182" left="84" width="6" height="11" font="0">7</text>
<text top="182" left="106" width="234" height="11" font="0">_ _ g l o b a l _ _ <b>v o i d </b>c a l c u l a t e A ( <b>d o u b l e</b></text>
<text top="179" left="349" width="177" height="16" font="5">∗R , <b>double </b>∗A, <b>double </b>∗M,</text>
<text top="196" left="84" width="6" height="11" font="0">8</text>
<text top="196" left="300" width="46" height="11" font="10"><b>i n t </b>Np ,</text>
<text top="196" left="358" width="147" height="11" font="10"><b>i n t </b>Nd , <b>d o u b l e </b>Alpha ,</text>
<text top="210" left="84" width="6" height="11" font="0">9</text>
<text top="210" left="299" width="90" height="11" font="10"><b>d o u b l e </b>B e t a ) {</text>
<text top="224" left="78" width="12" height="11" font="0">10</text>
<text top="238" left="78" width="12" height="11" font="0">11</text>
<text top="238" left="135" width="132" height="11" font="10"><b>i n t </b>p = b l o c k I d x . x ;</text>
<text top="238" left="279" width="9" height="11" font="13"><i>/ /</i></text>
<text top="238" left="300" width="90" height="11" font="13"><i>C u r r e n t B l o c k</i></text>
<text top="253" left="78" width="12" height="11" font="0">12</text>
<text top="253" left="135" width="18" height="11" font="10"><b>i n t</b></text>
<text top="253" left="164" width="111" height="11" font="0">i = t h r e a d I d x . x ;</text>
<text top="253" left="286" width="9" height="11" font="13"><i>/ /</i></text>
<text top="253" left="307" width="98" height="11" font="13"><i>C u r r e n t T h r e a d</i></text>
<text top="267" left="78" width="12" height="11" font="0">13</text>
<text top="267" left="135" width="219" height="11" font="10"><b>d o u b l e </b>SumSQ , N u m e r a t o r , Denom ;</text>
<text top="281" left="78" width="12" height="11" font="0">14</text>
<text top="295" left="78" width="12" height="11" font="0">15</text>
<text top="295" left="133" width="22" height="11" font="0">A[ p</text>
<text top="292" left="155" width="77" height="16" font="5">∗Nd+ i ] = 0 ;</text>
<text top="309" left="78" width="12" height="11" font="0">16</text>
<text top="309" left="135" width="198" height="11" font="10"><b>f o r </b>( <b>i n t </b>k = 0 ; k &lt; Np ; k + + ) {</text>
<text top="324" left="78" width="12" height="11" font="0">17</text>
<text top="324" left="164" width="83" height="11" font="10"><b>i f </b>( k ! = p ) {</text>
<text top="338" left="78" width="12" height="11" font="0">18</text>
<text top="338" left="190" width="84" height="11" font="0">SumSQ = 0 . 0 ;</text>
<text top="352" left="78" width="12" height="11" font="0">19</text>
<text top="352" left="192" width="205" height="11" font="10"><b>f o r </b>( <b>i n t </b>L = 0 ; L &lt; Nd ; L+ + ) {</text>
<text top="366" left="78" width="12" height="11" font="0">20</text>
<text top="366" left="219" width="114" height="11" font="0">SumSQ += pow ( R [ k</text>
<text top="363" left="335" width="148" height="16" font="5">∗Nd+L]−R[ p∗Nd+L ] , 2 ) ;</text>
<text top="380" left="78" width="12" height="11" font="0">21</text>
<text top="380" left="191" width="6" height="11" font="0">}</text>
<text top="394" left="78" width="12" height="11" font="0">22</text>
<text top="409" left="78" width="12" height="11" font="0">23</text>
<text top="409" left="193" width="104" height="11" font="10"><b>i f </b>( SumSQ ! = 0 ) {</text>
<text top="423" left="78" width="12" height="11" font="0">24</text>
<text top="423" left="219" width="141" height="11" font="0">Denom = s q r t ( SumSQ ) ;</text>
<text top="437" left="78" width="12" height="11" font="0">25</text>
<text top="437" left="221" width="133" height="11" font="0">N u m e r a t o r = U ( (M[ k ]</text>
<text top="434" left="361" width="63" height="16" font="5">− M[ p ] ) ) ;</text>
<text top="451" left="78" width="12" height="11" font="0">26</text>
<text top="451" left="221" width="62" height="11" font="0">N u m e r a t o r</text>
<text top="448" left="292" width="119" height="16" font="5">∗= (M[ k ] − M[ p ] ) ;</text>
<text top="465" left="78" width="12" height="11" font="0">27</text>
<text top="465" left="219" width="22" height="11" font="0">A[ p</text>
<text top="462" left="241" width="234" height="16" font="5">∗Nd+ i ] += (R[ k∗Nd+ i ] − R[ p∗Nd+ i ] )</text>
<text top="480" left="78" width="12" height="11" font="0">28</text>
<text top="477" left="299" width="284" height="16" font="5">∗ pow ( Numerator , Alpha ) / ( pow ( Denom , Beta ) ;</text>
<text top="494" left="78" width="12" height="11" font="0">29</text>
<text top="494" left="191" width="6" height="11" font="0">}</text>
<text top="508" left="78" width="12" height="11" font="0">30</text>
<text top="522" left="78" width="12" height="11" font="0">31</text>
<text top="522" left="163" width="6" height="11" font="0">}</text>
<text top="536" left="78" width="12" height="11" font="0">32</text>
<text top="536" left="134" width="6" height="11" font="0">}</text>
<text top="551" left="78" width="12" height="11" font="0">33</text>
<text top="551" left="105" width="6" height="11" font="0">}</text>
<text top="581" left="78" width="477" height="11" font="10"><b>Listing 2 </b>Kernel functions used for calculating acceleration for PF-CFO and PR-CFO on the GPU</text>
<text top="639" left="78" width="505" height="14" font="4">reasoning, when all of the threads in a given warp access dimension L of probes k and</text>
<text top="657" left="78" width="9" height="13" font="3">p</text>
<text top="657" left="91" width="476" height="14" font="4">simultaneously, this is considered as two, single reads instead of multiple reads.</text>
<text top="674" left="96" width="487" height="14" font="4">Shared memory may also be considered as a good option for storing some of</text>
<text top="692" left="78" width="505" height="14" font="4">the data in the CFO algorithm. While this appears to be good practice, in terms of</text>
<text top="709" left="78" width="505" height="14" font="4">the CFO algorithm it is not for a good reason: The majority of reads in the CUDA</text>
<text top="727" left="78" width="505" height="14" font="4">kernel are concerned with multiple threads reading identical memory locations. In</text>
<text top="745" left="78" width="505" height="14" font="4">fact, the only two memory locations that are not read simultaneously by all threads</text>
<text top="762" left="78" width="192" height="14" font="4">in a given warp or block are R</text>
<text top="759" left="270" width="313" height="19" font="3">[p ∗ <i>Nd </i>+ i] and A[p ∗ <i>Nd </i>+ i]. As parameters of</text>
<text top="780" left="78" width="505" height="14" font="4">compute capability 2.x are already passed into the kernel via constant memory, they</text>
<text top="797" left="78" width="505" height="14" font="4">are optimized for this type of read-access. Thus, any change in the structure of this</text>
<text top="815" left="78" width="340" height="14" font="4">algorithm may actually cause a decrease in performance.</text>
<text top="847" left="78" width="90" height="14" font="4">4.3 Scalability</text>
<text top="879" left="78" width="505" height="14" font="4">One objection that may be raised regarding this implementation is that it is only scal-</text>
<text top="897" left="78" width="505" height="14" font="4">able up to 1,024 dimensions. For problems larger than 1,024 dimensions, it will be</text>
</page>
<page number="11" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="84" left="78" width="505" height="14" font="4">necessary to pursue 1 of 3 options: (1) Map a single probe to a single thread, (2) Ad-</text>
<text top="102" left="78" width="505" height="14" font="4">just the algorithm so that each thread processes multiple dimensions, or (3) Allow a</text>
<text top="120" left="78" width="505" height="14" font="4">single probe to cover multiple blocks (e.g. dimensions 1–1,024 would be assigned to</text>
<text top="138" left="78" width="505" height="14" font="4">threads in block 1, dimensions 1,025–1,500 would be assigned to threads in block 2,</text>
<text top="156" left="78" width="505" height="14" font="4">etc.). In any case, the authors suggest that special efforts should be made to achieve</text>
<text top="174" left="78" width="489" height="14" font="4">roughly a 50% block occupancy. This suggestion is based on the ﬁndings in [</text>
<text top="174" left="567" width="7" height="14" font="8"><a href="pdfxml.html#20">2</a></text>
<text top="174" left="574" width="9" height="14" font="4">],</text>
<text top="192" left="78" width="423" height="14" font="4">where it is noted that this level of occupancy produces superior results.</text>
<text top="228" left="78" width="117" height="14" font="4">4.4 Divergent code</text>
<text top="264" left="78" width="311" height="14" font="4">When examining the CUDA code shown in Listing</text>
<text top="264" left="393" width="7" height="14" font="8"><a href="pdfxml.html#10">2</a></text>
<text top="264" left="401" width="182" height="14" font="4"><a href="pdfxml.html#10">, </a>there are 3 apparent paths of</text>
<text top="281" left="78" width="505" height="14" font="4">divergence that may hinder performance. The ﬁrst apparent divergence occurs on line</text>
<text top="299" left="78" width="505" height="14" font="4">17 of the code where a single probe is prevented from inﬂuencing its own trajectory</text>
<text top="317" left="78" width="505" height="14" font="4">as it travels through the search space. This divergent path will be taken 1 time by</text>
<text top="335" left="78" width="505" height="14" font="4">each thread during each kernel call. Furthermore, this divergent path will be taken</text>
<text top="353" left="78" width="505" height="14" font="4">simultaneously by all threads in each warp, as the value of p is the same for every</text>
<text top="371" left="78" width="505" height="14" font="4">thread in a warp. This means that while there appears to be a divergent path in the</text>
<text top="389" left="78" width="205" height="14" font="4">code, no actual divergence occurs.</text>
<text top="407" left="96" width="487" height="14" font="4">The second apparent divergence occurs on line 23 of the code. This is also not</text>
<text top="425" left="78" width="505" height="14" font="4">a true divergence as the value of <i>SumSQ </i>should be identical for each thread in a</text>
<text top="443" left="78" width="505" height="14" font="4">warp/block. Also, this condition should not occur often as the <i>SumSQ </i>variable equals</text>
<text top="461" left="78" width="450" height="14" font="4">zero only when two probes occupy the same location in the search space <a href="pdfxml.html#21">[</a></text>
<text top="461" left="528" width="15" height="14" font="8"><a href="pdfxml.html#21">10</a></text>
<text top="461" left="543" width="40" height="14" font="4">]. This</text>
<text top="479" left="78" width="505" height="14" font="4">is believed to be a rare occurrence. Due to its rare occurrence and the fact that each</text>
<text top="497" left="78" width="505" height="14" font="4">thread will continue to follow the same path, this should not be a major hindrance to</text>
<text top="515" left="78" width="79" height="14" font="4">performance.</text>
<text top="533" left="96" width="487" height="14" font="4">The ﬁnal divergence occurs inside the <i>UnitStep </i>kernel. While this again appears to</text>
<text top="551" left="78" width="505" height="14" font="4">be divergent code, any given warp of threads should never diverge for a similar reason</text>
<text top="569" left="78" width="505" height="14" font="4">to the apparent ﬁrst and second divergences. As each warp should be examining the</text>
<text top="586" left="78" width="392" height="14" font="4">same probe at the same time, the difference in ﬁtness values (M</text>
<text top="583" left="471" width="112" height="19" font="3">[k][j] − M[p][j])</text>
<text top="604" left="78" width="505" height="14" font="4">passed into the <i>UnitStep </i>kernel should be identical for each thread in a given warp</text>
<text top="622" left="78" width="496" height="14" font="4">and block. This suggests that no divergence will occur when this function is called.</text>
<text top="676" left="78" width="171" height="14" font="2"><b>5 Evaluation methodology</b></text>
<text top="712" left="78" width="505" height="14" font="4">When implementing metaheuristic algorithms, it is very important to have a clear</text>
<text top="730" left="78" width="505" height="14" font="4">method of measuring the beneﬁt provided by the algorithms. This study will focus</text>
<text top="748" left="78" width="410" height="14" font="4">on multiple criteria including speedup and total computational time [</text>
<text top="748" left="488" width="7" height="14" font="8"><a href="pdfxml.html#20">1</a></text>
<text top="748" left="495" width="88" height="14" font="4">]. Speedup is a</text>
<text top="766" left="78" width="217" height="14" font="4">well-known metric that is deﬁned as</text>
<text top="804" left="307" width="6" height="13" font="3">s</text>
<text top="800" left="317" width="12" height="19" font="3">=</text>
<text top="793" left="335" width="8" height="13" font="3">T</text>
<text top="798" left="343" width="6" height="10" font="0">1</text>
<text top="814" left="334" width="8" height="13" font="3">T</text>
<text top="819" left="342" width="9" height="10" font="5">m</text>
<text top="803" left="565" width="17" height="14" font="4">(9)</text>
<text top="843" left="78" width="50" height="14" font="4">where T</text>
<text top="848" left="128" width="6" height="10" font="0">1</text>
<text top="843" left="140" width="395" height="14" font="4">is the execution time on a single processor, core, or node and T</text>
<text top="848" left="534" width="9" height="10" font="5">m</text>
<text top="843" left="549" width="34" height="14" font="4">is the</text>
<text top="861" left="78" width="410" height="14" font="4">execution time on m processors, cores, or nodes. As is shown in [</text>
<text top="861" left="488" width="7" height="14" font="8"><a href="pdfxml.html#20">1</a></text>
<text top="861" left="495" width="87" height="14" font="4">], this is not a</text>
<text top="879" left="78" width="505" height="14" font="4">valid comparison for nondeterministic algorithms including other population based</text>
<text top="897" left="78" width="505" height="14" font="4">metaheuristics. The use of the CFO algorithm allows the use of this metric as the</text>
</page>
<page number="12" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="79" left="78" width="113" height="11" font="10"><b>Table 4 </b>Test functions</text>
<text top="89" left="252" width="29" height="11" font="0">Name</text>
<text top="89" left="330" width="47" height="11" font="0">Alt. name</text>
<text top="89" left="437" width="10" height="11" font="0">(x</text>
<text top="93" left="447" width="16" height="9" font="12">min</text>
<text top="89" left="463" width="12" height="11" font="0">, x</text>
<text top="92" left="475" width="18" height="9" font="12">max</text>
<text top="89" left="493" width="4" height="11" font="0">)</text>
<text top="89" left="547" width="36" height="11" font="0">Optima</text>
<text top="121" left="252" width="8" height="11" font="5">F</text>
<text top="125" left="260" width="5" height="9" font="12">1</text>
<text top="121" left="330" width="33" height="11" font="0">Sphere</text>
<text top="121" left="437" width="4" height="11" font="0">(</text>
<text top="118" left="441" width="55" height="16" font="5">−100, 100)</text>
<text top="121" left="547" width="21" height="11" font="0">0.00</text>
<text top="140" left="252" width="8" height="11" font="5">F</text>
<text top="143" left="260" width="5" height="9" font="12">2</text>
<text top="140" left="330" width="44" height="11" font="0">Rastrigin</text>
<text top="140" left="437" width="4" height="11" font="0">(</text>
<text top="137" left="441" width="43" height="16" font="5">−10, 10)</text>
<text top="140" left="547" width="21" height="11" font="0">0.00</text>
<text top="158" left="252" width="8" height="11" font="5">F</text>
<text top="162" left="260" width="5" height="9" font="12">3</text>
<text top="158" left="330" width="47" height="11" font="0">Griewank</text>
<text top="158" left="437" width="4" height="11" font="0">(</text>
<text top="155" left="441" width="55" height="16" font="5">−600, 600)</text>
<text top="158" left="547" width="21" height="11" font="0">0.00</text>
<text top="177" left="252" width="8" height="11" font="5">F</text>
<text top="180" left="260" width="5" height="9" font="12">4</text>
<text top="176" left="330" width="57" height="11" font="0">Rosenbrock</text>
<text top="176" left="437" width="4" height="11" font="0">(</text>
<text top="173" left="441" width="43" height="16" font="5">−10, 10)</text>
<text top="176" left="547" width="21" height="11" font="0">0.00</text>
<text top="227" left="78" width="505" height="14" font="4">algorithm is completely deterministic. The total computational time using CUDA on</text>
<text top="244" left="78" width="505" height="14" font="4">the GPU will also be compared to all serial algorithms. This comparison is made as</text>
<text top="262" left="78" width="505" height="14" font="4">the goal of the proposed method is the improvement of the computational time of</text>
<text top="280" left="78" width="33" height="14" font="4">CFO.</text>
<text top="298" left="96" width="487" height="14" font="4">In order to examine the effect of parallelization via CUDA, four basic test func-</text>
<text top="316" left="78" width="316" height="14" font="4">tions were chosen based on the work completed in [</text>
<text top="316" left="394" width="15" height="14" font="8"><a href="pdfxml.html#21">23</a></text>
<text top="316" left="409" width="136" height="14" font="4"><a href="pdfxml.html#21">] </a>and detailed in Table</text>
<text top="316" left="549" width="7" height="14" font="8"><a href="pdfxml.html#12">4</a></text>
<text top="316" left="561" width="22" height="14" font="4">and</text>
<text top="334" left="78" width="5" height="14" font="4">(</text>
<text top="334" left="83" width="15" height="14" font="8"><a href="pdfxml.html#12">10</a></text>
<text top="334" left="98" width="17" height="14" font="4"><a href="pdfxml.html#12">)–(</a></text>
<text top="334" left="115" width="15" height="14" font="8"><a href="pdfxml.html#12">13</a></text>
<text top="334" left="130" width="453" height="14" font="4">). Optimal sets of parameters were ﬁrst determined for each algorithm us-</text>
<text top="352" left="78" width="443" height="14" font="4">ing both serial and CUDA based versions of PF-CFO as developed in [</text>
<text top="352" left="521" width="15" height="14" font="8"><a href="pdfxml.html#21">10</a></text>
<text top="352" left="536" width="47" height="14" font="4"><a href="pdfxml.html#21">] </a>where</text>
<text top="370" left="78" width="11" height="13" font="3">N</text>
<text top="375" left="89" width="3" height="10" font="5">t</text>
<text top="366" left="97" width="193" height="19" font="3">= 1,000, α = 1, β = 2, and F</text>
<text top="374" left="291" width="15" height="10" font="0">rep</text>
<text top="366" left="310" width="273" height="19" font="3">= 0.1. Once appropriate parameters were de-</text>
<text top="387" left="78" width="505" height="14" font="4">termined using the serial and CUDA versions of PF-CFO, the serial and CUDA based</text>
<text top="405" left="78" width="505" height="14" font="4">versions of the PR-CFO algorithm were run 10 times each using parameters selected</text>
<text top="423" left="78" width="505" height="14" font="4">by the corresponding version of the PF-CFO algorithm. Each algorithm was run us-</text>
<text top="441" left="78" width="505" height="14" font="4">ing varying dimensions ranging from 10–50. This study reports average values in all</text>
<text top="459" left="78" width="505" height="14" font="4">cases referring to PR-CFO. Values reported for PF-CFO are based on single runs due</text>
<text top="477" left="78" width="114" height="14" font="4">to time constraints.</text>
<text top="495" left="96" width="487" height="14" font="4">All simulations were run on a Lenovo W520 with a 64-bit version of Win-</text>
<text top="512" left="78" width="505" height="14" font="4">dows 7, Visual Studio 2010, an Intel Core I7 @ 2.20 GHz, 8 GB RAM, and</text>
<text top="530" left="78" width="505" height="14" font="4">a NVIDIA Quadro 1000M using the CUDA Toolkit version 4.0. The CFO al-</text>
<text top="548" left="78" width="505" height="14" font="4">gorithm was implemented in C++ using an IPD of Uniform-On-Axis. Care was</text>
<text top="566" left="78" width="505" height="14" font="4">taken to implement efﬁcient versions of all algorithms and double precision vari-</text>
<text top="584" left="78" width="505" height="14" font="4">ables were used in all cases. Full optimization was turned on during compilation.</text>
<text top="602" left="78" width="505" height="14" font="4">NVCC was invoked using the following options in oder to ensure compliance with</text>
<text top="620" left="78" width="505" height="14" font="4">IEEE-754 and the use of double precision: “–prec-div=true -prec-sqrt=true -ftz=false</text>
<text top="638" left="78" width="353" height="14" font="4">-gencode=arch=compute_20,code=“sm_20,compute_20””.</text>
<text top="685" left="294" width="9" height="13" font="3">F</text>
<text top="690" left="304" width="6" height="10" font="0">1</text>
<text top="681" left="313" width="12" height="19" font="3">=</text>
<text top="669" left="335" width="6" height="10" font="5">d</text>
<text top="706" left="329" width="3" height="10" font="5">i</text>
<text top="703" left="334" width="15" height="15" font="5">=1</text>
<text top="685" left="351" width="7" height="13" font="3">x</text>
<text top="681" left="360" width="6" height="10" font="0">2</text>
<text top="692" left="359" width="3" height="10" font="5">i</text>
<text top="685" left="558" width="25" height="14" font="4">(10)</text>
<text top="744" left="219" width="9" height="13" font="3">F</text>
<text top="749" left="229" width="6" height="10" font="0">2</text>
<text top="740" left="238" width="12" height="19" font="3">=</text>
<text top="728" left="261" width="6" height="10" font="5">d</text>
<text top="765" left="254" width="3" height="10" font="5">i</text>
<text top="762" left="259" width="15" height="15" font="5">=1</text>
<text top="744" left="280" width="7" height="13" font="3">x</text>
<text top="740" left="289" width="6" height="10" font="0">2</text>
<text top="751" left="288" width="3" height="10" font="5">i</text>
<text top="740" left="298" width="94" height="19" font="3">− 10 ∗ cos(2πx</text>
<text top="749" left="392" width="3" height="10" font="5">i</text>
<text top="744" left="397" width="6" height="13" font="3">)</text>
<text top="740" left="406" width="30" height="19" font="3">+ 10</text>
<text top="744" left="558" width="25" height="14" font="4">(11)</text>
<text top="803" left="210" width="9" height="13" font="3">F</text>
<text top="808" left="220" width="6" height="10" font="0">3</text>
<text top="799" left="229" width="12" height="19" font="3">=</text>
<text top="792" left="257" width="7" height="14" font="4">1</text>
<text top="813" left="246" width="30" height="14" font="4">4000</text>
<text top="787" left="287" width="6" height="10" font="5">d</text>
<text top="824" left="281" width="3" height="10" font="5">i</text>
<text top="821" left="285" width="15" height="15" font="5">=1</text>
<text top="803" left="303" width="7" height="13" font="3">x</text>
<text top="799" left="311" width="6" height="10" font="0">2</text>
<text top="810" left="310" width="3" height="10" font="5">i</text>
<text top="799" left="320" width="12" height="19" font="3">−</text>
<text top="787" left="341" width="6" height="10" font="5">d</text>
<text top="824" left="335" width="3" height="10" font="5">i</text>
<text top="821" left="339" width="15" height="15" font="5">=1</text>
<text top="803" left="356" width="33" height="14" font="4">cos x</text>
<text top="808" left="389" width="3" height="10" font="5">i</text>
<text top="803" left="394" width="7" height="13" font="3">/</text>
<text top="786" left="401" width="13" height="19" font="3">√</text>
<text top="803" left="414" width="5" height="13" font="3">i</text>
<text top="799" left="428" width="22" height="19" font="3">+ 1</text>
<text top="803" left="558" width="25" height="14" font="4">(12)</text>
<text top="862" left="211" width="9" height="13" font="3">F</text>
<text top="867" left="220" width="6" height="10" font="0">4</text>
<text top="858" left="230" width="12" height="19" font="3">=</text>
<text top="846" left="244" width="6" height="10" font="5">d</text>
<text top="843" left="251" width="15" height="15" font="5">−1</text>
<text top="883" left="246" width="3" height="10" font="5">i</text>
<text top="880" left="250" width="15" height="15" font="5">=1</text>
<text top="862" left="271" width="36" height="14" font="4">100 x</text>
<text top="867" left="307" width="3" height="10" font="5">i</text>
<text top="864" left="312" width="15" height="15" font="5">+1</text>
<text top="858" left="330" width="22" height="19" font="3">− x</text>
<text top="858" left="353" width="6" height="10" font="0">2</text>
<text top="869" left="352" width="3" height="10" font="5">i</text>
<text top="856" left="365" width="6" height="10" font="0">2</text>
<text top="858" left="374" width="28" height="19" font="3">+ (x</text>
<text top="867" left="402" width="3" height="10" font="5">i</text>
<text top="858" left="410" width="28" height="19" font="3">− 1)</text>
<text top="858" left="438" width="6" height="10" font="0">2</text>
<text top="862" left="558" width="25" height="14" font="4">(13)</text>
</page>
<page number="13" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="79" left="78" width="152" height="11" font="10"><b>Fig. 1 </b>PF-CFO Computational</text>
<text top="93" left="78" width="97" height="11" font="0">time for function F1</text>
<text top="313" left="78" width="149" height="11" font="10"><b>Fig. 2 </b>PF-CFO computational</text>
<text top="327" left="78" width="97" height="11" font="0">time for function F2</text>
<text top="552" left="78" width="158" height="14" font="2"><b>6 Results and discussion</b></text>
<text top="589" left="78" width="505" height="14" font="4">This section will detail the results of implementing the CFO algorithm on the GPU</text>
<text top="607" left="78" width="505" height="14" font="4">using CUDA in terms of computational time, speedup, and solution quality. Some</text>
<text top="625" left="78" width="505" height="14" font="4">comments will also be made regarding the effects of precision on two different as-</text>
<text top="643" left="78" width="389" height="14" font="4">pects of the algorithm: Fitness evaluations and probe corrections.</text>
<text top="680" left="78" width="145" height="14" font="4">6.1 Computational time</text>
<text top="717" left="78" width="505" height="14" font="4">The computational times for the PF-CFO algorithm (both serial and CUDA versions)</text>
<text top="735" left="78" width="111" height="14" font="4">are shown in Figs.</text>
<text top="735" left="193" width="7" height="14" font="8"><a href="pdfxml.html#13">1</a></text>
<text top="735" left="201" width="7" height="14" font="4"><a href="pdfxml.html#13">–</a></text>
<text top="735" left="208" width="7" height="14" font="8"><a href="pdfxml.html#14">4</a></text>
<text top="735" left="215" width="295" height="14" font="4"><a href="pdfxml.html#14">. </a>Concerning the serial version of PF-CFO, Figs.</text>
<text top="735" left="514" width="7" height="14" font="8"><a href="pdfxml.html#13">1</a></text>
<text top="735" left="526" width="22" height="14" font="4">and</text>
<text top="735" left="552" width="7" height="14" font="8"><a href="pdfxml.html#14">3</a></text>
<text top="735" left="564" width="19" height="14" font="4">ex-</text>
<text top="753" left="78" width="505" height="14" font="4">hibit very similar and expected behavior. As the number of dimensions increases, the</text>
<text top="771" left="78" width="505" height="14" font="4">required computational time also increases. A similar trend does not occur in either of</text>
<text top="789" left="78" width="29" height="14" font="4">Figs.</text>
<text top="789" left="111" width="7" height="14" font="8"><a href="pdfxml.html#13">2</a></text>
<text top="789" left="123" width="12" height="14" font="4">or</text>
<text top="789" left="139" width="7" height="14" font="8"><a href="pdfxml.html#14">4</a></text>
<text top="789" left="147" width="436" height="14" font="4"><a href="pdfxml.html#14">. </a>In each of these cases, the change in required computational time when</text>
<text top="807" left="78" width="505" height="14" font="4">going from 30 to 40 dimensions either increases slightly or decreases. In the case</text>
<text top="825" left="78" width="505" height="14" font="4">of F2, the increase (though slight) is expected as the dimensionality has increased.</text>
<text top="843" left="78" width="505" height="14" font="4">Function F4 presents a different case where there is a decrease in computational time</text>
<text top="861" left="78" width="505" height="14" font="4">at 40 dimensions. An empirical examination suggests some reasons for the this phe-</text>
<text top="879" left="78" width="505" height="14" font="4">nomenon. First, when moving from 30 to 40 dimensions, the number of cases exam-</text>
<text top="897" left="78" width="505" height="14" font="4">ined changes as both 4 and 6 probes per dimension are examined for a dimension size</text>
</page>
<page number="14" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="79" left="78" width="149" height="11" font="10"><b>Fig. 3 </b>PF-CFO computational</text>
<text top="93" left="78" width="97" height="11" font="0">time for function F3</text>
<text top="320" left="78" width="149" height="11" font="10"><b>Fig. 4 </b>PF-CFO computational</text>
<text top="334" left="78" width="97" height="11" font="0">time for function F4</text>
<text top="560" left="78" width="151" height="11" font="10"><b>Fig. 5 </b>PR-CFO computational</text>
<text top="574" left="78" width="97" height="11" font="0">time for function F1</text>
<text top="787" left="78" width="505" height="14" font="4">of 30, and a only 4 probes per dimension are used when considering a dimension size</text>
<text top="805" left="78" width="505" height="14" font="4">of 40. This means that more computational time is needed at 30 dimensions than at 40</text>
<text top="824" left="78" width="505" height="14" font="4">or more dimensions as more evaluations occur. Second, this variance in the number</text>
<text top="842" left="78" width="505" height="14" font="4">of probes per axis also effects the IPD and, as previously stated, the CFO algorithm</text>
<text top="860" left="78" width="505" height="14" font="4">is particularly sensitive to IPD, leading to changes in required computational time.</text>
<text top="879" left="78" width="505" height="14" font="4">Some portion of this behavior may also be attributed to the rate of convergence of the</text>
<text top="897" left="78" width="499" height="14" font="4">algorithm, which should differ based on the number of probes per axis and the IPD.</text>
</page>
<page number="15" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="79" left="78" width="151" height="11" font="10"><b>Fig. 6 </b>PR-CFO computational</text>
<text top="93" left="78" width="97" height="11" font="0">time for function F2</text>
<text top="298" left="78" width="151" height="11" font="10"><b>Fig. 7 </b>PR-CFO computational</text>
<text top="312" left="78" width="97" height="11" font="0">time for function F3</text>
<text top="519" left="96" width="487" height="14" font="4">With regards to the CUDA version of PF-CFO, trends in computational time that</text>
<text top="537" left="78" width="505" height="14" font="4">are similar to those found in the serial version are seen. The difference here is that, as</text>
<text top="555" left="78" width="505" height="14" font="4">expected, the CUDA version takes signiﬁcantly less time to converge. As an unique</text>
<text top="573" left="78" width="421" height="14" font="4">example, consider the trend from 30 and 40 dimensions as seen in Fig.</text>
<text top="573" left="503" width="7" height="14" font="8"><a href="pdfxml.html#13">2</a></text>
<text top="573" left="510" width="73" height="14" font="4">. This ﬁgure</text>
<text top="591" left="78" width="505" height="14" font="4">shows that the PF-CFO algorithm has a slight increase in time when going from 30</text>
<text top="609" left="78" width="505" height="14" font="4">to 40 dimensions, while the CUDA version of the same algorithm exhibits a slight</text>
<text top="627" left="78" width="505" height="14" font="4">decrease in computational time. This demonstrates that the CUDA version of PF-</text>
<text top="645" left="78" width="505" height="14" font="4">CFO is able to overcome issues of increased dimensionality while beneﬁting from</text>
<text top="663" left="78" width="505" height="14" font="4">the reduced number of trials run (only cases with 4 probes per axis are examined at</text>
<text top="681" left="78" width="367" height="14" font="4">40 dimensions, as opposed to both 4 and 6 at 30 dimensions).</text>
<text top="699" left="96" width="487" height="14" font="4">Results for the computational times of the PR-CFO algorithm (both serial and</text>
<text top="717" left="78" width="220" height="14" font="4">CUDA versions) are shown in Figs.</text>
<text top="717" left="303" width="7" height="14" font="8"><a href="pdfxml.html#14">5</a></text>
<text top="717" left="311" width="4" height="14" font="4"><a href="pdfxml.html#14">,</a></text>
<text top="717" left="320" width="7" height="14" font="8"><a href="pdfxml.html#15">6</a></text>
<text top="717" left="327" width="4" height="14" font="4">,</text>
<text top="717" left="336" width="7" height="14" font="8"><a href="pdfxml.html#15">7</a></text>
<text top="717" left="344" width="4" height="14" font="4"><a href="pdfxml.html#15">,</a></text>
<text top="717" left="353" width="7" height="14" font="8"><a href="pdfxml.html#16">8</a></text>
<text top="717" left="360" width="223" height="14" font="4">. While the majority of these results</text>
<text top="735" left="78" width="457" height="14" font="4">are as expected, a trend similar to that previously discussed is found in Fig.</text>
<text top="735" left="539" width="7" height="14" font="8"><a href="pdfxml.html#15">7</a></text>
<text top="735" left="550" width="32" height="14" font="4">when</text>
<text top="753" left="78" width="505" height="14" font="4">going from 30 to 40 dimensions. In this case, there is a sharp increase in required</text>
<text top="771" left="78" width="505" height="14" font="4">computational time between 30 and 40 dimensions, and then a sharp decline at the 50</text>
<text top="789" left="78" width="505" height="14" font="4">dimension mark. In the PR-CFO algorithm, it can be assumed that the source of this</text>
<text top="807" left="78" width="505" height="14" font="4">occurrence is tied closely to the value of γ and its inﬂuence over the IPD as coupled</text>
<text top="825" left="78" width="505" height="14" font="4">with the increase in dimensions. The more fascinating behavior is that the PR-CFO</text>
<text top="843" left="78" width="505" height="14" font="4">CUDA algorithm does not exhibit similar behavior. While this may appear to be an</text>
<text top="861" left="78" width="505" height="14" font="4">odd occurrence, in the case of the CFO algorithm it is not. When examining the se-</text>
<text top="879" left="78" width="505" height="14" font="4">rial and CUDA based versions of PR-CFO, it is interesting to ﬁnd that the algorithm</text>
<text top="897" left="78" width="505" height="14" font="4">used to choose the parameters (PF-CFO) converges to a different solutions for the</text>
</page>
<page number="16" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="79" left="78" width="151" height="11" font="10"><b>Fig. 8 </b>PR-CFO computational</text>
<text top="93" left="78" width="97" height="11" font="0">time for function F4</text>
<text top="301" left="78" width="505" height="14" font="4">value of γ . The difference in this value, in turn, inﬂuences the IPD of the serial and</text>
<text top="319" left="78" width="505" height="14" font="4">CUDA based versions, leading to different convergence characteristics. This differ-</text>
<text top="337" left="78" width="505" height="14" font="4">ence most likely occurs for a reason that is tied to the mathematical operations used</text>
<text top="355" left="78" width="313" height="14" font="4">when calculating acceleration in the CFO algorithm.</text>
<text top="373" left="96" width="487" height="14" font="4">When calculating acceleration in the CFO algorithm, two mathematical functions</text>
<text top="391" left="78" width="505" height="14" font="4">are used that may introduce some amount of error into the results—<i>sqrt</i>() and <i>pow</i>().</text>
<text top="409" left="78" width="273" height="14" font="4">According to the CUDA Developer’s Guide <a href="pdfxml.html#21">[</a></text>
<text top="409" left="350" width="15" height="14" font="8"><a href="pdfxml.html#21">17</a></text>
<text top="409" left="365" width="218" height="14" font="4">], both of these functions may intro-</text>
<text top="427" left="78" width="505" height="14" font="4">duce some error into calculations. The calculation of acceleration in the CFO algo-</text>
<text top="445" left="78" width="505" height="14" font="4">rithm is very sensitive to small changes in value as it is based on square roots and ex-</text>
<text top="463" left="78" width="505" height="14" font="4">ponentials. Thus, even small differences in precision result in signiﬁcant differences</text>
<text top="481" left="78" width="505" height="14" font="4">in results concerning computational time and iterations required for convergence.</text>
<text top="499" left="78" width="505" height="14" font="4">This leads to the differing trends that are evident in the serial and parallel versions of</text>
<text top="517" left="78" width="87" height="14" font="4">this algorithm.</text>
<text top="554" left="78" width="78" height="14" font="4">6.2 Speedup</text>
<text top="591" left="78" width="355" height="14" font="4">Speedups for the PF-CFO algorithm are presented in Table</text>
<text top="591" left="437" width="7" height="14" font="8"><a href="pdfxml.html#17">5</a></text>
<text top="591" left="449" width="49" height="14" font="4">and Fig.</text>
<text top="591" left="503" width="7" height="14" font="8"><a href="pdfxml.html#17">9</a></text>
<text top="591" left="510" width="73" height="14" font="4">. In the case</text>
<text top="609" left="78" width="505" height="14" font="4">of each of the four functions, there is a general trend toward a linear speedup, though</text>
<text top="627" left="78" width="64" height="14" font="4">function F</text>
<text top="631" left="142" width="6" height="10" font="0">2</text>
<text top="627" left="153" width="290" height="14" font="4">does not follow this pattern. Instead, function F</text>
<text top="631" left="443" width="6" height="10" font="0">2</text>
<text top="627" left="454" width="129" height="14" font="4">demonstrates a linear</text>
<text top="645" left="78" width="505" height="14" font="4">speedup from 10–40 dimensions and then shows only a slight improvement at 50</text>
<text top="663" left="78" width="505" height="14" font="4">dimensions. This mainly suggests that the PF-CFO algorithm explores less options</text>
<text top="681" left="78" width="505" height="14" font="4">in terms of probes per axis (only 4 instead of 4 and 6) when evaluating parameters</text>
<text top="699" left="78" width="505" height="14" font="4">at both 40 and 50 dimensions, which immediately leads to a decrease in required</text>
<text top="717" left="78" width="505" height="14" font="4">iterations and computational time. While the increase in speedup from 40 to 50 di-</text>
<text top="735" left="78" width="505" height="14" font="4">mensions is not large, greater speedups will most likely be seen at higher dimensions</text>
<text top="753" left="78" width="460" height="14" font="4">due to increased dimensionality. This may also be a symptom of function F</text>
<text top="758" left="538" width="6" height="10" font="0">2</text>
<text top="753" left="549" width="34" height="14" font="4">itself,</text>
<text top="771" left="78" width="505" height="14" font="4">as the algorithm generally experiences a lower speedup due to a higher number of</text>
<text top="789" left="78" width="212" height="14" font="4">iterations required for convergence.</text>
<text top="807" left="96" width="305" height="14" font="4">Concerning PR-CFO, speedups are listed in Table</text>
<text top="807" left="405" width="7" height="14" font="8"><a href="pdfxml.html#17">6</a></text>
<text top="807" left="417" width="166" height="14" font="4">and graphically depicted in</text>
<text top="825" left="78" width="24" height="14" font="4">Fig.</text>
<text top="825" left="105" width="15" height="14" font="8"><a href="pdfxml.html#18">10</a></text>
<text top="825" left="120" width="117" height="14" font="4">. While functions F</text>
<text top="830" left="237" width="6" height="10" font="0">2</text>
<text top="825" left="244" width="17" height="14" font="4">–F</text>
<text top="830" left="261" width="6" height="10" font="0">4</text>
<text top="825" left="271" width="305" height="14" font="4">show a trend towards a generally linear speedup, F</text>
<text top="830" left="576" width="6" height="10" font="0">1</text>
<text top="843" left="78" width="505" height="14" font="4">shows a signiﬁcant speedup of nearly 27 at 30 dimensions and then decreases. This</text>
<text top="861" left="78" width="505" height="14" font="4">mainly occurs due to the characteristics of the CFO algorithm. When considering the</text>
<text top="879" left="78" width="505" height="14" font="4">serial version of PR-CFO at 30 dimensions, 180 probes are used along with a γ value</text>
<text top="897" left="78" width="505" height="14" font="4">of 0.05. This results in 38,700 evaluations and 36,657 probe corrections. In the case</text>
</page>
<page number="17" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="79" left="78" width="126" height="11" font="10"><b>Table 5 </b>Speedups for the</text>
<text top="93" left="78" width="148" height="11" font="0">PF-CFO algorithm by function</text>
<text top="108" left="78" width="70" height="11" font="0">and dimension</text>
<text top="89" left="252" width="9" height="11" font="5">N</text>
<text top="93" left="261" width="5" height="9" font="11">d</text>
<text top="89" left="321" width="42" height="11" font="0">Function</text>
<text top="108" left="321" width="8" height="11" font="5">F</text>
<text top="111" left="329" width="5" height="9" font="12">1</text>
<text top="108" left="401" width="8" height="11" font="5">F</text>
<text top="111" left="409" width="5" height="9" font="12">2</text>
<text top="108" left="475" width="8" height="11" font="5">F</text>
<text top="111" left="483" width="5" height="9" font="12">3</text>
<text top="108" left="555" width="8" height="11" font="5">F</text>
<text top="111" left="563" width="5" height="9" font="12">4</text>
<text top="140" left="252" width="12" height="11" font="0">10</text>
<text top="140" left="327" width="21" height="11" font="0">1.59</text>
<text top="140" left="401" width="21" height="11" font="0">0.72</text>
<text top="140" left="481" width="21" height="11" font="0">1.57</text>
<text top="140" left="561" width="21" height="11" font="0">1.33</text>
<text top="158" left="252" width="12" height="11" font="0">20</text>
<text top="158" left="327" width="21" height="11" font="0">4.14</text>
<text top="158" left="401" width="21" height="11" font="0">4.11</text>
<text top="158" left="481" width="21" height="11" font="0">4.19</text>
<text top="158" left="561" width="21" height="11" font="0">4.04</text>
<text top="176" left="252" width="12" height="11" font="0">30</text>
<text top="176" left="327" width="21" height="11" font="0">7.78</text>
<text top="176" left="401" width="21" height="11" font="0">6.86</text>
<text top="176" left="481" width="21" height="11" font="0">7.28</text>
<text top="176" left="561" width="21" height="11" font="0">7.75</text>
<text top="195" left="252" width="12" height="11" font="0">40</text>
<text top="195" left="321" width="27" height="11" font="0">10.47</text>
<text top="195" left="401" width="21" height="11" font="0">9.57</text>
<text top="195" left="475" width="27" height="11" font="0">16.00</text>
<text top="195" left="561" width="21" height="11" font="0">7.79</text>
<text top="213" left="252" width="12" height="11" font="0">50</text>
<text top="213" left="321" width="27" height="11" font="0">18.80</text>
<text top="213" left="401" width="21" height="11" font="0">9.90</text>
<text top="213" left="475" width="27" height="11" font="0">19.52</text>
<text top="213" left="555" width="27" height="11" font="0">14.01</text>
<text top="258" left="78" width="139" height="11" font="10"><b>Fig. 9 </b>Speedup for PF-CFO</text>
<text top="272" left="78" width="46" height="11" font="0">algorithm</text>
<text top="486" left="78" width="126" height="11" font="10"><b>Table 6 </b>Speedups for the</text>
<text top="500" left="78" width="149" height="11" font="0">PR-CFO algorithm by function</text>
<text top="514" left="78" width="70" height="11" font="0">and dimension</text>
<text top="496" left="252" width="9" height="11" font="5">N</text>
<text top="500" left="261" width="5" height="9" font="11">d</text>
<text top="496" left="319" width="42" height="11" font="0">Function</text>
<text top="514" left="319" width="8" height="11" font="5">F</text>
<text top="518" left="327" width="5" height="9" font="12">1</text>
<text top="514" left="398" width="8" height="11" font="5">F</text>
<text top="518" left="406" width="5" height="9" font="12">2</text>
<text top="514" left="477" width="8" height="11" font="5">F</text>
<text top="518" left="484" width="5" height="9" font="12">3</text>
<text top="514" left="555" width="8" height="11" font="5">F</text>
<text top="518" left="563" width="5" height="9" font="12">4</text>
<text top="546" left="252" width="12" height="11" font="0">10</text>
<text top="546" left="325" width="21" height="11" font="0">0.89</text>
<text top="546" left="404" width="21" height="11" font="0">1.21</text>
<text top="546" left="483" width="21" height="11" font="0">3.83</text>
<text top="546" left="561" width="21" height="11" font="0">0.14</text>
<text top="565" left="252" width="12" height="11" font="0">20</text>
<text top="565" left="325" width="21" height="11" font="0">2.98</text>
<text top="565" left="404" width="21" height="11" font="0">5.41</text>
<text top="565" left="483" width="21" height="11" font="0">5.53</text>
<text top="565" left="561" width="21" height="11" font="0">2.80</text>
<text top="583" left="252" width="12" height="11" font="0">30</text>
<text top="583" left="319" width="27" height="11" font="0">26.78</text>
<text top="583" left="398" width="27" height="11" font="0">12.16</text>
<text top="583" left="483" width="21" height="11" font="0">8.74</text>
<text top="583" left="561" width="21" height="11" font="0">4.66</text>
<text top="601" left="252" width="12" height="11" font="0">40</text>
<text top="601" left="319" width="27" height="11" font="0">12.85</text>
<text top="601" left="398" width="27" height="11" font="0">11.25</text>
<text top="601" left="477" width="27" height="11" font="0">11.68</text>
<text top="601" left="561" width="21" height="11" font="0">8.92</text>
<text top="620" left="252" width="12" height="11" font="0">50</text>
<text top="620" left="319" width="27" height="11" font="0">16.28</text>
<text top="620" left="398" width="27" height="11" font="0">16.21</text>
<text top="620" left="477" width="27" height="11" font="0">16.46</text>
<text top="620" left="555" width="27" height="11" font="0">11.73</text>
<text top="669" left="78" width="505" height="14" font="4">of the CUDA based PR-CFO algorithm, 120 probes are used with a γ value of 0.2</text>
<text top="687" left="78" width="505" height="14" font="4">resulting in 25,200 evaluations and 23,258 probe corrections. This shows that a small</text>
<text top="705" left="78" width="505" height="14" font="4">change in the γ value leads to a signiﬁcant difference in the number of evaluations</text>
<text top="722" left="78" width="505" height="14" font="4">and probe corrections. It is this combination of differing parameters and the reduction</text>
<text top="740" left="78" width="456" height="14" font="4">in evaluations and probe corrections that leads to such a signiﬁcant speedup.</text>
<text top="774" left="78" width="122" height="14" font="4">6.3 Solution quality</text>
<text top="808" left="78" width="505" height="14" font="4">In terms of quality of solution, the serial and CUDA versions of the PF-CFO and</text>
<text top="826" left="78" width="505" height="14" font="4">PR-CFO algorithms achieved good results. Yet, there were some small discrepancies</text>
<text top="844" left="78" width="218" height="14" font="4">in 5 different cases as listed in Table</text>
<text top="844" left="300" width="7" height="14" font="8"><a href="pdfxml.html#18">7</a></text>
<text top="844" left="307" width="275" height="14" font="4">. The smallest of these discrepancies occurred</text>
<text top="861" left="78" width="79" height="14" font="4">in function F</text>
<text top="866" left="157" width="6" height="10" font="0">1</text>
<text top="861" left="167" width="416" height="14" font="4">at both 40 and 50 dimensions where there was a difference of 0.0005</text>
<text top="879" left="78" width="505" height="14" font="4">between the serial and CUDA versions of the algorithms. Larger errors were seen in</text>
<text top="897" left="78" width="64" height="14" font="4">function F</text>
<text top="902" left="141" width="6" height="10" font="0">3</text>
<text top="897" left="152" width="430" height="14" font="4">at 20, 30, and 40 dimensions. These functions may be attributed to two</text>
</page>
<page number="18" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="79" left="78" width="146" height="11" font="10"><b>Fig. 10 </b>Speedup for PR-CFO</text>
<text top="93" left="78" width="46" height="11" font="0">algorithm</text>
<text top="296" left="78" width="114" height="11" font="10"><b>Table 7 </b>Differences in</text>
<text top="310" left="78" width="143" height="11" font="0">achieved ﬁtness values for the</text>
<text top="324" left="78" width="151" height="11" font="0">CFO algorithm by function and</text>
<text top="338" left="78" width="50" height="11" font="0">dimension</text>
<text top="306" left="252" width="9" height="11" font="5">N</text>
<text top="310" left="261" width="5" height="9" font="11">d</text>
<text top="306" left="314" width="42" height="11" font="0">Function</text>
<text top="325" left="314" width="8" height="11" font="5">F</text>
<text top="328" left="321" width="5" height="9" font="12">1</text>
<text top="325" left="392" width="8" height="11" font="5">F</text>
<text top="328" left="400" width="5" height="9" font="12">2</text>
<text top="325" left="471" width="8" height="11" font="5">F</text>
<text top="328" left="479" width="5" height="9" font="12">3</text>
<text top="325" left="550" width="8" height="11" font="5">F</text>
<text top="328" left="557" width="5" height="9" font="12">4</text>
<text top="356" left="252" width="12" height="11" font="0">10</text>
<text top="356" left="314" width="33" height="11" font="0">0.0000</text>
<text top="356" left="392" width="33" height="11" font="0">0.0000</text>
<text top="356" left="471" width="33" height="11" font="0">0.0000</text>
<text top="356" left="550" width="33" height="11" font="0">0.0000</text>
<text top="375" left="252" width="12" height="11" font="0">20</text>
<text top="375" left="314" width="33" height="11" font="0">0.0000</text>
<text top="375" left="392" width="33" height="11" font="0">0.0000</text>
<text top="375" left="471" width="33" height="11" font="0">0.0002</text>
<text top="375" left="550" width="33" height="11" font="0">0.0000</text>
<text top="393" left="252" width="12" height="11" font="0">30</text>
<text top="393" left="314" width="33" height="11" font="0">0.0000</text>
<text top="393" left="392" width="33" height="11" font="0">0.0000</text>
<text top="393" left="471" width="33" height="11" font="0">0.0019</text>
<text top="393" left="550" width="33" height="11" font="0">0.0000</text>
<text top="412" left="252" width="12" height="11" font="0">40</text>
<text top="412" left="314" width="33" height="11" font="0">0.0005</text>
<text top="412" left="392" width="33" height="11" font="0">0.0000</text>
<text top="412" left="471" width="33" height="11" font="0">0.0039</text>
<text top="412" left="550" width="33" height="11" font="0">0.0000</text>
<text top="430" left="252" width="12" height="11" font="0">50</text>
<text top="430" left="314" width="33" height="11" font="0">0.0005</text>
<text top="430" left="392" width="33" height="11" font="0">0.0000</text>
<text top="430" left="471" width="33" height="11" font="0">0.0000</text>
<text top="430" left="550" width="33" height="11" font="0">0.0000</text>
<text top="482" left="78" width="227" height="14" font="4">different issues. First, in the case of F</text>
<text top="487" left="305" width="6" height="10" font="0">1</text>
<text top="482" left="316" width="267" height="14" font="4">at 40 dimensions, a different γ value is used</text>
<text top="500" left="78" width="505" height="14" font="4">by the serial and CUDA versions of the algorithm (0.80 vs 0.10). This difference</text>
<text top="518" left="78" width="505" height="14" font="4">will lead to a different IPD and, in turn, a different optimal value. Second, very small</text>
<text top="536" left="78" width="505" height="14" font="4">errors propagating throughout the algorithm due to precision may lead to a different</text>
<text top="554" left="78" width="272" height="14" font="4">choice of parameters as previously discussed.</text>
<text top="590" left="78" width="273" height="14" font="4">6.4 Fitness evaluations and probe corrections</text>
<text top="627" left="78" width="505" height="14" font="4">One of the more interesting aspects of the CFO algorithm is its sensitivity to small</text>
<text top="645" left="78" width="393" height="14" font="4">errors in calculation. In order to investigate this issue further, Figs.</text>
<text top="645" left="474" width="15" height="14" font="8"><a href="pdfxml.html#19">11</a></text>
<text top="645" left="489" width="7" height="14" font="4"><a href="pdfxml.html#19">–</a></text>
<text top="645" left="496" width="15" height="14" font="8"><a href="pdfxml.html#19">12</a></text>
<text top="645" left="514" width="58" height="14" font="4">and Table</text>
<text top="645" left="575" width="7" height="14" font="8"><a href="pdfxml.html#19">8</a></text>
<text top="663" left="78" width="505" height="14" font="4">present the number of evaluations, the number of corrections, and the γ values cho-</text>
<text top="681" left="78" width="505" height="14" font="4">sen by the serial and CUDA versions of the PR-CFO algorithm concerning function</text>
<text top="699" left="78" width="9" height="13" font="3">F</text>
<text top="704" left="87" width="6" height="10" font="0">1</text>
<text top="699" left="94" width="489" height="14" font="4">. The two ﬁgures clearly show that a varying number of evaluations and correc-</text>
<text top="717" left="78" width="505" height="14" font="4">tions are required when using the two versions of the algorithms. In some cases these</text>
<text top="735" left="78" width="505" height="14" font="4">differences are rather large (e.g., 30 dimensions), while in other cases they are small</text>
<text top="753" left="78" width="505" height="14" font="4">or nonexistent (e.g., 40 dimensions). While these differences seem very signiﬁcant,</text>
<text top="771" left="78" width="505" height="14" font="4">a few ideas must be considered. First, in each case the results are completely repeat-</text>
<text top="789" left="78" width="213" height="14" font="4">able. The values displayed in Figs.</text>
<text top="789" left="295" width="15" height="14" font="8"><a href="pdfxml.html#19">11</a></text>
<text top="789" left="315" width="22" height="14" font="4">and</text>
<text top="789" left="342" width="15" height="14" font="8"><a href="pdfxml.html#19">12</a></text>
<text top="789" left="362" width="221" height="14" font="4">have both been repeatedly evaluated</text>
<text top="807" left="78" width="505" height="14" font="4">over more than 10 trials. Each trial has produced identical results in terms of evalua-</text>
<text top="825" left="78" width="505" height="14" font="4">tions, corrections, and ﬁtness values. Second, these differences are most likely caused</text>
<text top="843" left="78" width="505" height="14" font="4">by the propagation of small errors in mathematical functions—<i>sqrt</i>() and <i>pow</i>()—and</text>
<text top="861" left="78" width="505" height="14" font="4">compounded over time as the algorithm progresses. Third, while this appears to be</text>
<text top="879" left="78" width="505" height="14" font="4">problematic, it is easily acceptable as long as the criteria for convergence is well cho-</text>
<text top="897" left="78" width="505" height="14" font="4">sen. In other words, the algorithm should converge to the same solution regardless of</text>
</page>
<page number="19" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="79" left="78" width="141" height="11" font="10"><b>Fig. 11 </b>A comparison of the</text>
<text top="93" left="78" width="106" height="11" font="0">number of evaluations</text>
<text top="108" left="78" width="127" height="11" font="0">performed by the PR-CFO</text>
<text top="122" left="78" width="131" height="11" font="0">algorithm while optimizing</text>
<text top="136" left="78" width="51" height="11" font="0">function F</text>
<text top="140" left="129" width="5" height="9" font="12">1</text>
<text top="296" left="78" width="141" height="11" font="10"><b>Fig. 12 </b>A comparison of the</text>
<text top="310" left="78" width="136" height="11" font="0">number of probe corrections</text>
<text top="325" left="78" width="127" height="11" font="0">performed by the PR-CFO</text>
<text top="339" left="78" width="131" height="11" font="0">algorithm while optimizing</text>
<text top="353" left="78" width="51" height="11" font="0">function F</text>
<text top="357" left="129" width="5" height="9" font="12">1</text>
<text top="513" left="78" width="139" height="11" font="10"><b>Table 8 </b>γ values chosen by</text>
<text top="527" left="78" width="156" height="11" font="0">serial and CUDA versions of the</text>
<text top="541" left="78" width="150" height="11" font="0">PF-CFO algorithm for function</text>
<text top="555" left="78" width="8" height="11" font="5">F</text>
<text top="559" left="85" width="5" height="9" font="12">1</text>
<text top="555" left="94" width="65" height="11" font="0">by dimension</text>
<text top="523" left="252" width="9" height="11" font="5">N</text>
<text top="526" left="261" width="5" height="9" font="11">d</text>
<text top="522" left="351" width="71" height="11" font="0">Serial PF-CFO</text>
<text top="522" left="506" width="77" height="11" font="0">PF-CFO CUDA</text>
<text top="554" left="252" width="12" height="11" font="0">10</text>
<text top="554" left="351" width="21" height="11" font="0">0.75</text>
<text top="554" left="506" width="21" height="11" font="0">0.75</text>
<text top="573" left="252" width="12" height="11" font="0">20</text>
<text top="573" left="351" width="21" height="11" font="0">0.35</text>
<text top="573" left="506" width="21" height="11" font="0">0.55</text>
<text top="591" left="252" width="12" height="11" font="0">30</text>
<text top="591" left="351" width="21" height="11" font="0">0.05</text>
<text top="591" left="506" width="21" height="11" font="0">0.20</text>
<text top="610" left="252" width="12" height="11" font="0">40</text>
<text top="610" left="351" width="21" height="11" font="0">0.80</text>
<text top="610" left="506" width="21" height="11" font="0">0.10</text>
<text top="628" left="252" width="12" height="11" font="0">50</text>
<text top="628" left="351" width="21" height="11" font="0">0.65</text>
<text top="628" left="506" width="21" height="11" font="0">0.65</text>
<text top="680" left="78" width="505" height="14" font="4">the starting point as long as there are enough iterations for it to converge. This be-</text>
<text top="698" left="78" width="505" height="14" font="4">havior is very similar to a stochastic algorithm like PSO or GA that produces varying</text>
<text top="716" left="78" width="505" height="14" font="4">results over multiple runs, though in this case the CFO algorithm produces slightly</text>
<text top="734" left="78" width="505" height="14" font="4">varying (yet completely repeatable) results across differing platforms and implemen-</text>
<text top="752" left="78" width="44" height="14" font="4">tations.</text>
<text top="806" left="78" width="86" height="14" font="2"><b>7 Conclusion</b></text>
<text top="843" left="78" width="505" height="14" font="4">This study has presented and discussed an implementation of the PF-CFO and PR-</text>
<text top="861" left="78" width="505" height="14" font="4">CFO algorithms on a GPU using CUDA. The problem has been properly decom-</text>
<text top="879" left="78" width="505" height="14" font="4">posed to exploit data parallelism. The effects of scalability, divergence, and memory</text>
<text top="897" left="78" width="505" height="14" font="4">access have also been discussed. Speedups ranging from 1 to 28 have been achieved</text>
</page>
<page number="20" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="492" width="91" height="11" font="0">R.C. Green II et al.</text>
<text top="84" left="78" width="505" height="14" font="4">when testing the algorithms across 4 different functions varying in size from 10 to</text>
<text top="102" left="78" width="505" height="14" font="4">50 dimensions. Despite its good performance, an interesting phenomenon has been</text>
<text top="120" left="78" width="505" height="14" font="4">brought to light: The sensitivity of the CFO algorithm to small differences in preci-</text>
<text top="138" left="78" width="505" height="14" font="4">sion on varying platforms. While the demonstrated results are good, some possible</text>
<text top="156" left="78" width="363" height="14" font="4">avenues for future work may include (but are not limited to):</text>
<text top="179" left="78" width="505" height="19" font="3">− Methods of further exploiting the GPU architecture to increase the currently</text>
<text top="201" left="97" width="486" height="14" font="4">achieved parallelism and performance should be explored. While the current im-</text>
<text top="219" left="97" width="486" height="14" font="4">plementation is the ﬁrst of its kind for the CFO algorithm, new and novel methods</text>
<text top="237" left="97" width="486" height="14" font="4">of decomposing the CFO algorithm for data parallelism should be pursued in order</text>
<text top="255" left="97" width="486" height="14" font="4">to increase performance. Options for such research include implementation on a</text>
<text top="273" left="97" width="486" height="14" font="4">system with multiple GPUs, exploring methods of further exploiting the memory</text>
<text top="291" left="97" width="445" height="14" font="4">structure of the GPU, and fully parallelizing every aspect of the algorithm;</text>
<text top="305" left="78" width="505" height="19" font="3">− The PR-CFO and PF-CFO algorithms should be extended to other parallel</text>
<text top="327" left="97" width="486" height="14" font="4">platforms—namely cluster, multicore, and hybrid environments using OpenMP</text>
<text top="345" left="97" width="486" height="14" font="4">and MPI—for comparison and evaluation with the CUDA based version presented</text>
<text top="363" left="97" width="77" height="14" font="4">in this study;</text>
<text top="377" left="78" width="505" height="19" font="3">− The sensitivity of the CFO algorithm to the precision of compilers, processors,</text>
<text top="399" left="97" width="486" height="14" font="4">and platforms is a problem that seems to uniquely effect deterministic algorithms</text>
<text top="416" left="97" width="486" height="14" font="4">like CFO. Further study should be undertaken to clearly identify the source of such</text>
<text top="434" left="97" width="486" height="14" font="4">behavior while also ﬁnding ways to effectively handle the behavior. Studies should</text>
<text top="452" left="97" width="486" height="14" font="4">consider implementations across languages (C/C++, PowerBasic (the language</text>
<text top="470" left="97" width="486" height="14" font="4">of the original implementation), Python, Java, etc.) and platforms (32-bit, 64-bit,</text>
<text top="488" left="97" width="114" height="14" font="4">Intel, Athlon, etc.);</text>
<text top="503" left="78" width="505" height="19" font="3">− The CUDA based versions of the PF-CFO and PR-CFO algorithms should be ex-</text>
<text top="524" left="97" width="486" height="14" font="4">tended to include multiple IPDs and evaluate the effect of IPD on the convergence</text>
<text top="542" left="97" width="215" height="14" font="4">characteristics of the algorithm; and</text>
<text top="556" left="78" width="505" height="19" font="3">− The PR-CFO and PF-CFO algorithms on the CUDA platform should be updated</text>
<text top="578" left="97" width="200" height="14" font="4">to include acceleration clipping <a href="pdfxml.html#21">[</a></text>
<text top="578" left="297" width="15" height="14" font="8"><a href="pdfxml.html#21">20</a></text>
<text top="578" left="312" width="4" height="14" font="4">,</text>
<text top="578" left="321" width="15" height="14" font="8"><a href="pdfxml.html#21">21</a></text>
<text top="578" left="336" width="247" height="14" font="4"><a href="pdfxml.html#21">] </a>in order to reduce the number of probe</text>
<text top="596" left="97" width="272" height="14" font="4">corrections and further increase performance.</text>
<text top="651" left="78" width="69" height="14" font="2"><b>References</b></text>
<text top="685" left="84" width="499" height="11" font="0">1. Alba E, Luque G (2006) Evaluation of parallel metaheuristics. In: PPSN-EMAA’06, Reykjavik, Ice-</text>
<text top="700" left="100" width="65" height="11" font="0">land, pp 9–14</text>
<text top="714" left="84" width="499" height="11" font="0">2. Cardenas-Montes M, Vega-Rodriguez MA, Rodriguez-Vazquez JJ, Gomez-Iglesias A (2011) Effect</text>
<text top="728" left="100" width="483" height="11" font="0">of the block occupancy in GPGPU over the performance of particle swarm algorithm. In: Proceedings</text>
<text top="742" left="100" width="483" height="11" font="0">of the 10th international conference on adaptive and natural computing algorithms (ICANNGA’11),</text>
<text top="757" left="100" width="239" height="11" font="0">Ljubljana, Slovenia. Springer, Berlin, pp 310–319</text>
<text top="771" left="84" width="499" height="11" font="0">3. Formato RA (2007) Central force optimization: a new metaheuristic with applications in applied elec-</text>
<text top="785" left="100" width="235" height="11" font="0">tromagnetics. Prog Electromagn Res 77:425–491</text>
<text top="799" left="84" width="499" height="11" font="0">4. Formato RA (2007) Central force optimization: a new nature inspired computational framework for</text>
<text top="813" left="100" width="404" height="11" font="0">multidimensional search and optimization. In: NICSO. Springer, Berlin, pp 221–238</text>
<text top="828" left="84" width="499" height="11" font="0">5. Formato RA (2009) Central force optimisation: a new gradient-like metaheuristic for multidimen-</text>
<text top="842" left="100" width="326" height="11" font="0">sional search and optimisation. Int J Bio-Insp Comput 1(4):217–238</text>
<text top="856" left="84" width="499" height="11" font="0">6. Formato RA (2009) Central force optimization: a new deterministic gradient-like optimization meta-</text>
<text top="870" left="100" width="276" height="11" font="0">heuristic OPSEARCH. J Oper Res Soc India 46(1):25–51</text>
<text top="885" left="84" width="499" height="11" font="0">7. Formato RA (2010) Central force optimization applied to the PBM suite of antenna benchmarks.</text>
<text top="899" left="100" width="229" height="11" font="0">Computing Research Repository abs/1003.0221</text>
</page>
<page number="21" position="absolute" top="0" left="0" height="999" width="659">
<text top="50" left="78" width="277" height="11" font="0">Central force optimization on a GPU: a case study in high</text>
<text top="86" left="84" width="499" height="11" font="0">8. Formato RA (2010) Comparative results: Group search optimizer and central force optimization.</text>
<text top="100" left="100" width="229" height="11" font="0">Computing Research Repository abs/1002.2798</text>
<text top="114" left="84" width="499" height="11" font="0">9. Formato RA (2010) Improved CFO algorithm for antenna optimization. Prog Electromagn Res</text>
<text top="129" left="100" width="57" height="11" font="0">19:405–425</text>
<text top="143" left="78" width="505" height="11" font="0">10. Formato RA (2010) Parameter-free deterministic global search with central force optimization. Com-</text>
<text top="157" left="100" width="206" height="11" font="0">puting Research Repository abs/1003.1039</text>
<text top="171" left="78" width="505" height="11" font="0">11. Formato RA (2010) Pseudorandomness in central force optimization. Computing Research Reposi-</text>
<text top="185" left="100" width="92" height="11" font="0">tory abs/1001.0317</text>
<text top="200" left="78" width="505" height="11" font="0">12. Green R, Wang L, Alam M (2012) Training neural networks using central force optimization and</text>
<text top="214" left="100" width="423" height="11" font="0">particle swarm optimization: insights and comparisons. Expert Syst Appl 39(1):555–563</text>
<text top="228" left="78" width="426" height="11" font="0">13. Khronos OpenCL Working Group (2008) The OpenCL Speciﬁcation, version 1.0.29</text>
<text top="242" left="78" width="505" height="11" font="0">14. Kirk DB, Hwu WmW (2010) Programming massively parallel processors: a hands-on approach,</text>
<text top="256" left="100" width="372" height="11" font="0">1 edn. Applications of GPU computing series. San Mateo, Morgan Kaufmann</text>
<text top="271" left="78" width="505" height="11" font="0">15. Mohammad G, Dib N (2009) Synthesis of antenna arrays using central force optimization. In:</text>
<text top="285" left="100" width="406" height="11" font="0">Mosharaka international conference on communications, computers and applications</text>
<text top="299" left="78" width="466" height="11" font="0">16. NVIDIA Corporation (2011) NVIDIA CUDA C programming best practices guide. Tech rep</text>
<text top="313" left="78" width="416" height="11" font="0">17. NVIDIA Corporation (2011) NVIDIA CUDA C programming guide 4.0. Tech rep</text>
<text top="327" left="78" width="505" height="11" font="0">18. Owens JD, Luebke D, Govindaraju N, Harris M, Krüger J, Lefohn A, Purcell TJ (2007) A survey of</text>
<text top="342" left="100" width="412" height="11" font="0">general-purpose computation on graphics hardware. Comput Graph Forum 26:80–113</text>
<text top="356" left="78" width="505" height="11" font="0">19. Pantoja M, Bretones A, Martin R (2007) Benchmark antenna problems for evolutionary optimization</text>
<text top="370" left="100" width="284" height="11" font="0">algorithms. IEEE Trans Antennas Propag 55(4):1111–1121</text>
<text top="384" left="78" width="505" height="11" font="0">20. Qubati G (2009) Central force optimization method and its application to the design of antennas.</text>
<text top="398" left="100" width="295" height="11" font="0">Master’s thesis, Jordan University of Science and Technology</text>
<text top="412" left="78" width="505" height="11" font="0">21. Qubati GM, Dib NI (2010) Microstip patch antenna optimization using modiﬁed central force opti-</text>
<text top="427" left="100" width="215" height="11" font="0">mization. Prog Electromagn Res 21:281–298</text>
<text top="441" left="78" width="505" height="11" font="0">22. Sanders J, Kandrot E (2010) CUDA by example: an introduction to general-purpose GPU program-</text>
<text top="455" left="100" width="187" height="11" font="0">ming, 1 edn. Addison-Wesley, Reading</text>
<text top="469" left="78" width="505" height="11" font="0">23. Zhou Y, Tan Y (2009) GPU-based parallel particle swarm optimization. In: IEEE congress on evolu-</text>
<text top="483" left="100" width="171" height="11" font="0">tionary computation, pp 1493–1500</text>
</page>
</pdf2xml>
