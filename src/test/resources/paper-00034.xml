<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="0" size="16" family="Times" color="#000000"/>
	<fontspec id="1" size="16" family="Times" color="#000000"/>
<text top="160" left="193" width="564" height="16" font="0"><b>FUNCTIONAL-LINEAR GENETIC PROGRAMMING: AUTOMATIC </b></text>
<text top="202" left="208" width="534" height="16" font="0"><b>DISCOVERY AND REUSE OF FUNCTIONS THROUGH LINEAR </b></text>
<text top="243" left="356" width="238" height="16" font="0"><b>GENETIC PROGRAMMING </b></text>
<text top="314" left="135" width="5" height="16" font="1"> </text>
<text top="314" left="405" width="140" height="16" font="1">_______________ </text>
<text top="386" left="440" width="69" height="16" font="1">A Thesis </text>
<text top="427" left="415" width="120" height="16" font="1">Presented to the </text>
<text top="468" left="436" width="78" height="16" font="1">Faculty of </text>
<text top="510" left="374" width="201" height="16" font="1">San Diego State University </text>
<text top="572" left="135" width="5" height="16" font="1"> </text>
<text top="572" left="405" width="140" height="16" font="1">_______________ </text>
<text top="644" left="397" width="156" height="16" font="1">In Partial Fulfillment </text>
<text top="685" left="345" width="259" height="16" font="1">of the Requirements for the Degree </text>
<text top="726" left="408" width="134" height="16" font="1">Master of Science </text>
<text top="768" left="466" width="19" height="16" font="1">in </text>
<text top="809" left="406" width="137" height="16" font="1">Computer Science </text>
<text top="872" left="135" width="5" height="16" font="1"> </text>
<text top="872" left="405" width="140" height="16" font="1">_______________ </text>
<text top="943" left="464" width="23" height="16" font="1">by </text>
<text top="984" left="378" width="194" height="16" font="1">Abdolhamid Badiozamani </text>
<text top="1026" left="438" width="73" height="16" font="1">Fall 2011 </text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1188" width="918">
</page>
<page number="3" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="795" width="19" height="16" font="1">iii </text>
<text top="513" left="407" width="136" height="16" font="1">Copyright Â© 2011 </text>
<text top="544" left="464" width="23" height="16" font="1">by </text>
<text top="575" left="378" width="194" height="16" font="1">Abdolhamid Badiozamani </text>
<text top="606" left="399" width="151" height="16" font="1">All Rights Reserved </text>
<text top="637" left="135" width="5" height="16" font="1"> </text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="2" size="19" family="Times" color="#000000"/>
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="796" width="19" height="16" font="1">iv </text>
<text top="161" left="333" width="283" height="19" font="2"><b>ABSTRACT OF THE THESIS </b></text>
<text top="214" left="244" width="462" height="16" font="1">Functional-Linear Genetic Programming: Automatic Discovery </text>
<text top="235" left="247" width="456" height="16" font="1">and Reuse of Functions Through Linear Genetic Programming </text>
<text top="256" left="464" width="23" height="16" font="1">by </text>
<text top="276" left="378" width="194" height="16" font="1">Abdolhamid Badiozamani </text>
<text top="297" left="330" width="290" height="16" font="1">Master of Science in Computer Science </text>
<text top="318" left="352" width="246" height="16" font="1">San Diego State University, 2011 </text>
<text top="338" left="473" width="5" height="16" font="1"> </text>
<text top="359" left="135" width="5" height="16" font="1"> </text>
<text top="359" left="189" width="536" height="16" font="1">This project combines list-based Genetic Programming (LGP) and a basic </text>
<text top="380" left="135" width="667" height="16" font="1">programming language to study the effectiveness of automatic arithmetic and Boolean logic </text>
<text top="401" left="135" width="639" height="16" font="1">discovery. The programming language is designed to be as simple as possible having no </text>
<text top="421" left="135" width="595" height="16" font="1">more than nine total unary instructions, to reduce the inductive bias present in GA </text>
<text top="442" left="135" width="671" height="16" font="1">experiments, and instead shift the burden of bias to the training data presented to the system. </text>
<text top="463" left="135" width="676" height="16" font="1">The goal of the project was to allow for more complex operations to be derived from the nine </text>
<text top="483" left="135" width="438" height="16" font="1">basic hard-coded instructions of the programming language. </text>
<text top="504" left="135" width="5" height="16" font="1"> </text>
<text top="504" left="189" width="571" height="16" font="1">The system was able to derive functions several layers removed from the basic </text>
<text top="525" left="135" width="608" height="16" font="1">instructions. For example, the addition operator was derived based on the increment </text>
<text top="545" left="135" width="673" height="16" font="1">instruction and the multiplication instruction was discovered based on the previously derived </text>
<text top="566" left="135" width="132" height="16" font="1">addition operator. </text>
<text top="587" left="135" width="5" height="16" font="1"> </text>
<text top="608" left="135" width="5" height="16" font="1"> </text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="3" size="16" family="Helvetica" color="#000000"/>
	<fontspec id="4" size="14" family="Times" color="#000000"/>
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">v </text>
<text top="161" left="360" width="229" height="19" font="2"><b>TABLE OF CONTENTS </b></text>
<text top="214" left="763" width="51" height="16" font="1">PAGE </text>
<text top="254" left="135" width="680" height="16" font="1">ABSTRACT ............................................................................................................................. iv </text>
<text top="285" left="135" width="680" height="16" font="1">LIST OF TABLES ................................................................................................................. viii </text>
<text top="316" left="135" width="680" height="16" font="1">LIST OF FIGURES ...................................................................................................................x </text>
<text top="348" left="135" width="680" height="16" font="1">LIST OF ACRONYMS ........................................................................................................... xi </text>
<text top="379" left="135" width="680" height="16" font="1">LIST OF DEFINITIONS ........................................................................................................ xii </text>
<text top="410" left="135" width="680" height="16" font="1">ACKNOWLEDGEMENTS ................................................................................................... xiii </text>
<text top="441" left="135" width="87" height="16" font="1">CHAPTER </text>
<text top="472" left="162" width="9" height="16" font="1">1</text>
<text top="471" left="171" width="5" height="17" font="3"> </text>
<text top="472" left="189" width="621" height="16" font="1">INTRODUCTION .........................................................................................................1</text>
<text top="471" left="810" width="4" height="17" font="4"> </text>
<text top="501" left="216" width="23" height="16" font="1">1.1</text>
<text top="501" left="239" width="4" height="17" font="4"> </text>
<text top="501" left="242" width="568" height="16" font="1">Background ........................................................................................................1</text>
<text top="501" left="810" width="4" height="17" font="4"> </text>
<text top="531" left="216" width="594" height="16" font="1">1.2 Purpose ...............................................................................................................2</text>
<text top="531" left="810" width="4" height="17" font="4"> </text>
<text top="561" left="216" width="594" height="16" font="1">1.3 Limitations .........................................................................................................2</text>
<text top="561" left="810" width="4" height="17" font="4"> </text>
<text top="590" left="162" width="9" height="16" font="1">2</text>
<text top="590" left="171" width="5" height="17" font="3"> </text>
<text top="590" left="189" width="621" height="16" font="1">BACKGROUND ...........................................................................................................4</text>
<text top="590" left="810" width="4" height="17" font="4"> </text>
<text top="620" left="216" width="594" height="16" font="1">2.1 Artificial Intelligence .........................................................................................4</text>
<text top="620" left="810" width="4" height="17" font="4"> </text>
<text top="650" left="216" width="594" height="16" font="1">2.2 Genetic Algorithms ............................................................................................6</text>
<text top="650" left="810" width="4" height="17" font="4"> </text>
<text top="680" left="243" width="567" height="16" font="1">2.2.1 General Operation .....................................................................................6</text>
<text top="679" left="810" width="4" height="17" font="4"> </text>
<text top="709" left="243" width="567" height="16" font="1">2.2.2 The Fitness Function .................................................................................6</text>
<text top="709" left="810" width="4" height="17" font="4"> </text>
<text top="739" left="243" width="567" height="16" font="1">2.2.3 Genotype/Phenotype Encoding .................................................................7</text>
<text top="739" left="810" width="4" height="17" font="4"> </text>
<text top="769" left="243" width="567" height="16" font="1">2.2.4 Crossover/Mutation Strategy ....................................................................8</text>
<text top="769" left="810" width="4" height="17" font="4"> </text>
<text top="798" left="216" width="594" height="16" font="1">2.3 Genetic Programming ........................................................................................9</text>
<text top="798" left="810" width="4" height="17" font="4"> </text>
<text top="828" left="243" width="567" height="16" font="1">2.3.1 Tree-Based Genetic Programming ............................................................9</text>
<text top="828" left="810" width="4" height="17" font="4"> </text>
<text top="858" left="243" width="567" height="16" font="1">2.3.2 List-Based Genetic Programming ...........................................................11</text>
<text top="858" left="810" width="4" height="17" font="4"> </text>
<text top="887" left="162" width="9" height="16" font="1">3</text>
<text top="887" left="171" width="5" height="17" font="3"> </text>
<text top="887" left="189" width="621" height="16" font="1">METHODOLOGY ......................................................................................................13</text>
<text top="887" left="810" width="4" height="17" font="4"> </text>
<text top="917" left="216" width="594" height="16" font="1">3.1 Overview ..........................................................................................................13</text>
<text top="917" left="810" width="4" height="17" font="4"> </text>
<text top="947" left="216" width="594" height="16" font="1">3.2 Programming Language ...................................................................................14</text>
<text top="947" left="810" width="4" height="17" font="4"> </text>
<text top="977" left="243" width="567" height="16" font="1">3.2.1 Basic Instructions ....................................................................................14</text>
<text top="976" left="810" width="4" height="17" font="4"> </text>
<text top="1006" left="243" width="567" height="16" font="1">3.2.2 Programs .................................................................................................15</text>
<text top="1006" left="810" width="4" height="17" font="4"> </text>
<text top="1036" left="243" width="567" height="16" font="1">3.2.3 Input/Output Operations .........................................................................17</text>
<text top="1036" left="810" width="4" height="17" font="4"> </text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="796" width="19" height="16" font="1">vi </text>
<text top="112" left="243" width="567" height="16" font="1">3.2.4 Instruction Pool .......................................................................................19</text>
<text top="112" left="810" width="4" height="17" font="4"> </text>
<text top="142" left="243" width="567" height="16" font="1">3.2.5 Sample Program Traces ..........................................................................19</text>
<text top="142" left="810" width="4" height="17" font="4"> </text>
<text top="171" left="216" width="594" height="16" font="1">3.3 LGP Configuration...........................................................................................21</text>
<text top="171" left="810" width="4" height="17" font="4"> </text>
<text top="201" left="243" width="567" height="16" font="1">3.3.1 GA Parameters ........................................................................................21</text>
<text top="201" left="810" width="4" height="17" font="4"> </text>
<text top="231" left="243" width="567" height="16" font="1">3.3.2 Crossover/Mutation Method ...................................................................23</text>
<text top="231" left="810" width="4" height="17" font="4"> </text>
<text top="260" left="270" width="540" height="16" font="1">3.3.2.1 Genotype/Phenotype Encoding ......................................................23</text>
<text top="260" left="810" width="4" height="17" font="4"> </text>
<text top="290" left="270" width="540" height="16" font="1">3.3.2.2 Selection Algorithm .......................................................................24</text>
<text top="290" left="810" width="4" height="17" font="4"> </text>
<text top="320" left="270" width="540" height="16" font="1">3.3.2.3 Crossover Algorithm ......................................................................24</text>
<text top="320" left="810" width="4" height="17" font="4"> </text>
<text top="350" left="270" width="540" height="16" font="1">3.3.2.4 Mutation Algorithm .......................................................................24</text>
<text top="349" left="810" width="4" height="17" font="4"> </text>
<text top="379" left="243" width="36" height="16" font="1">3.3.3</text>
<text top="379" left="279" width="4" height="17" font="4"> </text>
<text top="379" left="297" width="513" height="16" font="1">Fitness Function ...................................................................................25</text>
<text top="379" left="810" width="4" height="17" font="4"> </text>
<text top="409" left="270" width="540" height="16" font="1">3.3.3.1 General Formula ............................................................................25</text>
<text top="409" left="810" width="4" height="17" font="4"> </text>
<text top="439" left="270" width="540" height="16" font="1">3.3.3.2 Bounds and Ranges ........................................................................27</text>
<text top="439" left="810" width="4" height="17" font="4"> </text>
<text top="468" left="216" width="594" height="16" font="1">3.4 Sources of Inductive Bias ................................................................................28</text>
<text top="468" left="810" width="4" height="17" font="4"> </text>
<text top="498" left="162" width="9" height="16" font="1">4</text>
<text top="497" left="171" width="5" height="17" font="3"> </text>
<text top="498" left="189" width="621" height="16" font="1">RESULTS ....................................................................................................................30</text>
<text top="498" left="810" width="4" height="17" font="4"> </text>
<text top="528" left="216" width="594" height="16" font="1">4.1 Overview ..........................................................................................................30</text>
<text top="528" left="810" width="4" height="17" font="4"> </text>
<text top="557" left="216" width="594" height="16" font="1">4.2 Trivial Tasks ....................................................................................................31</text>
<text top="557" left="810" width="4" height="17" font="4"> </text>
<text top="587" left="243" width="567" height="16" font="1">4.2.1 Increment/Decrement Single Value ........................................................31</text>
<text top="587" left="810" width="4" height="17" font="4"> </text>
<text top="617" left="243" width="567" height="16" font="1">4.2.2 Increment/Decrement All Array Values .................................................31</text>
<text top="617" left="810" width="4" height="17" font="4"> </text>
<text top="647" left="216" width="594" height="16" font="1">4.3 First Order Tasks..............................................................................................31</text>
<text top="646" left="810" width="4" height="17" font="4"> </text>
<text top="676" left="243" width="567" height="16" font="1">4.3.1 Copy Value .............................................................................................32</text>
<text top="676" left="810" width="4" height="17" font="4"> </text>
<text top="706" left="243" width="567" height="16" font="1">4.3.2 Repeat .....................................................................................................32</text>
<text top="706" left="810" width="4" height="17" font="4"> </text>
<text top="736" left="243" width="567" height="16" font="1">4.3.3 Duplicate .................................................................................................33</text>
<text top="736" left="810" width="4" height="17" font="4"> </text>
<text top="765" left="243" width="567" height="16" font="1">4.3.4 Boolean NOT ..........................................................................................35</text>
<text top="765" left="810" width="4" height="17" font="4"> </text>
<text top="795" left="243" width="567" height="16" font="1">4.3.5 Boolean AND..........................................................................................35</text>
<text top="795" left="810" width="4" height="17" font="4"> </text>
<text top="825" left="243" width="567" height="16" font="1">4.3.6 Boolean OR .............................................................................................36</text>
<text top="825" left="810" width="4" height="17" font="4"> </text>
<text top="855" left="216" width="594" height="16" font="1">4.4 Second Order Tasks .........................................................................................37</text>
<text top="854" left="810" width="4" height="17" font="4"> </text>
<text top="884" left="243" width="567" height="16" font="1">4.4.1 Copy Array..............................................................................................38</text>
<text top="884" left="810" width="4" height="17" font="4"> </text>
<text top="914" left="243" width="567" height="16" font="1">4.4.2 Reverse ....................................................................................................38</text>
<text top="914" left="810" width="4" height="17" font="4"> </text>
<text top="944" left="243" width="567" height="16" font="1">4.4.3 Addition ..................................................................................................40</text>
<text top="944" left="810" width="4" height="17" font="4"> </text>
<text top="973" left="243" width="567" height="16" font="1">4.4.4 Boolean NAND .......................................................................................40</text>
<text top="973" left="810" width="4" height="17" font="4"> </text>
<text top="1003" left="243" width="567" height="16" font="1">4.4.5 Boolean NOR ..........................................................................................41</text>
<text top="1003" left="810" width="4" height="17" font="4"> </text>
<text top="1033" left="243" width="567" height="16" font="1">4.4.6 Boolean XOR ..........................................................................................42</text>
<text top="1033" left="810" width="4" height="17" font="4"> </text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="791" width="24" height="16" font="1">vii </text>
<text top="112" left="216" width="594" height="16" font="1">4.5 Third Order Tasks ............................................................................................43</text>
<text top="112" left="810" width="4" height="17" font="4"> </text>
<text top="142" left="243" width="567" height="16" font="1">4.5.1 Subtraction ..............................................................................................43</text>
<text top="142" left="810" width="4" height="17" font="4"> </text>
<text top="171" left="243" width="567" height="16" font="1">4.5.2 Summation ..............................................................................................45</text>
<text top="171" left="810" width="4" height="17" font="4"> </text>
<text top="201" left="216" width="594" height="16" font="1">4.6 Fourth Order Tasks ..........................................................................................45</text>
<text top="201" left="810" width="4" height="17" font="4"> </text>
<text top="231" left="162" width="9" height="16" font="1">5</text>
<text top="230" left="171" width="5" height="17" font="3"> </text>
<text top="231" left="189" width="621" height="16" font="1">CONCLUSIONS..........................................................................................................48</text>
<text top="231" left="810" width="4" height="17" font="4"> </text>
<text top="260" left="216" width="594" height="16" font="1">5.1 Exploration vs Exploitation .............................................................................49</text>
<text top="260" left="810" width="4" height="17" font="4"> </text>
<text top="290" left="216" width="594" height="16" font="1">5.2 Inductive Bias vs Training Bias .......................................................................50</text>
<text top="290" left="810" width="4" height="17" font="4"> </text>
<text top="320" left="216" width="594" height="16" font="1">5.3 Unexpected Results ..........................................................................................51</text>
<text top="320" left="810" width="4" height="17" font="4"> </text>
<text top="350" left="162" width="9" height="16" font="1">6</text>
<text top="349" left="171" width="5" height="17" font="3"> </text>
<text top="350" left="189" width="621" height="16" font="1">FURTHER RESEARCH .............................................................................................53</text>
<text top="349" left="810" width="4" height="17" font="4"> </text>
<text top="379" left="216" width="594" height="16" font="1">6.1 Operation Atrophy/Enhancement ....................................................................53</text>
<text top="379" left="810" width="4" height="17" font="4"> </text>
<text top="409" left="216" width="594" height="16" font="1">6.2 Solution Refinement ........................................................................................54</text>
<text top="409" left="810" width="4" height="17" font="4"> </text>
<text top="439" left="216" width="594" height="16" font="1">6.3 Constants ..........................................................................................................54</text>
<text top="439" left="810" width="4" height="17" font="4"> </text>
<text top="468" left="216" width="594" height="16" font="1">6.4 Recursion .........................................................................................................56</text>
<text top="468" left="810" width="4" height="17" font="4"> </text>
<text top="498" left="135" width="675" height="16" font="1">BIBLIOGRAPHY ....................................................................................................................57</text>
<text top="498" left="810" width="4" height="17" font="4"> </text>
<text top="528" left="135" width="5" height="16" font="1"> </text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="786" width="28" height="16" font="1">viii </text>
<text top="161" left="389" width="173" height="19" font="2"><b>LIST OF TABLES </b></text>
<text top="214" left="135" width="5" height="16" font="1"> </text>
<text top="214" left="763" width="51" height="16" font="1">PAGE </text>
<text top="254" left="135" width="675" height="16" font="1">Table 4.1. Training Data Set for Copy Value ..........................................................................32</text>
<text top="254" left="810" width="4" height="17" font="4"> </text>
<text top="284" left="135" width="675" height="16" font="1">Table 4.2. Solutions for Copy Value .......................................................................................32</text>
<text top="284" left="810" width="4" height="17" font="4"> </text>
<text top="314" left="135" width="675" height="16" font="1">Table 4.3. Training Data Set for Repeat ..................................................................................33</text>
<text top="313" left="810" width="4" height="17" font="4"> </text>
<text top="343" left="135" width="675" height="16" font="1">Table 4.4. Solutions for Repeat................................................................................................33</text>
<text top="343" left="810" width="4" height="17" font="4"> </text>
<text top="373" left="135" width="675" height="16" font="1">Table 4.5. Training Data Set for Duplicate ..............................................................................34</text>
<text top="373" left="810" width="4" height="17" font="4"> </text>
<text top="403" left="135" width="675" height="16" font="1">Table 4.6. Solutions for Duplicate ...........................................................................................34</text>
<text top="403" left="810" width="4" height="17" font="4"> </text>
<text top="432" left="135" width="675" height="16" font="1">Table 4.7. Training Data Set for Boolean NOT .......................................................................35</text>
<text top="432" left="810" width="4" height="17" font="4"> </text>
<text top="462" left="135" width="675" height="16" font="1">Table 4.8. Solutions for Boolean NOT ....................................................................................35</text>
<text top="462" left="810" width="4" height="17" font="4"> </text>
<text top="492" left="135" width="675" height="16" font="1">Table 4.9. Training Data Set for Boolean AND ......................................................................36</text>
<text top="492" left="810" width="4" height="17" font="4"> </text>
<text top="521" left="135" width="675" height="16" font="1">Table 4.10. Solutions for Boolean AND ..................................................................................36</text>
<text top="521" left="810" width="4" height="17" font="4"> </text>
<text top="551" left="135" width="675" height="16" font="1">Table 4.11. Training Data Set for Boolean OR .......................................................................37</text>
<text top="551" left="810" width="4" height="17" font="4"> </text>
<text top="581" left="135" width="675" height="16" font="1">Table 4.12 Solutions for Boolean OR ......................................................................................37</text>
<text top="581" left="810" width="4" height="17" font="4"> </text>
<text top="611" left="135" width="675" height="16" font="1">Table 4.13. Training Data Set for Copy Array ........................................................................38</text>
<text top="610" left="810" width="4" height="17" font="4"> </text>
<text top="640" left="135" width="675" height="16" font="1">Table 4.14. Solutions for Copy Array ......................................................................................38</text>
<text top="640" left="810" width="4" height="17" font="4"> </text>
<text top="670" left="135" width="675" height="16" font="1">Table 4.15. Training Data Set for Reverse ..............................................................................39</text>
<text top="670" left="810" width="4" height="17" font="4"> </text>
<text top="700" left="135" width="675" height="16" font="1">Table 4.16. Solutions for Reverse ............................................................................................39</text>
<text top="700" left="810" width="4" height="17" font="4"> </text>
<text top="729" left="135" width="675" height="16" font="1">Table 4.17. Training Data Set for Addition .............................................................................40</text>
<text top="729" left="810" width="4" height="17" font="4"> </text>
<text top="759" left="135" width="675" height="16" font="1">Table 4.18. Solutions for Addition ..........................................................................................40</text>
<text top="759" left="810" width="4" height="17" font="4"> </text>
<text top="789" left="135" width="675" height="16" font="1">Table 4.19. Training Data Set for Boolean NAND .................................................................41</text>
<text top="789" left="810" width="4" height="17" font="4"> </text>
<text top="819" left="135" width="675" height="16" font="1">Table 4.20. Solutions for Boolean NAND ...............................................................................41</text>
<text top="818" left="810" width="4" height="17" font="4"> </text>
<text top="848" left="135" width="675" height="16" font="1">Table 4.21. Training Data Set for Boolean NOR .....................................................................42</text>
<text top="848" left="810" width="4" height="17" font="4"> </text>
<text top="878" left="135" width="675" height="16" font="1">Table 4.22. Solutions for Boolean NOR ..................................................................................42</text>
<text top="878" left="810" width="4" height="17" font="4"> </text>
<text top="908" left="135" width="675" height="16" font="1">Table 4.23. Training Data Set for Boolean XOR .....................................................................43</text>
<text top="908" left="810" width="4" height="17" font="4"> </text>
<text top="937" left="135" width="675" height="16" font="1">Table 4.24. Solutions for Boolean XOR ..................................................................................43</text>
<text top="937" left="810" width="4" height="17" font="4"> </text>
<text top="967" left="135" width="675" height="16" font="1">Table 4.25. Training Data Set for Subtraction .........................................................................44</text>
<text top="967" left="810" width="4" height="17" font="4"> </text>
<text top="997" left="135" width="675" height="16" font="1">Table 4.26. Solutions for Subtraction ......................................................................................44</text>
<text top="997" left="810" width="4" height="17" font="4"> </text>
<text top="1026" left="135" width="675" height="16" font="1">Table 4.27. Training Data Set for Summation .........................................................................45</text>
<text top="1026" left="810" width="4" height="17" font="4"> </text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="796" width="19" height="16" font="1">ix </text>
<text top="112" left="135" width="675" height="16" font="1">Table 4.28. Solutions for Summation ......................................................................................45</text>
<text top="112" left="810" width="4" height="17" font="4"> </text>
<text top="142" left="135" width="675" height="16" font="1">Table 4.29. Training Data Set for Multiplication ....................................................................46</text>
<text top="142" left="810" width="4" height="17" font="4"> </text>
<text top="171" left="135" width="675" height="16" font="1">Table 4.30. Solutions for Multiplication ..................................................................................46</text>
<text top="171" left="810" width="4" height="17" font="4"> </text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">x </text>
<text top="152" left="383" width="185" height="19" font="2"><b>LIST OF FIGURES </b></text>
<text top="205" left="135" width="5" height="16" font="1"> </text>
<text top="205" left="763" width="51" height="16" font="1">PAGE </text>
<text top="245" left="135" width="675" height="16" font="1">Figure 2.1. Tree GP crossover .................................................................................................10</text>
<text top="245" left="810" width="4" height="17" font="4"> </text>
<text top="275" left="135" width="675" height="16" font="1">Figure 2.2. Linear GP crossover ..............................................................................................11</text>
<text top="275" left="810" width="4" height="17" font="4"> </text>
<text top="305" left="135" width="675" height="16" font="1">Figure 3.1. System overview ...................................................................................................14</text>
<text top="304" left="810" width="4" height="17" font="4"> </text>
<text top="334" left="135" width="675" height="16" font="1">Figure 3.2. Single instruction program I/O. .............................................................................17</text>
<text top="334" left="810" width="4" height="17" font="4"> </text>
<text top="364" left="135" width="675" height="16" font="1">Figure 3.3. Multiple instruction program I/O ..........................................................................17</text>
<text top="364" left="810" width="4" height="17" font="4"> </text>
<text top="394" left="135" width="675" height="16" font="1">Figure 3.4. Instruction subprogram I/O ...................................................................................18</text>
<text top="394" left="810" width="4" height="17" font="4"> </text>
<text top="423" left="135" width="675" height="16" font="1">Figure 3.5. Nested subprogram I/O..........................................................................................18</text>
<text top="423" left="810" width="4" height="17" font="4"> </text>
<text top="453" left="135" width="675" height="16" font="1">Figure 3.6. Instruction pool internal representation structure. .................................................19</text>
<text top="453" left="810" width="4" height="17" font="4"> </text>
<text top="483" left="135" width="675" height="16" font="1">Figure 3.7. Fitness function formula. .......................................................................................26</text>
<text top="483" left="810" width="4" height="17" font="4"> </text>
<text top="512" left="135" width="675" height="16" font="1">Figure 3.8. Fitness function range............................................................................................28</text>
<text top="512" left="810" width="4" height="17" font="4"> </text>
<text top="542" left="135" width="675" height="16" font="1">Figure 6.1. Hillclimbing refinement algorithm enchancement ................................................55</text>
<text top="542" left="810" width="4" height="17" font="4"> </text>
<text top="572" left="135" width="5" height="16" font="1"> </text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="796" width="19" height="16" font="1">xi </text>
<text top="161" left="368" width="214" height="19" font="2"><b>LIST OF ACRONYMS </b></text>
<text top="219" left="138" width="40" height="16" font="1">CAS </text>
<text top="219" left="335" width="197" height="16" font="1">Complex Adaptive System </text>
<text top="248" left="138" width="30" height="16" font="1">GA </text>
<text top="248" left="335" width="139" height="16" font="1">Genetic Algorithm </text>
<text top="277" left="138" width="39" height="16" font="1">LGP </text>
<text top="277" left="335" width="215" height="16" font="1">Linear Genetic Programming </text>
<text top="305" left="138" width="28" height="16" font="1">GP </text>
<text top="305" left="335" width="164" height="16" font="1">Genetic Programming </text>
<text top="334" left="138" width="48" height="16" font="1">PSSH </text>
<text top="334" left="335" width="269" height="16" font="1">Physical Symbol System Hypothesis </text>
<text top="363" left="138" width="24" height="16" font="1">AI </text>
<text top="363" left="335" width="160" height="16" font="1">Artificial Intelligence </text>
<text top="392" left="138" width="37" height="16" font="1">LCS </text>
<text top="392" left="335" width="208" height="16" font="1">Learning Classifier Systems </text>
<text top="421" left="138" width="39" height="16" font="1">TGP </text>
<text top="421" left="335" width="248" height="16" font="1">Tree-based Genetic Programming </text>
<text top="450" left="138" width="40" height="16" font="1">LRU </text>
<text top="450" left="335" width="154" height="16" font="1">Least Recently Used </text>
<text top="476" left="135" width="5" height="16" font="1"> </text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="5" size="16" family="Symbol" color="#000000"/>
	<fontspec id="6" size="16" family="Times" color="#000000"/>
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="791" width="24" height="16" font="1">xii </text>
<text top="161" left="360" width="231" height="19" font="2"><b>LIST OF DEFINITIONS </b></text>
<text top="220" left="138" width="79" height="16" font="1">Accuracy (</text>
<text top="214" left="218" width="11" height="22" font="5">ï¡</text>
<text top="220" left="229" width="11" height="16" font="1">) </text>
<text top="219" left="316" width="473" height="16" font="1">The average of the sum of the Euclidean and Hamming distances </text>
<text top="239" left="316" width="462" height="16" font="1">between the values that have corresponding counterparts in two </text>
<text top="260" left="316" width="124" height="16" font="1">memory buffers. </text>
<text top="289" left="138" width="158" height="16" font="1">Buffer Size Limit (S) </text>
<text top="289" left="316" width="479" height="16" font="1">A statically tunable parameter indicating the maximum number of </text>
<text top="310" left="316" width="276" height="16" font="1">bytes allowed for any memory buffer. </text>
<text top="339" left="138" width="62" height="16" font="1">Context </text>
<text top="339" left="316" width="361" height="16" font="1">A set of operations that are executed sequentially. </text>
<text top="369" left="138" width="44" height="16" font="1">Cost (</text>
<text top="363" left="182" width="10" height="22" font="5">ï«</text>
<text top="369" left="192" width="11" height="16" font="1">) </text>
<text top="368" left="316" width="468" height="16" font="1">The sum of the number of contexts and operations of a program. </text>
<text top="398" left="138" width="111" height="16" font="1">Cost Limit (K) </text>
<text top="398" left="316" width="449" height="16" font="1">The statically tunable parameter indicating the maximum size </text>
<text top="419" left="316" width="187" height="16" font="1">allowed for any program. </text>
<text top="448" left="138" width="79" height="16" font="1">Efficiency </text>
<text top="449" left="316" width="142" height="16" font="1">Synonym for Cost (</text>
<text top="443" left="458" width="10" height="22" font="5">ï«</text>
<text top="449" left="468" width="15" height="16" font="1">). </text>
<text top="479" left="138" width="62" height="16" font="1">Energy (</text>
<text top="474" left="201" width="8" height="22" font="5">ï¥</text>
<text top="479" left="208" width="11" height="16" font="1">) </text>
<text top="478" left="316" width="472" height="16" font="1">The number of operations and contexts during a given programâs </text>
<text top="499" left="316" width="79" height="16" font="1">execution. </text>
<text top="528" left="138" width="128" height="16" font="1">Energy Limit (E) </text>
<text top="528" left="316" width="478" height="16" font="1">A statically tunable parameter indicating the maximum amount of </text>
<text top="548" left="316" width="385" height="16" font="1">energy allowed for any given program in the system. </text>
<text top="579" left="138" width="73" height="16" font="1">Exertion (</text>
<text top="573" left="211" width="9" height="22" font="5">ï¸</text>
<text top="579" left="220" width="11" height="16" font="1">) </text>
<text top="577" left="316" width="436" height="16" font="1">The difference in the number of bytes between two memory </text>
<text top="598" left="316" width="60" height="16" font="1">buffers. </text>
<text top="627" left="138" width="82" height="16" font="1">Instruction </text>
<text top="627" left="316" width="443" height="16" font="1">One of the nine original hard-coded operations as set forth in </text>
<text top="648" left="316" width="57" height="16" font="1">(3.2.1). </text>
<text top="676" left="138" width="125" height="16" font="1">Instruction Code </text>
<text top="676" left="316" width="453" height="16" font="1">A nominal integer value assigned by the Instruction Pool to an </text>
<text top="697" left="316" width="336" height="16" font="1">operation for use as that operationâs identifier. </text>
<text top="726" left="138" width="76" height="16" font="1">Operation </text>
<text top="726" left="316" width="232" height="16" font="1">Any instruction or subprogram. </text>
<text top="755" left="138" width="66" height="16" font="1">Program </text>
<text top="755" left="316" width="233" height="16" font="1">Any combination of operations. </text>
<text top="784" left="138" width="101" height="16" font="1">Root Context </text>
<text top="784" left="316" width="433" height="16" font="1">The context that encapsulates all of a programâs operations. </text>
<text top="813" left="138" width="122" height="16" font="1">Simple Program </text>
<text top="814" left="316" width="196" height="16" font="1">A program having its cost (</text>
<text top="809" left="512" width="10" height="22" font="5">ï«</text>
<text top="814" left="522" width="177" height="16" font="1">) being equal to its size (</text>
<text top="809" left="699" width="11" height="22" font="5">ï³</text>
<text top="814" left="710" width="86" height="16" font="1">). That is, a </text>
<text top="835" left="316" width="298" height="16" font="1">program that uses no other subprograms. </text>
<text top="865" left="138" width="42" height="16" font="1">Size (</text>
<text top="860" left="180" width="11" height="22" font="5">ï³</text>
<text top="865" left="191" width="10" height="16" font="1">) </text>
<text top="864" left="316" width="395" height="16" font="1">The number of operations in a programâs root context. </text>
<text top="894" left="138" width="93" height="16" font="1">Subprogram </text>
<text top="894" left="316" width="308" height="16" font="1">A program that is used by other programs. </text>
<text top="920" left="135" width="5" height="16" font="1"> </text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="7" size="16" family="Times" color="#0000be"/>
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="786" width="28" height="16" font="1">xiii </text>
<text top="161" left="349" width="253" height="19" font="2"><b>ACKNOWLEDGEMENTS </b></text>
<text top="214" left="189" width="609" height="16" font="1">I would like to thank my father who taught me sacrifice and my wife whose support </text>
<text top="245" left="135" width="634" height="16" font="1">fuels me. I would also like to thank my thesis advisor, Dr. Joseph Lewis without whose </text>
<text top="276" left="135" width="487" height="16" font="1">guidance and patient direction none of this work would be possible.</text>
<text top="276" left="623" width="5" height="16" font="7"> </text>
<text top="276" left="627" width="145" height="16" font="1">I wish also to thank </text>
<text top="307" left="135" width="656" height="16" font="1">Montezuma Publishing whose formatting rules have so greatly enhanced the readability of </text>
<text top="339" left="135" width="106" height="16" font="1">this document.</text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="8" size="19" family="Helvetica" color="#000000"/>
	<fontspec id="9" size="14" family="Times" color="#000000"/>
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">1 </text>
<text top="161" left="413" width="124" height="19" font="2"><b>CHAPTER 1 </b></text>
<text top="215" left="389" width="173" height="19" font="2"><b>INTRODUCTION </b></text>
<text top="270" left="394" width="26" height="19" font="2"><b>1.1</b></text>
<text top="269" left="421" width="6" height="19" font="8"><b> </b></text>
<text top="270" left="427" width="14" height="19" font="2"><b>B</b></text>
<text top="273" left="441" width="110" height="15" font="9"><b>ACKGROUND</b></text>
<text top="270" left="551" width="5" height="19" font="2"><b> </b></text>
<text top="302" left="189" width="591" height="16" font="1">Throughout all natural systems, from ant colonies to our global economy to snow </text>
<text top="333" left="135" width="596" height="16" font="1">flake formation, we have observed a recurring pattern: that a very large number of </text>
<text top="364" left="135" width="622" height="16" font="1">independent agents interacting with each other at a local level cause a complex global </text>
<text top="395" left="135" width="679" height="16" font="1">behavior to emerge. There are numerous studies and numerous names, to describe the various </text>
<text top="426" left="135" width="612" height="16" font="1">aspects of this phenomenon: Chaos Theory, Complex Adaptive Systems, Non-linear </text>
<text top="457" left="135" width="669" height="16" font="1">Dynamical Systems, Emergent Behavior, etc. Within the field of Artificial Intelligence (AI), </text>
<text top="488" left="135" width="600" height="16" font="1">these natural systems have inspired a new approach which, with its many technical </text>
<text top="519" left="135" width="574" height="16" font="1">variations, are collectively called âpopulation-basedâ techniques or algorithms. </text>
<text top="550" left="189" width="612" height="16" font="1">Population-based techniques stand in stark contrast to traditional methods of solving </text>
<text top="581" left="135" width="660" height="16" font="1">AI problems.  Whereas the traditional approach to AI focused on rigid structures applied to </text>
<text top="612" left="135" width="622" height="16" font="1">strict and deterministic mathematical algorithms, population-based techniques rely on </text>
<text top="643" left="135" width="639" height="16" font="1">starting out with a large number of candidate solutions and making small adjustments to </text>
<text top="674" left="135" width="662" height="16" font="1">these solutions thus bringing them closer a particular goal. If we liken these two techniques </text>
<text top="705" left="135" width="655" height="16" font="1">to creating a statue having a certain set of characteristics, then with traditional AI methods </text>
<text top="736" left="135" width="661" height="16" font="1">the construction would take place by arranging various sized blocks of stone on top of each </text>
<text top="768" left="135" width="624" height="16" font="1">other until the statue is completed. Whereas with population-based techniques, a large </text>
<text top="799" left="135" width="631" height="16" font="1">number of stones are deemed candidates and are each analyzed and chiseled or molded </text>
<text top="830" left="135" width="605" height="16" font="1">together repeatedly until one of them satisfies the characteristics of the statue weâre </text>
<text top="861" left="135" width="148" height="16" font="1">attempting to make. </text>
<text top="892" left="189" width="531" height="16" font="1">While both population-based techniques and traditional AI methods have </text>
<text top="923" left="135" width="648" height="16" font="1">demonstrated their viability in a wide number of fields, they both suffer from weaknesses </text>
<text top="954" left="135" width="658" height="16" font="1">that arise from their strengths. Traditional AI methods tend to operate very quickly and are </text>
<text top="985" left="135" width="665" height="16" font="1">able to give exact answers. But they lack the ability to adapt to a changing environment and </text>
<text top="1016" left="135" width="664" height="16" font="1">due to their all-or-nothing design will yield total failure in unfamiliar situations. Population-</text>
<text top="1047" left="135" width="648" height="16" font="1">based techniques require intensive computation and are relatively slow and rarely give an </text>
</page>
<page number="15" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">2 </text>
<text top="112" left="135" width="599" height="16" font="1">exact âbestâ answer. However, they can be very flexible and responsive to shifting </text>
<text top="143" left="135" width="647" height="16" font="1">environmental conditions and are able to give âgood enoughâ answers. The strengths and </text>
<text top="174" left="135" width="617" height="16" font="1">weaknesses of these two systems can be described as the difference between a digital </text>
<text top="205" left="135" width="633" height="16" font="1">calculator and a person performing calculations intuitively. One might be able to give a </text>
<text top="236" left="135" width="643" height="16" font="1">rough answer to a complex problem without referencing any equations. For example, we </text>
<text top="267" left="135" width="656" height="16" font="1">might ask âwhat is the farthest that anyone can throw a baseballâ? Without referencing the </text>
<text top="298" left="135" width="661" height="16" font="1">weight of the ball, the strength of the thrower, nor the wind resistance weâre able to make a </text>
<text top="326" left="135" width="676" height="20" font="6">âgood enoughâ guess that this answer is measured in yards and not miles. A calculator on the </text>
<text top="361" left="135" width="651" height="16" font="1">other hand can give a highly precise answer to the same problem, but only if it is properly </text>
<text top="392" left="135" width="662" height="16" font="1">loaded with the correct set of equations and figures. Otherwise, it will simply not be able to </text>
<text top="423" left="135" width="646" height="16" font="1">even attempt the problem. Of course, the intuitive answer draws upon the knowledge and </text>
<text top="454" left="135" width="650" height="16" font="1">experience of the person attempting to solve the problem. It is this set of assumptions that </text>
<text top="485" left="135" width="636" height="16" font="1">eliminate all of the invalid possibilities from the whole set of answers. The assumptions </text>
<text top="516" left="135" width="550" height="16" font="1">gleaned from past experiences form the bias of the intuitive problem solver. </text>
<text top="566" left="417" width="26" height="19" font="2"><b>1.2</b></text>
<text top="569" left="444" width="4" height="15" font="9"><b> </b></text>
<text top="566" left="448" width="13" height="19" font="2"><b>P</b></text>
<text top="569" left="461" width="67" height="15" font="9"><b>URPOSE</b></text>
<text top="566" left="528" width="5" height="19" font="2"><b> </b></text>
<text top="598" left="189" width="608" height="16" font="1">The following study describes a project that attempts to minimize the inductive bias </text>
<text top="629" left="135" width="668" height="16" font="1">of a population-based system by transferring the burden of learning to the set of experiences </text>
<text top="660" left="135" width="598" height="16" font="1">that are exposed to the system. The system proposed is a simple list-based Genetic </text>
<text top="691" left="135" width="604" height="16" font="1">Programming approach applied to a minimal instruction set. It uses A-Life inspired </text>
<text top="722" left="135" width="632" height="16" font="1">techniques for determining fitness and for evaluation of individual programs within the </text>
<text top="753" left="135" width="654" height="16" font="1">population. The problem domain to be explored using this technique is inspired by Lenat's </text>
<text top="784" left="135" width="624" height="16" font="1">&#34;Automated Mathematician&#34; project [11] which used a very small set of mathematical </text>
<text top="815" left="135" width="641" height="16" font="1">operations upon which new operations or theorems were discovered. Thus, the goal is to </text>
<text top="846" left="135" width="606" height="16" font="1">initially expose the system to simple Boolean logic and mathematical problems and </text>
<text top="877" left="135" width="641" height="16" font="1">subsequently, as the system gains experience from the initial exposure, to present it with </text>
<text top="909" left="135" width="184" height="16" font="1">more complex problems. </text>
<text top="958" left="400" width="26" height="19" font="2"><b>1.3</b></text>
<text top="962" left="427" width="4" height="15" font="9"><b> </b></text>
<text top="958" left="431" width="14" height="19" font="2"><b>L</b></text>
<text top="962" left="445" width="100" height="15" font="9"><b>IMITATIONS</b></text>
<text top="958" left="545" width="5" height="19" font="2"><b> </b></text>
<text top="991" left="189" width="592" height="16" font="1">The focus of the project is to study the reduction of inductive bias in evolutionary </text>
<text top="1022" left="135" width="673" height="16" font="1">algorithms. One of the ways in reducing this bias is to begin with the smallest possible scope </text>
<text top="1053" left="135" width="640" height="16" font="1">which in this case are the nine basic instructions. Metaphorically, the system attempts to </text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">3 </text>
<text top="112" left="135" width="654" height="16" font="1">emulate a biological organism that emerges from a given natural environment. Within this </text>
<text top="143" left="135" width="656" height="16" font="1">environment, the nine hard-coded instructions are representing the basic physical elements </text>
<text top="174" left="135" width="632" height="16" font="1">that are present in all biological living systems such as Carbon, Hydrogen and Oxygen. </text>
<text top="205" left="189" width="614" height="16" font="1">We are thus limited to these instructions and do not rely on a programming language </text>
<text top="236" left="135" width="636" height="16" font="1">such as LISP, C or even machine code. Furthermore, the language does not provide any </text>
<text top="267" left="135" width="658" height="16" font="1">constants and only through the initial zero values of memory buffers are constants derived. </text>
<text top="298" left="135" width="630" height="16" font="1">As such, it cannot solve certain tasks that require counting the number of times a given </text>
<text top="329" left="135" width="665" height="16" font="1">operation has been performed. This limits the type of tasks that can be solved. For example, </text>
<text top="361" left="135" width="298" height="16" font="1">division or modulo could not be derived. </text>
<text top="392" left="189" width="605" height="16" font="1">Finally, the I/O operations of the language are limited to the  16-bit positive integer </text>
<text top="423" left="135" width="633" height="16" font="1">finite space. Any edge cases are simply treated as the maximum or minimum allowable </text>
<text top="454" left="135" width="219" height="16" font="1">value, 255 and 0 respectively. </text>
</page>
<page number="17" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">4 </text>
<text top="161" left="413" width="124" height="19" font="2"><b>CHAPTER 2 </b></text>
<text top="215" left="396" width="159" height="19" font="2"><b>BACKGROUND </b></text>
<text top="270" left="341" width="26" height="19" font="2"><b>2.1</b></text>
<text top="273" left="367" width="4" height="15" font="9"><b> </b></text>
<text top="270" left="371" width="15" height="19" font="2"><b>A</b></text>
<text top="273" left="386" width="90" height="15" font="9"><b>RTIFICIAL </b></text>
<text top="270" left="475" width="8" height="19" font="2"><b>I</b></text>
<text top="273" left="484" width="121" height="15" font="9"><b>NTELLIGENCE</b></text>
<text top="270" left="604" width="5" height="19" font="2"><b> </b></text>
<text top="302" left="189" width="558" height="16" font="1">The general problem domain for the field of AI is to create software that acts </text>
<text top="333" left="135" width="679" height="16" font="1">intelligently. The definition of what constitutes intelligent behavior varies, however a modern </text>
<text top="364" left="135" width="660" height="16" font="1">and generally accepted position is that an intelligent system is one that has a set of goals, is </text>
<text top="395" left="135" width="647" height="16" font="1">able to perceive its environment, and will take actions that are likely to lead it to reach its </text>
<text top="426" left="135" width="286" height="16" font="1">goals without human intervention [19]. </text>
<text top="457" left="189" width="609" height="16" font="1">Early AI methods focused on creating a set of directions for a computer to follow in </text>
<text top="488" left="135" width="667" height="16" font="1">order to solve a problem. This approach was more formally presented by Newell and Simon </text>
<text top="519" left="135" width="678" height="16" font="1">[14] as the Physical Symbol System Hypothesis (PSSH). which proposes an AI system that is </text>
<text top="550" left="135" width="672" height="16" font="1">composed of a number of symbols that correspond to outside concepts, and rules that govern </text>
<text top="581" left="135" width="657" height="16" font="1">how those symbols can interact with each other. Together, the combination of a single rule </text>
<text top="612" left="135" width="663" height="16" font="1">and the symbols it operates on form an &#34;expression&#34;. The combination of all of the possible </text>
<text top="643" left="135" width="668" height="16" font="1">expressions make up the &#34;problem search space&#34;. From this finite, though usually very large </text>
<text top="674" left="135" width="674" height="16" font="1">search space, the most favorable expression at a given moment in time must be sought by the </text>
<text top="705" left="135" width="671" height="16" font="1">system as the &#34;best&#34; action to take.  These systems have achieved great success in areas such </text>
<text top="736" left="135" width="660" height="16" font="1">as game programming or logic problem solving. For example, a PSSH system is ideal for a </text>
<text top="768" left="135" width="670" height="16" font="1">game of chess because the objects that the symbols  in the system represent, the chess pieces </text>
<text top="799" left="135" width="640" height="16" font="1">and board, never change since new kinds of pieces are never added or removed from the </text>
<text top="830" left="135" width="668" height="16" font="1">game. Furthermore, the rules governing game play as well as the object of the game are also </text>
<text top="861" left="135" width="675" height="16" font="1">always static. As such, a very clean and exact one-to-one mapping can be attained, yielding a </text>
<text top="892" left="135" width="654" height="16" font="1">simple and highly effective PSSH AI system. PSSH systems have also been expanded and </text>
<text top="923" left="135" width="678" height="16" font="1">enhanced to solve more complex problems in a variety of fields that require the vast and deep </text>
<text top="954" left="135" width="662" height="16" font="1">knowledge of an expert in that field. These systems are known as &#34;Expert Systems&#34; [3] and </text>
<text top="985" left="135" width="636" height="16" font="1">have been deployed successfully in numerous environments from vehicle diagnostics to </text>
<text top="1016" left="135" width="645" height="16" font="1">medical assessments. In these domains, the rules for determining an ideal solution do not </text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">5 </text>
<text top="112" left="135" width="640" height="16" font="1">change very rapidly. In instances that a new discovery or method becomes available, the </text>
<text top="143" left="135" width="627" height="16" font="1">existing rules are periodically updated and the system continues to function as normal. </text>
<text top="174" left="189" width="593" height="16" font="1">But in situations where the rules and symbols change relatively rapidly over time, </text>
<text top="205" left="135" width="671" height="16" font="1">PSSH systems do not perform well since the internal model of symbols quickly becomes out </text>
<text top="236" left="135" width="668" height="16" font="1">of sync with the reality of their environment. This drawback is known as &#34;brittleness&#34; and is </text>
<text top="267" left="135" width="625" height="16" font="1">a major criticism of PSSH systems as put forth by Rodney Brooks [2] who argues that </text>
<text top="298" left="135" width="636" height="16" font="1">instead of using symbols to create an internal representational model of the world in the </text>
<text top="329" left="135" width="647" height="16" font="1">system, the world itself should be used as the model and simply referenced by the system </text>
<text top="361" left="135" width="671" height="16" font="1">through sensors as often as is necessary. This is known as the &#34;embodiment&#34; principle and is </text>
<text top="392" left="135" width="666" height="16" font="1">presented in Brooks' &#34;subsumption architecture&#34; and has been very successful in the field of </text>
<text top="423" left="135" width="677" height="16" font="1">robotics. The architecture is inspired by natural organisms and employs a set of layered rules, </text>
<text top="454" left="135" width="659" height="16" font="1">with higher level rules in charge of directing the system towards an overall goal, and lower </text>
<text top="485" left="135" width="664" height="16" font="1">level rules managing ever more local and basic functions. The architecture relies heavily on </text>
<text top="516" left="135" width="326" height="16" font="1">its input sensors to perceive its environment. </text>
<text top="547" left="189" width="588" height="16" font="1">While Brooks' subsumption architecture is a stark departure from PSSH systems, </text>
<text top="578" left="135" width="654" height="16" font="1">neither system uses past experiences to improve its ability to solve future problems. PSSH </text>
<text top="609" left="135" width="677" height="16" font="1">systems have unchanging symbols and static rules and the subsumption architecture is said to </text>
<text top="640" left="135" width="663" height="16" font="1">be &#34;reactive&#34; and &#34;lives in the moment&#34; with no sense of a distant past that helps to plan for </text>
<text top="671" left="135" width="674" height="16" font="1">the future [8]. Other systems that can achieve this are collectively grouped into the &#34;Machine </text>
<text top="702" left="135" width="624" height="16" font="1">Learning&#34; branch of AI. One such system is the Learning Classifier Systems or (LCS) </text>
<text top="733" left="135" width="660" height="16" font="1">developed by John Holland [6] which provided a unique approach for using a system's past </text>
<text top="764" left="135" width="650" height="16" font="1">experiences to affect its future. The LCS uses a technique called &#34;reinforcement learning&#34; </text>
<text top="795" left="135" width="669" height="16" font="1">that rewards or punishes a sequence of actions that the system has taken in the past based on </text>
<text top="826" left="135" width="629" height="16" font="1">the desirability of the outcome of those actions. In addition to outputting a sequence of </text>
<text top="857" left="135" width="676" height="16" font="1">actions, the LCS also includes a subsystem that is used to generate new types of actions. This </text>
<text top="888" left="135" width="663" height="16" font="1">subsystem was described by Holland as a &#34;Genetic Algorithm&#34; which uses the evolutionary </text>
<text top="920" left="135" width="658" height="16" font="1">strategy of chromosome crossover and mutation to create new types of action and simulate </text>
<text top="950" left="135" width="63" height="16" font="1">novelty. </text>
</page>
<page number="19" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">6 </text>
<text top="113" left="356" width="26" height="19" font="2"><b>2.2</b></text>
<text top="116" left="383" width="4" height="15" font="9"><b> </b></text>
<text top="113" left="387" width="16" height="19" font="2"><b>G</b></text>
<text top="116" left="403" width="67" height="15" font="9"><b>ENETIC </b></text>
<text top="113" left="470" width="15" height="19" font="2"><b>A</b></text>
<text top="116" left="485" width="104" height="15" font="9"><b>LGORITHMS</b></text>
<text top="113" left="589" width="5" height="19" font="2"><b> </b></text>
<text top="145" left="189" width="583" height="16" font="1">A Genetic Algorithm (GA) is a population-based supervised learning method by </text>
<text top="176" left="135" width="610" height="16" font="1">which a large search space is scoured to find an ideal candidate [5]. GAs have many </text>
<text top="207" left="135" width="656" height="16" font="1">parameters that are adjustable and many different variations in implementation. They have </text>
<text top="238" left="135" width="644" height="16" font="1">been employed successfully in numerous applications from bioinformatics [16] to circuit </text>
<text top="269" left="135" width="616" height="16" font="1">design [7]. GAs can be decomposed into three main subsystems: the fitness function, </text>
<text top="301" left="135" width="486" height="16" font="1">genotype/phenotype encoding and the crossover/mutation strategy. </text>
<text top="351" left="364" width="222" height="19" font="2"><b>2.2.1 General Operation </b></text>
<text top="383" left="189" width="610" height="16" font="1">As with other population-based techniques, GAs operate by starting out with a large </text>
<text top="414" left="135" width="646" height="16" font="1">pool of individual candidates that are usually generated with random initial values. Then, </text>
<text top="445" left="135" width="654" height="16" font="1">through manipulating the individuals over successive iterations the population moves ever </text>
<text top="476" left="135" width="645" height="16" font="1">closer toward an optimal solution until one of the candidate solutions in the population is </text>
<text top="507" left="135" width="607" height="16" font="1">considered to be &#34;good enough&#34; at solving the problem at which point the operation </text>
<text top="538" left="135" width="654" height="16" font="1">terminates. What differentiates one population-based technique from another is in the way </text>
<text top="569" left="135" width="674" height="16" font="1">that the population is represented and manipulated which ultimately affects the emergence of </text>
<text top="600" left="135" width="80" height="16" font="1">a solution. </text>
<text top="631" left="189" width="586" height="16" font="1">GAs are inspired by the theory of natural selection and evolutionary change over </text>
<text top="662" left="135" width="640" height="16" font="1">time. For GAs, the metaphor that is used for representation is that of a genetic sequence. </text>
<text top="693" left="135" width="632" height="16" font="1">Each individual solution is &#34;born&#34; out of a specific genetic sequence, and thus identical </text>
<text top="724" left="135" width="676" height="16" font="1">genetic sequences produce identical actual solutions. Natural selection and mating is used for </text>
<text top="755" left="135" width="646" height="16" font="1">manipulation of individuals by selectively removing unfit individuals and replacing them </text>
<text top="786" left="135" width="665" height="16" font="1">with the &#34;children&#34; of the survivors. These children form a new generation and are spawned </text>
<text top="817" left="135" width="649" height="16" font="1">by combining the genetic sequence of two parents from the previous generation. As such, </text>
<text top="849" left="135" width="646" height="16" font="1">subsequent generations carry over genes that have proven to be successful, and over time </text>
<text top="880" left="135" width="297" height="16" font="1">yielding ever more effective individuals. </text>
<text top="930" left="355" width="241" height="19" font="2"><b>2.2.2 The Fitness Function </b></text>
<text top="962" left="189" width="625" height="16" font="1">A fitness function is an heuristic algorithm used to score a candidate solution. As with </text>
<text top="993" left="135" width="675" height="16" font="1">other supervised learning methods, GAs use fitness functions to determine the fitness of each </text>
<text top="1024" left="135" width="611" height="16" font="1">individual candidate in the population. It is this score that will determine whether an </text>
<text top="1055" left="135" width="674" height="16" font="1">individual will survive to the next generation or die and be replaced. The fitness function is a </text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">7 </text>
<text top="112" left="135" width="638" height="16" font="1">source of &#34;inductive bias&#34; in that the knowledge used to score an individual candidate is </text>
<text top="143" left="135" width="665" height="16" font="1">induced by the programmer. Since this knowledge needs to apply to any potential candidate </text>
<text top="174" left="135" width="606" height="16" font="1">in general, it requires careful planning and deep knowledge of the problem domain. </text>
<text top="205" left="189" width="598" height="16" font="1">The design of the fitness function is beset by the speed or quality trade-off. A high </text>
<text top="236" left="135" width="651" height="16" font="1">quality and meaningful score may take a long time to compute but may yield a solution in </text>
<text top="267" left="135" width="663" height="16" font="1">fewer generations. A less accurate score may take much less time to compute thus allowing </text>
<text top="298" left="135" width="660" height="16" font="1">for more generations or a larger population set to be processed in the same amount of time. </text>
<text top="329" left="135" width="671" height="16" font="1">For example, some popular fitness functions include the Minkowski distance (e.g. Euclidean </text>
<text top="361" left="135" width="671" height="16" font="1">[9] or Manhattan [18]) or the Hamming distance [21] between the candidate solution and the </text>
<text top="392" left="135" width="652" height="16" font="1">goal. These equations are very fast calculations which free up the system to produce more </text>
<text top="423" left="135" width="654" height="16" font="1">generations. Conversely, a fitness function may involve invoking a large simulation to run </text>
<text top="454" left="135" width="653" height="16" font="1">several trials of a candidate before returning a multi-part score. Of course, each individual </text>
<text top="485" left="135" width="621" height="16" font="1">that has to be evaluated would take considerable system resources thus sacrificing the </text>
<text top="516" left="135" width="504" height="16" font="1">number of generations that can be calculated in the same time period. </text>
<text top="566" left="310" width="330" height="19" font="2"><b>2.2.3 Genotype/Phenotype Encoding </b></text>
<text top="598" left="189" width="624" height="16" font="1">In keeping with the biological metaphor of genetics, a genotype is the genetic makeup </text>
<text top="629" left="135" width="667" height="16" font="1">of an individual. Conversely, the phenotype of an individual are the traits that are actualized </text>
<text top="660" left="135" width="647" height="16" font="1">based on the genes. For example, the &#34;XX&#34; or &#34;XY&#34; chromosome is said to be the gender </text>
<text top="691" left="135" width="643" height="16" font="1">genotype of an individual mammal. A mammal with the &#34;XY&#34; chromosome will be born </text>
<text top="722" left="135" width="668" height="16" font="1">male whereas one with the &#34;XX&#34; chromosome will be born female. The actual gender of the </text>
<text top="753" left="135" width="656" height="16" font="1">live mammal is called the phenotype. In many situations, such as eye color or hair color or </text>
<text top="784" left="135" width="677" height="16" font="1">skin pigmentation one gene is overridden by another and is not necessarily actualized. This is </text>
<text top="815" left="135" width="613" height="16" font="1">an important phenomenon as it allows a particular gene to be carried recessively and </text>
<text top="846" left="135" width="410" height="16" font="1">manifested in future generations where it may be useful. </text>
<text top="877" left="189" width="603" height="16" font="1">Within GAs, the genotype is generally represented as a string of bits. The decoding </text>
<text top="909" left="135" width="660" height="16" font="1">algorithm then analyzes this bit string and constructs, or &#34;births&#34; the individual for analysis </text>
<text top="940" left="135" width="658" height="16" font="1">by the fitness function, or perhaps as the final result. The algorithm must be designed to be </text>
<text top="971" left="135" width="633" height="16" font="1">able to handle all possible bit strings even though some strings may not manifest viable </text>
<text top="1002" left="135" width="532" height="16" font="1">individuals since the process of generating the genotype is not deliberate. </text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">8 </text>
<text top="112" left="189" width="546" height="16" font="1">The genotype/phenotype encoding and decoding process greatly affects the </text>
<text top="143" left="135" width="678" height="16" font="1">performance of a GA. The engineering trade-off is in the size of the genotype and the amount </text>
<text top="174" left="135" width="625" height="16" font="1">of traits that it carries. A smaller size translates into faster computation of generations. </text>
<text top="205" left="135" width="634" height="16" font="1">However, the smaller size also means there are fewer traits that are captured and can be </text>
<text top="236" left="135" width="633" height="16" font="1">analyzed which affects the fitness function's ability to properly score an individual thus </text>
<text top="267" left="135" width="674" height="16" font="1">yielding poor candidates. A larger genotype encoding takes more computation but allows the </text>
<text top="298" left="135" width="635" height="16" font="1">fitness function to more accurately score each candidate. If the genotype is too detailed, </text>
<text top="329" left="135" width="671" height="16" font="1">however, the computation required for each generation grows and the number of dimensions </text>
<text top="361" left="135" width="651" height="16" font="1">that must be analyzed are also increased. It is the consideration of these trade-offs that are </text>
<text top="392" left="135" width="676" height="16" font="1">also a source of inductive bias as the decisions have to be made by the system's author whose </text>
<text top="423" left="135" width="400" height="16" font="1">knowledge of the problem domain needs to be applied. </text>
<text top="473" left="319" width="313" height="19" font="2"><b>2.2.4 Crossover/Mutation Strategy </b></text>
<text top="505" left="189" width="587" height="16" font="1">The crossover and mutation strategy refers to the algorithm used to generate new </text>
<text top="536" left="135" width="670" height="16" font="1">individuals for subsequent generations using the current population set. For each generation, </text>
<text top="567" left="135" width="649" height="16" font="1">the individuals in the population are scored and a certain percentage are eliminated. Their </text>
<text top="598" left="135" width="631" height="16" font="1">place is taken by new individuals that are generated using the survivors. Typically, two </text>
<text top="629" left="135" width="636" height="16" font="1">parents are selected from the survivor pool and their genes are then combined through a </text>
<text top="660" left="135" width="675" height="16" font="1">&#34;crossover&#34; algorithm. This algorithm alternates between each parent and copies segments of </text>
<text top="691" left="135" width="676" height="16" font="1">varying lengths onto the new child individual. The simplest form of crossover first duplicates </text>
<text top="722" left="135" width="658" height="16" font="1">one parent's genes onto a child, then selects a random section from the other parent's genes </text>
<text top="753" left="135" width="657" height="16" font="1">and copies the values at the same location onto the child. There are numerous variations of </text>
<text top="784" left="135" width="647" height="16" font="1">crossover, but the purpose of all of them is to generate new individuals from two or more </text>
<text top="815" left="135" width="667" height="16" font="1">candidates selected from the previous generation's pool. Here, the selection process is also a </text>
<text top="846" left="135" width="626" height="16" font="1">design decision with numerous variations that consider the fitness of individuals when </text>
<text top="877" left="135" width="674" height="16" font="1">selecting them for crossover. It is through the selection and crossover process that over many </text>
<text top="909" left="135" width="645" height="16" font="1">generations more and more healthy individuals emerge as their genes are passed on. This </text>
<text top="940" left="135" width="561" height="16" font="1">phenomenon is formally presented by Holland as the &#34;Schema Theorem&#34; [6]. </text>
<text top="971" left="189" width="605" height="16" font="1">Once a new child candidate has been generated using cross-over, it may or may not </text>
<text top="1002" left="135" width="671" height="16" font="1">be selected for mutation. The purpose of mutation is to introduce novelty into the population </text>
<text top="1033" left="135" width="604" height="16" font="1">and is again inspired by natural observations of reproduction. Mutation is generally </text>
</page>
<page number="22" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="801" width="14" height="16" font="1">9 </text>
<text top="112" left="135" width="677" height="16" font="1">performed by inverting one or more bits in the child 's genotype prior to releasing it back into </text>
<text top="143" left="135" width="651" height="16" font="1">the general population pool. The frequency with which new offspring are mutated and the </text>
<text top="174" left="135" width="623" height="16" font="1">magnitude of mutation are all trade-offs that must be considered by the author and are </text>
<text top="205" left="135" width="666" height="16" font="1">generally tuned through trial and error for the specific application. One popular technique is </text>
<text top="236" left="135" width="663" height="16" font="1">to vary the mutation rate depending on the state of the population as a whole. By increasing </text>
<text top="267" left="135" width="665" height="16" font="1">the mutation rate as the population becomes more homogeneous we introduce more novelty </text>
<text top="298" left="135" width="672" height="16" font="1">into a stagnated gene pool in the hopes of discovering a more healthy individual. By keeping </text>
<text top="329" left="135" width="635" height="16" font="1">the mutation rate low in early generations we increase the efficiency of the algorithm in </text>
<text top="361" left="135" width="533" height="16" font="1">selecting the healthiest candidates from an already heterogeneous supply. </text>
<text top="410" left="347" width="26" height="19" font="2"><b>2.3</b></text>
<text top="414" left="374" width="4" height="15" font="9"><b> </b></text>
<text top="410" left="378" width="16" height="19" font="2"><b>G</b></text>
<text top="414" left="394" width="67" height="15" font="9"><b>ENETIC </b></text>
<text top="410" left="462" width="13" height="19" font="2"><b>P</b></text>
<text top="414" left="474" width="124" height="15" font="9"><b>ROGRAMMING</b></text>
<text top="410" left="598" width="5" height="19" font="2"><b> </b></text>
<text top="443" left="189" width="613" height="16" font="1">Genetic Programming (GP) is a programming technique that employs GAs to search </text>
<text top="474" left="135" width="665" height="16" font="1">for an optimal solution [9]. In essence, it attempts to answer the question &#34;what sequence of </text>
<text top="505" left="135" width="656" height="16" font="1">programming instructions solves the given problem?&#34; Genetic Programming has had some </text>
<text top="536" left="135" width="678" height="16" font="1">success in industrial applications such as circuit synthesis [10] and robotics [17] but is still an </text>
<text top="567" left="135" width="659" height="16" font="1">area of continuing research. GPs mainly fall under two main categories: list-based and tree-</text>
<text top="598" left="135" width="50" height="16" font="1">based. </text>
<text top="648" left="296" width="358" height="19" font="2"><b>2.3.1 Tree-Based Genetic Programming </b></text>
<text top="680" left="189" width="619" height="16" font="1">Tree-based Genetic Programming (TGP) typically generates programs in a functional </text>
<text top="711" left="135" width="647" height="16" font="1">language such as LISP being the phenotype of each individual within the underlying GA. </text>
<text top="742" left="135" width="658" height="16" font="1">Conversely, the genotype of the individuals are expressions consisting of a set of operators </text>
<text top="773" left="135" width="667" height="16" font="1">and terminals. The operators are functions that take a specific number of parameters as their </text>
<text top="804" left="135" width="646" height="16" font="1">arguments and are evaluated down to a single value. The terminals are the values that are </text>
<text top="835" left="135" width="648" height="16" font="1">known at the time of the program's evaluation (i.e. variables, constants and literals). Each </text>
<text top="867" left="135" width="675" height="16" font="1">individual's genotype is represented as a tree with each branch consisting of an operator at its </text>
<text top="898" left="135" width="659" height="16" font="1">root and either an expression or terminal as its leaves. For example, the expression &#34;2 + X&#34; </text>
<text top="929" left="135" width="658" height="16" font="1">would be represented as a tree with the root node being the operator &#34;+&#34;, the left leaf being </text>
<text top="960" left="135" width="532" height="16" font="1">the terminal literal &#34;2&#34; and the right leaf being the terminal variable &#34;X&#34;.  </text>
<text top="991" left="189" width="579" height="16" font="1">The tree representation is key in the crossover operations of the underlying GA. </text>
<text top="1022" left="135" width="669" height="16" font="1">When two parent candidates are to be crossed over, one parent's contents are first duplicated </text>
<text top="1053" left="135" width="673" height="16" font="1">onto the target child individual. Then, one or more branches from the other parent are copied </text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">10 </text>
<text top="112" left="135" width="618" height="16" font="1">onto the child, overwriting the previous branches at that location, thus creating a new </text>
<text top="143" left="135" width="677" height="16" font="1">individual with traits from both parents. For example, if parent A is the expression &#34;(2 + X) + </text>
<text top="174" left="135" width="626" height="16" font="1">Y&#34; and parent B is &#34;(2 * Y) â 3&#34; one potential child candidate could be formed by first </text>
<text top="205" left="135" width="662" height="16" font="1">copying parent A's structure onto the child and then swapping its left branch &#34;(2 + X)&#34; with </text>
<text top="236" left="135" width="668" height="16" font="1">the left branch of parent B &#34;(2 * Y)&#34; yielding the result &#34;(2 * Y) â Y&#34; (Figure 2.1). Note that </text>
<text top="267" left="135" width="666" height="16" font="1">the crossover method guarantees that there are no invalid programs generated since only the </text>
<text top="298" left="135" width="655" height="16" font="1">branches, which themselves are valid sub-programs, are swapped with other branches. For </text>
<text top="329" left="135" width="638" height="16" font="1">mutation, a candidate's terminal or operator is replaced using a set of previously defined </text>
<text top="361" left="135" width="663" height="16" font="1">operators and terminals. Again the mutation operation guarantees that the candidates are all </text>
<text top="392" left="135" width="669" height="16" font="1">valid subprograms since terminals are by definition interchangable and also by ensuring that </text>
<text top="423" left="135" width="673" height="16" font="1">the arity of the operator being replaced matches the arity of the new operator. For example, a </text>
<text top="454" left="135" width="645" height="16" font="1">binary operator will only be mutated by being swapped out with another binary operator. </text>
<text top="932" left="250" width="244" height="16" font="0"><b>Figure 2.1. Tree GP crossover.  </b></text>
<text top="980" left="189" width="589" height="16" font="1">Finally, once the pool has been repopulated with new candidates, each are scored </text>
<text top="1011" left="135" width="667" height="16" font="1">using the fitness function. This function scores the individuals by first converting the syntax </text>
<text top="1042" left="135" width="656" height="16" font="1">tree into an executable function. Then, the function is evaluated and the result is compared </text>
<text top="916" left="694" width="5" height="16" font="1"> </text>
</page>
<page number="24" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">11 </text>
<text top="112" left="135" width="651" height="16" font="1">with the overall goal and the difference, or some other variation of distance, is used as the </text>
<text top="143" left="135" width="676" height="16" font="1">score value. The underlying GA algorithm continues purging the low-scoring individuals and </text>
<text top="174" left="135" width="663" height="16" font="1">repopulating the pool until the termination criteria is reached. This criteria is generally a set </text>
<text top="205" left="135" width="429" height="16" font="1">number of generations or a specific fitness score threshold. </text>
<text top="255" left="298" width="353" height="19" font="2"><b>2.3.2 List-Based Genetic Programming </b></text>
<text top="287" left="189" width="540" height="16" font="1">List-based Genetic Programming, sometimes referred to as Linear Genetic </text>
<text top="319" left="135" width="661" height="16" font="1">Programming (LGP), differs from TGP in several fundamental ways. First, LGPs generally </text>
<text top="350" left="135" width="676" height="16" font="1">use imperative languages such as C or assembly language as the phenotype of the individuals </text>
<text top="381" left="135" width="627" height="16" font="1">as they are faster to execute than functional programming languages. Additionally, the </text>
<text top="412" left="135" width="675" height="16" font="1">genotypical representation of the individuals are a list of instructions in sequence instead of a </text>
<text top="443" left="135" width="634" height="16" font="1">syntax tree [1,15]. This also affects crossover/mutation operations as they are no longer </text>
<text top="474" left="135" width="661" height="16" font="1">swapping branches that represent internal functions but rather exchanging a section of each </text>
<text top="505" left="135" width="643" height="16" font="1">individual that represents a set of individual instructions. For example,  if parent A is the </text>
<text top="536" left="135" width="661" height="16" font="1">program &#34;INPUT, ADD, MULTIPLY&#34; and parent B is &#34;ADD, SUBTRACT, STORE&#34; then </text>
<text top="567" left="135" width="620" height="16" font="1">one potential child candidate could be formed by first copying parent A's sequence of </text>
<text top="598" left="135" width="664" height="16" font="1">instructions onto the child and then replacing the second half with parent B's genes yielding </text>
<text top="629" left="135" width="647" height="16" font="1">the result &#34;INPUT, SUBTRACT, STORE&#34; (Figure 2.2). For mutation, one or more of the </text>
<text top="660" left="135" width="662" height="16" font="1">candidate's individual instructions are replaced by a random one from the set of all possible </text>
<text top="691" left="135" width="93" height="16" font="1">instructions. </text>
<text top="1020" left="750" width="5" height="16" font="1"> </text>
<text top="1037" left="189" width="255" height="16" font="0"><b>Figure 2.2. Linear GP crossover. </b></text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">12 </text>
<text top="112" left="189" width="586" height="16" font="1">Note that unlike TGP, no consideration is given to the arity of the operator nor is </text>
<text top="143" left="135" width="631" height="16" font="1">there any other form of error checking needed. This is due to the underlying language's </text>
<text top="174" left="135" width="598" height="16" font="1">design. By removing the requirements for block creation and termination, the only </text>
<text top="205" left="135" width="636" height="16" font="1">requirement for an imperative language program is that one instruction follows another. </text>
<text top="236" left="189" width="609" height="16" font="1">When a child candidate is generated using crossover, there is a possibility that some </text>
<text top="267" left="135" width="669" height="16" font="1">of the instructions in an individual are ineffective. For example, consider the program &#34;a = b </text>
<text top="298" left="135" width="670" height="16" font="1">+ c; d = b * 2; return d;&#34;. Note that the first instruction does not affect the return value of the </text>
<text top="329" left="135" width="657" height="16" font="1">program. These ineffective instructions are known as &#34;introns&#34; [20]. Introns can hinder the </text>
<text top="361" left="135" width="677" height="16" font="1">execution speed of programs and are one cause of bloat. They are sometimes removed during </text>
<text top="392" left="135" width="669" height="16" font="1">conversion from genotype to phenotype prior to execution for fitness evaluation [1] but they </text>
<text top="423" left="135" width="663" height="16" font="1">are usually not removed from the genes of the individual as they may become useful if they </text>
<text top="454" left="135" width="296" height="16" font="1">are passed on to subsequent generations. </text>
</page>
<page number="26" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">13 </text>
<text top="161" left="413" width="124" height="19" font="2"><b>CHAPTER 3 </b></text>
<text top="215" left="386" width="179" height="19" font="2"><b>METHODOLOGY </b></text>
<text top="270" left="409" width="26" height="19" font="2"><b>3.1</b></text>
<text top="273" left="435" width="4" height="15" font="9"><b> </b></text>
<text top="270" left="440" width="16" height="19" font="2"><b>O</b></text>
<text top="273" left="456" width="80" height="15" font="9"><b>VERVIEW</b></text>
<text top="270" left="536" width="5" height="19" font="2"><b> </b></text>
<text top="302" left="189" width="616" height="16" font="1">The main goal of the project is to yield a system that learns from its own experiences </text>
<text top="333" left="135" width="611" height="16" font="1">instead of inferring knowledge from its author. One such source of knowledge is the </text>
<text top="364" left="135" width="670" height="16" font="1">programming language implementation. A complex and feature-rich language carries with it </text>
<text top="395" left="135" width="671" height="16" font="1">a great deal of the author's inductive bias since that knowledge is directly bestowed upon the </text>
<text top="426" left="135" width="594" height="16" font="1">system in the form of hard-coded implementation. Conversely, a simple and basic </text>
<text top="457" left="135" width="678" height="16" font="1">programming language minimizes this bias. Thus the language used in this study was devised </text>
<text top="488" left="135" width="640" height="16" font="1">with the intent to keep its instructions limited to the most basic and universal truths. The </text>
<text top="519" left="135" width="645" height="16" font="1">simplicity of the language design led naturally to the LGP approach being selected as the </text>
<text top="550" left="135" width="652" height="16" font="1">search mechanism. This search mechanism is used to find the best expressions to satisfy a </text>
<text top="581" left="135" width="675" height="16" font="1">given criteria from the set of all valid expressions. Elements of functional programming have </text>
<text top="612" left="135" width="607" height="16" font="1">also been incorporated into the system in order to allow composition of higher level </text>
<text top="643" left="135" width="326" height="16" font="1">operations using the more basic instructions. </text>
<text top="674" left="189" width="608" height="16" font="1">Overall, the system discovers solutions to problems by using the given training data </text>
<text top="705" left="135" width="666" height="16" font="1">to generate subprograms built from the original basic instructions. For each training data set </text>
<text top="736" left="135" width="655" height="16" font="1">given, the system invokes the LGP engine and adds the resulting program with the highest </text>
<text top="768" left="135" width="658" height="16" font="1">fitness to the set of discovered programs (Figure 3.1). This process is then repeated several </text>
<text top="799" left="135" width="569" height="16" font="1">times or until an exact match is found or a predetermined threshold is reached. </text>
<text top="830" left="189" width="600" height="16" font="1">This approach allows the system to build upon past successes and discoveries. The </text>
<text top="861" left="135" width="658" height="16" font="1">project's implementation of the system also allows for a single run to use  multiple training </text>
<text top="892" left="135" width="678" height="16" font="1">memory buffer pairs each with its own input and target/goal buffer. The effect is that for each </text>
<text top="923" left="135" width="675" height="16" font="1">iteration each candidate individual is tested against all training pair memory buffers and their </text>
<text top="954" left="135" width="668" height="16" font="1">fitness results averaged. For example, if the system is given the task to discover the addition </text>
<text top="985" left="135" width="670" height="16" font="1">function it will be necessary to give the system more than just one example of addition since </text>
<text top="1016" left="135" width="673" height="16" font="1">otherwise a very specific program will be discovered that solves that the particular example.  </text>
</page>
<page number="27" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">14 </text>
<text top="440" left="692" width="5" height="16" font="1"> </text>
<text top="471" left="135" width="224" height="16" font="0"><b>Figure 3.1. System overview. </b></text>
<text top="518" left="136" width="657" height="16" font="1">But by providing multiple training memory buffer pairs we limit the system to producing a </text>
<text top="549" left="136" width="356" height="16" font="1">method that satisfies all of the mappings instead. </text>
<text top="599" left="338" width="26" height="19" font="2"><b>3.2</b></text>
<text top="602" left="365" width="4" height="15" font="9"><b> </b></text>
<text top="599" left="369" width="13" height="19" font="2"><b>P</b></text>
<text top="602" left="381" width="127" height="15" font="9"><b>ROGRAMMING </b></text>
<text top="599" left="509" width="14" height="19" font="2"><b>L</b></text>
<text top="602" left="523" width="84" height="15" font="9"><b>ANGUAGE</b></text>
<text top="599" left="607" width="5" height="19" font="2"><b> </b></text>
<text top="632" left="189" width="623" height="16" font="1">The programming language does not use any terminals or constants other than what is </text>
<text top="663" left="135" width="660" height="16" font="1">supplied in the input buffer. Instructions take, as the situation warrants, input from the next </text>
<text top="694" left="135" width="664" height="16" font="1">available memory position in input memory. There are also instructions that can advance or </text>
<text top="725" left="135" width="666" height="16" font="1">regress the current position in both input memory as well as the instruction pointer. There is </text>
<text top="756" left="135" width="677" height="16" font="1">also a temporary memory buffer that can be used to save and load values as needed for future </text>
<text top="787" left="135" width="33" height="16" font="1">use. </text>
<text top="818" left="189" width="449" height="16" font="1">The basic instructions can be classified according to function: </text>
<text top="849" left="162" width="14" height="16" font="1">1.</text>
<text top="848" left="176" width="5" height="17" font="3"> </text>
<text top="849" left="189" width="455" height="16" font="1">Arithmetic/Boolean: Unary operators on integer/Boolean data. </text>
<text top="878" left="162" width="14" height="16" font="1">2.</text>
<text top="878" left="176" width="5" height="17" font="3"> </text>
<text top="878" left="189" width="617" height="16" font="1">Instruction Pointer Control: Affects how the subsequent instruction is to be executed. </text>
<text top="908" left="162" width="14" height="16" font="1">3.</text>
<text top="908" left="176" width="5" height="17" font="3"> </text>
<text top="908" left="189" width="504" height="16" font="1">Temporary Storage: Saves/Loads values for use by other instructions. </text>
<text top="938" left="162" width="14" height="16" font="1">4.</text>
<text top="937" left="176" width="5" height="17" font="3"> </text>
<text top="938" left="189" width="580" height="16" font="1">Data Pointer Control: Affects which input value is to be used for the subsequent </text>
<text top="959" left="189" width="86" height="16" font="1">instruction. </text>
<text top="998" left="368" width="214" height="19" font="2"><b>3.2.1 Basic Instructions </b></text>
<text top="1031" left="189" width="609" height="16" font="1">The following is a brief description of each type of basic instruction and the class to </text>
<text top="1062" left="135" width="129" height="16" font="1">which it belongs: </text>
</page>
<page number="28" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="10" size="12" family="Times" color="#000000"/>
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">15 </text>
<text top="108" left="162" width="8" height="22" font="5">ï·</text>
<text top="113" left="170" width="5" height="17" font="3"> </text>
<text top="113" left="189" width="609" height="16" font="0"><b>INC: Increment (Boolean/Arithmetic). </b>Reads the next available value in the input </text>
<text top="134" left="189" width="561" height="16" font="1">buffer, increments that value by 1 and returns the result. A value of 255 is not </text>
<text top="155" left="189" width="98" height="16" font="1">incremented. </text>
<text top="180" left="162" width="8" height="22" font="5">ï·</text>
<text top="185" left="170" width="5" height="17" font="3"> </text>
<text top="186" left="189" width="619" height="16" font="0"><b>DEC: Decrement (Boolean/Arithmetic). </b>Reads the next available value in the input </text>
<text top="206" left="189" width="546" height="16" font="1">buffer, decrements that value by 1 and returns the result. A value of 0 is not </text>
<text top="227" left="189" width="101" height="16" font="1">decremented. </text>
<text top="252" left="162" width="8" height="22" font="5">ï·</text>
<text top="257" left="170" width="5" height="17" font="3"> </text>
<text top="258" left="189" width="623" height="16" font="0"><b>IF: If condition (Instruction Pointer Control). </b>Reads the next available value in the </text>
<text top="279" left="189" width="572" height="16" font="1">input buffer and if the value is even (i.e. the first bit is 0) the next instruction is </text>
<text top="299" left="189" width="456" height="16" font="1">skipped. Otherwise, the next instruction is executed as normal. </text>
<text top="325" left="162" width="8" height="22" font="5">ï·</text>
<text top="330" left="170" width="5" height="17" font="3"> </text>
<text top="330" left="189" width="593" height="16" font="0"><b>LOOP: Loop structure (Instruction Pointer Control). </b>Reads the next available </text>
<text top="351" left="189" width="587" height="16" font="1">value in the input buffer and executes the next instruction repeatedly for as many </text>
<text top="372" left="189" width="624" height="16" font="1">times as the input value. If the input value is zero, the next instruction is not executed. </text>
<text top="397" left="162" width="8" height="22" font="5">ï·</text>
<text top="402" left="170" width="5" height="17" font="3"> </text>
<text top="403" left="189" width="599" height="16" font="0"><b>PUSH: Push/Save value (Temporary Storage). </b>Reads the next available value in </text>
<text top="424" left="189" width="572" height="16" font="1">the input buffer and saves it to temporary memory without advancing the input </text>
<text top="444" left="189" width="117" height="16" font="1">buffer's pointer. </text>
<text top="470" left="162" width="8" height="22" font="5">ï·</text>
<text top="475" left="170" width="5" height="17" font="3"> </text>
<text top="475" left="189" width="583" height="16" font="0"><b>POP: Pop/Load value (Temporary Storage). </b>Reads the next available value in </text>
<text top="496" left="189" width="624" height="16" font="1">temporary memory. If there are no previous values saved, an error condition is set and </text>
<text top="517" left="189" width="611" height="16" font="1">the program terminates early, causing all subsequent instructions to not be executed. </text>
<text top="542" left="162" width="8" height="22" font="5">ï·</text>
<text top="547" left="170" width="5" height="17" font="3"> </text>
<text top="548" left="189" width="597" height="16" font="0"><b>NEXT: Next value (Data Pointer Control). </b>Reads the next available value in the </text>
<text top="568" left="189" width="614" height="16" font="1">input buffer and returns it, effectively incrementing the input buffer's pointer by one. </text>
<text top="594" left="162" width="8" height="22" font="5">ï·</text>
<text top="599" left="170" width="5" height="17" font="3"> </text>
<text top="599" left="189" width="567" height="16" font="0"><b>PREV: Previous value (Data Pointer Control). </b>Decrement's the input buffer </text>
<text top="620" left="189" width="452" height="16" font="1">pointer's position by one and returns the value at that position. </text>
<text top="645" left="162" width="8" height="22" font="5">ï·</text>
<text top="650" left="170" width="5" height="17" font="3"> </text>
<text top="651" left="189" width="609" height="16" font="0"><b>NOP: No Operation. </b>Performs no operation. Included for GA performance checks. </text>
<text top="691" left="405" width="141" height="19" font="2"><b>3.2.2 Programs </b></text>
<text top="723" left="189" width="618" height="16" font="1">Programs are defined using the Composite pattern [4] with a base unit consisting of a </text>
<text top="754" left="135" width="637" height="16" font="1">single instruction. The notation for describing a program starts with an open curly brace </text>
<text top="785" left="135" width="665" height="16" font="1">character&#34;{&#34; followed by a comma-separated list of instruction codes or other programs and </text>
<text top="816" left="135" width="459" height="16" font="1">terminated with a close curly brace character &#34;}&#34;. For example, </text>
<text top="818" left="594" width="85" height="13" font="10">{ INC, DEC }</text>
<text top="816" left="680" width="130" height="16" font="1"> is a program that </text>
<text top="847" left="135" width="658" height="16" font="1">contains the two basic instructions to first increment the next value and then decrement the </text>
<text top="878" left="135" width="117" height="16" font="1">value after that. </text>
<text top="909" left="189" width="558" height="16" font="1">Programs can also contain other programs (i.e. &#34;subprograms&#34;). For example </text>
<text top="911" left="747" width="51" height="13" font="10">{ INC { </text>
<text top="943" left="135" width="85" height="13" font="10">INC, DEC } }</text>
<text top="940" left="220" width="545" height="16" font="1"> is a program that contains the basic instruction to increment the next value </text>
<text top="971" left="135" width="598" height="16" font="1">followed by the previous example's program. Any combination of instructions and </text>
<text top="1003" left="135" width="669" height="16" font="1">subprograms are considered valid programs. For example, one possible instruction sequence </text>
<text top="1033" left="135" width="670" height="16" font="1">for summing an array of integers whose first parameter defines the length of the array would </text>
</page>
<page number="29" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">16 </text>
<text top="112" left="135" width="21" height="16" font="1">be </text>
<text top="114" left="156" width="378" height="13" font="10">{ { INC } { LOOP { LOOP { INC } { INC } DEC } PREV } }</text>
<text top="112" left="535" width="243" height="16" font="1">.  The term &#34;operation&#34; is used to </text>
<text top="143" left="135" width="357" height="16" font="1">mean either a single instruction or a subprogram. </text>
<text top="174" left="189" width="576" height="16" font="1">Multiple operations that are part of the same program are said to be in the same </text>
<text top="205" left="135" width="662" height="16" font="1">&#34;context&#34;. Whereas operations that are part of a subprogram are said to be either at a higher </text>
<text top="236" left="135" width="648" height="16" font="1">level context or lower level context. The previous example of the series sum program has </text>
<text top="267" left="135" width="339" height="16" font="1">multiple subprograms and is three levels deep. </text>
<text top="298" left="189" width="616" height="16" font="1">Each program can be measured using three metrics: size, cost and energy. The &#34;size&#34; </text>
<text top="331" left="135" width="56" height="16" font="1">metric (</text>
<text top="325" left="191" width="11" height="22" font="5">ï³</text>
<text top="331" left="202" width="599" height="16" font="1">) refers to the number of instructions or subprograms that are in the root context of </text>
<text top="364" left="135" width="280" height="16" font="1">the program. The &#34;cost&#34; of a program (</text>
<text top="358" left="416" width="10" height="22" font="5">ï«</text>
<text top="364" left="425" width="360" height="16" font="1">) is a recursive definition calculated by taking the </text>
<text top="397" left="135" width="648" height="16" font="1">sum of the size of the program and the cost all of its subprograms. A program's &#34;energy&#34; (</text>
<text top="391" left="783" width="8" height="22" font="5">ï¥</text>
<text top="397" left="791" width="10" height="16" font="1">) </text>
<text top="429" left="135" width="649" height="16" font="1">is calculated only by running the program using a given input set. Each instruction within </text>
<text top="460" left="135" width="661" height="16" font="1">each subprogram that is executed increments the root program's energy value. This value is </text>
<text top="491" left="135" width="630" height="16" font="1">also incremented every time a subprogram is invoked thus accounting for the overhead </text>
<text top="522" left="135" width="444" height="16" font="1">involved in creating a new context. For example, the program</text>
<text top="524" left="579" width="107" height="13" font="10"> { { INC } DEC }</text>
<text top="522" left="687" width="111" height="16" font="1"> is said to have </text>
<text top="553" left="135" width="669" height="16" font="1">an energy value of three. The energy value is important as it allows a maximum threshold to </text>
<text top="584" left="135" width="610" height="16" font="1">be set in order to limit the amount of time and resources a program takes to execute. </text>
<text top="615" left="189" width="625" height="16" font="1">The combination of these metrics also gives insight into a program's complexity. Note </text>
<text top="647" left="135" width="122" height="16" font="1">that for all cases </text>
<text top="642" left="257" width="67" height="22" font="5">ï³ï ï£ï ï«ï ï£ï ï¥</text>
<text top="647" left="323" width="175" height="16" font="1">. Furthermore, note that </text>
<text top="642" left="498" width="8" height="22" font="5">ï¥</text>
<text top="647" left="506" width="279" height="16" font="1"> is always dependent on the input data </text>
<text top="679" left="135" width="671" height="16" font="1">and can only be calculated by executing the program. The following is a sample compilation </text>
<text top="710" left="135" width="442" height="16" font="1">of information that can be gleaned from a program's metrics: </text>
<text top="743" left="162" width="14" height="16" font="1">1.</text>
<text top="742" left="176" width="5" height="17" font="3"> </text>
<text top="737" left="189" width="49" height="22" font="5">ï³ï ï½ï ï«ïºï </text>
<text top="743" left="238" width="453" height="16" font="1">The program is simple and does not contain any subprograms. </text>
<text top="774" left="162" width="14" height="16" font="1">2.</text>
<text top="773" left="176" width="5" height="17" font="3"> </text>
<text top="768" left="189" width="40" height="22" font="5">ï³ï ï¼ï ï«</text>
<text top="774" left="228" width="365" height="16" font="1">: The program contains one or more subprograms. </text>
<text top="805" left="162" width="14" height="16" font="1">3.</text>
<text top="804" left="176" width="5" height="17" font="3"> </text>
<text top="799" left="189" width="35" height="22" font="5">ï³ï ï¯ï ï«</text>
<text top="805" left="224" width="579" height="16" font="1">: The ratio of subprograms to individual instructions. Smaller values represent a </text>
<text top="825" left="189" width="624" height="16" font="1">larger number of subprograms. A value smaller than 50% indicates more subprograms </text>
<text top="846" left="189" width="601" height="16" font="1">than instructions and is a sign of inefficiency as the program is taking more time in </text>
<text top="867" left="189" width="221" height="16" font="1">unnecessary context switches. </text>
<text top="896" left="189" width="559" height="16" font="1">Programs are executed by individually performing each instruction within its </text>
<text top="928" left="135" width="662" height="16" font="1">subprograms in order from left to right and are terminated when one of three conditions are </text>
<text top="959" left="135" width="69" height="16" font="1">satisfied: </text>
<text top="990" left="162" width="14" height="16" font="1">1.</text>
<text top="989" left="176" width="5" height="17" font="3"> </text>
<text top="990" left="189" width="479" height="16" font="1">There are no further operations to execute within the root context. </text>
<text top="1019" left="162" width="14" height="16" font="1">2.</text>
<text top="1019" left="176" width="5" height="17" font="3"> </text>
<text top="1019" left="189" width="519" height="16" font="1">Input has been requested but there are no further input values available. </text>
<text top="1050" left="162" width="14" height="16" font="1">3.</text>
<text top="1050" left="176" width="5" height="17" font="3"> </text>
<text top="1050" left="189" width="454" height="16" font="1">The program reaches its maximum allowable energy threshold </text>
<text top="1045" left="644" width="11" height="22" font="5">ï</text>
<text top="1050" left="655" width="9" height="16" font="1">. </text>
</page>
<page number="30" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">17 </text>
<text top="113" left="335" width="279" height="19" font="2"><b>3.2.3 Input/Output Operations </b></text>
<text top="145" left="189" width="614" height="16" font="1">I/O operation rules play an important role in the semantics of the language and are at </text>
<text top="176" left="135" width="652" height="16" font="1">the core of simulating value passing from one operation to the next. Instructions generally </text>
<text top="207" left="135" width="627" height="16" font="1">take a single integer value, operate on that value and output a result. The algorithm for </text>
<text top="238" left="135" width="641" height="16" font="1">determining where the next input value comes from and where the output value is stored </text>
<text top="269" left="135" width="611" height="16" font="1">allows the instructions to work on arrays of integers as well as the results of chained </text>
<text top="301" left="135" width="76" height="16" font="1">functions. </text>
<text top="332" left="189" width="613" height="16" font="1">In the simplest case, a single instruction takes the first value from input memory and </text>
<text top="363" left="135" width="507" height="16" font="1">its output is stored in the first position in output memory (Figure 3.2). </text>
<text top="509" left="808" width="5" height="16" font="1"> </text>
<text top="525" left="135" width="335" height="16" font="0"><b>Figure 3.2. Single instruction program I/O. </b></text>
<text top="573" left="189" width="612" height="16" font="1">If there are multiple instructions within the same program, each instruction takes the </text>
<text top="604" left="135" width="630" height="16" font="1">next value from input memory and its output is stored in the next position in the output </text>
<text top="635" left="135" width="670" height="16" font="1">memory (Figure 3.3). This one-to-one mapping allows programs to be written such that they </text>
<text top="666" left="135" width="493" height="16" font="1">operate on arbitrary sized arrays of input. For example, the program </text>
<text top="668" left="628" width="85" height="13" font="10">{ INC, DEC }</text>
<text top="666" left="714" width="77" height="16" font="1"> takes two </text>
<text top="697" left="135" width="666" height="16" font="1">integers as its input, and outputs two integers with the first being one greater and the second </text>
<text top="728" left="135" width="343" height="16" font="1">being one less than the respective input values. </text>
<text top="871" left="805" width="5" height="16" font="1"> </text>
<text top="887" left="142" width="354" height="16" font="0"><b>Figure 3.3. Multiple instruction program I/O. </b></text>
<text top="935" left="189" width="607" height="16" font="1">In cases where an instruction is followed by a subprogram, the behavior is the same </text>
<text top="966" left="135" width="652" height="16" font="1">as above (Figure 3.4). That is, the first instruction takes the first value from input memory </text>
<text top="997" left="135" width="614" height="16" font="1">and stores its result in the first position of output memory, and the subprogram's first </text>
<text top="1028" left="135" width="662" height="16" font="1">instruction takes the subsequent value(s) from input memory and stores its value in the first </text>
<text top="1059" left="135" width="197" height="16" font="1">position of output memory.</text>
</page>
<page number="31" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">18 </text>
<text top="221" left="797" width="5" height="16" font="1"> </text>
<text top="248" left="142" width="312" height="16" font="0"><b>Figure 3.4. Instruction subprogram I/O. </b></text>
<text top="296" left="189" width="191" height="16" font="1">For example, the program </text>
<text top="298" left="381" width="99" height="13" font="10">{ INC { INC } }</text>
<text top="296" left="480" width="297" height="16" font="1"> first increments the first input value and </text>
<text top="327" left="135" width="443" height="16" font="1">stores it as the first output value. Then, the inner subprogram </text>
<text top="329" left="578" width="48" height="13" font="10">{ INC }</text>
<text top="327" left="626" width="185" height="16" font="1"> is called which takes the </text>
<text top="358" left="135" width="643" height="16" font="1">next input value, then increments and stores the result in the subsequent output location.  </text>
<text top="389" left="135" width="298" height="16" font="1">Essentially, this program is equivalent to </text>
<text top="391" left="434" width="81" height="13" font="10">{ INC, INC }</text>
<text top="389" left="515" width="9" height="16" font="1">. </text>
<text top="420" left="189" width="572" height="16" font="1">For programs that are nested within each other, the result of one subprogram is </text>
<text top="451" left="135" width="659" height="16" font="1">injected into the input buffer for use in the subsequent context. This is achieved through an </text>
<text top="482" left="135" width="659" height="16" font="1">internal memory buffer that is responsible for holding the resulting values of a subprogram </text>
<text top="513" left="135" width="609" height="16" font="1">for use by the next instruction or subprogram. In cases where there is no subsequent </text>
<text top="544" left="135" width="636" height="16" font="1">instruction or subprogram its contents are simply copied onto the output memory buffer </text>
<text top="575" left="135" width="95" height="16" font="1">(Figure 3.5). </text>
<text top="733" left="807" width="5" height="16" font="1"> </text>
<text top="750" left="142" width="278" height="16" font="0"><b>Figure 3.5. Nested subprogram I/O. </b></text>
<text top="798" left="189" width="191" height="16" font="1">For example, the program </text>
<text top="800" left="381" width="99" height="13" font="10">{ { INC } INC }</text>
<text top="798" left="480" width="272" height="16" font="1"> increments the first value from input </text>
<text top="829" left="135" width="613" height="16" font="1">memory, then injects the results in the internal memory buffer. Then, the subsequent </text>
<text top="860" left="135" width="649" height="16" font="1">instruction is given the input from this internal memory buffer and its results are stored in </text>
<text top="891" left="135" width="667" height="16" font="1">output memory. If the internal memory buffer is exhausted, the input memory buffer is used </text>
<text top="922" left="135" width="105" height="16" font="1">to draw input. </text>
<text top="953" left="189" width="601" height="16" font="1">The final component to I/O operations is the use of a temporary stack buffer that is </text>
<text top="984" left="135" width="601" height="16" font="1">available to programs for use within their own context through the PUSH and POP </text>
<text top="1015" left="135" width="642" height="16" font="1">instructions. Each subprogram creates its own temporary stack buffer which is discarded </text>
<text top="1046" left="135" width="244" height="16" font="1">when the subprogram terminates. </text>
</page>
<page number="32" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">19 </text>
<text top="113" left="376" width="198" height="19" font="2"><b>3.2.4 Instruction Pool </b></text>
<text top="145" left="189" width="593" height="16" font="1">The Instruction Pool is a singleton object that manages all known programs in the </text>
<text top="176" left="135" width="648" height="16" font="1">system at any given point in time. It is effectively the long-term memory of the system as </text>
<text top="207" left="135" width="673" height="16" font="1">new programs are discovered by the LGP engine. Each instruction and program is assigned a </text>
<text top="238" left="135" width="609" height="16" font="1">unique integer identifier by the Instruction Pool and is guaranteed not to be an exact </text>
<text top="269" left="135" width="667" height="16" font="1">duplicate of another program (Figure 3.6). Finally, the Instruction Pool is used as a resource </text>
<text top="301" left="135" width="661" height="16" font="1">for selecting a random instruction. This will become important in the mutation phase of the </text>
<text top="332" left="135" width="205" height="16" font="1">LGP's generational process. </text>
<text top="869" left="806" width="5" height="16" font="1"> </text>
<text top="886" left="135" width="477" height="16" font="0"><b>Figure 3.6. Instruction pool internal representation structure. </b></text>
<text top="934" left="341" width="268" height="19" font="2"><b>3.2.5 Sample Program Traces </b></text>
<text top="967" left="189" width="625" height="16" font="1">Several sample program traces are provided to illustrate the execution method and I/O </text>
<text top="998" left="135" width="302" height="16" font="1">operations of the programming language. </text>
<text top="1029" left="189" width="607" height="16" font="0"><b>Program 1:</b> This program takes one argument, increments its value and outputs the </text>
<text top="1060" left="135" width="49" height="16" font="1">result: </text>
</page>
<page number="33" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">20 </text>
<text top="111" left="449" width="51" height="13" font="10">{ INC } </text>
<text top="138" left="430" width="11" height="22" font="5">ï³</text>
<text top="144" left="440" width="37" height="16" font="1"> = 1, </text>
<text top="138" left="478" width="10" height="22" font="5">ï«</text>
<text top="144" left="487" width="33" height="16" font="1"> = 1 </text>
<text top="180" left="189" width="589" height="16" font="1">The program simply executes the INC instruction which takes one argument, and </text>
<text top="211" left="135" width="127" height="16" font="1">outputs its value. </text>
<text top="242" left="189" width="582" height="16" font="0"><b>Program 2a:</b> This program takes one argument and outputs the same argument: </text>
<text top="272" left="423" width="103" height="13" font="10">{{ INC } DEC } </text>
<text top="299" left="430" width="11" height="22" font="5">ï³</text>
<text top="304" left="440" width="37" height="16" font="1"> = 2, </text>
<text top="299" left="478" width="10" height="22" font="5">ï«</text>
<text top="304" left="487" width="33" height="16" font="1"> = 3 </text>
<text top="341" left="189" width="603" height="16" font="1">The program starts out by creating a new context, then executing Program 1 above. </text>
<text top="372" left="135" width="551" height="16" font="1">The result of Program 1 is then decremented by one and the result is output. </text>
<text top="403" left="189" width="540" height="16" font="0"><b>Program 2b:</b> This program is an alternate implementation of Program 2a: </text>
<text top="433" left="425" width="98" height="13" font="10">{ PUSH, POP } </text>
<text top="459" left="430" width="11" height="22" font="5">ï³</text>
<text top="465" left="440" width="37" height="16" font="1"> = 2, </text>
<text top="459" left="478" width="10" height="22" font="5">ï«</text>
<text top="465" left="487" width="33" height="16" font="1"> = 2 </text>
<text top="501" left="189" width="613" height="16" font="1">The program starts out by storing the first input value onto the temporary stack, then </text>
<text top="532" left="135" width="653" height="16" font="1">removing the value from the temporary stack and outputting the result. Note that the input </text>
<text top="563" left="135" width="671" height="16" font="1">memory buffer's pointer is not incremented in this case, which will have a different effect on </text>
<text top="595" left="135" width="340" height="16" font="1">a parent program's execution than Program 2a. </text>
<text top="626" left="189" width="531" height="16" font="0"><b>Program 3a:</b> This program takes two arguments and outputs the second: </text>
<text top="656" left="388" width="173" height="13" font="10">{ NEXT { { INC } DEC } } </text>
<text top="682" left="430" width="11" height="22" font="5">ï³</text>
<text top="688" left="440" width="37" height="16" font="1"> = 3, </text>
<text top="682" left="478" width="10" height="22" font="5">ï«</text>
<text top="688" left="487" width="33" height="16" font="1"> = 5 </text>
<text top="724" left="189" width="623" height="16" font="1">The program starts by skipping the first input value, then invoking Program 2a above. </text>
<text top="755" left="189" width="540" height="16" font="0"><b>Program 3b:</b> This program is an alternate implementation of Program 3a: </text>
<text top="786" left="399" width="151" height="13" font="10">{ NEXT { INC } DEC } </text>
<text top="812" left="430" width="11" height="22" font="5">ï³</text>
<text top="818" left="440" width="37" height="16" font="1"> = 3, </text>
<text top="812" left="478" width="10" height="22" font="5">ï«</text>
<text top="818" left="487" width="33" height="16" font="1"> = 4 </text>
<text top="854" left="189" width="625" height="16" font="1">The program starts by skipping the first input value, then incrementing the subsequent </text>
<text top="885" left="135" width="626" height="16" font="1">input value and finally decrementing the result and outputting the original value of the </text>
<text top="916" left="135" width="624" height="16" font="1">second argument. Note that the cost value of this program is smaller than Program 3a. </text>
<text top="947" left="189" width="553" height="16" font="0"><b>Program 4:</b> This program adds two integers together and outputs the result: </text>
<text top="977" left="417" width="116" height="13" font="10">{ LOOP { INC } } </text>
<text top="1004" left="430" width="11" height="22" font="5">ï³</text>
<text top="1010" left="440" width="37" height="16" font="1"> = 2, </text>
<text top="1004" left="478" width="10" height="22" font="5">ï«</text>
<text top="1010" left="487" width="33" height="16" font="1"> = 3 </text>
</page>
<page number="34" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">21 </text>
<text top="112" left="189" width="620" height="16" font="1">The program starts out by reading the first argument's value and executing Program 1 </text>
<text top="143" left="135" width="644" height="16" font="1">that many times. For example, if the input arguments were &#34;4 3&#34; then the program would </text>
<text top="174" left="135" width="590" height="16" font="1">execute Program 1 four times effectively yielding the following unrolled version: </text>
<text top="176" left="726" width="84" height="13" font="10">{ { { { INC } </text>
<text top="207" left="135" width="118" height="13" font="10">INC } INC } INC }</text>
<text top="205" left="253" width="508" height="16" font="1">. Note that the input value read for each subsequent INC instruction is </text>
<text top="236" left="135" width="588" height="16" font="1">actually the result of the previous operation that has been injected into the queue. </text>
<text top="267" left="189" width="614" height="16" font="0"><b>Program 5:</b> This program increments the members of a given arbitrary sized integer </text>
<text top="298" left="135" width="46" height="16" font="1">array: </text>
<text top="329" left="426" width="96" height="13" font="10">{ LOOP, INC } </text>
<text top="355" left="430" width="11" height="22" font="5">ï³</text>
<text top="361" left="440" width="37" height="16" font="1"> = 2, </text>
<text top="355" left="478" width="10" height="22" font="5">ï«</text>
<text top="361" left="487" width="33" height="16" font="1"> = 2 </text>
<text top="397" left="189" width="620" height="16" font="1">The program starts by taking as its first input the size of the array. Then incrementing </text>
<text top="428" left="135" width="675" height="16" font="1">each value of the array and outputting the result. For example, if the input arguments were &#34;3 </text>
<text top="459" left="135" width="639" height="16" font="1">1 2 3&#34; the program would execute the INC operation three times effectively yielding the </text>
<text top="490" left="135" width="202" height="16" font="1">following unrolled version: </text>
<text top="492" left="337" width="114" height="13" font="10">{ INC, INC, INC }</text>
<text top="490" left="451" width="269" height="16" font="1"> resulting in the output array &#34;2 3 4&#34;. </text>
<text top="540" left="361" width="26" height="19" font="2"><b>3.3</b></text>
<text top="543" left="388" width="4" height="15" font="9"><b> </b></text>
<text top="540" left="392" width="43" height="19" font="2"><b>LGP</b></text>
<text top="543" left="434" width="4" height="15" font="9"><b> </b></text>
<text top="540" left="438" width="15" height="19" font="2"><b>C</b></text>
<text top="543" left="453" width="131" height="15" font="9"><b>ONFIGURATION</b></text>
<text top="540" left="584" width="5" height="19" font="2"><b> </b></text>
<text top="572" left="189" width="595" height="16" font="1">The LGP is the system's search engine that looks for programs that satisfy various </text>
<text top="604" left="135" width="660" height="16" font="1">input-goal memory buffer training pairs. It may be invoked numerous times within a single </text>
<text top="635" left="135" width="673" height="16" font="1">attempt at solving a given problem. At the end of each iteration, the best resultant program is </text>
<text top="666" left="135" width="647" height="16" font="1">stored in the Instruction Pool thus allowing it to become usable as a subprogram in future </text>
<text top="697" left="135" width="76" height="16" font="1">iterations. </text>
<text top="747" left="379" width="192" height="19" font="2"><b>3.3.1 GA Parameters </b></text>
<text top="779" left="189" width="610" height="16" font="1">As with all GAs, the LGP engine has various tunable parameters. The following is a </text>
<text top="810" left="135" width="637" height="16" font="1">description of the tunable parameters and their effects on the performance of the overall </text>
<text top="841" left="135" width="57" height="16" font="1">engine: </text>
<text top="867" left="162" width="8" height="22" font="5">ï·</text>
<text top="873" left="170" width="5" height="17" font="3"> </text>
<text top="873" left="189" width="613" height="16" font="0"><b>Maximum Number of Invocations: </b>The LGP engine may be invoked several times </text>
<text top="894" left="189" width="609" height="16" font="1">and with each successive iteration the best result is stored in the Instruction Pool for </text>
<text top="915" left="189" width="557" height="16" font="1">use as a potential part of another program in future invocations. This process </text>
<text top="935" left="189" width="597" height="16" font="1">terminates immediately if a perfect solution is found. However, in many cases it is </text>
<text top="956" left="189" width="546" height="16" font="1">necessary to invoke the LGP search multiple times in order to build several </text>
<text top="977" left="189" width="623" height="16" font="1">subprograms over time that can be used to further the goal. The Maximum Number of </text>
<text top="997" left="189" width="577" height="16" font="1">Invocations is the maximum number of times the LGP engine is invoked before </text>
<text top="1018" left="189" width="589" height="16" font="1">giving up on the search. Smaller values may not yield enough opportunity for the </text>
<text top="1039" left="189" width="598" height="16" font="1">LGP engine to work towards building subprograms for use in an ultimate solution. </text>
<text top="1059" left="189" width="530" height="16" font="1">Increasing this number gives the LGP engine more opportunities to build </text>
</page>
<page number="35" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">22 </text>
<text top="112" left="189" width="598" height="16" font="1">subprograms, at the expense of processing time. Furthermore, if the LGP engine is </text>
<text top="133" left="189" width="615" height="16" font="1">unable to solve the problem, it begins emitting the same solutions repeatedly with no </text>
<text top="153" left="189" width="70" height="16" font="1">progress.<b> </b></text>
<text top="183" left="243" width="567" height="16" font="1">For the scope of the given experiments and through numerous trials a value of </text>
<text top="204" left="189" width="625" height="16" font="1">seven (7) was seen as optimal since overall if a solution did exist, it could be found on </text>
<text top="224" left="189" width="614" height="16" font="1">average within seven invocations. Trials were conducted with maximum invocations </text>
<text top="245" left="189" width="316" height="16" font="1">ranging from two (2) to one hundred (100). </text>
<text top="270" left="162" width="8" height="22" font="5">ï·</text>
<text top="276" left="170" width="5" height="17" font="3"> </text>
<text top="276" left="189" width="562" height="16" font="0"><b>Population Size: </b>The population size refers to the number of individuals that </text>
<text top="297" left="189" width="604" height="16" font="1">comprise the population pool upon which the engine operates on. A population size </text>
<text top="317" left="189" width="621" height="16" font="1">that is too small decreases performance by squeezing out diversity too rapidly as each </text>
<text top="338" left="189" width="596" height="16" font="1">individual is a larger portion of the whole population. A small population size also </text>
<text top="359" left="189" width="586" height="16" font="1">limits novelty and discovery through mutations as there are less actual mutations </text>
<text top="380" left="189" width="607" height="16" font="1">being performed with each mutation having a much larger impact on the population </text>
<text top="400" left="189" width="85" height="16" font="1">as a whole.<b> </b></text>
<text top="430" left="243" width="551" height="16" font="1">A population size that is too large pays a very heavy penalty in performance </text>
<text top="451" left="189" width="597" height="16" font="1">since a larger population also affects the number of pruning, crossover, and fitness </text>
<text top="471" left="189" width="163" height="16" font="1">evaluation operations. </text>
<text top="501" left="243" width="511" height="16" font="1">For the purpose of this project, a population size of one-hundred (100) </text>
<text top="522" left="189" width="622" height="16" font="1">individuals was deemed optimal. Trials were conducted with population sizes ranging </text>
<text top="543" left="189" width="590" height="16" font="1">from twenty (20) to two-hundred (200) with all other factors remaining the same. </text>
<text top="568" left="162" width="8" height="22" font="5">ï·</text>
<text top="573" left="170" width="5" height="17" font="3"> </text>
<text top="574" left="189" width="596" height="16" font="0"><b>Maximum Number of Generations: </b>The number of generations is the maximum </text>
<text top="594" left="189" width="622" height="16" font="1">number of times the population pool is pruned and repopulated before terminating the </text>
<text top="615" left="189" width="569" height="16" font="1">process. As with the Maximum Number of Invocations above, the LGP engine </text>
<text top="636" left="189" width="614" height="16" font="1">terminates the search as soon as a perfect solution is found. However, in cases where </text>
<text top="656" left="189" width="596" height="16" font="1">a perfect solution is not found, the engine terminates upon reaching the Maximum </text>
<text top="677" left="189" width="557" height="16" font="1">Number of Generations. Increasing this value gives more opportunity for the </text>
<text top="698" left="189" width="622" height="16" font="1">population to find on an optimal solution at the expense of processing time. However, </text>
<text top="718" left="189" width="604" height="16" font="1">beyond a certain threshold the population will converge and successive generations </text>
<text top="739" left="189" width="584" height="16" font="1">will not yield significant advances. If the number of generations is too small, the </text>
<text top="760" left="189" width="615" height="16" font="1">engine will not have a chance to prune and modify the population enough to yield an </text>
<text top="781" left="189" width="127" height="16" font="1">optimal solution.<b> </b></text>
<text top="810" left="243" width="556" height="16" font="1">For the purpose of this project, a Maximum Number of Generations value of </text>
<text top="831" left="189" width="577" height="16" font="1">seventy-five (75) was selected. Trials were conducted with values ranging from </text>
<text top="852" left="189" width="251" height="16" font="1">twenty (20) to two-hundred (200). </text>
<text top="877" left="162" width="8" height="22" font="5">ï·</text>
<text top="882" left="170" width="5" height="17" font="3"> </text>
<text top="883" left="189" width="600" height="16" font="0"><b>Crossover Rate: </b>With each new generation, the population is pruned and replaced </text>
<text top="903" left="189" width="604" height="16" font="1">with a new set of individuals. Each individual from the previous generation may be </text>
<text top="924" left="189" width="611" height="16" font="1">mated with a different individual to generate a new offspring. This process is known </text>
<text top="945" left="189" width="624" height="16" font="1">as crossover and the rate at which this process occurs is a tunable parameter known as </text>
<text top="965" left="189" width="609" height="16" font="1">the Crossover Rate. If this value is too low, it takes a large number of generations to </text>
<text top="986" left="189" width="624" height="16" font="1">advance the individuals in fitness as most individuals simply get carried over from the </text>
<text top="1007" left="189" width="617" height="16" font="1">previous generation. Conversely, if this value is too high, the small incremental gains </text>
<text top="1028" left="189" width="551" height="16" font="1">made by an individual may not have a chance to be passed on to subsequent </text>
<text top="1048" left="189" width="92" height="16" font="1">generations. </text>
</page>
<page number="36" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">23 </text>
<text top="112" left="243" width="562" height="16" font="1">For the purpose of this project, a crossover rate of seventy percent (70%) was </text>
<text top="133" left="189" width="125" height="16" font="1">deemed optimal. </text>
<text top="158" left="162" width="8" height="22" font="5">ï·</text>
<text top="163" left="170" width="5" height="17" font="3"> </text>
<text top="164" left="189" width="625" height="16" font="0"><b>Mutation Rate: </b>As part of the crossover process, the child individual may or may not </text>
<text top="184" left="189" width="621" height="16" font="1">be mutated. The mutation process introduces novelty by randomly changing a portion </text>
<text top="205" left="189" width="617" height="16" font="1">of the individual's genotype. The Mutation Rate refers to the likelihood that mutation </text>
<text top="226" left="189" width="612" height="16" font="1">will be triggered after crossover has taken place. If this rate is too high, it is likely to </text>
<text top="246" left="189" width="605" height="16" font="1">disrupt the progress of the GA by erasing the incremental gains of fit individuals. If </text>
<text top="267" left="189" width="619" height="16" font="1">the rate is too low, the system will have no way of overcoming local optima by trying </text>
<text top="288" left="189" width="117" height="16" font="1">something new.<b> </b></text>
<text top="317" left="230" width="569" height="16" font="1">For the purpose of this study, the mutation rate was set to ten percent (10%) of </text>
<text top="338" left="189" width="622" height="16" font="1">the crossover rate for an effective rate of seven percent (7%) of the overall population </text>
<text top="359" left="189" width="148" height="16" font="1">for each generation. </text>
<text top="399" left="321" width="308" height="19" font="2"><b>3.3.2 Crossover/Mutation Method </b></text>
<text top="431" left="189" width="618" height="16" font="1">The crossover/mutation method for the LGP drives the generation of new individuals </text>
<text top="462" left="135" width="678" height="16" font="1">and solutions. This method is at the core of finding solutions in the search space and is highly </text>
<text top="493" left="135" width="377" height="16" font="1">dependent on the genotype encoding of individuals. </text>
<text top="543" left="135" width="58" height="19" font="2"><b>3.3.2.1</b></text>
<text top="546" left="193" width="4" height="15" font="9"><b> </b></text>
<text top="543" left="197" width="16" height="19" font="2"><b>G</b></text>
<text top="546" left="214" width="80" height="15" font="9"><b>ENOTYPE</b></text>
<text top="543" left="293" width="19" height="19" font="2"><b>/P</b></text>
<text top="546" left="312" width="97" height="15" font="9"><b>HENOTYPE </b></text>
<text top="543" left="408" width="14" height="19" font="2"><b>E</b></text>
<text top="546" left="423" width="80" height="15" font="9"><b>NCODING</b></text>
<text top="543" left="502" width="5" height="19" font="2"><b> </b></text>
<text top="575" left="189" width="608" height="16" font="1">The genotype of individuals in the population is represented by an array of integers. </text>
<text top="606" left="135" width="677" height="16" font="1">These integers are simply nominal and carry no intrinsic numerical meaning. Rather, they are </text>
<text top="637" left="135" width="639" height="16" font="1">the identifiers, or operation codes, of each operation as assigned by the Instruction Pool. </text>
<text top="668" left="189" width="616" height="16" font="1">The genotypes are interpreted into complete programs by deciphering each operation </text>
<text top="700" left="135" width="675" height="16" font="1">code using the Instruction Pool. The program and all of its operations are executed according </text>
<text top="730" left="135" width="678" height="16" font="1">to their order in the genotype array. Note that subprograms are defined in the Instruction Pool </text>
<text top="762" left="135" width="639" height="16" font="1">and not in the genotype of the individual. This implies that the genotype only carries the </text>
<text top="793" left="135" width="675" height="16" font="1">instructions and subprograms for its own context. As such, there is no need for the individual </text>
<text top="824" left="135" width="652" height="16" font="1">to maintain a tree-like structure for its subprograms, since each subprogram is responsible </text>
<text top="855" left="135" width="192" height="16" font="1">solely for its own context. </text>
<text top="886" left="189" width="257" height="16" font="1">For example, consider the program </text>
<text top="888" left="446" width="168" height="13" font="10">{ { LOOP { INC } } DEC }</text>
<text top="886" left="614" width="162" height="16" font="1">. This program can be </text>
<text top="917" left="135" width="540" height="16" font="1">encoded as the following array [ 11, 2 ] where 11 refers to the subprogram </text>
<text top="919" left="675" width="112" height="13" font="10">{ LOOP { INC } }</text>
<text top="917" left="787" width="5" height="16" font="1"> </text>
<text top="948" left="135" width="397" height="16" font="1">and 2 refers to the instruction DEC.  The subprogram {</text>
<text top="950" left="532" width="105" height="13" font="10"> LOOP { INC } }</text>
<text top="948" left="637" width="174" height="16" font="1"> itself would be defined </text>
<text top="979" left="135" width="654" height="16" font="1">by the instruction pool as the array [ 4, 10 ] where 4 refers to the instruction LOOP and 10 </text>
<text top="1010" left="135" width="424" height="16" font="1">refers to the subprogram { INC }. Finally, the subprogram </text>
<text top="1012" left="559" width="48" height="13" font="10">{ INC }</text>
<text top="1010" left="607" width="187" height="16" font="1"> is simply defined as [ 1 ] </text>
<text top="1041" left="135" width="298" height="16" font="1">referring to the instruction code for INC. </text>
</page>
<page number="37" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="11" size="10" family="Times" color="#000000"/>
	<fontspec id="12" size="8" family="Times" color="#000000"/>
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">24 </text>
<text top="113" left="135" width="58" height="19" font="2"><b>3.3.2.2</b></text>
<text top="116" left="193" width="4" height="15" font="9"><b> </b></text>
<text top="113" left="197" width="12" height="19" font="2"><b>S</b></text>
<text top="116" left="209" width="91" height="15" font="9"><b>ELECTION </b></text>
<text top="113" left="299" width="15" height="19" font="2"><b>A</b></text>
<text top="116" left="314" width="95" height="15" font="9"><b>LGORITHM</b></text>
<text top="113" left="409" width="5" height="19" font="2"><b> </b></text>
<text top="145" left="189" width="585" height="16" font="1">As the algorithm is repopulating a new generation, a crossover event is triggered </text>
<text top="176" left="135" width="665" height="16" font="1">based on the Crossover Rate. When this event is triggered, two individuals must be selected </text>
<text top="207" left="135" width="654" height="16" font="1">from the current generation to be mated together. This selection can be performed through </text>
<text top="238" left="135" width="629" height="16" font="1">different algorithms. These include the Roulette Wheel Selector, Tournament Selector, </text>
<text top="269" left="135" width="640" height="16" font="1">Uniform Selector, among others. For the purpose of this study the Uniform Selector was </text>
<text top="301" left="135" width="648" height="16" font="1">chosen as it provided the simplest and most efficient algorithm. Both Roulette Wheel and </text>
<text top="332" left="135" width="636" height="16" font="1">Tournament were used in different trials with similar performance results. The Uniform </text>
<text top="363" left="135" width="614" height="16" font="1">selector works by giving equal selection probability to all individuals in the previous </text>
<text top="394" left="135" width="86" height="16" font="1">population. </text>
<text top="444" left="135" width="58" height="19" font="2"><b>3.3.2.3</b></text>
<text top="447" left="193" width="4" height="15" font="9"><b> </b></text>
<text top="444" left="197" width="15" height="19" font="2"><b>C</b></text>
<text top="447" left="212" width="95" height="15" font="9"><b>ROSSOVER </b></text>
<text top="444" left="306" width="15" height="19" font="2"><b>A</b></text>
<text top="447" left="321" width="95" height="15" font="9"><b>LGORITHM</b></text>
<text top="444" left="416" width="5" height="19" font="2"><b> </b></text>
<text top="476" left="189" width="617" height="16" font="1">The crossover algorithm is responsible for generating a single individual, the &#34;child&#34;, </text>
<text top="507" left="135" width="656" height="16" font="1">from two other individuals, the &#34;parents&#34;. The algorithm selected was a simple but slightly </text>
<text top="538" left="135" width="663" height="16" font="1">modified variation of the standard two-point crossover method found in many GA systems: </text>
<text top="570" left="162" width="12" height="16" font="1">a.</text>
<text top="570" left="174" width="5" height="17" font="3"> </text>
<text top="570" left="189" width="368" height="16" font="1">For the input parents A and B, let s be the lesser of </text>
<text top="564" left="557" width="11" height="22" font="5">ï³</text>
<text top="577" left="568" width="9" height="11" font="11">A</text>
<text top="570" left="576" width="35" height="16" font="1"> and </text>
<text top="564" left="611" width="11" height="22" font="5">ï³</text>
<text top="578" left="622" width="7" height="9" font="12">B</text>
<text top="570" left="629" width="5" height="16" font="1"> </text>
<text top="600" left="162" width="14" height="16" font="1">b.</text>
<text top="599" left="176" width="5" height="17" font="3"> </text>
<text top="600" left="189" width="445" height="16" font="1">Copy the contents of parent A onto the target child individual </text>
<text top="630" left="162" width="12" height="16" font="1">c.</text>
<text top="629" left="174" width="5" height="17" font="3"> </text>
<text top="630" left="189" width="316" height="16" font="1">Select a random number x such that x &lt; s/2 </text>
<text top="659" left="162" width="14" height="16" font="1">d.</text>
<text top="659" left="176" width="5" height="17" font="3"> </text>
<text top="659" left="189" width="342" height="16" font="1">Select a random number y such that s/2 &lt; y &lt; s </text>
<text top="689" left="162" width="12" height="16" font="1">e.</text>
<text top="688" left="174" width="5" height="17" font="3"> </text>
<text top="689" left="189" width="578" height="16" font="1">Copy the contents of parent B from position x to position y onto the target child </text>
<text top="710" left="189" width="78" height="16" font="1">individual </text>
<text top="750" left="135" width="58" height="19" font="2"><b>3.3.2.4</b></text>
<text top="753" left="193" width="4" height="15" font="9"><b> </b></text>
<text top="750" left="197" width="20" height="19" font="2"><b>M</b></text>
<text top="753" left="217" width="79" height="15" font="9"><b>UTATION </b></text>
<text top="750" left="295" width="15" height="19" font="2"><b>A</b></text>
<text top="753" left="310" width="95" height="15" font="9"><b>LGORITHM</b></text>
<text top="750" left="404" width="5" height="19" font="2"><b> </b></text>
<text top="782" left="189" width="561" height="16" font="1">The mutation process is responsible for altering a given individual in order to </text>
<text top="813" left="135" width="678" height="16" font="1">introduce novelty to the solution. In the case of programs, this alteration can take one of three </text>
<text top="844" left="135" width="649" height="16" font="1">forms: switching one instruction for another, removing an operation from the program, or </text>
<text top="875" left="135" width="262" height="16" font="1">adding an operation to the program. </text>
<text top="906" left="189" width="618" height="16" font="1">The algorithm iterates through all operations of a program's root context and makes a </text>
<text top="937" left="135" width="667" height="16" font="1">decision as to whether to mutate a given operation through a biased coin toss. This coin toss </text>
<text top="968" left="135" width="672" height="16" font="1">uses the mutation rate as set in (3.3.1). Once it is determined that the given operation is to be </text>
<text top="999" left="135" width="667" height="16" font="1">mutated, the Instruction Pool is referenced to select its replacement from the available set of </text>
<text top="1030" left="135" width="659" height="16" font="1">all operations. After all operations have been considered for mutation, the system performs </text>
<text top="1061" left="135" width="673" height="16" font="1">another biased coin toss using the same mutation rate to determine whether to add or remove </text>
</page>
<page number="38" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">25 </text>
<text top="112" left="135" width="672" height="16" font="1">any operations from the new individual. If the coin toss succeeds then a second fair coin toss </text>
<text top="143" left="135" width="621" height="16" font="1">is used to determine whether to remove or add an operation. If the system is to add an </text>
<text top="174" left="135" width="647" height="16" font="1">operation, the Instruction Pool is again referenced in the same manner as the replacement </text>
<text top="205" left="135" width="415" height="16" font="1">phase above to select an operation from the available set. </text>
<text top="236" left="189" width="617" height="16" font="1">Note that a powerful aspect of this method is that it can replace an entire subprogram </text>
<text top="267" left="135" width="588" height="16" font="1">in an individual with a single instruction and vice-versa, or add and remove large </text>
<text top="298" left="135" width="291" height="16" font="1">subprograms through a single mutation. </text>
<text top="348" left="371" width="42" height="19" font="2"><b>3.3.3</b></text>
<text top="348" left="413" width="6" height="19" font="8"><b> </b></text>
<text top="348" left="425" width="154" height="19" font="2"><b>Fitness Function </b></text>
<text top="381" left="189" width="572" height="16" font="1">The fitness function is described in general form and by its bounds and ranges. </text>
<text top="431" left="135" width="58" height="19" font="2"><b>3.3.3.1</b></text>
<text top="434" left="193" width="4" height="15" font="9"><b> </b></text>
<text top="431" left="197" width="16" height="19" font="2"><b>G</b></text>
<text top="434" left="214" width="72" height="15" font="9"><b>ENERAL </b></text>
<text top="431" left="285" width="13" height="19" font="2"><b>F</b></text>
<text top="434" left="298" width="75" height="15" font="9"><b>ORMULA</b></text>
<text top="431" left="373" width="5" height="19" font="2"><b> </b></text>
<text top="463" left="189" width="591" height="16" font="1">From a philosophical stand point, the overall fitness of an individual is defined as </text>
<text top="494" left="135" width="613" height="16" font="1">being &#34;how well did the individual perform with regard to the amount of resources it </text>
<text top="525" left="135" width="647" height="16" font="1">consumed&#34;. This valuation is inspired by natural selection in which the trade-off between </text>
<text top="556" left="135" width="654" height="16" font="1">achievement and efficiency is rewarded through proliferation. In the case of programs, the </text>
<text top="587" left="135" width="606" height="16" font="1">fitness function can be broken down to three major aspects that can be described by </text>
<text top="618" left="135" width="257" height="16" font="1">answering the following questions: </text>
<text top="650" left="157" width="14" height="16" font="1">1.</text>
<text top="650" left="170" width="5" height="17" font="3"> </text>
<text top="650" left="188" width="74" height="16" font="1">Exertion &#34;</text>
<text top="645" left="262" width="9" height="22" font="5">ï¸</text>
<text top="650" left="271" width="521" height="16" font="1">&#34;: How well does the program's output count match the expected output </text>
<text top="671" left="188" width="53" height="16" font="1">count? </text>
<text top="702" left="157" width="14" height="16" font="1">2.</text>
<text top="702" left="170" width="5" height="17" font="3"> </text>
<text top="702" left="189" width="81" height="16" font="1">Accuracy &#34;</text>
<text top="696" left="270" width="11" height="22" font="5">ï¡</text>
<text top="702" left="281" width="495" height="16" font="1">&#34;: How close does the program's output values come to the expected </text>
<text top="723" left="189" width="109" height="16" font="1">output values? </text>
<text top="754" left="158" width="14" height="16" font="1">3.</text>
<text top="753" left="171" width="5" height="17" font="3"> </text>
<text top="754" left="189" width="86" height="16" font="1">Efficiency &#34;</text>
<text top="748" left="275" width="10" height="22" font="5">ï«</text>
<text top="754" left="285" width="397" height="16" font="1">&#34;: How efficiently does the program achieve its result? </text>
<text top="784" left="189" width="602" height="16" font="1">The first question aims to minimize overexertion or under-exertion of a program in </text>
<text top="815" left="135" width="646" height="16" font="1">regard to its output. This is critical for generating building blocks that are able to become </text>
<text top="846" left="135" width="654" height="16" font="1">subprograms of other larger programs. Conversely, if a program does not generate enough </text>
<text top="877" left="135" width="678" height="16" font="1">output it is penalized for not finishing the job. Again if a program does not entirely output the </text>
<text top="908" left="135" width="670" height="16" font="1">correct number of values, then in situations where the program's output is used as input for a </text>
<text top="939" left="135" width="676" height="16" font="1">subsequent operation the integrity of the data is compromised. The value is calculated simply </text>
<text top="970" left="135" width="671" height="16" font="1">as the difference between the number of values output by the program and the target number </text>
<text top="1001" left="135" width="674" height="16" font="1">of values that the ideal program should output. For example, if the output of a given program </text>
</page>
<page number="39" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">26 </text>
<text top="113" left="135" width="393" height="16" font="1">is [ 3 1 1] but the goal is [ 5 ], then the exertion value (</text>
<text top="108" left="529" width="9" height="22" font="5">ï¸</text>
<text top="113" left="537" width="235" height="16" font="1">) is 2 since the program's output </text>
<text top="145" left="135" width="444" height="16" font="1">overexerts itself by outputting two values more than it needs. </text>
<text top="176" left="189" width="596" height="16" font="1">The accuracy of a program is determined by the output's proximity to the goal and </text>
<text top="207" left="135" width="665" height="16" font="1">aims to pressure the program to give correct values as its output. This is measured using the </text>
<text top="240" left="135" width="598" height="16" font="1">average of two of the distance formulas discussed in (2.2.2): Euclidean difference (</text>
<text top="234" left="734" width="17" height="22" font="5">ïï©</text>
<text top="240" left="751" width="48" height="16" font="1"> using </text>
<text top="273" left="135" width="368" height="16" font="1">simple integer subtraction and Hamming distance (</text>
<text top="267" left="503" width="17" height="22" font="5">ï¨ï©</text>
<text top="273" left="520" width="290" height="16" font="1"> using unsigned bitwise operations. The </text>
<text top="305" left="135" width="638" height="16" font="1">reason for using both instead of one exclusively is that through trials Hamming distance </text>
<text top="335" left="135" width="652" height="16" font="1">yielded better results than Euclidean distance in certain cases and vice-versa. Whereas the </text>
<text top="367" left="135" width="606" height="16" font="1">average yielded equal or better results in all cases. The difference formulas for both </text>
<text top="398" left="135" width="660" height="16" font="1">Euclidean and Hamming distance only consider the available target values. For example, if </text>
<text top="429" left="135" width="651" height="16" font="1">the output of a program is [ 3 1 1 ] and the goal is just [ 3 ], then the accuracy is said to be </text>
<text top="460" left="135" width="656" height="16" font="1">zero, or exact, even though there are undesirable values at the end of the program's output. </text>
<text top="491" left="189" width="617" height="16" font="1">The third factor is aimed at controlling code growth by applying parsimony pressure. </text>
<text top="522" left="135" width="651" height="16" font="1">A program that can achieve its task with less instructions is considered to be more fit than </text>
<text top="553" left="135" width="639" height="16" font="1">one that performs the same task using more resources. Factoring in this value causes the </text>
<text top="584" left="135" width="625" height="16" font="1">trade-off between exploration and exploitation becomes a factor. If a program is given </text>
<text top="615" left="135" width="671" height="16" font="1">survival priority because of its parsimony, it may not have a chance to combine with another </text>
<text top="646" left="135" width="640" height="16" font="1">group of instructions to produce a correct solution. Conversely, eliminating this variable </text>
<text top="677" left="135" width="671" height="16" font="1">results in a very large set of instructions that have no effect on the output of the program and </text>
<text top="708" left="135" width="676" height="16" font="1">are wasteful both in terms of exploration as well as consuming resources. For the purposes of </text>
<text top="741" left="135" width="508" height="16" font="1">the experiments, the efficiency value was simply set equal to the cost (</text>
<text top="735" left="643" width="10" height="22" font="5">ï«</text>
<text top="741" left="653" width="113" height="16" font="1">) of a program. </text>
<text top="772" left="189" width="615" height="16" font="1">The fitness function is computed using these three components in the formula shown </text>
<text top="803" left="135" width="102" height="16" font="1">in Figure 3.7. </text>
<text top="895" left="511" width="5" height="16" font="1"> </text>
<text top="971" left="531" width="5" height="16" font="1"> </text>
<text top="988" left="331" width="285" height="16" font="0"><b>Figure 3.7. Fitness function formula. </b></text>
</page>
<page number="40" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="13" size="10" family="Symbol" color="#000000"/>
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">27 </text>
<text top="113" left="189" width="358" height="16" font="1">The formula gives equal importance to accuracy (</text>
<text top="108" left="547" width="11" height="22" font="5">ï¡</text>
<text top="113" left="559" width="111" height="16" font="1">) and exertion (</text>
<text top="108" left="669" width="9" height="22" font="5">ï¸</text>
<text top="113" left="678" width="135" height="16" font="1">) by averaging the </text>
<text top="145" left="135" width="618" height="16" font="1">two values together. If, using the original metaphor of fitness above, we consider this </text>
<text top="176" left="135" width="671" height="16" font="1">averaged value to be the &#34;achievement&#34; of the program, then multiplying it by the amount of </text>
<text top="207" left="135" width="679" height="16" font="1">resources the program consumed will embody our philosophy of &#34;how well did the individual </text>
<text top="238" left="135" width="449" height="16" font="1">perform with regard to the amount of resources it consumed.&#34; </text>
<text top="288" left="135" width="58" height="19" font="2"><b>3.3.3.2</b></text>
<text top="291" left="193" width="4" height="15" font="9"><b> </b></text>
<text top="288" left="197" width="14" height="19" font="2"><b>B</b></text>
<text top="291" left="211" width="101" height="15" font="9"><b>OUNDS AND </b></text>
<text top="288" left="312" width="15" height="19" font="2"><b>R</b></text>
<text top="291" left="327" width="57" height="15" font="9"><b>ANGES</b></text>
<text top="288" left="384" width="5" height="19" font="2"><b> </b></text>
<text top="321" left="189" width="581" height="16" font="1">For practical operation, this general formula was bounded by the following hard </text>
<text top="352" left="135" width="51" height="16" font="1">limits: </text>
<text top="383" left="162" width="14" height="16" font="1">1.</text>
<text top="382" left="176" width="5" height="17" font="3"> </text>
<text top="383" left="189" width="610" height="16" font="1">A maximum cost threshold &#34;K&#34; is established that limits the cost value of a program </text>
<text top="403" left="189" width="619" height="16" font="1">not to exceed this amount. For the experiments in this project, a value of one hundred </text>
<text top="424" left="189" width="118" height="16" font="1">(100) was used. </text>
<text top="454" left="162" width="14" height="16" font="1">2.</text>
<text top="453" left="176" width="5" height="17" font="3"> </text>
<text top="454" left="189" width="608" height="16" font="1">A maximum I/O buffer size &#34;S&#34; is established that limits the total size of an input or </text>
<text top="474" left="189" width="624" height="16" font="1">output buffer to not exceed this amount. For the experiments in this project, a value of </text>
<text top="495" left="189" width="106" height="16" font="1">256 was used. </text>
<text top="525" left="189" width="600" height="16" font="1">Given these hard limits, the range of the fitness formula can be calculated by using </text>
<text top="556" left="135" width="671" height="16" font="1">the ranges of each component with the smallest value indicating the best possible fitness and </text>
<text top="587" left="135" width="414" height="16" font="1">the maximum value indicating the worst possible fitness. </text>
<text top="619" left="162" width="14" height="16" font="1">1.</text>
<text top="619" left="176" width="5" height="17" font="3"> </text>
<text top="619" left="189" width="548" height="16" font="1">The Euclidean distance between two memory buffers A and B is denoted as </text>
<text top="613" left="737" width="11" height="22" font="5">ï</text>
<text top="622" left="748" width="17" height="15" font="13">ïï</text>
<text top="613" left="765" width="5" height="22" font="5">ï </text>
<text top="619" left="769" width="30" height="16" font="1">and </text>
<text top="641" left="189" width="413" height="16" font="1">is calculated by taking the sum of the Euclidean distance </text>
<text top="636" left="602" width="9" height="22" font="5">ï¤</text>
<text top="641" left="611" width="154" height="16" font="1"> between each 16-bit </text>
<text top="662" left="189" width="618" height="16" font="1">integer of each of the two buffers. The maximum Euclidean distance between two 16-</text>
<text top="684" left="189" width="566" height="16" font="1">bit integers is 256, and the minimum difference is zero yielding a range of 0 â¤ </text>
<text top="678" left="755" width="9" height="22" font="5">ï¤</text>
<text top="684" left="764" width="19" height="16" font="1"> â¤ </text>
<text top="705" left="189" width="620" height="16" font="1">256. In cases where the memory buffers are of different sizes, then the smaller size of </text>
<text top="725" left="189" width="600" height="16" font="1">the two buffers is used and the values that have no corresponding counterpart from </text>
<text top="746" left="189" width="598" height="16" font="1">one buffer to the other are not considered in the difference. As such, the maximum </text>
<text top="768" left="189" width="396" height="16" font="1">possible difference is (256 * S) yielding a range of 0 â¤ </text>
<text top="762" left="585" width="11" height="22" font="5">ï</text>
<text top="775" left="596" width="17" height="11" font="11">AB</text>
<text top="768" left="613" width="83" height="16" font="1"> â¤ 256 * S. </text>
<text top="799" left="162" width="14" height="16" font="1">2.</text>
<text top="799" left="176" width="5" height="17" font="3"> </text>
<text top="799" left="189" width="548" height="16" font="1">The Hamming distance between two memory buffers A and B is denoted as </text>
<text top="793" left="737" width="11" height="22" font="5">ï¨</text>
<text top="806" left="748" width="17" height="11" font="11">AB</text>
<text top="799" left="764" width="35" height="16" font="1"> and </text>
<text top="820" left="189" width="576" height="16" font="1">is calculated by taking the sum of the Hamming distance h between each 16-bit </text>
<text top="841" left="189" width="618" height="16" font="1">integer of each of the two buffers. The maximum Hamming distance between two 16-</text>
<text top="861" left="189" width="612" height="16" font="1">bit integers is 16, and the minimum difference is zero yielding a range of 0 â¤ h â¤ 16. </text>
<text top="882" left="189" width="611" height="16" font="1">In cases where the memory buffers are of different sizes, then the smaller size of the </text>
<text top="903" left="189" width="604" height="16" font="1">two buffers is used and the values that have no corresponding counterpart from one </text>
<text top="923" left="189" width="617" height="16" font="1">buffer to the other are not considered in the distance. As such, the maximum possible </text>
<text top="946" left="189" width="324" height="16" font="1">difference is (16 * S) yielding a range of 0 â¤ </text>
<text top="940" left="513" width="11" height="22" font="5">ï¨</text>
<text top="952" left="524" width="17" height="11" font="11">AB</text>
<text top="946" left="540" width="74" height="16" font="1"> â¤ 16 * S. </text>
<text top="977" left="162" width="14" height="16" font="1">3.</text>
<text top="976" left="176" width="5" height="17" font="3"> </text>
<text top="977" left="189" width="465" height="16" font="1">Using the above ranges, we can calculate the range for accuracy </text>
<text top="971" left="655" width="11" height="22" font="5">ï¡</text>
<text top="977" left="666" width="124" height="16" font="1"> by simply using </text>
<text top="999" left="189" width="498" height="16" font="1">the maximum and minimum values for each component yielding 0 â¤ </text>
<text top="993" left="687" width="11" height="22" font="5">ï¡</text>
<text top="999" left="699" width="109" height="16" font="1"> â¤ 136 * (S/2). </text>
<text top="1030" left="162" width="14" height="16" font="1">4.</text>
<text top="1029" left="176" width="5" height="17" font="3"> </text>
<text top="1030" left="189" width="139" height="16" font="1">The exertion value </text>
<text top="1024" left="329" width="9" height="22" font="5">ï¸</text>
<text top="1030" left="337" width="469" height="16" font="1"> between two buffers A and B is simply the difference in the size </text>
<text top="1050" left="189" width="618" height="16" font="1">of the buffers. Since a buffer can be completely empty, the minimum size for a buffer </text>
</page>
<page number="41" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">28 </text>
<text top="113" left="189" width="220" height="16" font="1">is zero yielding a range of 0 â¤ </text>
<text top="108" left="409" width="9" height="22" font="5">ï¸</text>
<text top="113" left="418" width="38" height="16" font="1"> â¤ S. </text>
<text top="143" left="162" width="14" height="16" font="1">5.</text>
<text top="142" left="176" width="5" height="17" font="3"> </text>
<text top="143" left="189" width="622" height="16" font="1">Using the above ranges, we can calculate the final fitness value F for a given program </text>
<text top="164" left="189" width="620" height="16" font="1">by using the maximum and minimum values for each component: 0 â¤ F â¤ 137 * (S/2) </text>
<text top="184" left="189" width="369" height="16" font="1">*K. (See Figure 3.8 for the fitness function range.) </text>
<text top="426" left="637" width="5" height="16" font="1"> </text>
<text top="443" left="311" width="267" height="16" font="0"><b>Figure 3.8. Fitness function range. </b></text>
<text top="491" left="331" width="26" height="19" font="2"><b>3.4</b></text>
<text top="494" left="357" width="4" height="15" font="9"><b> </b></text>
<text top="491" left="362" width="12" height="19" font="2"><b>S</b></text>
<text top="494" left="373" width="99" height="15" font="9"><b>OURCES OF </b></text>
<text top="491" left="472" width="8" height="19" font="2"><b>I</b></text>
<text top="494" left="481" width="92" height="15" font="9"><b>NDUCTIVE </b></text>
<text top="491" left="573" width="14" height="19" font="2"><b>B</b></text>
<text top="494" left="587" width="28" height="15" font="9"><b>IAS</b></text>
<text top="491" left="614" width="5" height="19" font="2"><b> </b></text>
<text top="523" left="189" width="582" height="16" font="1">As with any system, there are numerous biases that are vital. Indeed, each of the </text>
<text top="555" left="135" width="645" height="16" font="1">components of the system, by providing structure to govern the flow of execution, are by </text>
<text top="586" left="135" width="638" height="16" font="1">themselves a source of inductive bias. We can compare these components to the laws of </text>
<text top="617" left="135" width="654" height="16" font="1">physics in the natural world which direct all other systems in the universe. For example, if </text>
<text top="648" left="135" width="664" height="16" font="1">instead of attracting two bodies gravity's effect was to repel, the world as we know it would </text>
<text top="679" left="135" width="621" height="16" font="1">not exist. We are, in essence, attempting to provide a small universe in which the best </text>
<text top="710" left="135" width="672" height="16" font="1">solutions can grow and flourish. A brief summary of the inductive bias of each component is </text>
<text top="741" left="135" width="114" height="16" font="1">presented here: </text>
<text top="772" left="162" width="632" height="16" font="1">1.   <b>Fitness Function:</b> The fitness function is generally the primary source of inductive </text>
<text top="792" left="189" width="599" height="16" font="1">bias in any metaheuristic learning method. After all, the judgement of whether one </text>
<text top="813" left="189" width="619" height="16" font="1">individual is &#34;better&#34; than another is the very definition of bias. This function focuses </text>
<text top="834" left="189" width="570" height="16" font="1">on emulating natural systems by binding the fitness to the amount of resources </text>
<text top="855" left="189" width="561" height="16" font="1">consumed and then shifts the remaining burden of fitness to the training data. </text>
<text top="875" left="189" width="613" height="16" font="1">Nevertheless, the decision to use one distance formula over another is clearly a large </text>
<text top="896" left="189" width="613" height="16" font="1">source of inductive bias as even very small changes to this formula greatly affect the </text>
<text top="917" left="189" width="258" height="16" font="1">outcome of the solutions produced. </text>
<text top="946" left="162" width="627" height="16" font="1">2.   <b>Programming Language:</b> The language with which to express a solution is also a </text>
<text top="967" left="189" width="596" height="16" font="1">source of inductive bias since the language itself is unchangeable. Furthermore, as </text>
<text top="988" left="189" width="607" height="16" font="1">evident in spoken languages, there are often concepts that cannot be translated from </text>
<text top="1008" left="189" width="621" height="16" font="1">one language to another without losing a significant amount of meaning. This reflects </text>
<text top="1029" left="189" width="608" height="16" font="1">the experiences of a culture that created words by necessity to express concepts that </text>
<text top="1050" left="189" width="612" height="16" font="1">another culture may not necessarily have been exposed to. By allowing the language </text>
</page>
<page number="42" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">29 </text>
<text top="112" left="189" width="606" height="16" font="1">to create subprograms composed of the underlying basic instructions, we attempt to </text>
<text top="133" left="189" width="590" height="16" font="1">minimize the impact of the language by essentially endowing the system with the </text>
<text top="153" left="189" width="542" height="16" font="1">ability to form new &#34;words&#34; to the vocabulary in the form of subprograms. </text>
<text top="183" left="162" width="623" height="16" font="1">3.   <b>Instruction Pool:</b> The Instruction Pool's selection algorithm is a source of bias by </text>
<text top="204" left="189" width="599" height="16" font="1">attempting to give equal selection probability to all operations that it stores when a </text>
<text top="224" left="189" width="599" height="16" font="1">random operation is requested at mutation time. This algorithm is, of course, static </text>
<text top="245" left="189" width="623" height="16" font="1">and unchangeable regardless of the types of problems to which the system is exposed. </text>
</page>
<page number="43" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">30 </text>
<text top="152" left="413" width="124" height="19" font="2"><b>CHAPTER 4 </b></text>
<text top="206" left="426" width="99" height="19" font="2"><b>RESULTS </b></text>
<text top="261" left="409" width="26" height="19" font="2"><b>4.1</b></text>
<text top="264" left="435" width="4" height="15" font="9"><b> </b></text>
<text top="261" left="440" width="16" height="19" font="2"><b>O</b></text>
<text top="264" left="456" width="80" height="15" font="9"><b>VERVIEW</b></text>
<text top="261" left="536" width="5" height="19" font="2"><b> </b></text>
<text top="293" left="189" width="578" height="16" font="1">Numerous trials were conducted with the aim of having the system discover the </text>
<text top="324" left="135" width="644" height="16" font="1">instruction sequence for increasingly complex tasks. For each task, thirty (30) trials were </text>
<text top="355" left="135" width="636" height="16" font="1">conducted with the same input-goal memory buffer pairs in order to explore the various </text>
<text top="386" left="135" width="592" height="16" font="1">possible solutions that the system could discover.  For many of the more complex </text>
<text top="417" left="135" width="673" height="16" font="1">experiments we added &#34;junk&#34; values at the end of the input array as we wanted to ensure that </text>
<text top="448" left="135" width="655" height="16" font="1">the solutions did not consider more input than necessary. In each section, the results of the </text>
<text top="479" left="135" width="317" height="16" font="1">trials are presented in the following format: </text>
<text top="510" left="162" width="12" height="16" font="1">a.</text>
<text top="509" left="174" width="5" height="17" font="3"> </text>
<text top="510" left="189" width="610" height="16" font="0"><b>Description:</b> A brief description of the task and what its aims are. All of the devised </text>
<text top="531" left="189" width="306" height="16" font="1">tasks are familiar mathematical functions. </text>
<text top="560" left="162" width="14" height="16" font="1">b.</text>
<text top="560" left="176" width="5" height="17" font="3"> </text>
<text top="560" left="189" width="557" height="16" font="0"><b>Prerequisites:</b> A set of one or more prior tasks that the system needs to have </text>
<text top="581" left="189" width="607" height="16" font="1">discovered first before being able to find the solution to the given task. Often times, </text>
<text top="602" left="189" width="609" height="16" font="1">solutions can be found without the strict need of the prerequisites but may make use </text>
<text top="622" left="189" width="470" height="16" font="1">of them. In these cases, the prerequisite is marked as &#34;Optional.&#34; </text>
<text top="652" left="162" width="12" height="16" font="1">c.</text>
<text top="652" left="174" width="5" height="17" font="3"> </text>
<text top="652" left="189" width="582" height="16" font="0"><b>Training Data Set:</b> This is a mapping of input to goal target values. The system </text>
<text top="673" left="189" width="615" height="16" font="1">considers the Training Data Set at once such that the solutions emitted have to match </text>
<text top="694" left="189" width="566" height="16" font="1">all of the mappings and not just one or some in order to be considered correct. </text>
<text top="723" left="162" width="14" height="16" font="1">d.</text>
<text top="723" left="176" width="5" height="17" font="3"> </text>
<text top="723" left="189" width="594" height="16" font="0"><b>Solutions:</b> Each task is presented to the system for a total of thirty (30) trials. The </text>
<text top="744" left="189" width="598" height="16" font="1">total number of correct solutions that were found at the end of each trial are tallied </text>
<text top="765" left="189" width="604" height="16" font="1">and the success rate calculated and posted here. Each unique solution is also posted </text>
<text top="785" left="189" width="408" height="16" font="1">with the frequency and associated cost value associated. </text>
<text top="815" left="189" width="600" height="16" font="1">The experiments that follow are divided into five categories of problems with each </text>
<text top="846" left="135" width="615" height="16" font="1">subsequent category having problems that are more complex than the previous. Each </text>
<text top="877" left="135" width="663" height="16" font="1">experiment in a given section was conducted after the system had solved all other problems </text>
<text top="908" left="135" width="651" height="16" font="1">in previous sections. For example, any given problem in the third category was conducted </text>
<text top="939" left="135" width="646" height="16" font="1">with a system that had experienced all problems in the first two categories. The system is </text>
<text top="970" left="135" width="654" height="16" font="1">thus able to draw on its past experiences to solve newer more complicated problems much </text>
<text top="1001" left="135" width="658" height="16" font="1">akin to how a child is first taught how to stand, then walk, and then run. Of course, had the </text>
<text top="1033" left="135" width="650" height="16" font="1">system not been deliberately exposed to problems that form the building blocks of a more </text>
</page>
<page number="44" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">31 </text>
<text top="112" left="135" width="669" height="16" font="1">complex problem it would simply not be able to produce any meaningful solutions. This is a </text>
<text top="143" left="135" width="661" height="16" font="1">common problem for GAs that work on complex agents, in contrast with GAs that work on </text>
<text top="174" left="135" width="221" height="16" font="1">optimizing a function [12,13]. </text>
<text top="224" left="391" width="26" height="19" font="2"><b>4.2</b></text>
<text top="227" left="418" width="4" height="15" font="9"><b> </b></text>
<text top="224" left="422" width="14" height="19" font="2"><b>T</b></text>
<text top="227" left="436" width="63" height="15" font="9"><b>RIVIAL </b></text>
<text top="224" left="498" width="14" height="19" font="2"><b>T</b></text>
<text top="227" left="511" width="43" height="15" font="9"><b>ASKS</b></text>
<text top="224" left="554" width="5" height="19" font="2"><b> </b></text>
<text top="256" left="189" width="620" height="16" font="1">The first set of tasks are so simple that a linear search mechanism would be sufficient </text>
<text top="287" left="135" width="670" height="16" font="1">to find the correct solution. However, their discovery by the system is essential to being able </text>
<text top="319" left="135" width="674" height="16" font="1">to solve more complex problems in the future. These trivial tasks are formally defined as any </text>
<text top="351" left="135" width="396" height="16" font="1">task whose solutions are always Simple Programs (i.e. </text>
<text top="345" left="531" width="11" height="22" font="5">ï³</text>
<text top="351" left="542" width="19" height="16" font="1"> = </text>
<text top="345" left="561" width="10" height="22" font="5">ï«</text>
<text top="351" left="571" width="15" height="16" font="1">). </text>
<text top="402" left="293" width="364" height="19" font="2"><b>4.2.1 Increment/Decrement Single Value </b></text>
<text top="434" left="189" width="602" height="16" font="1">Since the system is built using the nine basic instructions, the increment/decrement </text>
<text top="465" left="135" width="672" height="16" font="1">operations are considered trivial. All the system has to do is find the solution by testing from </text>
<text top="496" left="135" width="667" height="16" font="1">one of nine operations and indeed it is able to find this solution with a success rate of 100%. </text>
<text top="527" left="135" width="194" height="16" font="1">The subprogram is always </text>
<text top="529" left="329" width="48" height="13" font="10">{ INC }</text>
<text top="527" left="377" width="137" height="16" font="1"> for increment and </text>
<text top="529" left="514" width="52" height="13" font="10">{ DEC }</text>
<text top="527" left="566" width="196" height="16" font="1"> for decrement. The task is </text>
<text top="558" left="135" width="657" height="16" font="1">worthy of mention since once the solution is discovered it can be used as a subprogram for </text>
<text top="589" left="135" width="665" height="16" font="1">other higher-level tasks, and has different semantics than just the instruction by itself due to </text>
<text top="620" left="135" width="470" height="16" font="1">the value passing property of subprograms as outlined in (3.2.3). </text>
<text top="670" left="274" width="402" height="19" font="2"><b>4.2.2 Increment/Decrement All Array Values </b></text>
<text top="702" left="189" width="618" height="16" font="1">Similar to the Increment/Decrement Single Value, this task is considered trivial since </text>
<text top="733" left="135" width="656" height="16" font="1">the solution is extremely simple. The input is an array of integers with the size of the array </text>
<text top="765" left="135" width="665" height="16" font="1">preceding the values. The system was able to find this solution with a success rate of 100%. </text>
<text top="795" left="135" width="194" height="16" font="1">The subprogram is always </text>
<text top="798" left="329" width="90" height="13" font="10">{ LOOP INC }</text>
<text top="795" left="420" width="137" height="16" font="1"> for increment and </text>
<text top="798" left="557" width="95" height="13" font="10">{ LOOP DEC }</text>
<text top="795" left="652" width="114" height="16" font="1"> for decrement. </text>
<text top="845" left="369" width="26" height="19" font="2"><b>4.3</b></text>
<text top="848" left="395" width="4" height="15" font="9"><b> </b></text>
<text top="845" left="399" width="13" height="19" font="2"><b>F</b></text>
<text top="848" left="412" width="42" height="15" font="9"><b>IRST </b></text>
<text top="845" left="454" width="16" height="19" font="2"><b>O</b></text>
<text top="848" left="471" width="51" height="15" font="9"><b>RDER </b></text>
<text top="845" left="521" width="14" height="19" font="2"><b>T</b></text>
<text top="848" left="533" width="43" height="15" font="9"><b>ASKS</b></text>
<text top="845" left="576" width="5" height="19" font="2"><b> </b></text>
<text top="878" left="189" width="588" height="16" font="1">First Order tasks are those that may need to rely a Trivial Task to find the correct </text>
<text top="909" left="135" width="656" height="16" font="1">solution. More formally, any task whose complete set of possible solutions contain at least </text>
<text top="941" left="135" width="185" height="16" font="1">one Simple Program (i.e. </text>
<text top="935" left="320" width="11" height="22" font="5">ï³</text>
<text top="941" left="331" width="19" height="16" font="1"> = </text>
<text top="935" left="350" width="10" height="22" font="5">ï«</text>
<text top="941" left="360" width="250" height="16" font="1">) is considered a First Order Task. </text>
</page>
<page number="45" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="14" size="12" family="Symbol" color="#000000"/>
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">32 </text>
<text top="113" left="397" width="156" height="19" font="2"><b>4.3.1 Copy Value </b></text>
<text top="145" left="189" width="603" height="16" font="1">The Copy task simply takes an input value and returns that value as its output. This </text>
<text top="176" left="135" width="605" height="16" font="1">may seem like a trivial task but in some cases, it cannot be accomplished unless the </text>
<text top="207" left="135" width="487" height="16" font="1">Increment/Decrement Single Value subprogram is first discovered. </text>
<text top="238" left="189" width="499" height="16" font="0"><b>Prerequisites</b>:<b> </b>Increment/Decrement Single Value (4.2.1) Optional.  </text>
<text top="269" left="189" width="279" height="16" font="1">See Table 4.1 for the training data set.<b> </b></text>
<text top="319" left="135" width="345" height="16" font="0"><b>Table 4.1. Training Data Set for Copy Value </b></text>
<text top="353" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="353" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="397" left="135" width="27" height="16" font="1">0 3 </text>
<text top="397" left="530" width="14" height="16" font="1">0 </text>
<text top="436" left="135" width="14" height="16" font="1">1 </text>
<text top="436" left="530" width="14" height="16" font="1">1 </text>
<text top="476" left="135" width="27" height="16" font="1">2 5 </text>
<text top="476" left="530" width="14" height="16" font="1">2 </text>
<text top="515" left="135" width="40" height="16" font="1">3 7 8 </text>
<text top="515" left="530" width="14" height="16" font="1">3 </text>
<text top="568" left="189" width="85" height="16" font="0"><b>Solutions</b>:  </text>
<text top="599" left="189" width="193" height="16" font="1">Total Solutions Found: 30 </text>
<text top="631" left="189" width="271" height="16" font="1">Success Rate: 100% (see Table 4.2).  </text>
<text top="680" left="135" width="278" height="16" font="0"><b>Table 4.2. Solutions for Copy Value </b></text>
<text top="714" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="714" left="645" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="710" left="739" width="8" height="18" font="14">ï«</text>
<text top="712" left="747" width="5" height="16" font="0"><b> </b></text>
<text top="755" left="135" width="129" height="16" font="1">{ { INC } DEC } </text>
<text top="755" left="668" width="23" height="16" font="1">16 </text>
<text top="755" left="738" width="14" height="16" font="1">4 </text>
<text top="795" left="135" width="118" height="16" font="1">{ PUSH, POP } </text>
<text top="795" left="668" width="23" height="16" font="1">14 </text>
<text top="795" left="738" width="14" height="16" font="1">3 </text>
<text top="849" left="417" width="115" height="19" font="2"><b>4.3.2 Repeat </b></text>
<text top="881" left="189" width="603" height="16" font="1">The Repeat tasks takes two input parameters and repeatedly emits the second value </text>
<text top="913" left="135" width="459" height="16" font="1">by the number of times indicated by the first parameter's value. </text>
<text top="943" left="189" width="326" height="16" font="0"><b>Prerequisites</b>: Copy Value (4.3.1) Optional. </text>
<text top="975" left="189" width="279" height="16" font="1">See Table 4.3 for the training data set. </text>
</page>
<page number="46" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">33 </text>
<text top="130" left="135" width="309" height="16" font="0"><b>Table 4.3. Training Data Set for Repeat </b></text>
<text top="165" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="165" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="204" left="135" width="27" height="16" font="1">5 2 </text>
<text top="204" left="530" width="68" height="16" font="1">2 2 2 2 2 </text>
<text top="243" left="135" width="27" height="16" font="1">3 8 </text>
<text top="243" left="530" width="41" height="16" font="1">8 8 8 </text>
<text top="282" left="135" width="27" height="16" font="1">1 9 </text>
<text top="282" left="530" width="14" height="16" font="1">9 </text>
<text top="321" left="135" width="27" height="16" font="1">3 4 </text>
<text top="321" left="530" width="41" height="16" font="1">4 4 4 </text>
<text top="375" left="135" width="5" height="16" font="1"> </text>
<text top="375" left="189" width="80" height="16" font="1">S<b>olutions</b>: </text>
<text top="406" left="189" width="193" height="16" font="1">Total Solutions Found: 21 </text>
<text top="437" left="189" width="271" height="16" font="1">Success Rate: 70.0% (see Table 4.4). </text>
<text top="486" left="135" width="242" height="16" font="0"><b>Table 4.4. Solutions for Repeat </b></text>
<text top="521" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="521" left="569" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="516" left="725" width="8" height="18" font="14">ï«</text>
<text top="519" left="734" width="5" height="16" font="0"><b> </b></text>
<text top="560" left="135" width="195" height="16" font="1">{ LOOP { PUSH, POP } } </text>
<text top="560" left="592" width="23" height="16" font="1">17 </text>
<text top="560" left="725" width="14" height="16" font="1">5 </text>
<text top="599" left="135" width="257" height="16" font="1">{ { INC } LOOP { PUSH, POP } } </text>
<text top="599" left="601" width="14" height="16" font="1">1 </text>
<text top="599" left="725" width="14" height="16" font="1">8 </text>
<text top="638" left="135" width="279" height="16" font="1">{ LOOP, PUSH, PREV, LOOP, POP } </text>
<text top="638" left="601" width="14" height="16" font="1">1 </text>
<text top="638" left="725" width="14" height="16" font="1">6 </text>
<text top="678" left="135" width="314" height="16" font="1">{ { { LOOP, PUSH, { INC } LOOP, POP } </text>
<text top="709" left="135" width="327" height="16" font="1">LOOP, PREV { { INC }, DEC } } PREV { { </text>
<text top="740" left="135" width="115" height="16" font="1">INC } DEC } } </text>
<text top="678" left="601" width="14" height="16" font="1">1 </text>
<text top="678" left="716" width="23" height="16" font="1">20 </text>
<text top="779" left="135" width="293" height="16" font="1">{ { { LOOP, PUSH, LOOP, POP, POP } </text>
<text top="810" left="135" width="334" height="16" font="1">LOOP, PREV, INC } PREV { { INC } DEC } </text>
<text top="841" left="135" width="54" height="16" font="1">DEC } </text>
<text top="779" left="601" width="14" height="16" font="1">1 </text>
<text top="779" left="716" width="23" height="16" font="1">17 </text>
<text top="896" left="406" width="139" height="19" font="2"><b>4.3.3 Duplicate </b></text>
<text top="928" left="189" width="561" height="16" font="1">The Duplicate task takes a single input parameter and outputs its value twice. </text>
<text top="959" left="189" width="326" height="16" font="0"><b>Prerequisites</b>: Copy Value (4.3.1) Optional. </text>
<text top="990" left="189" width="279" height="16" font="1">See Table 4.5 for the training data set. </text>
</page>
<page number="47" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">34 </text>
<text top="130" left="135" width="329" height="16" font="0"><b>Table 4.5. Training Data Set for Duplicate </b></text>
<text top="165" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="165" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="204" left="135" width="27" height="16" font="1">0 7 </text>
<text top="204" left="530" width="27" height="16" font="1">0 0 </text>
<text top="243" left="135" width="40" height="16" font="1">1 4 3 </text>
<text top="243" left="530" width="27" height="16" font="1">1 1 </text>
<text top="282" left="135" width="58" height="16" font="1">7 100 8 </text>
<text top="282" left="530" width="27" height="16" font="1">7 7 </text>
<text top="336" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="367" left="189" width="193" height="16" font="1">Total Solutions Found: 30 </text>
<text top="398" left="189" width="271" height="16" font="1">Success Rate: 100% (see Table 4.6).  </text>
<text top="447" left="135" width="262" height="16" font="0"><b>Table 4.6. Solutions for Duplicate </b></text>
<text top="482" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="482" left="556" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="477" left="656" width="8" height="18" font="14">ï«</text>
<text top="480" left="664" width="5" height="16" font="0"><b> </b></text>
<text top="520" left="135" width="221" height="16" font="1">{ PUSH { INC } DEC, POP } </text>
<text top="520" left="588" width="14" height="16" font="1">8 </text>
<text top="520" left="655" width="14" height="16" font="1">6 </text>
<text top="560" left="135" width="302" height="16" font="1">{ { INC } PREV { PUSH, DEC, POP } } </text>
<text top="560" left="588" width="14" height="16" font="1">7 </text>
<text top="560" left="655" width="14" height="16" font="1">8 </text>
<text top="599" left="135" width="226" height="16" font="1">{ { INC } DEC, PREV, DEC } </text>
<text top="599" left="588" width="14" height="16" font="1">6 </text>
<text top="599" left="655" width="14" height="16" font="1">6 </text>
<text top="638" left="135" width="213" height="16" font="1">{ PUSH, PUSH, POP, POP } </text>
<text top="638" left="588" width="14" height="16" font="1">4 </text>
<text top="638" left="655" width="14" height="16" font="1">5 </text>
<text top="678" left="135" width="336" height="16" font="1">{ PUSH { PUSH, DEC, POP } LOOP, PUSH, </text>
<text top="709" left="135" width="50" height="16" font="1">POP } </text>
<text top="678" left="588" width="14" height="16" font="1">1 </text>
<text top="678" left="655" width="14" height="16" font="1">9 </text>
<text top="748" left="135" width="340" height="16" font="1">{ { DEC, PREV, PUSH, POP } NEXT, PUSH, </text>
<text top="779" left="135" width="50" height="16" font="1">POP } </text>
<text top="748" left="588" width="14" height="16" font="1">1 </text>
<text top="748" left="655" width="14" height="16" font="1">9 </text>
<text top="818" left="135" width="328" height="16" font="1">{ { PUSH, DEC, POP } LOOP, NOP, PUSH, </text>
<text top="849" left="135" width="50" height="16" font="1">POP } </text>
<text top="818" left="588" width="14" height="16" font="1">1 </text>
<text top="818" left="655" width="14" height="16" font="1">9 </text>
<text top="889" left="135" width="286" height="16" font="1">{ { INC } PREV { INC } DEC, DEC } </text>
<text top="889" left="588" width="14" height="16" font="1">1 </text>
<text top="889" left="655" width="14" height="16" font="1">8 </text>
<text top="928" left="135" width="356" height="16" font="1">{ { { PUSH, DEC, POP }, INC }, LOOP, PUSH, </text>
<text top="959" left="135" width="50" height="16" font="1">POP } </text>
<text top="928" left="588" width="14" height="16" font="1">1 </text>
<text top="928" left="646" width="23" height="16" font="1">10 </text>
</page>
<page number="48" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">35 </text>
<text top="113" left="387" width="176" height="19" font="2"><b>4.3.4 Boolean NOT </b></text>
<text top="145" left="189" width="622" height="16" font="1">The Boolean NOT task takes a single Boolean input parameter and outputs its inverse </text>
<text top="176" left="135" width="48" height="16" font="1">value. </text>
<text top="207" left="189" width="310" height="16" font="0"><b>Prerequisites</b>: Duplicate (4.3.7) Optional. </text>
<text top="238" left="189" width="279" height="16" font="1">See Table 4.7 for the training data set. </text>
<text top="288" left="135" width="360" height="16" font="0"><b>Table 4.7. Training Data Set for Boolean NOT </b></text>
<text top="322" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="322" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="361" left="135" width="14" height="16" font="1">0 </text>
<text top="361" left="530" width="14" height="16" font="1">1 </text>
<text top="400" left="135" width="14" height="16" font="1">1 </text>
<text top="400" left="530" width="14" height="16" font="1">0 </text>
<text top="454" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="485" left="189" width="193" height="16" font="1">Total Solutions Found: 21 </text>
<text top="516" left="189" width="285" height="16" font="1">Success Rate: 70.00% (see Table 4.8).  </text>
<text top="565" left="135" width="293" height="16" font="0"><b>Table 4.8. Solutions for Boolean NOT </b></text>
<text top="600" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="600" left="501" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="595" left="615" width="8" height="18" font="14">ï«</text>
<text top="598" left="624" width="5" height="16" font="0"><b> </b></text>
<text top="639" left="135" width="205" height="16" font="1">{ { DEC } PREV, IF, INC } </text>
<text top="639" left="534" width="14" height="16" font="1">9 </text>
<text top="639" left="615" width="14" height="16" font="1">6 </text>
<text top="678" left="135" width="225" height="16" font="1">{ PUSH, POP, IF, INC, DEC } </text>
<text top="678" left="534" width="14" height="16" font="1">4 </text>
<text top="678" left="615" width="14" height="16" font="1">6 </text>
<text top="717" left="135" width="243" height="16" font="1">{ PUSH { DEC } POP, IF, INC } </text>
<text top="717" left="534" width="14" height="16" font="1">2 </text>
<text top="717" left="615" width="14" height="16" font="1">7 </text>
<text top="756" left="135" width="280" height="16" font="1">{ { DEC } PREV, LOOP, DEC, INC } </text>
<text top="756" left="534" width="14" height="16" font="1">2 </text>
<text top="756" left="615" width="14" height="16" font="1">7 </text>
<text top="796" left="135" width="256" height="16" font="1">{ PUSH, POP, LOOP, DEC, INC } </text>
<text top="796" left="534" width="14" height="16" font="1">1 </text>
<text top="796" left="615" width="14" height="16" font="1">6 </text>
<text top="835" left="135" width="247" height="16" font="1">{ PUSH, POP, IF, INC { DEC } } </text>
<text top="835" left="534" width="14" height="16" font="1">1 </text>
<text top="835" left="615" width="14" height="16" font="1">7 </text>
<text top="874" left="135" width="300" height="16" font="1">{ { DEC } PREV, PUSH, POP, IF, INC } </text>
<text top="874" left="534" width="14" height="16" font="1">1 </text>
<text top="874" left="615" width="14" height="16" font="1">8 </text>
<text top="914" left="135" width="315" height="16" font="1">{ { DEC } PREV, IF, INC, NEXT, PREV } </text>
<text top="914" left="534" width="14" height="16" font="1">1 </text>
<text top="914" left="615" width="14" height="16" font="1">8 </text>
<text top="968" left="388" width="174" height="19" font="2"><b>4.3.5 Boolean AND </b></text>
<text top="1000" left="189" width="605" height="16" font="1">The Boolean AND task takes two Boolean input parameters and outputs their AND </text>
<text top="1031" left="135" width="49" height="16" font="1">result. </text>
</page>
<page number="49" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">36 </text>
<text top="112" left="189" width="326" height="16" font="0"><b>Prerequisites</b>: Copy Value (4.3.1) Optional. </text>
<text top="143" left="189" width="279" height="16" font="1">See Table 4.9 for the training data set.<b> </b></text>
<text top="192" left="135" width="360" height="16" font="0"><b>Table 4.9. Training Data Set for Boolean AND </b></text>
<text top="227" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="227" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="266" left="135" width="40" height="16" font="1">0 0 5 </text>
<text top="266" left="530" width="14" height="16" font="1">0 </text>
<text top="305" left="135" width="49" height="16" font="1">1 0 10 </text>
<text top="305" left="530" width="14" height="16" font="1">0 </text>
<text top="344" left="135" width="40" height="16" font="1">0 1 7 </text>
<text top="344" left="530" width="14" height="16" font="1">0 </text>
<text top="384" left="135" width="27" height="16" font="1">1 1 </text>
<text top="384" left="530" width="14" height="16" font="1">1 </text>
<text top="428" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="459" left="189" width="193" height="16" font="1">Total Solutions Found: 30 </text>
<text top="490" left="189" width="280" height="16" font="1">Success Rate: 100% (see Table 4.10).  </text>
<text top="539" left="135" width="302" height="16" font="0"><b>Table 4.10. Solutions for Boolean AND </b></text>
<text top="574" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="574" left="549" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="570" left="656" width="8" height="18" font="14">ï«</text>
<text top="572" left="664" width="5" height="16" font="0"><b> </b></text>
<text top="613" left="135" width="179" height="16" font="1">{ LOOP { INC } DEC } </text>
<text top="613" left="572" width="23" height="16" font="1">16 </text>
<text top="613" left="655" width="14" height="16" font="1">5 </text>
<text top="652" left="135" width="229" height="16" font="1">{ IF, PREV { { INC } DEC } } </text>
<text top="652" left="581" width="14" height="16" font="1">8 </text>
<text top="652" left="655" width="14" height="16" font="1">7 </text>
<text top="691" left="135" width="215" height="16" font="1">{ PUSH LOOP PUSH POP } </text>
<text top="691" left="581" width="14" height="16" font="1">1 </text>
<text top="691" left="655" width="14" height="16" font="1">5 </text>
<text top="731" left="135" width="263" height="16" font="1">{ PUSH IF POP { { INC } DEC } } </text>
<text top="731" left="581" width="14" height="16" font="1">1 </text>
<text top="731" left="655" width="14" height="16" font="1">8 </text>
<text top="770" left="135" width="206" height="16" font="1">{ LOOP { INC } { DEC } } </text>
<text top="770" left="581" width="14" height="16" font="1">1 </text>
<text top="770" left="655" width="14" height="16" font="1">6 </text>
<text top="809" left="135" width="202" height="16" font="1">{ IF, PREV { INC } DEC } </text>
<text top="809" left="581" width="14" height="16" font="1">1 </text>
<text top="809" left="655" width="14" height="16" font="1">6 </text>
<text top="849" left="135" width="242" height="16" font="1">{ IF { DEC } { { INC } DEC } } </text>
<text top="849" left="581" width="14" height="16" font="1">1 </text>
<text top="849" left="655" width="14" height="16" font="1">8 </text>
<text top="888" left="135" width="357" height="16" font="1">{ { INC } { DEC } IF { DEC } { { INC } DEC } </text>
<text top="919" left="135" width="13" height="16" font="1">} </text>
<text top="888" left="581" width="14" height="16" font="1">1 </text>
<text top="888" left="646" width="23" height="16" font="1">12 </text>
<text top="974" left="394" width="162" height="19" font="2"><b>4.3.6 Boolean OR </b></text>
<text top="1006" left="189" width="553" height="16" font="1">The Boolean OR task takes two Boolean input parameters and outputs their  </text>
<text top="1037" left="135" width="78" height="16" font="1">OR result. </text>
</page>
<page number="50" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">37 </text>
<text top="112" left="189" width="331" height="16" font="0"><b>Prerequisites</b>: Copy Value (4.3.1) Optional.  </text>
<text top="143" left="189" width="288" height="16" font="1">See Table 4.11 for the training data set.<b> </b></text>
<text top="192" left="135" width="357" height="16" font="0"><b>Table 4.11. Training Data Set for Boolean OR </b></text>
<text top="227" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="227" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="266" left="135" width="40" height="16" font="1">0 0 5 </text>
<text top="266" left="530" width="14" height="16" font="1">0 </text>
<text top="305" left="135" width="49" height="16" font="1">1 0 10 </text>
<text top="305" left="530" width="14" height="16" font="1">0 </text>
<text top="344" left="135" width="40" height="16" font="1">0 1 7 </text>
<text top="344" left="530" width="14" height="16" font="1">0 </text>
<text top="384" left="135" width="27" height="16" font="1">1 1 </text>
<text top="384" left="530" width="14" height="16" font="1">1 </text>
<text top="438" left="189" width="82" height="16" font="0"><b>Solutions: </b></text>
<text top="468" left="189" width="193" height="16" font="1">Total Solutions Found: 30 </text>
<text top="499" left="189" width="280" height="16" font="1">Success Rate: 100% (see Table 4.12).  </text>
<text top="548" left="135" width="286" height="16" font="0"><b>Table 4.12 Solutions for Boolean OR </b></text>
<text top="583" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="583" left="495" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="578" left="627" width="14" height="22" font="5">ï«ï </text>
<text top="624" left="135" width="249" height="16" font="1">{ LOOP, PREV { PUSH, POP } } </text>
<text top="624" left="518" width="23" height="16" font="1">12 </text>
<text top="624" left="628" width="14" height="16" font="1">6 </text>
<text top="663" left="135" width="197" height="16" font="1">{ PUSH, IF, PUSH, POP } </text>
<text top="663" left="527" width="14" height="16" font="1">6 </text>
<text top="663" left="628" width="14" height="16" font="1">5 </text>
<text top="702" left="135" width="225" height="16" font="1">{ LOOP, PREV, PUSH, POP } </text>
<text top="702" left="527" width="14" height="16" font="1">5 </text>
<text top="702" left="628" width="14" height="16" font="1">5 </text>
<text top="742" left="135" width="250" height="16" font="1">{ IF, NEXT, PREV, PUSH, POP } </text>
<text top="742" left="527" width="14" height="16" font="1">2 </text>
<text top="742" left="628" width="14" height="16" font="1">6 </text>
<text top="781" left="135" width="307" height="16" font="1">{ { PUSH, POP } IF, IF { PUSH, POP } } </text>
<text top="781" left="527" width="14" height="16" font="1">2 </text>
<text top="781" left="628" width="14" height="16" font="1">9 </text>
<text top="820" left="135" width="274" height="16" font="1">{ IF, NEXT, PREV { PUSH, POP } } </text>
<text top="820" left="527" width="14" height="16" font="1">1 </text>
<text top="820" left="628" width="14" height="16" font="1">7 </text>
<text top="860" left="135" width="261" height="16" font="1">{ IF, IF, NOP, PREV, PUSH, POP } </text>
<text top="860" left="527" width="14" height="16" font="1">1 </text>
<text top="860" left="628" width="14" height="16" font="1">7 </text>
<text top="899" left="135" width="338" height="16" font="1">{ { PUSH, POP } IF, NEXT { PUSH, POP } } </text>
<text top="899" left="527" width="14" height="16" font="1">1 </text>
<text top="899" left="628" width="14" height="16" font="1">9 </text>
<text top="953" left="358" width="26" height="19" font="2"><b>4.4</b></text>
<text top="957" left="385" width="4" height="15" font="9"><b> </b></text>
<text top="953" left="389" width="12" height="19" font="2"><b>S</b></text>
<text top="957" left="401" width="64" height="15" font="9"><b>ECOND </b></text>
<text top="953" left="464" width="16" height="19" font="2"><b>O</b></text>
<text top="957" left="481" width="51" height="15" font="9"><b>RDER </b></text>
<text top="953" left="531" width="14" height="19" font="2"><b>T</b></text>
<text top="957" left="544" width="43" height="15" font="9"><b>ASKS</b></text>
<text top="953" left="587" width="5" height="19" font="2"><b> </b></text>
<text top="986" left="189" width="602" height="16" font="1">A Second Order task is defined as one whose solutions depend on at least one First </text>
<text top="1017" left="135" width="394" height="16" font="1">Order or Trivial Task and are never Simple Programs. </text>
</page>
<page number="51" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">38 </text>
<text top="113" left="396" width="159" height="19" font="2"><b>4.4.1 Copy Array </b></text>
<text top="145" left="189" width="587" height="16" font="1">The Copy Array task aims to copy an arbitrary sized array from input memory to </text>
<text top="176" left="135" width="569" height="16" font="1">output. The input starts with the size of the array followed by all of the values. </text>
<text top="207" left="189" width="376" height="16" font="0"><b>Prerequisites: </b>Array Increment/Decrement (4.2.2). </text>
<text top="238" left="189" width="288" height="16" font="1">See Table 4.13 for the training data set.<b> </b></text>
<text top="288" left="135" width="356" height="16" font="0"><b>Table 4.13. Training Data Set for Copy Array </b></text>
<text top="322" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="322" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="361" left="135" width="40" height="16" font="1">1 3 8 </text>
<text top="361" left="530" width="14" height="16" font="1">3 </text>
<text top="400" left="135" width="54" height="16" font="1">2 2 3 9 </text>
<text top="400" left="530" width="27" height="16" font="1">2 3 </text>
<text top="440" left="135" width="54" height="16" font="1">3 8 7 9 </text>
<text top="440" left="530" width="41" height="16" font="1">8 7 9 </text>
<text top="493" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="524" left="189" width="193" height="16" font="1">Total Solutions Found: 29 </text>
<text top="555" left="189" width="285" height="16" font="1">Success Rate: 96.7% (see Table 4.14).  </text>
<text top="604" left="135" width="289" height="16" font="0"><b>Table 4.14. Solutions for Copy Array </b></text>
<text top="639" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="639" left="630" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="635" left="703" width="8" height="18" font="14">ï«</text>
<text top="637" left="711" width="5" height="16" font="0"><b> </b></text>
<text top="681" left="135" width="350" height="16" font="1">{ PUSH { LOOP, DEC } POP { LOOP, INC } } </text>
<text top="681" left="653" width="23" height="16" font="1">14 </text>
<text top="681" left="702" width="14" height="16" font="1">9 </text>
<text top="727" left="135" width="350" height="16" font="1">{ PUSH { LOOP, INC } POP { LOOP, DEC } } </text>
<text top="727" left="653" width="23" height="16" font="1">10 </text>
<text top="727" left="702" width="14" height="16" font="1">9 </text>
<text top="768" left="135" width="327" height="16" font="1">{ PUSH { LOOP, INC } POP, LOOP, DEC } </text>
<text top="768" left="662" width="14" height="16" font="1">2 </text>
<text top="768" left="702" width="14" height="16" font="1">8 </text>
<text top="809" left="135" width="453" height="16" font="1">{ PUSH { { LOOP, DEC } INC } POP { LOOP, INC } DEC } </text>
<text top="809" left="662" width="14" height="16" font="1">2 </text>
<text top="809" left="693" width="23" height="16" font="1">12 </text>
<text top="856" left="135" width="327" height="16" font="1">{ PUSH { LOOP, DEC } POP, LOOP, INC } </text>
<text top="856" left="662" width="14" height="16" font="1">1 </text>
<text top="856" left="702" width="14" height="16" font="1">8 </text>
<text top="912" left="413" width="124" height="19" font="2"><b>4.4.2 Reverse </b></text>
<text top="944" left="189" width="580" height="16" font="0"><b>Description: </b>The Reverse tasks takes two input parameters and outputs them in </text>
<text top="975" left="135" width="103" height="16" font="1">reverse order. </text>
<text top="1006" left="189" width="254" height="16" font="0"><b>Prerequisites</b>: Copy Value (4.3.1) </text>
<text top="1037" left="189" width="288" height="16" font="1">See Table 4.15 for the training data set.<b> </b></text>
</page>
<page number="52" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">39 </text>
<text top="112" left="135" width="325" height="16" font="0"><b>Table 4.15. Training Data Set for Reverse </b></text>
<text top="147" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="147" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="195" left="135" width="40" height="16" font="1">0 2 7 </text>
<text top="195" left="530" width="27" height="16" font="1">2 0 </text>
<text top="236" left="135" width="40" height="16" font="1">1 2 5 </text>
<text top="236" left="530" width="27" height="16" font="1">2 1 </text>
<text top="276" left="135" width="27" height="16" font="1">9 3 </text>
<text top="276" left="530" width="27" height="16" font="1">3 9 </text>
<text top="315" left="135" width="54" height="16" font="1">7 4 5 6 </text>
<text top="315" left="530" width="27" height="16" font="1">4 7 </text>
<text top="369" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="400" left="189" width="193" height="16" font="1">Total Solutions Found: 30 </text>
<text top="431" left="189" width="280" height="16" font="1">Success Rate: 100% (see Table 4.16).  </text>
<text top="480" left="135" width="257" height="16" font="0"><b>Table 4.16. Solutions for Reverse </b></text>
<text top="514" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="514" left="630" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="510" left="710" width="8" height="18" font="14">ï«</text>
<text top="513" left="718" width="5" height="16" font="0"><b> </b></text>
<text top="561" left="135" width="412" height="16" font="1">{ { { INC } DEC { { INC } DEC } } { { INC } DEC } } </text>
<text top="561" left="662" width="14" height="16" font="1">8 </text>
<text top="561" left="700" width="23" height="16" font="1">13 </text>
<text top="600" left="135" width="391" height="16" font="1">{ { { INC } DEC { PUSH, POP } } { PUSH, POP } } </text>
<text top="600" left="662" width="14" height="16" font="1">7 </text>
<text top="600" left="701" width="22" height="16" font="1">11 </text>
<text top="640" left="135" width="375" height="16" font="1">{ { { INC } DEC { INC } DEC } { PUSH, POP } } </text>
<text top="640" left="662" width="14" height="16" font="1">3 </text>
<text top="640" left="701" width="22" height="16" font="1">11 </text>
<text top="679" left="135" width="396" height="16" font="1">{ { { INC } { DEC, PUSH, POP } } { PUSH, POP } } </text>
<text top="679" left="662" width="14" height="16" font="1">2 </text>
<text top="679" left="701" width="22" height="16" font="1">11 </text>
<text top="718" left="135" width="365" height="16" font="1">{ NEXT { PUSH, POP } PREV { PUSH, POP } } </text>
<text top="718" left="662" width="14" height="16" font="1">2 </text>
<text top="718" left="709" width="14" height="16" font="1">9 </text>
<text top="757" left="135" width="386" height="16" font="1">{ { { INC } DEC { INC } DEC } { { INC } DEC } } </text>
<text top="757" left="662" width="14" height="16" font="1">2 </text>
<text top="757" left="700" width="23" height="16" font="1">12 </text>
<text top="797" left="135" width="406" height="16" font="1">{ { { INC } { DEC, PUSH, POP } } { { INC } DEC } } </text>
<text top="797" left="662" width="14" height="16" font="1">2 </text>
<text top="797" left="700" width="23" height="16" font="1">12 </text>
<text top="836" left="135" width="457" height="16" font="1">{ { PUSH, NEXT, { { INC } DEC } POP } { { INC } DEC } } </text>
<text top="836" left="662" width="14" height="16" font="1">1 </text>
<text top="836" left="700" width="23" height="16" font="1">13 </text>
<text top="875" left="135" width="431" height="16" font="1">{ { { INC } DEC { INC } } { PUSH, POP } NEXT, DEC } </text>
<text top="875" left="662" width="14" height="16" font="1">1 </text>
<text top="875" left="700" width="23" height="16" font="1">12 </text>
<text top="915" left="135" width="369" height="16" font="1">{ { { INC, PUSH, POP } DEC } { PUSH, POP } } </text>
<text top="915" left="662" width="14" height="16" font="1">1 </text>
<text top="915" left="700" width="23" height="16" font="1">10 </text>
<text top="954" left="135" width="369" height="16" font="1">{ { { INC } DEC, PUSH, POP } { PUSH, POP } } </text>
<text top="954" left="662" width="14" height="16" font="1">1 </text>
<text top="954" left="700" width="23" height="16" font="1">10 </text>
</page>
<page number="53" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">40 </text>
<text top="131" left="410" width="131" height="19" font="2"><b>4.4.3 Addition </b></text>
<text top="163" left="189" width="602" height="16" font="0"><b>Description</b>:<b> </b>The Addition tasks takes two input parameters and outputs their sum. </text>
<text top="194" left="189" width="423" height="16" font="0"><b>Prerequisites</b>: Increment/Decrement Single Value (4.2.1) </text>
<text top="225" left="189" width="288" height="16" font="1">See Table 4.17 for the training data set.<b> </b></text>
<text top="275" left="135" width="332" height="16" font="0"><b>Table 4.17. Training Data Set for Addition </b></text>
<text top="309" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="309" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="348" left="135" width="49" height="16" font="1">0 3 10 </text>
<text top="348" left="530" width="14" height="16" font="1">3 </text>
<text top="387" left="135" width="40" height="16" font="1">1 5 2 </text>
<text top="387" left="530" width="14" height="16" font="1">6 </text>
<text top="427" left="135" width="40" height="16" font="1">2 5 8 </text>
<text top="427" left="530" width="14" height="16" font="1">7 </text>
<text top="466" left="135" width="54" height="16" font="1">3 9 0 3 </text>
<text top="466" left="530" width="23" height="16" font="1">12 </text>
<text top="505" left="135" width="27" height="16" font="1">4 9 </text>
<text top="505" left="530" width="23" height="16" font="1">13 </text>
<text top="559" left="135" width="5" height="16" font="1"> </text>
<text top="559" left="189" width="82" height="16" font="0"><b>Solutions:</b> </text>
<text top="590" left="135" width="5" height="16" font="0"><b> </b></text>
<text top="590" left="189" width="192" height="16" font="1">Total Solutions Found: 26 </text>
<text top="625" left="135" width="5" height="16" font="1"> </text>
<text top="625" left="189" width="283" height="16" font="1">Success Rate: 86.6% (see Table 4.18).  </text>
<text top="674" left="135" width="264" height="16" font="0"><b>Table 4.18. Solutions for Addition </b></text>
<text top="709" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="709" left="643" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="704" left="737" width="8" height="18" font="14">ï«</text>
<text top="707" left="745" width="5" height="16" font="0"><b> </b></text>
<text top="748" left="135" width="241" height="16" font="1">{ { INC } LOOP { INC } DEC } </text>
<text top="748" left="666" width="23" height="16" font="1">14 </text>
<text top="748" left="736" width="14" height="16" font="1">7 </text>
<text top="787" left="135" width="241" height="16" font="1">{ LOOP { INC } { INC } DEC } </text>
<text top="787" left="675" width="14" height="16" font="1">8 </text>
<text top="787" left="736" width="14" height="16" font="1">7 </text>
<text top="826" left="135" width="285" height="16" font="1">{ LOOP { INC } PUSH, LOOP, POP } </text>
<text top="826" left="675" width="14" height="16" font="1">2 </text>
<text top="826" left="736" width="14" height="16" font="1">7 </text>
<text top="866" left="135" width="347" height="16" font="1">{ LOOP { INC } NEXT, PREV { INC } DEC } </text>
<text top="866" left="675" width="14" height="16" font="1">1 </text>
<text top="866" left="736" width="14" height="16" font="1">9 </text>
<text top="905" left="135" width="361" height="16" font="1">{ { INC } LOOP { INC } IF, NOP, PREV, DEC } </text>
<text top="905" left="675" width="14" height="16" font="1">1 </text>
<text top="905" left="727" width="23" height="16" font="1">10 </text>
<text top="959" left="380" width="191" height="19" font="2"><b>4.4.4 Boolean NAND </b></text>
<text top="992" left="189" width="620" height="16" font="1">The Boolean NAND task takes two Boolean input parameters and outputs the inverse </text>
<text top="1023" left="135" width="193" height="16" font="1">value of their AND result. </text>
</page>
<page number="54" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">41 </text>
<text top="112" left="189" width="273" height="16" font="0"><b>Prerequisites</b>: Boolean NOT (4.3.4). </text>
<text top="143" left="189" width="288" height="16" font="1">See Table 4.19 for the training data set.<b> </b></text>
<text top="192" left="135" width="382" height="16" font="0"><b>Table 4.19. Training Data Set for Boolean NAND </b></text>
<text top="227" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="227" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="266" left="135" width="40" height="16" font="1">0 0 5 </text>
<text top="266" left="530" width="14" height="16" font="1">1 </text>
<text top="305" left="135" width="49" height="16" font="1">1 0 10 </text>
<text top="305" left="530" width="14" height="16" font="1">1 </text>
<text top="344" left="135" width="40" height="16" font="1">0 1 7 </text>
<text top="344" left="530" width="14" height="16" font="1">1 </text>
<text top="384" left="135" width="27" height="16" font="1">1 1 </text>
<text top="384" left="530" width="14" height="16" font="1">0 </text>
<text top="437" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="468" left="189" width="193" height="16" font="1">Total Solutions Found: 30 </text>
<text top="499" left="189" width="280" height="16" font="1">Success Rate: 100% (see Table 4.20).  </text>
<text top="548" left="135" width="315" height="16" font="0"><b>Table 4.20. Solutions for Boolean NAND </b></text>
<text top="583" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="583" left="488" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="579" left="622" width="8" height="18" font="14">ï«</text>
<text top="581" left="630" width="5" height="16" font="0"><b> </b></text>
<text top="622" left="135" width="266" height="16" font="1">{ IF { PREV } { { DEC } PREV, IF, </text>
<text top="653" left="135" width="62" height="16" font="1">INC } } </text>
<text top="622" left="511" width="23" height="16" font="1">14 </text>
<text top="622" left="621" width="14" height="16" font="1">9 </text>
<text top="692" left="135" width="256" height="16" font="1">{ IF { DEC } { { DEC } PREV, IF, </text>
<text top="723" left="135" width="62" height="16" font="1">INC } } </text>
<text top="692" left="511" width="23" height="16" font="1">13 </text>
<text top="692" left="612" width="23" height="16" font="1">10 </text>
<text top="763" left="135" width="284" height="16" font="1">{ PUSH, IF, POP { { DEC } PREV, IF, </text>
<text top="794" left="135" width="62" height="16" font="1">INC } } </text>
<text top="763" left="520" width="14" height="16" font="1">2 </text>
<text top="763" left="612" width="23" height="16" font="1">10 </text>
<text top="833" left="135" width="253" height="16" font="1">{ LOOP, NEXT, PREV { { DEC } </text>
<text top="864" left="135" width="134" height="16" font="1">PREV, IF, INC }} </text>
<text top="833" left="520" width="14" height="16" font="1">1 </text>
<text top="833" left="612" width="23" height="16" font="1">10 </text>
<text top="919" left="387" width="177" height="19" font="2"><b>4.4.5 Boolean NOR </b></text>
<text top="951" left="189" width="606" height="16" font="1">The Boolean NOR task takes two Boolean input parameters and outputs the inverse </text>
<text top="982" left="135" width="192" height="16" font="1">value of their NOR result. </text>
<text top="1013" left="189" width="269" height="16" font="0"><b>Prerequisites</b>: Boolean NOT (4.3.4) </text>
<text top="1044" left="189" width="288" height="16" font="1">See Table 4.21 for the training data set.<b> </b></text>
</page>
<page number="55" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">42 </text>
<text top="112" left="135" width="370" height="16" font="0"><b>Table 4.21. Training Data Set for Boolean NOR </b></text>
<text top="147" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="147" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="186" left="135" width="40" height="16" font="1">0 0 5 </text>
<text top="186" left="530" width="14" height="16" font="1">1 </text>
<text top="225" left="135" width="49" height="16" font="1">1 0 10 </text>
<text top="225" left="530" width="14" height="16" font="1">0 </text>
<text top="264" left="135" width="40" height="16" font="1">0 1 7 </text>
<text top="264" left="530" width="14" height="16" font="1">0 </text>
<text top="303" left="135" width="27" height="16" font="1">1 1 </text>
<text top="303" left="530" width="14" height="16" font="1">0 </text>
<text top="357" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="388" left="189" width="193" height="16" font="1">Total Solutions Found: 30 </text>
<text top="419" left="189" width="276" height="16" font="1">Success Rate: 100% (see Table 4.22). </text>
<text top="468" left="135" width="303" height="16" font="0"><b>Table 4.22. Solutions for Boolean NOR </b></text>
<text top="503" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="503" left="508" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="498" left="616" width="8" height="18" font="14">ï«</text>
<text top="501" left="624" width="5" height="16" font="0"><b> </b></text>
<text top="542" left="135" width="309" height="16" font="1">{ LOOP, PREV { { DEC } PREV, IF, INC </text>
<text top="573" left="135" width="26" height="16" font="1">} } </text>
<text top="542" left="531" width="23" height="16" font="1">26 </text>
<text top="542" left="615" width="14" height="16" font="1">9 </text>
<text top="612" left="135" width="309" height="16" font="1">{ LOOP, PREV { { DEC } PREV, IF, INC </text>
<text top="643" left="135" width="276" height="16" font="1">}  { { DEC } PREV, IF, INC } DEC } </text>
<text top="612" left="540" width="14" height="16" font="1">1 </text>
<text top="612" left="606" width="23" height="16" font="1">16 </text>
<text top="682" left="135" width="298" height="16" font="1">{ IF, NEXT, PREV { { DEC } PREV, IF, </text>
<text top="714" left="135" width="62" height="16" font="1">INC } } </text>
<text top="682" left="540" width="14" height="16" font="1">1 </text>
<text top="682" left="606" width="23" height="16" font="1">10 </text>
<text top="753" left="135" width="309" height="16" font="1">{ IF, IF, NOP, PREV { { DEC } PREV, IF, </text>
<text top="784" left="135" width="62" height="16" font="1">INC } } </text>
<text top="753" left="540" width="14" height="16" font="1">1 </text>
<text top="753" left="607" width="22" height="16" font="1">11 </text>
<text top="823" left="135" width="305" height="16" font="1">{ IF { { DEC } PREV, IF, INC } { { DEC </text>
<text top="854" left="135" width="192" height="16" font="1">} PREV, IF, INC } DEC } </text>
<text top="823" left="540" width="14" height="16" font="1">1 </text>
<text top="823" left="606" width="23" height="16" font="1">15 </text>
<text top="909" left="387" width="177" height="19" font="2"><b>4.4.6 Boolean XOR </b></text>
<text top="941" left="189" width="625" height="16" font="1">The Boolean XOR task takes two Boolean input parameters and outputs the Exclusive </text>
<text top="972" left="135" width="78" height="16" font="1">OR result. </text>
<text top="1003" left="189" width="422" height="16" font="0"><b>Prerequisites</b>: Copy Value (4.3.1), Boolean NOT (4.3.4). </text>
<text top="1034" left="189" width="288" height="16" font="1">See Table 4.23 for the training data set.<b> </b></text>
</page>
<page number="56" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">43 </text>
<text top="112" left="135" width="370" height="16" font="0"><b>Table 4.23. Training Data Set for Boolean XOR </b></text>
<text top="147" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="147" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="189" left="135" width="40" height="16" font="1">0 0 3 </text>
<text top="189" left="530" width="14" height="16" font="1">0 </text>
<text top="228" left="135" width="40" height="16" font="1">1 0 8 </text>
<text top="228" left="530" width="14" height="16" font="1">1 </text>
<text top="275" left="135" width="45" height="16" font="1">0 1  4 </text>
<text top="275" left="530" width="14" height="16" font="1">1 </text>
<text top="316" left="135" width="63" height="16" font="1">1 1 15 7 </text>
<text top="316" left="530" width="14" height="16" font="1">0 </text>
<text top="370" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="402" left="189" width="193" height="16" font="1">Total Solutions Found: 28 </text>
<text top="433" left="189" width="285" height="16" font="1">Success Rate: 93.3% (see Table 4.24).  </text>
<text top="482" left="135" width="303" height="16" font="0"><b>Table 4.24. Solutions for Boolean XOR </b></text>
<text top="516" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="516" left="603" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="512" left="751" width="8" height="18" font="14">ï«</text>
<text top="515" left="759" width="5" height="16" font="0"><b> </b></text>
<text top="557" left="135" width="392" height="16" font="1">{ LOOP { { DEC } PREV IF INC } { { INC } DEC } </text>
<text top="577" left="135" width="13" height="16" font="1">} </text>
<text top="557" left="626" width="23" height="16" font="1">26 </text>
<text top="557" left="741" width="23" height="16" font="1">12 </text>
<text top="617" left="135" width="392" height="16" font="1">{ LOOP { { DEC } PREV IF INC } NEXT PREV { { </text>
<text top="637" left="135" width="115" height="16" font="1">INC } DEC } } </text>
<text top="617" left="635" width="14" height="16" font="1">1 </text>
<text top="617" left="741" width="23" height="16" font="1">14 </text>
<text top="685" left="135" width="395" height="16" font="1">{ LOOP { { DEC } PREV IF INC } PREV IF { { INC </text>
<text top="706" left="135" width="80" height="16" font="1">} DEC } } </text>
<text top="685" left="635" width="14" height="16" font="1">1 </text>
<text top="685" left="741" width="23" height="16" font="1">14 </text>
<text top="761" left="366" width="26" height="19" font="2"><b>4.5</b></text>
<text top="764" left="392" width="4" height="15" font="9"><b> </b></text>
<text top="761" left="396" width="14" height="19" font="2"><b>T</b></text>
<text top="764" left="410" width="47" height="15" font="9"><b>HIRD </b></text>
<text top="761" left="457" width="16" height="19" font="2"><b>O</b></text>
<text top="764" left="473" width="51" height="15" font="9"><b>RDER </b></text>
<text top="761" left="524" width="14" height="19" font="2"><b>T</b></text>
<text top="764" left="536" width="43" height="15" font="9"><b>ASKS</b></text>
<text top="761" left="579" width="5" height="19" font="2"><b> </b></text>
<text top="793" left="189" width="609" height="16" font="1">A Third Order task is defined as one whose solutions depend on at least one Second </text>
<text top="824" left="135" width="84" height="16" font="1">Order task. </text>
<text top="874" left="396" width="159" height="19" font="2"><b>4.5.1 Subtraction </b></text>
<text top="906" left="189" width="559" height="16" font="1">The Subtraction task takes two input parameters and outputs their difference. </text>
<text top="937" left="135" width="637" height="16" font="1">Negative results are not considered since they are not representable in the current 16-bit </text>
<text top="968" left="135" width="374" height="16" font="1">positive integer finite space memory configuration. </text>
<text top="999" left="189" width="231" height="16" font="0"><b>Prerequisites:</b> Reverse (4.4.2). </text>
<text top="1030" left="189" width="288" height="16" font="1">See Table 4.25 for the training data set.<b> </b></text>
</page>
<page number="57" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">44 </text>
<text top="112" left="135" width="355" height="16" font="0"><b>Table 4.25. Training Data Set for Subtraction </b></text>
<text top="147" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="147" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="181" left="135" width="27" height="16" font="1">0 0 </text>
<text top="181" left="530" width="14" height="16" font="1">1 </text>
<text top="216" left="135" width="27" height="16" font="1">1 0 </text>
<text top="216" left="530" width="14" height="16" font="1">1 </text>
<text top="251" left="135" width="27" height="16" font="1">1 1 </text>
<text top="251" left="530" width="14" height="16" font="1">0 </text>
<text top="286" left="135" width="27" height="16" font="1">2 1 </text>
<text top="286" left="530" width="14" height="16" font="1">1 </text>
<text top="321" left="135" width="27" height="16" font="1">2 2 </text>
<text top="321" left="530" width="14" height="16" font="1">0 </text>
<text top="356" left="135" width="27" height="16" font="1">3 0 </text>
<text top="356" left="530" width="14" height="16" font="1">3 </text>
<text top="391" left="135" width="27" height="16" font="1">3 1 </text>
<text top="391" left="530" width="14" height="16" font="1">2 </text>
<text top="426" left="135" width="27" height="16" font="1">3 3 </text>
<text top="426" left="530" width="14" height="16" font="1">0 </text>
<text top="475" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="506" left="189" width="193" height="16" font="1">Total Solutions Found: 30 </text>
<text top="537" left="189" width="276" height="16" font="1">Success Rate: 100% (see Table 4.26). </text>
<text top="586" left="135" width="287" height="16" font="0"><b>Table 4.26. Solutions for Subtraction </b></text>
<text top="621" left="139" width="69" height="16" font="0"><b>Solution </b></text>
<text top="621" left="738" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="617" left="798" width="8" height="18" font="14">ï«</text>
<text top="619" left="806" width="5" height="16" font="0"><b> </b></text>
<text top="655" left="139" width="564" height="16" font="1">{ { { { INC } DEC, PUSH, POP } { PUSH, POP } LOOP } LOOP { DEC } } </text>
<text top="655" left="770" width="41" height="16" font="1">9  15 </text>
<text top="690" left="139" width="561" height="16" font="1">{ { { PUSH, NEXT { PUSH, POP } POP } { PUSH, POP } LOOP } LOOP { </text>
<text top="711" left="139" width="67" height="16" font="1">DEC } } </text>
<text top="690" left="770" width="41" height="16" font="1">6  17 </text>
<text top="746" left="139" width="586" height="16" font="1">{ { { { INC } DEC { PUSH, POP } } { PUSH, POP } LOOP } LOOP { DEC } } </text>
<text top="746" left="770" width="41" height="16" font="1">4  16 </text>
<text top="781" left="139" width="556" height="16" font="1">{ { { { INC } DEC { PUSH, POP } } { PUSH, POP } IF } LOOP { DEC } } </text>
<text top="781" left="770" width="41" height="16" font="1">3  16 </text>
<text top="816" left="139" width="584" height="16" font="1">{ { { PUSH, NEXT { { INC } DEC } POP } { { INC } DEC } } LOOP { DEC } </text>
<text top="837" left="139" width="13" height="16" font="1">} </text>
<text top="816" left="770" width="41" height="16" font="1">2  18 </text>
<text top="872" left="139" width="524" height="16" font="1">{ { { { INC } DEC, PUSH, POP } { { INC } DEC } } LOOP { DEC } } </text>
<text top="872" left="770" width="41" height="16" font="1">2  15 </text>
<text top="906" left="139" width="566" height="16" font="1">{ { { { INC } DEC, PREV, NEXT { PUSH, POP } } { PUSH, POP } NEXT } </text>
<text top="927" left="139" width="131" height="16" font="1">LOOP { DEC } } </text>
<text top="907" left="770" width="41" height="16" font="1">1  18 </text>
<text top="962" left="139" width="530" height="16" font="1">{ { { { INC } DEC { INC } DEC } { { INC } DEC } } LOOP { DEC } } </text>
<text top="962" left="770" width="41" height="16" font="1">1  16 </text>
<text top="997" left="139" width="550" height="16" font="1">{ { { { INC } { DEC, PUSH, POP } } { { INC } DEC } } LOOP { DEC } } </text>
<text top="997" left="770" width="41" height="16" font="1">1  16 </text>
<text top="1032" left="139" width="579" height="16" font="1">{ { { { INC } { DEC, PUSH, POP } } { PUSH, POP } NEXT } LOOP { DEC } </text>
<text top="1053" left="139" width="13" height="16" font="1">} </text>
<text top="1032" left="770" width="41" height="16" font="1">1  16 </text>
</page>
<page number="58" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">45 </text>
<text top="113" left="397" width="156" height="19" font="2"><b>4.5.2 Summation </b></text>
<text top="145" left="189" width="593" height="16" font="1">The Summation task aims to sum the values of an arbitrary sized array from input </text>
<text top="176" left="135" width="666" height="16" font="1">memory to output. The input starts with the size of the array followed by all of the values to </text>
<text top="207" left="135" width="91" height="16" font="1">be summed. </text>
<text top="238" left="189" width="236" height="16" font="0"><b>Prerequisites</b>: Addition (4.4.3). </text>
<text top="269" left="189" width="288" height="16" font="1">See Table 4.27 for the training data set.<b> </b></text>
<text top="319" left="135" width="353" height="16" font="0"><b>Table 4.27. Training Data Set for Summation </b></text>
<text top="353" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="353" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="388" left="135" width="54" height="16" font="1">2 0 3 7 </text>
<text top="388" left="530" width="14" height="16" font="1">3 </text>
<text top="423" left="135" width="76" height="16" font="1">2 1 5 9 21 </text>
<text top="423" left="530" width="14" height="16" font="1">6 </text>
<text top="458" left="135" width="54" height="16" font="1">3 0 3 1 </text>
<text top="458" left="530" width="14" height="16" font="1">4 </text>
<text top="493" left="135" width="54" height="16" font="1">3 1 5 2 </text>
<text top="493" left="530" width="14" height="16" font="1">8 </text>
<text top="527" left="135" width="54" height="16" font="1">3 2 5 3 </text>
<text top="527" left="530" width="23" height="16" font="1">10 </text>
<text top="563" left="135" width="54" height="16" font="1">3 3 9 4 </text>
<text top="563" left="530" width="23" height="16" font="1">16 </text>
<text top="597" left="135" width="54" height="16" font="1">3 4 9 5 </text>
<text top="597" left="530" width="23" height="16" font="1">18 </text>
<text top="632" left="135" width="67" height="16" font="1">4 4 9 5 1 </text>
<text top="632" left="530" width="23" height="16" font="1">19 </text>
<text top="682" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="713" left="189" width="193" height="16" font="1">Total Solutions Found: 29 </text>
<text top="744" left="189" width="280" height="16" font="1">Success Rate: 96.7% (see Table 4.28). </text>
<text top="793" left="135" width="286" height="16" font="0"><b>Table 4.28. Solutions for Summation </b></text>
<text top="827" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="827" left="670" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="823" left="744" width="8" height="18" font="14">ï«</text>
<text top="826" left="752" width="5" height="16" font="0"><b> </b></text>
<text top="866" left="135" width="385" height="16" font="1">{ { DEC } LOOP { { INC } LOOP { INC } DEC } } </text>
<text top="866" left="693" width="23" height="16" font="1">28 </text>
<text top="866" left="734" width="23" height="16" font="1">10 </text>
<text top="905" left="135" width="514" height="16" font="1">{ { DEC } { INC } { DEC } LOOP { { INC } LOOP { INC } DEC } } </text>
<text top="905" left="702" width="14" height="16" font="1">1 </text>
<text top="905" left="734" width="23" height="16" font="1">15 </text>
<text top="960" left="358" width="26" height="19" font="2"><b>4.6</b></text>
<text top="963" left="384" width="4" height="15" font="9"><b> </b></text>
<text top="960" left="388" width="13" height="19" font="2"><b>F</b></text>
<text top="963" left="401" width="64" height="15" font="9"><b>OURTH </b></text>
<text top="960" left="465" width="16" height="19" font="2"><b>O</b></text>
<text top="963" left="481" width="51" height="15" font="9"><b>RDER </b></text>
<text top="960" left="532" width="14" height="19" font="2"><b>T</b></text>
<text top="963" left="544" width="43" height="15" font="9"><b>ASKS</b></text>
<text top="960" left="587" width="5" height="19" font="2"><b> </b></text>
<text top="992" left="189" width="604" height="16" font="1">A Fourth Order task is defined as one whose solutions depend on at least one Third </text>
<text top="1023" left="135" width="664" height="16" font="1">Order task. The only such task devised for this experiment was the multiplication task. This </text>
<text top="1054" left="135" width="425" height="16" font="1">task takes two input parameters and outputs their product.  </text>
</page>
<page number="59" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">46 </text>
<text top="112" left="189" width="367" height="16" font="0"><b>Prerequisites</b>:<b> </b>Repeat (4.3.2),<b> </b>Summation (4.5.3). </text>
<text top="143" left="189" width="288" height="16" font="1">See Table 4.29 for the training data set.<b> </b></text>
<text top="192" left="135" width="374" height="16" font="0"><b>Table 4.29. Training Data Set for Multiplication </b></text>
<text top="227" left="135" width="48" height="16" font="0"><b>Input </b></text>
<text top="227" left="530" width="42" height="16" font="0"><b>Goal </b></text>
<text top="261" left="135" width="40" height="16" font="1">2 2 9 </text>
<text top="261" left="530" width="14" height="16" font="1">4 </text>
<text top="296" left="135" width="49" height="16" font="1">2 3 11 </text>
<text top="296" left="530" width="14" height="16" font="1">6 </text>
<text top="331" left="135" width="49" height="16" font="1">3 3 34 </text>
<text top="331" left="530" width="14" height="16" font="1">9 </text>
<text top="366" left="135" width="54" height="16" font="1">3 2 3 2 </text>
<text top="366" left="530" width="14" height="16" font="1">6 </text>
<text top="401" left="135" width="40" height="16" font="1">5 2 2 </text>
<text top="401" left="530" width="23" height="16" font="1">10 </text>
<text top="450" left="189" width="80" height="16" font="0"><b>Solutions</b>: </text>
<text top="482" left="189" width="193" height="16" font="1">Total Solutions Found: 28 </text>
<text top="512" left="189" width="285" height="16" font="1">Success Rate: 93.3% (see Table 4.30).  </text>
<text top="562" left="135" width="307" height="16" font="0"><b>Table 4.30. Solutions for Multiplication </b></text>
<text top="596" left="135" width="69" height="16" font="0"><b>Solution </b></text>
<text top="596" left="724" width="46" height="16" font="0"><b>Freq. </b></text>
<text top="592" left="784" width="8" height="18" font="14">ï«</text>
<text top="595" left="793" width="5" height="16" font="0"><b> </b></text>
<text top="631" left="135" width="564" height="16" font="1">{ { LOOP { PUSH, POP } } PREV { { DEC } LOOP { { INC } LOOP { INC </text>
<text top="651" left="135" width="93" height="16" font="1">} DEC } } } </text>
<text top="631" left="748" width="49" height="16" font="1">22  18 </text>
<text top="686" left="135" width="550" height="16" font="1">{ LOOP { PUSH, POP } PREV { { DEC } LOOP { { INC } LOOP { INC } </text>
<text top="707" left="135" width="80" height="16" font="1">DEC } } } </text>
<text top="686" left="757" width="40" height="16" font="1">2  17 </text>
<text top="742" left="135" width="565" height="16" font="1">{ PUSH { LOOP { PUSH, POP } } POP { { DEC } LOOP { { INC } LOOP { </text>
<text top="763" left="135" width="129" height="16" font="1">INC } DEC } } } </text>
<text top="742" left="757" width="40" height="16" font="1">1  19 </text>
<text top="797" left="135" width="559" height="16" font="1">{ { PUSH, POP } NEXT { LOOP { PUSH, POP } } PREV { { DEC } LOOP </text>
<text top="818" left="135" width="268" height="16" font="1">{ { INC } LOOP { INC } DEC } } } </text>
<text top="798" left="757" width="40" height="16" font="1">1  22 </text>
<text top="853" left="135" width="565" height="16" font="1">{ { LOOP { PUSH, POP } } { PUSH POP } PREV { { DEC } LOOP { { INC </text>
<text top="874" left="135" width="226" height="16" font="1">} LOOP { INC } DEC } } IF } </text>
<text top="853" left="757" width="40" height="16" font="1">1  22 </text>
<text top="909" left="135" width="564" height="16" font="1">{ { DEC } { LOOP { PUSH, POP } } PREV LOOP { { INC } LOOP { INC } </text>
<text top="930" left="135" width="67" height="16" font="1">DEC } } </text>
<text top="909" left="757" width="40" height="16" font="1">1  17 </text>
<text top="979" left="189" width="599" height="16" font="1">One question that arises is &#34;how many variations of a particular problem's solution </text>
<text top="1010" left="135" width="635" height="16" font="1">occur&#34;? For example, in Table 4.30 above there exists one solution that occurs far more </text>
<text top="1041" left="135" width="646" height="16" font="1">frequently than others. The issue is further influenced by the fitness function's parsimony </text>
</page>
<page number="60" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">47 </text>
<text top="112" left="135" width="659" height="16" font="1">pressure that favors smaller solutions over larger ones in order to prevent code bloat. Thus, </text>
<text top="143" left="135" width="661" height="16" font="1">the only way to get a high-fidelity measure of statistical variance on the solutions produced </text>
<text top="174" left="135" width="630" height="16" font="1">would be to run experiments that are prohibitively costly and time-consuming with our </text>
<text top="205" left="135" width="357" height="16" font="1">current computational capabilities and resources. </text>
</page>
<page number="61" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">48 </text>
<text top="161" left="413" width="124" height="19" font="2"><b>CHAPTER 5 </b></text>
<text top="215" left="396" width="159" height="19" font="2"><b>CONCLUSIONS </b></text>
<text top="269" left="189" width="610" height="16" font="1">There were numerous unknowns when this project was first conceived, chief among </text>
<text top="300" left="135" width="666" height="16" font="1">them was whether the system would be able to produce any meaningful solutions at all. The </text>
<text top="331" left="135" width="641" height="16" font="1">idea of using a GA to search for solutions coupled with a long-term memory of previous </text>
<text top="362" left="135" width="662" height="16" font="1">solutions was originally inspired by a desire to reverse-engineer the sequence of events in a </text>
<text top="393" left="135" width="664" height="16" font="1">Complex Adaptive System (CAS) merely from a before and after picture. Clearly, this is an </text>
<text top="424" left="135" width="640" height="16" font="1">ambitious achievement and is highly dependent on the &#34;scope&#34; of the problem. After all, </text>
<text top="455" left="135" width="648" height="16" font="1">given a big enough scope even the human brain has trouble understanding how one set of </text>
<text top="486" left="135" width="388" height="16" font="1">circumstances leads to the present observable results. </text>
<text top="517" left="189" width="618" height="16" font="1">To better define the scope above, we can refer to the before and after picture as being </text>
<text top="548" left="135" width="667" height="16" font="1">two snapshots of a CAS taken at different times. The shorter the time slice, the easier it is to </text>
<text top="579" left="135" width="654" height="16" font="1">solve the problem. For example, if we take two pictures of a  partly cloudy sky within two </text>
<text top="610" left="135" width="673" height="16" font="1">minutes of each other, we can, with very good accuracy, be able to determine the wind speed </text>
<text top="641" left="135" width="673" height="16" font="1">and wind direction that morphed the cloud into their present state. In fact, we're able to fairly </text>
<text top="672" left="135" width="670" height="16" font="1">accurately predict the shape of a cloud from one second to the next, but it's rather difficult to </text>
<text top="703" left="135" width="192" height="16" font="1">do the same after an hour. </text>
<text top="734" left="189" width="572" height="16" font="1">In order to preserve generality, for the purposes of this discussion &#34;time&#34; is not </text>
<text top="765" left="135" width="648" height="16" font="1">measured in seconds but rather in terms of the number of events that have occurred in the </text>
<text top="796" left="135" width="663" height="16" font="1">system. If we consider that a weather system may take days to develop, whereas a chemical </text>
<text top="828" left="135" width="668" height="16" font="1">reaction between cesium and water can be measured in microseconds, then the idea of using </text>
<text top="858" left="135" width="469" height="16" font="1">&#34;event count&#34; as the measure of time becomes more appropriate. </text>
<text top="890" left="189" width="590" height="16" font="1">In addition to the length of time, we must also include &#34;granularity&#34; as part of the </text>
<text top="921" left="135" width="623" height="16" font="1">scope. Since most Complex Adaptive Systems are themselves composed of numerous </text>
<text top="952" left="135" width="660" height="16" font="1">autonomous agents that themselves are Complex Adaptive Systems, drilling down to every </text>
<text top="983" left="135" width="591" height="16" font="1">level to determine the exact behavior of each agent is impractical due to the sheer </text>
<text top="1014" left="135" width="636" height="16" font="1">computational costs involved. As such, at a certain point we simply assign a simple and </text>
<text top="1045" left="135" width="641" height="16" font="1">predictable algorithm that best fits a single agent's behavior in order to shortcut the large </text>
</page>
<page number="62" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">49 </text>
<text top="112" left="135" width="634" height="16" font="1">computational cost. For example, meteorologists are able to make predictions about the </text>
<text top="143" left="135" width="667" height="16" font="1">weather without having to predict the pattern of air molecules cooling each individual water </text>
<text top="174" left="135" width="189" height="16" font="1">molecule for every cloud. </text>
<text top="205" left="189" width="612" height="16" font="1">As it relates to this project, we use as our smallest granule the 16-bit positive integer </text>
<text top="236" left="135" width="662" height="16" font="1">finite space and the nine basic instructions. The before and after pictures are represented by </text>
<text top="267" left="135" width="665" height="16" font="1">the training data,  and the time slice is determined by a valid solution's cost value. Although </text>
<text top="298" left="135" width="648" height="16" font="1">the scope of the project is limited as such to match today's computational capabilities, the </text>
<text top="329" left="135" width="645" height="16" font="1">results of the experiment nevertheless yielded some valuable insights that can perhaps be </text>
<text top="361" left="135" width="390" height="16" font="1">applied to larger-scoped problems of a similar nature. </text>
<text top="410" left="316" width="26" height="19" font="2"><b>5.1</b></text>
<text top="414" left="342" width="4" height="15" font="9"><b> </b></text>
<text top="410" left="347" width="14" height="19" font="2"><b>E</b></text>
<text top="414" left="361" width="139" height="15" font="9"><b>XPLORATION VS </b></text>
<text top="410" left="500" width="14" height="19" font="2"><b>E</b></text>
<text top="414" left="514" width="115" height="15" font="9"><b>XPLOITATION</b></text>
<text top="410" left="629" width="5" height="19" font="2"><b> </b></text>
<text top="443" left="189" width="624" height="16" font="1">The exploration versus exploitation trade-off was very prominent as the problems that </text>
<text top="474" left="135" width="675" height="16" font="1">the system was given became more and more complex. Since solutions for more complicated </text>
<text top="505" left="135" width="649" height="16" font="1">problems were built using more simple ones, the number of possible operations to choose </text>
<text top="536" left="135" width="631" height="16" font="1">from in the search process became increasingly large. Adding a single operation would </text>
<text top="567" left="135" width="372" height="16" font="1">increase the possible search by a polynomial order. </text>
<text top="598" left="189" width="621" height="16" font="1">For example, let's assume that a  given solution that we are searching for is composed </text>
<text top="629" left="135" width="657" height="16" font="1">of five total operations. If we limit the GA search engine to only look for solutions that are </text>
<text top="660" left="135" width="392" height="16" font="1">exactly five operations long, then the search space is n</text>
<text top="658" left="527" width="5" height="9" font="12">5</text>
<text top="660" left="532" width="247" height="16" font="1"> possible solutions, where n is the </text>
<text top="691" left="135" width="664" height="16" font="1">total number of possible operations in the Instruction Pool to choose from. We arrive at this </text>
<text top="722" left="135" width="636" height="16" font="1">solution by noting that there is an equal probability (1 / n) that a given operation will be </text>
<text top="753" left="135" width="660" height="16" font="1">selected from the Instruction Pool for each of the five spots and that each operation may be </text>
<text top="784" left="135" width="641" height="16" font="1">used multiple times. Since each spot is dependent on the previous operation having been </text>
<text top="815" left="135" width="653" height="16" font="1">selected properly, the probability of selecting the correct five-operation sequence is (1 / n )</text>
<text top="811" left="788" width="6" height="11" font="11">5</text>
<text top="815" left="794" width="9" height="16" font="1">, </text>
<text top="846" left="135" width="106" height="16" font="1">or one out of n</text>
<text top="842" left="241" width="6" height="11" font="11">5</text>
<text top="846" left="247" width="329" height="16" font="1"> possibilities thus yielding a search space of n</text>
<text top="842" left="576" width="6" height="11" font="11">5</text>
<text top="846" left="582" width="9" height="16" font="1">. </text>
<text top="877" left="189" width="614" height="16" font="1">Of course, the caveat in our simple calculation above is that the GA search is limited </text>
<text top="909" left="135" width="665" height="16" font="1">to solutions that are exactly five operations long and for the experiments, no such limitation </text>
<text top="940" left="135" width="632" height="16" font="1">was imposed. The GA search engine, therefore, needed to find a solution from within a </text>
<text top="971" left="135" width="675" height="16" font="1">variable number of operations. However, due to the parsimony pressure applied in the fitness </text>
<text top="1002" left="135" width="638" height="16" font="1">function, programs tended to grow from smaller to larger sizes as the search progressed. </text>
<text top="1033" left="135" width="381" height="16" font="1">This, in essence, yielded a total search space of n + n</text>
<text top="1029" left="516" width="6" height="11" font="11">2</text>
<text top="1033" left="523" width="28" height="16" font="1"> + n</text>
<text top="1029" left="551" width="6" height="11" font="11">3</text>
<text top="1033" left="557" width="28" height="16" font="1"> + n</text>
<text top="1029" left="585" width="6" height="11" font="11">4</text>
<text top="1033" left="591" width="28" height="16" font="1"> + n</text>
<text top="1029" left="619" width="6" height="11" font="11">5</text>
<text top="1033" left="625" width="52" height="16" font="1"> or O(n</text>
<text top="1029" left="677" width="6" height="11" font="11">5</text>
<text top="1033" left="683" width="130" height="16" font="1">). More generally </text>
</page>
<page number="63" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">50 </text>
<text top="113" left="135" width="380" height="16" font="1">then, the search space can be expressed as being O(n</text>
<text top="105" left="515" width="7" height="15" font="13">ï³</text>
<text top="113" left="522" width="59" height="16" font="1">) where </text>
<text top="108" left="581" width="11" height="22" font="5">ï³</text>
<text top="113" left="592" width="211" height="16" font="1"> is the size of the program as </text>
<text top="145" left="135" width="134" height="16" font="1">defined in (3.2.2). </text>
<text top="176" left="189" width="589" height="16" font="1">Clearly, as more and more operations are discovered and added to the Instruction </text>
<text top="207" left="135" width="630" height="16" font="1">Pool the search space increases polynomially and puts more pressure on the GA search </text>
<text top="238" left="135" width="641" height="16" font="1">mechanism. Nevertheless, it is more favorable to increase the total number of operations </text>
<text top="271" left="135" width="521" height="16" font="1">available in the Instruction Pool, thus increasing the search space from n</text>
<text top="263" left="657" width="7" height="15" font="13">ï³</text>
<text top="271" left="664" width="63" height="16" font="1"> to (n+1)</text>
<text top="263" left="727" width="7" height="15" font="13">ï³</text>
<text top="271" left="734" width="76" height="16" font="1">, than it is </text>
<text top="304" left="135" width="597" height="16" font="1">to add more operations to a given solution which increases the search space from n</text>
<text top="296" left="732" width="7" height="15" font="13">ï³</text>
<text top="304" left="739" width="32" height="16" font="1"> to n</text>
<text top="296" left="771" width="34" height="15" font="13">ï¨ï³ï ï«ï ï±ï©</text>
<text top="304" left="805" width="9" height="16" font="1">. </text>
<text top="335" left="135" width="388" height="16" font="1">For example, one solution for the NOT task (4.3.4) is </text>
<text top="338" left="524" width="170" height="13" font="10">{ { DEC } PREV, IF, INC }</text>
<text top="335" left="693" width="104" height="16" font="1"> having a cost </text>
<text top="368" left="135" width="43" height="16" font="1">value </text>
<text top="362" left="178" width="10" height="22" font="5">ï«</text>
<text top="368" left="188" width="113" height="16" font="1"> of 6 and a size </text>
<text top="362" left="301" width="11" height="22" font="5">ï³</text>
<text top="368" left="312" width="459" height="16" font="1"> of 4. If we consider that this solution was discovered using ten </text>
<text top="400" left="135" width="671" height="16" font="1">possible operations (nine basic instructions and the { DEC } subprogram) then the minimum </text>
<text top="431" left="135" width="426" height="16" font="1">size of the search space that the GA had to scour is 10 + 10</text>
<text top="427" left="561" width="6" height="11" font="11">2</text>
<text top="431" left="567" width="37" height="16" font="1"> + 10</text>
<text top="427" left="604" width="6" height="11" font="11">3</text>
<text top="431" left="610" width="37" height="16" font="1"> + 10</text>
<text top="427" left="647" width="6" height="11" font="11">4</text>
<text top="431" left="654" width="141" height="16" font="1"> = 11,110. Another </text>
<text top="463" left="135" width="269" height="16" font="1">possible solution for the same task is </text>
<text top="465" left="405" width="190" height="13" font="10">{ PUSH, POP, IF, INC, DEC } </text>
<text top="463" left="595" width="198" height="16" font="1">having the same cost value </text>
<text top="457" left="794" width="10" height="22" font="5">ï«</text>
<text top="463" left="803" width="5" height="16" font="1"> </text>
<text top="496" left="135" width="108" height="16" font="1">of 6 and a size </text>
<text top="490" left="243" width="11" height="22" font="5">ï³</text>
<text top="496" left="254" width="558" height="16" font="1"> of 5. But the size of the search space from which we can find this solution is </text>
<text top="528" left="135" width="42" height="16" font="1">9 +  9</text>
<text top="524" left="177" width="6" height="11" font="11">2</text>
<text top="528" left="183" width="65" height="16" font="1"> + â¦ + 9</text>
<text top="524" left="248" width="9" height="11" font="11">5 </text>
<text top="528" left="257" width="555" height="16" font="1">= 66,429 or 5.98 times larger. The results as presented in section (4.3.4) also </text>
<text top="559" left="135" width="654" height="16" font="1">reflect this likelihood, as the latter solution was discovered less than half as many times as </text>
<text top="590" left="135" width="84" height="16" font="1">the former. </text>
<text top="621" left="189" width="560" height="16" font="1">This observation means that we may be able to gain polynomial performance </text>
<text top="652" left="135" width="666" height="16" font="1">increases by putting pressure on the system to ensure that only operations that are useful are </text>
<text top="683" left="135" width="560" height="16" font="1">kept in the Instruction Pool, or at the very least, are selected more frequently. </text>
<text top="733" left="306" width="26" height="19" font="2"><b>5.2</b></text>
<text top="736" left="332" width="4" height="15" font="9"><b> </b></text>
<text top="733" left="336" width="8" height="19" font="2"><b>I</b></text>
<text top="736" left="345" width="92" height="15" font="9"><b>NDUCTIVE </b></text>
<text top="733" left="437" width="14" height="19" font="2"><b>B</b></text>
<text top="736" left="451" width="57" height="15" font="9"><b>IAS VS </b></text>
<text top="733" left="507" width="14" height="19" font="2"><b>T</b></text>
<text top="736" left="521" width="77" height="15" font="9"><b>RAINING </b></text>
<text top="733" left="598" width="14" height="19" font="2"><b>B</b></text>
<text top="736" left="612" width="28" height="15" font="9"><b>IAS</b></text>
<text top="733" left="639" width="5" height="19" font="2"><b> </b></text>
<text top="765" left="189" width="586" height="16" font="1">A major focus of this research has been to minimize the inductive bias present in </text>
<text top="797" left="135" width="623" height="16" font="1">supervised learning methods which is generally manifested in the form of engineering </text>
<text top="828" left="135" width="676" height="16" font="1">decisions that specialize the AI system. Throughout the project, it became apparent that some </text>
<text top="859" left="135" width="644" height="16" font="1">sort of bias is, in fact, critical to finding solutions expediently. Without a favored general </text>
<text top="890" left="135" width="660" height="16" font="1">direction in which to progress, the system ends up giving equal probability to selecting one </text>
<text top="921" left="135" width="631" height="16" font="1">solution over the next from the given search space and is therefore performing a purely </text>
<text top="952" left="135" width="121" height="16" font="1">arbitrary search. </text>
<text top="983" left="189" width="598" height="16" font="1">However, inductive bias limits the system by cementing its decision paths to those </text>
<text top="1014" left="135" width="666" height="16" font="1">determined by the author of the system at inception. As such, the system is unable to evolve </text>
<text top="1045" left="135" width="672" height="16" font="1">to changing circumstances that the author may have not foreseen or taken into account in the </text>
</page>
<page number="64" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">51 </text>
<text top="112" left="135" width="676" height="16" font="1">initial design. By minimizing the inductive bias of a system we minimize the need to  have to </text>
<text top="143" left="135" width="665" height="16" font="1">modify its internals to suit changing conditions. With this in mind, the system was designed </text>
<text top="174" left="135" width="651" height="16" font="1">to make the least amount of assumptions possible about the types of problems it would be </text>
<text top="205" left="135" width="664" height="16" font="1">solving. A key part of this approach was to make the system's interface to the outside world </text>
<text top="236" left="135" width="655" height="16" font="1">highly generic. The memory buffers could be populated with input from a sensor and send </text>
<text top="267" left="135" width="629" height="16" font="1">output to a robot or, as was the focus of this project, attempt to discover arithmetic and </text>
<text top="298" left="135" width="189" height="16" font="1">Boolean logic operations. </text>
<text top="329" left="189" width="579" height="16" font="1">Of course, there was no guarantee that the system would be able to produce any </text>
<text top="361" left="135" width="624" height="16" font="1">useful solutions for any of the problems that it encountered. As expected, for complex </text>
<text top="392" left="135" width="612" height="16" font="1">solutions, the &#34;raw&#34; system (i.e.  a system that had not been exposed to any previous </text>
<text top="423" left="135" width="639" height="16" font="1">problems) was not be able to produce any solutions that solved the task. However, if the </text>
<text top="454" left="135" width="668" height="16" font="1">system was exposed to simpler problems upon which the more complex task was predicated </text>
<text top="485" left="135" width="617" height="16" font="1">upon, it was able to generate the more complicated solutions easily. For example, the </text>
<text top="516" left="135" width="646" height="16" font="1">Multiplication task (4.6.1) could not be solved without the Summation task (4.5.3) which </text>
<text top="547" left="135" width="640" height="16" font="1">itself could not be solved without the system having previously solved the Addition task </text>
<text top="578" left="135" width="599" height="16" font="1">(4.4.3). But once exposed to Addition and then Summation it was able to solve the </text>
<text top="609" left="135" width="669" height="16" font="1">Multiplication task routinely. Here, our bias is apparent in the decision to train the system to </text>
<text top="640" left="135" width="575" height="16" font="1">learn how to add first before exposing it to the sum training data and finally the </text>
<text top="671" left="135" width="651" height="16" font="1">multiplication data. But this bias can be termed the &#34;trainer's bias&#34; since the trainer can be </text>
<text top="702" left="135" width="617" height="16" font="1">anyone, or anything. This shifting of bias from the author of the system to a trainer is </text>
<text top="733" left="135" width="651" height="16" font="1">significant because it demonstrates a system that, in theory, is trainable in a wide range of </text>
<text top="764" left="135" width="298" height="16" font="1">problems without internal modifications. </text>
<text top="814" left="358" width="26" height="19" font="2"><b>5.3</b></text>
<text top="817" left="385" width="4" height="15" font="9"><b> </b></text>
<text top="814" left="389" width="15" height="19" font="2"><b>U</b></text>
<text top="817" left="404" width="106" height="15" font="9"><b>NEXPECTED </b></text>
<text top="814" left="510" width="15" height="19" font="2"><b>R</b></text>
<text top="817" left="525" width="62" height="15" font="9"><b>ESULTS</b></text>
<text top="814" left="587" width="5" height="19" font="2"><b> </b></text>
<text top="846" left="189" width="538" height="16" font="1">Since the system derives its programs by testing different combinations of </text>
<text top="877" left="135" width="588" height="16" font="1">instructions and subprograms, it is not bound by the same set of rules as a human </text>
<text top="909" left="135" width="663" height="16" font="1">programmer might be when it comes to writing new programs. As such, the diversity of the </text>
<text top="940" left="135" width="648" height="16" font="1">programs that were generated for solving the same task was surprising given that the rule-</text>
<text top="971" left="135" width="662" height="16" font="1">based thought process for a human generated program would not necessarily yield so many </text>
<text top="1002" left="135" width="647" height="16" font="1">different variations. This phenomenon was particularly apparent in lower order tasks. For </text>
<text top="1033" left="135" width="528" height="16" font="1">example, the Boolean AND task (4.3.5) was expected to return the result </text>
<text top="1035" left="663" width="136" height="13" font="10">{ IF, PREV { { INC } </text>
</page>
<page number="65" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">52 </text>
<text top="114" left="135" width="56" height="13" font="10">DEC } } </text>
<text top="112" left="191" width="596" height="16" font="1">or some minor variation thereof as its only solution. And yet, the far more popular </text>
<text top="143" left="135" width="374" height="16" font="1">and simpler version of the task was much different: </text>
<text top="145" left="510" width="146" height="13" font="10">{ LOOP { INC } DEC }</text>
<text top="143" left="656" width="152" height="16" font="1">. This latter program </text>
<text top="174" left="135" width="646" height="16" font="1">exploits the edge case of the DEC instruction that does not decrement input values below </text>
<text top="205" left="135" width="594" height="16" font="1">zero, demonstrating that the system is agnostic in trying different combinations of </text>
<text top="236" left="135" width="93" height="16" font="1">instructions. </text>
<text top="267" left="189" width="589" height="16" font="1">Perhaps due to the same reasons as above, many of the tasks needed to have their </text>
<text top="298" left="135" width="663" height="16" font="1">input training data padded with spurious numbers to prevent the system from exploiting the </text>
<text top="329" left="135" width="643" height="16" font="1">termination of input in solving their problems. For example, the Copy task (4.3.1) would </text>
<text top="361" left="135" width="656" height="16" font="1">sometimes return solutions such as { PUSH, POP, INC } or { { INC } DEC, DEC } which </text>
<text top="392" left="135" width="646" height="16" font="1">would satisfy an input buffer consisting of a single input value since by the time the third </text>
<text top="423" left="135" width="640" height="16" font="1">instruction would be executed the program would automatically terminate due to lack of </text>
<text top="454" left="135" width="665" height="16" font="1">input data. This would then cause problems with operations that depended on the Copy task </text>
<text top="485" left="135" width="659" height="16" font="1">but which happened to have more input data available than the solution was expecting. We </text>
<text top="516" left="135" width="667" height="16" font="1">considered this not as a bug in the system but a bug in the training data which was corrected </text>
<text top="547" left="135" width="660" height="16" font="1">by appending arbitrary values to the end of the input buffer that was intended to be ignored </text>
<text top="578" left="135" width="151" height="16" font="1">by correct solutions. </text>
</page>
<page number="66" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">53 </text>
<text top="161" left="413" width="124" height="19" font="2"><b>CHAPTER 6 </b></text>
<text top="215" left="361" width="229" height="19" font="2"><b>FURTHER RESEARCH </b></text>
<text top="270" left="292" width="26" height="19" font="2"><b>6.1</b></text>
<text top="273" left="319" width="4" height="15" font="9"><b> </b></text>
<text top="270" left="323" width="16" height="19" font="2"><b>O</b></text>
<text top="273" left="339" width="90" height="15" font="9"><b>PERATION </b></text>
<text top="270" left="428" width="15" height="19" font="2"><b>A</b></text>
<text top="273" left="442" width="71" height="15" font="9"><b>TROPHY</b></text>
<text top="270" left="512" width="20" height="19" font="2"><b>/E</b></text>
<text top="273" left="532" width="121" height="15" font="9"><b>NHANCEMENT</b></text>
<text top="270" left="653" width="5" height="19" font="2"><b> </b></text>
<text top="302" left="189" width="615" height="16" font="1">A major improvement to the system would be to increase the performance of the GA </text>
<text top="333" left="135" width="614" height="16" font="1">search engine. As discussed in (5.1), by eliminating unnecessary operations from the </text>
<text top="364" left="135" width="605" height="16" font="1">Instruction Pool, we're able to reduce the search space of the GA thus increasing its </text>
<text top="395" left="135" width="660" height="16" font="1">performance polynomially. Since the Instruction Pool is responsible for selecting a random </text>
<text top="426" left="135" width="626" height="16" font="1">operation during the mutation phase of the GA, if it is biased towards selecting a more </text>
<text top="457" left="135" width="655" height="16" font="1">&#34;useful&#34; operation rather than giving all operations equal probability, the solutions that are </text>
<text top="488" left="135" width="664" height="16" font="1">produced by the GA may be more fit thus saving numerous generations of search in the GA </text>
<text top="519" left="135" width="583" height="16" font="1">that would otherwise have to be executed in search of the best random mutation. </text>
<text top="550" left="189" width="597" height="16" font="1">We can measure how &#34;useful&#34; an operation is through different mechanisms, but a </text>
<text top="581" left="135" width="636" height="16" font="1">good metric of usefulness may be usage count. This can be measured by incrementing a </text>
<text top="612" left="135" width="638" height="16" font="1">counter for each operation every time that operation is invoked or at least employed in a </text>
<text top="643" left="135" width="672" height="16" font="1">successful solution. Then, instead of using an equal probability random selection routine, we </text>
<text top="674" left="135" width="657" height="16" font="1">can employ a simple Least-Recently-Used (LRU) algorithm to rank the operations by their </text>
<text top="705" left="135" width="630" height="16" font="1">usage count. Once the operations are ranked, we would use a biased coin toss selection </text>
<text top="736" left="135" width="654" height="16" font="1">algorithm to more frequently return the more &#34;useful&#34; operations whenever the Instruction </text>
<text top="768" left="135" width="670" height="16" font="1">Pool is asked to supply an operation for use in mutations in the GA. In essence, we can view </text>
<text top="799" left="135" width="650" height="16" font="1">the individual operations as having individual fitnesses depending on the amount of times </text>
<text top="830" left="135" width="186" height="16" font="1">they are used or invoked. </text>
<text top="861" left="189" width="625" height="16" font="1">This mechanism is intended to simulate cellular atrophy present in biological systems. </text>
<text top="892" left="135" width="675" height="16" font="1">The expected result is that it will be an efficient means to leverage exploitation at a relatively </text>
<text top="923" left="135" width="609" height="16" font="1">small expense of exploration. We should anticipate a feedback loop as well since an </text>
<text top="954" left="135" width="644" height="16" font="1">operation that is likely to be selected for mutation due to a biased coin toss has more of a </text>
<text top="985" left="135" width="569" height="16" font="1">chance to be executed which further increases its chances to be selected again. </text>
<text top="1016" left="189" width="570" height="16" font="1">One way to address the issue of feedback may be to use a rank-based selection </text>
<text top="1047" left="135" width="661" height="16" font="1">algorithm similar to that used in [12]. That is, once the usage counts have been determined, </text>
</page>
<page number="67" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">54 </text>
<text top="112" left="135" width="675" height="16" font="1">sort each operation by its usage count, then use a biased coin toss that favors a given solution </text>
<text top="143" left="135" width="647" height="16" font="1">based on its ranking relative to all others. By using this method, we are able to reduce the </text>
<text top="174" left="135" width="563" height="16" font="1">likelihood that an instruction that gets heavy usage will completely dominate. </text>
<text top="224" left="353" width="26" height="19" font="2"><b>6.2</b></text>
<text top="227" left="379" width="4" height="15" font="9"><b> </b></text>
<text top="224" left="383" width="12" height="19" font="2"><b>S</b></text>
<text top="227" left="395" width="82" height="15" font="9"><b>OLUTION </b></text>
<text top="224" left="477" width="15" height="19" font="2"><b>R</b></text>
<text top="227" left="492" width="100" height="15" font="9"><b>EFINEMENT</b></text>
<text top="224" left="592" width="5" height="19" font="2"><b> </b></text>
<text top="256" left="189" width="597" height="16" font="1">One of the observations throughout the experiments was that there were numerous </text>
<text top="287" left="135" width="677" height="16" font="1">cases where the solutions had unnecessary operations that did not affect the overall result and </text>
<text top="319" left="135" width="663" height="16" font="1">could therefore be eliminated to improve the performance of the individual program. While </text>
<text top="351" left="135" width="501" height="16" font="1">the fitness function applies pressure through the use of the cost value </text>
<text top="345" left="636" width="10" height="22" font="5">ï«</text>
<text top="351" left="646" width="148" height="16" font="1">, it does not entirely </text>
<text top="383" left="135" width="668" height="16" font="1">eliminate the problem. For example, the NOP instruction appears in solutions for four of the </text>
<text top="414" left="135" width="653" height="16" font="1">tasks upon which the experiments were performed: Duplicate (4.3.3), Or (4.3.6), Addition </text>
<text top="445" left="135" width="667" height="16" font="1">(4.4.3), and Nor (4.4.5).  The reason for this is that the GA and fitness function are designed </text>
<text top="476" left="135" width="647" height="16" font="1">to return a solution as soon as a perfect match is found and do not spend any time finding </text>
<text top="507" left="135" width="671" height="16" font="1">improvements to the solution. In natural systems, of course, existing solutions are constantly </text>
<text top="538" left="135" width="642" height="16" font="1">tested and improved over the course of time and the concept can be applied here as well. </text>
<text top="569" left="189" width="558" height="16" font="1">We may be able to achieve this by applying a &#34;hillclimbing&#34; algorithm to the </text>
<text top="600" left="135" width="652" height="16" font="1">successful solution that has been returned by the GA search mechanism (Figure 6.1). This </text>
<text top="631" left="135" width="654" height="16" font="1">algorithm would attempt to minimize the cost value of the solution while ensuring that the </text>
<text top="662" left="135" width="635" height="16" font="1">solution still works. For each iteration the algorithm would generate a slightly modified </text>
<text top="693" left="135" width="664" height="16" font="1">version of the original solution, perhaps through the mutation of an existing operation or by </text>
<text top="724" left="135" width="671" height="16" font="1">adding or removing an operation at a random location in the program. This slightly modified </text>
<text top="755" left="135" width="657" height="16" font="1">version is then tested using the original fitness function used in the GA search mechanism. </text>
<text top="786" left="135" width="636" height="16" font="1">Should it fail, the original solution will be used for mutation in the subsequent iteration. </text>
<text top="819" left="135" width="396" height="16" font="1">Should it pass, the solution with the smaller cost value </text>
<text top="813" left="531" width="10" height="22" font="5">ï«</text>
<text top="819" left="541" width="257" height="16" font="1"> will be selected for the subsequent </text>
<text top="850" left="135" width="649" height="16" font="1">iteration. The algorithm terminates after a given threshold number of iterations have been </text>
<text top="882" left="135" width="668" height="16" font="1">completed. This threshold value may perhaps be set as twice the size of the original solution </text>
<text top="913" left="135" width="489" height="16" font="1">as this would likely allow most potential combinations to be tested. </text>
<text top="963" left="406" width="26" height="19" font="2"><b>6.3</b></text>
<text top="966" left="432" width="4" height="15" font="9"><b> </b></text>
<text top="963" left="437" width="15" height="19" font="2"><b>C</b></text>
<text top="966" left="452" width="88" height="15" font="9"><b>ONSTANTS</b></text>
<text top="963" left="539" width="5" height="19" font="2"><b> </b></text>
<text top="995" left="189" width="606" height="16" font="1">Although the system was able to solve almost all basic arithmetic operations, it was </text>
<text top="1026" left="135" width="635" height="16" font="1">unable to solve two important ones: division and modulus. This may be due to a lack of </text>
<text top="1057" left="135" width="669" height="16" font="1">counting ability that is a limitation of the programming language. Division, as an operation,  </text>
</page>
<page number="68" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">55 </text>
<text top="531" left="716" width="5" height="16" font="1"> </text>
<text top="548" left="230" width="476" height="16" font="0"><b>Figure 6.1. Hillclimbing refinement algorithm enchancement. </b></text>
<text top="595" left="135" width="647" height="16" font="1">involves repeatedly subtracting the divisor from the dividend and counting the number of </text>
<text top="626" left="135" width="676" height="16" font="1">times that this action was performed. Since the language lacks any knowledge of constants, it </text>
<text top="657" left="135" width="326" height="16" font="1">is unable to count, and thus unable to divide. </text>
<text top="688" left="189" width="589" height="16" font="1">A possible solution might be to create a basic instruction &#34;ZERO&#34; that injects the </text>
<text top="719" left="135" width="663" height="16" font="1">constant value zero as the next input value for consumption. In keeping with the minimalist </text>
<text top="750" left="135" width="656" height="16" font="1">spirit of the language, all other constants would need to be derived as a combination of the </text>
<text top="781" left="135" width="604" height="16" font="1">ZERO and INC instructions. For example, for injecting a constant value of one, the </text>
<text top="812" left="135" width="90" height="16" font="1">subprogram </text>
<text top="814" left="225" width="113" height="13" font="10">{ { ZERO } INC }</text>
<text top="812" left="338" width="453" height="16" font="1"> would need to be used. For larger constants, a combination of </text>
<text top="844" left="135" width="672" height="16" font="1">smaller constants could be used. For example, to derive an operation that injects the constant </text>
<text top="874" left="135" width="660" height="16" font="1">value sixty-four (64) into the input stream, the subprogram might invoke the multiplication </text>
<text top="906" left="135" width="379" height="16" font="1">subprogram on the constant values four and sixteen. </text>
<text top="937" left="189" width="562" height="16" font="1">Clearly, the addition of constants increases the field of potential subprograms </text>
<text top="968" left="135" width="679" height="16" font="1">dramatically and if all constants were programmed in as individual instructions (e.g. the ONE </text>
<text top="999" left="135" width="676" height="16" font="1">instruction, TWO instruction, etc.) the search space for the GA would start out far larger than </text>
<text top="1030" left="135" width="667" height="16" font="1">any of the programs that it was able to solve for this project. However, since only one of the </text>
</page>
<page number="69" position="absolute" top="0" left="0" height="1188" width="918">
<text top="72" left="135" width="5" height="16" font="1"> </text>
<text top="1107" left="135" width="5" height="16" font="1"> </text>
<text top="72" left="792" width="23" height="16" font="1">56 </text>
<text top="112" left="135" width="656" height="16" font="1">constants is hardcoded, the system may derive only the ones it needs to use for a particular </text>
<text top="143" left="135" width="299" height="16" font="1">task thus keeping the search space small. </text>
<text top="193" left="406" width="26" height="19" font="2"><b>6.4</b></text>
<text top="196" left="433" width="4" height="15" font="9"><b> </b></text>
<text top="193" left="437" width="15" height="19" font="2"><b>R</b></text>
<text top="196" left="452" width="87" height="15" font="9"><b>ECURSION</b></text>
<text top="193" left="539" width="5" height="19" font="2"><b> </b></text>
<text top="225" left="189" width="614" height="16" font="1">The programming language in its current form is unable to support recursion. This is </text>
<text top="256" left="135" width="649" height="16" font="1">due to the subprograms being added to the Instruction Pool and assigned operation codes, </text>
<text top="287" left="135" width="670" height="16" font="1">which can then be used by other subprograms, only after they have successfully completed a </text>
<text top="319" left="135" width="633" height="16" font="1">given task. This has not necessarily stopped the system from performing tasks that lend </text>
<text top="350" left="135" width="649" height="16" font="1">themselves nicely to recursive routines, but a recursion language feature may increase the </text>
<text top="381" left="135" width="658" height="16" font="1">system's performance. For example, the Addition (4.4.3) or Multiplication (4.6.1) tasks are </text>
<text top="412" left="135" width="631" height="16" font="1">typical cases where recursion can be applied easily since the definitions are themselves </text>
<text top="443" left="135" width="601" height="16" font="1">recursive. In these cases, the system found solutions using the LOOP instruction to </text>
<text top="474" left="135" width="665" height="16" font="1">repeatedly call the same routine multiple times. But if the language supported recursion, the </text>
<text top="505" left="135" width="612" height="16" font="1">solutions for these tasks may become more efficient both to discover and to execute. </text>
<text top="536" left="189" width="618" height="16" font="1">This could be implemented with a new basic instruction &#34;RECURSE&#34; that pauses the </text>
<text top="567" left="135" width="673" height="16" font="1">execution of the current program and calls itself again. The I/O semantics would be the same </text>
<text top="598" left="135" width="678" height="16" font="1">as having called any other subprogram. The addition of this instruction may allow for smaller </text>
<text top="629" left="135" width="666" height="16" font="1">solutions, which in effect increases the likelihood that they'll be discovered, at the relatively </text>
<text top="661" left="135" width="345" height="16" font="1">small cost of increasing the search space from n</text>
<text top="653" left="480" width="7" height="15" font="13">ï³</text>
<text top="661" left="487" width="72" height="16" font="1"> to (n + 1)</text>
<text top="653" left="559" width="7" height="15" font="13">ï³</text>
<text top="663" left="566" width="4" height="13" font="10">.</text>
<text top="661" left="570" width="5" height="16" font="1"> </text>
<text top="693" left="189" width="5" height="16" font="1"> </text>
</page>
<page number="70" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="15" size="16" family="Times" color="#000000"/>
<text top="72" left="792" width="23" height="16" font="1">57 </text>
<text top="93" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="162" left="390" width="171" height="19" font="2"><b>BIBLIOGRAPHY </b></text>
<text top="216" left="135" width="62" height="16" font="1">[1]   M.</text>
<text top="218" left="197" width="4" height="13" font="10"> </text>
<text top="216" left="200" width="14" height="16" font="1">F.</text>
<text top="218" left="215" width="4" height="13" font="10"> </text>
<text top="216" left="218" width="12" height="16" font="1">B</text>
<text top="218" left="230" width="101" height="13" font="10">REMEIER AND </text>
<text top="216" left="331" width="22" height="16" font="1">W.</text>
<text top="218" left="352" width="4" height="13" font="10"> </text>
<text top="216" left="356" width="12" height="16" font="1">B</text>
<text top="218" left="368" width="58" height="13" font="10">ANZHAF</text>
<text top="216" left="426" width="326" height="16" font="1">. <i>Linear Genetic Programming (Genetic and </i></text>
<text top="236" left="176" width="492" height="16" font="15"><i>Evolutionary Computation),</i> Springer, New York, New York, 2007. </text>
<text top="266" left="135" width="58" height="16" font="1">[2]   R.</text>
<text top="269" left="193" width="4" height="13" font="10"> </text>
<text top="266" left="196" width="17" height="16" font="1">A.</text>
<text top="269" left="214" width="4" height="13" font="10"> </text>
<text top="266" left="217" width="12" height="16" font="1">B</text>
<text top="269" left="229" width="48" height="13" font="10">ROOKS</text>
<text top="266" left="277" width="482" height="16" font="1">, <i>Elephants don't play chess</i>, Rob. Auton. Sys., 6 (1990), pp. 3-15. </text>
<text top="296" left="135" width="57" height="16" font="1">[3]   E.</text>
<text top="298" left="192" width="4" height="13" font="10"> </text>
<text top="296" left="195" width="17" height="16" font="1">A.</text>
<text top="298" left="213" width="4" height="13" font="10"> </text>
<text top="296" left="216" width="10" height="16" font="1">F</text>
<text top="298" left="226" width="85" height="13" font="10">EIGENBAUM</text>
<text top="296" left="312" width="447" height="16" font="1">, <i>The art of artificial intelligence: Themes and case studies of </i></text>
<text top="316" left="176" width="579" height="16" font="15"><i>knowledge engineering</i>, in Proceedings of the International Joint Conference on </text>
<text top="337" left="176" width="411" height="16" font="1">Artificial Intelligence, Cambridge, Massachusetts, 1977. </text>
<text top="367" left="135" width="57" height="16" font="1">[4]   E.</text>
<text top="369" left="192" width="4" height="13" font="10"> </text>
<text top="367" left="195" width="13" height="16" font="1">G</text>
<text top="369" left="208" width="46" height="13" font="10">AMMA</text>
<text top="367" left="254" width="5" height="16" font="1">,</text>
<text top="369" left="258" width="4" height="13" font="10"> </text>
<text top="367" left="262" width="17" height="16" font="1">R.</text>
<text top="369" left="278" width="4" height="13" font="10"> </text>
<text top="367" left="282" width="13" height="16" font="1">H</text>
<text top="369" left="295" width="30" height="13" font="10">ELM</text>
<text top="367" left="325" width="5" height="16" font="1">,</text>
<text top="369" left="330" width="4" height="13" font="10"> </text>
<text top="367" left="333" width="17" height="16" font="1">R.</text>
<text top="369" left="350" width="4" height="13" font="10"> </text>
<text top="367" left="353" width="7" height="16" font="1">J</text>
<text top="369" left="361" width="59" height="13" font="10">OHNSON</text>
<text top="367" left="420" width="5" height="16" font="1">,</text>
<text top="369" left="424" width="38" height="13" font="10"> AND </text>
<text top="367" left="462" width="12" height="16" font="1">J.</text>
<text top="369" left="474" width="4" height="13" font="10"> </text>
<text top="367" left="478" width="13" height="16" font="1">V</text>
<text top="369" left="491" width="61" height="13" font="10">LISSIDES</text>
<text top="367" left="551" width="225" height="16" font="1">, <i>Design Patterns: Elements of </i></text>
<text top="388" left="176" width="614" height="16" font="15"><i>Reusable Object-Oriented Software</i>,<i> </i>Addison-Wesley, Boston, Massachusetts, 1994. </text>
<text top="417" left="135" width="58" height="16" font="1">[5]   D.</text>
<text top="420" left="194" width="4" height="13" font="10"> </text>
<text top="417" left="197" width="15" height="16" font="1">E.</text>
<text top="420" left="213" width="4" height="13" font="10"> </text>
<text top="417" left="216" width="13" height="16" font="1">G</text>
<text top="420" left="229" width="67" height="13" font="10">OLDBERG</text>
<text top="417" left="296" width="509" height="16" font="1">, <i>Genetic Algorithms in Search, Optimization, and Machine Learning,</i> </text>
<text top="438" left="176" width="348" height="16" font="1">Addison-Wesley, Boston, Massachusetts, 1989. </text>
<text top="468" left="135" width="53" height="16" font="1">[6]   J.</text>
<text top="470" left="188" width="4" height="13" font="10"> </text>
<text top="468" left="191" width="13" height="16" font="1">H</text>
<text top="470" left="204" width="58" height="13" font="10">OLLAND</text>
<text top="468" left="262" width="513" height="16" font="1">, <i>Adaptation in Natural and Artificial Systems</i>,<i> </i>MIT Press, Cambridge, </text>
<text top="488" left="176" width="158" height="16" font="1">Massachusetts, 1975. </text>
<text top="518" left="135" width="63" height="16" font="1">[7]   W.</text>
<text top="521" left="198" width="4" height="13" font="10"> </text>
<text top="518" left="201" width="6" height="16" font="1">I</text>
<text top="521" left="207" width="57" height="13" font="10">BRAHIM</text>
<text top="518" left="264" width="5" height="16" font="1">,</text>
<text top="521" left="268" width="4" height="13" font="10"> </text>
<text top="518" left="272" width="17" height="16" font="1">A.</text>
<text top="521" left="289" width="4" height="13" font="10"> </text>
<text top="518" left="293" width="11" height="16" font="1">E</text>
<text top="521" left="304" width="9" height="13" font="10">L</text>
<text top="518" left="313" width="18" height="16" font="1">-C</text>
<text top="521" left="331" width="66" height="13" font="10">HOUEMIE</text>
<text top="518" left="397" width="5" height="16" font="1">,</text>
<text top="521" left="401" width="38" height="13" font="10"> AND </text>
<text top="518" left="439" width="17" height="16" font="1">H.</text>
<text top="521" left="457" width="4" height="13" font="10"> </text>
<text top="518" left="460" width="13" height="16" font="1">A</text>
<text top="521" left="473" width="31" height="13" font="10">MER</text>
<text top="518" left="504" width="301" height="16" font="1">, <i>A two-phase genetic algorithm for VLSI </i></text>
<text top="539" left="176" width="545" height="16" font="15"><i>test vector selection</i>,<i> </i>in Proceedings of the IEEE Congress on Evolutionary </text>
<text top="559" left="176" width="370" height="16" font="1">Computation, Vancouver, British Columbia, 2006. </text>
<text top="589" left="135" width="58" height="16" font="1">[8]   D.</text>
<text top="592" left="194" width="4" height="13" font="10"> </text>
<text top="589" left="197" width="7" height="16" font="1">J</text>
<text top="592" left="204" width="57" height="13" font="10">OSYULA</text>
<text top="589" left="262" width="528" height="16" font="1">, <i>A unified theory of acting and agency for a universal interfacing agent</i>, </text>
<text top="610" left="176" width="493" height="16" font="1">PhD dissertation, University of Maryland, College Park, MD, 2005. </text>
<text top="640" left="135" width="53" height="16" font="1">[9]   J.</text>
<text top="642" left="188" width="4" height="13" font="10"> </text>
<text top="640" left="191" width="17" height="16" font="1">R.</text>
<text top="642" left="208" width="4" height="13" font="10"> </text>
<text top="640" left="211" width="13" height="16" font="1">K</text>
<text top="642" left="224" width="29" height="13" font="10">OZA</text>
<text top="640" left="253" width="561" height="16" font="1">, <i>Genetic Programming II: Automatic Discovery of Reusable Programs</i>,<i> </i>MIT </text>
<text top="660" left="176" width="294" height="16" font="1">Press, Cambridge, Massachusetts, 1994. </text>
<text top="690" left="135" width="53" height="16" font="1">[10]  J.</text>
<text top="693" left="188" width="4" height="13" font="10"> </text>
<text top="690" left="191" width="17" height="16" font="1">R.</text>
<text top="693" left="208" width="4" height="13" font="10"> </text>
<text top="690" left="211" width="13" height="16" font="1">K</text>
<text top="693" left="224" width="29" height="13" font="10">OZA</text>
<text top="690" left="253" width="5" height="16" font="1">,</text>
<text top="693" left="258" width="4" height="13" font="10"> </text>
<text top="690" left="262" width="17" height="16" font="1">D.</text>
<text top="693" left="279" width="4" height="13" font="10"> </text>
<text top="690" left="283" width="13" height="16" font="1">A</text>
<text top="693" left="296" width="39" height="13" font="10">NDRE</text>
<text top="690" left="334" width="5" height="16" font="1">,</text>
<text top="693" left="339" width="4" height="13" font="10"> </text>
<text top="690" left="342" width="14" height="16" font="1">F.</text>
<text top="693" left="357" width="4" height="13" font="10"> </text>
<text top="690" left="361" width="17" height="16" font="1">H.</text>
<text top="693" left="378" width="4" height="13" font="10"> </text>
<text top="690" left="382" width="12" height="16" font="1">B</text>
<text top="693" left="394" width="59" height="13" font="10">ENNETT </text>
<text top="690" left="453" width="22" height="16" font="1">III,</text>
<text top="693" left="475" width="38" height="13" font="10"> AND </text>
<text top="690" left="513" width="21" height="16" font="1">M.</text>
<text top="693" left="533" width="4" height="13" font="10"> </text>
<text top="690" left="537" width="17" height="16" font="1">A.</text>
<text top="693" left="555" width="4" height="13" font="10"> </text>
<text top="690" left="558" width="13" height="16" font="1">K</text>
<text top="693" left="571" width="38" height="13" font="10">EANE</text>
<text top="690" left="609" width="166" height="16" font="1">, <i>Use of Automatically </i></text>
<text top="711" left="176" width="571" height="16" font="15"><i>Defined Functions and Architecture-Altering Operations in Automated Circuit </i></text>
<text top="731" left="176" width="609" height="16" font="15"><i>Synthesis with Genetic Programming</i>, MIT Press, Cambridge, Massachusetts, 1996. </text>
<text top="761" left="135" width="95" height="16" font="1">[11]   D. B. L</text>
<text top="764" left="230" width="38" height="13" font="10">ENAT</text>
<text top="761" left="268" width="526" height="16" font="1">, <i>AM: An artificial intelligence approach to discovery in mathematics as </i></text>
<text top="782" left="176" width="559" height="16" font="15"><i>heuristic search</i>, PhD dissertation, Stanford University, Stanford, CA, 1976.  </text>
<text top="811" left="135" width="62" height="16" font="1">[12]   M.</text>
<text top="814" left="197" width="4" height="13" font="10"> </text>
<text top="811" left="200" width="16" height="16" font="1">M</text>
<text top="814" left="216" width="59" height="13" font="10">ITCHELL</text>
<text top="811" left="275" width="5" height="16" font="1">,</text>
<text top="814" left="280" width="4" height="13" font="10"> </text>
<text top="811" left="283" width="12" height="16" font="1">J.</text>
<text top="814" left="295" width="4" height="13" font="10"> </text>
<text top="811" left="299" width="12" height="16" font="1">C</text>
<text top="814" left="311" width="88" height="13" font="10">RUTCHFIELD</text>
<text top="811" left="399" width="5" height="16" font="1">,</text>
<text top="814" left="404" width="38" height="13" font="10"> AND </text>
<text top="811" left="442" width="17" height="16" font="1">R.</text>
<text top="814" left="458" width="4" height="13" font="10"> </text>
<text top="811" left="462" width="13" height="16" font="1">D</text>
<text top="814" left="475" width="18" height="13" font="10">AS</text>
<text top="811" left="493" width="302" height="16" font="1">, <i>Evolving cellular automata with genetic </i></text>
<text top="832" left="176" width="560" height="16" font="15"><i>algorithms: A review of recent work, </i>in Proceedings of the First International </text>
<text top="853" left="176" width="613" height="16" font="1">Conference on Evolutionary Computation and its Applications (EvCA'96), Moscow, </text>
<text top="874" left="176" width="102" height="16" font="1">Russia, 1996. </text>
<text top="903" left="135" width="62" height="16" font="1">[13]   M.</text>
<text top="906" left="197" width="4" height="13" font="10"> </text>
<text top="903" left="200" width="16" height="16" font="1">M</text>
<text top="906" left="216" width="59" height="13" font="10">ITCHELL</text>
<text top="903" left="275" width="5" height="16" font="1">,</text>
<text top="906" left="280" width="4" height="13" font="10"> </text>
<text top="903" left="283" width="15" height="16" font="1">S.</text>
<text top="906" left="298" width="4" height="13" font="10"> </text>
<text top="903" left="302" width="10" height="16" font="1">F</text>
<text top="906" left="311" width="45" height="13" font="10">OREST</text>
<text top="903" left="357" width="5" height="16" font="1">,</text>
<text top="906" left="361" width="38" height="13" font="10"> AND </text>
<text top="903" left="399" width="12" height="16" font="1">J.</text>
<text top="906" left="411" width="4" height="13" font="10"> </text>
<text top="903" left="415" width="13" height="16" font="1">H</text>
<text top="906" left="428" width="58" height="13" font="10">OLLAND</text>
<text top="903" left="486" width="321" height="16" font="1">, <i>Royal road for genetic algorithms: Fitness </i></text>
<text top="924" left="176" width="623" height="16" font="15"><i>landscapes and GA performance</i>, in Proceedings of the First European Conference on </text>
<text top="945" left="176" width="262" height="16" font="1">Artificial Life, Paris, France, 1991.  </text>
<text top="974" left="135" width="58" height="16" font="1">[14]  A.</text>
<text top="977" left="194" width="4" height="13" font="10"> </text>
<text top="974" left="197" width="13" height="16" font="1">N</text>
<text top="977" left="210" width="86" height="13" font="10">EWELL AND </text>
<text top="974" left="296" width="17" height="16" font="1">H.</text>
<text top="977" left="314" width="4" height="13" font="10"> </text>
<text top="974" left="317" width="17" height="16" font="1">A.</text>
<text top="977" left="335" width="4" height="13" font="10"> </text>
<text top="974" left="338" width="10" height="16" font="1">S</text>
<text top="977" left="349" width="38" height="13" font="10">IMON</text>
<text top="974" left="387" width="395" height="16" font="1">, <i>Computer science as empirical inquiry: Symbols and </i></text>
<text top="995" left="176" width="341" height="16" font="15"><i>search</i>, Comm. ACM, 19 (1976), pp. 113-126. </text>
</page>
<page number="71" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="16" size="12" family="Times" color="#000000"/>
<text top="72" left="792" width="23" height="16" font="1">58 </text>
<text top="93" left="135" width="5" height="16" font="1"> </text>
<text top="1069" left="135" width="5" height="16" font="1"> </text>
<text top="113" left="135" width="56" height="16" font="1">[15]  P.</text>
<text top="116" left="191" width="4" height="13" font="10"> </text>
<text top="113" left="194" width="13" height="16" font="1">N</text>
<text top="116" left="207" width="83" height="13" font="10">ORDIN AND </text>
<text top="113" left="290" width="22" height="16" font="1">W.</text>
<text top="116" left="312" width="4" height="13" font="10"> </text>
<text top="113" left="315" width="12" height="16" font="1">B</text>
<text top="116" left="327" width="58" height="13" font="10">ANZHAF</text>
<text top="113" left="385" width="371" height="16" font="1">, <i>Evolving turing-complete programs for a register </i></text>
<text top="134" left="176" width="603" height="16" font="15"><i>machine with self-modifying code</i>, in Genetic Algorithms: Proceedings of the Sixth </text>
<text top="155" left="176" width="392" height="16" font="1">International Conference, Dortmund, Germany, 1995. </text>
<text top="184" left="135" width="58" height="16" font="1">[16]  C.</text>
<text top="187" left="193" width="4" height="13" font="10"> </text>
<text top="184" left="196" width="13" height="16" font="1">N</text>
<text top="187" left="209" width="117" height="13" font="10">OTREDAME AND </text>
<text top="184" left="326" width="17" height="16" font="1">D.</text>
<text top="187" left="344" width="4" height="13" font="10"> </text>
<text top="184" left="347" width="17" height="16" font="1">G.</text>
<text top="187" left="365" width="4" height="13" font="10"> </text>
<text top="184" left="369" width="13" height="16" font="1">H</text>
<text top="187" left="382" width="48" height="13" font="10">IGGINS</text>
<text top="184" left="430" width="371" height="16" font="1">, <i>SAGA: Sequence alignment by genetic algorithm</i>, </text>
<text top="205" left="176" width="322" height="16" font="1">Nucl. Acid. Res., 24 (1996), pp. 1515-1524. </text>
<text top="235" left="135" width="62" height="16" font="1">[17]  M.</text>
<text top="237" left="197" width="4" height="13" font="10"> </text>
<text top="235" left="200" width="13" height="16" font="1">O</text>
<text top="237" left="213" width="39" height="13" font="10">LMER</text>
<text top="235" left="253" width="5" height="16" font="1">,</text>
<text top="237" left="257" width="4" height="13" font="10"> </text>
<text top="235" left="261" width="15" height="16" font="1">P.</text>
<text top="237" left="275" width="4" height="13" font="10"> </text>
<text top="235" left="279" width="13" height="16" font="1">N</text>
<text top="237" left="292" width="45" height="13" font="10">ORDIN</text>
<text top="235" left="337" width="5" height="16" font="1">,</text>
<text top="237" left="341" width="38" height="13" font="10"> AND </text>
<text top="235" left="380" width="22" height="16" font="1">W.</text>
<text top="237" left="401" width="4" height="13" font="10"> </text>
<text top="235" left="405" width="12" height="16" font="1">B</text>
<text top="237" left="417" width="58" height="13" font="10">ANZHAF</text>
<text top="235" left="474" width="334" height="16" font="1">, <i>Evolving real-time behavioral modules for a </i></text>
<text top="256" left="176" width="620" height="16" font="15"><i>robot with GP</i>, in Proceedings of the Sixth International Symposium on Robotics and </text>
<text top="276" left="176" width="320" height="16" font="1">Manufacturing, Dortmund, Germany, 1996. </text>
<text top="306" left="135" width="62" height="16" font="1">[18]  M.</text>
<text top="309" left="197" width="4" height="13" font="10"> </text>
<text top="306" left="200" width="13" height="16" font="1">O</text>
<text top="309" left="213" width="46" height="13" font="10">LTEAN</text>
<text top="306" left="260" width="5" height="16" font="1">,</text>
<text top="309" left="264" width="4" height="13" font="10"> </text>
<text top="306" left="268" width="17" height="16" font="1">C.</text>
<text top="309" left="284" width="4" height="13" font="10"> </text>
<text top="306" left="288" width="13" height="16" font="1">G</text>
<text top="306" left="301" width="48" height="16" font="16">ROÅAN</text>
<text top="306" left="349" width="5" height="16" font="1">,</text>
<text top="309" left="354" width="4" height="13" font="10"> </text>
<text top="306" left="357" width="15" height="16" font="1">L.</text>
<text top="309" left="373" width="4" height="13" font="10"> </text>
<text top="306" left="376" width="13" height="16" font="1">D</text>
<text top="306" left="389" width="43" height="16" font="16">IOÅAN</text>
<text top="306" left="433" width="5" height="16" font="1">,</text>
<text top="309" left="437" width="38" height="13" font="10"> AND </text>
<text top="306" left="475" width="17" height="16" font="1">C.</text>
<text top="309" left="492" width="4" height="13" font="10"> </text>
<text top="306" left="495" width="16" height="16" font="1">M</text>
<text top="309" left="512" width="49" height="13" font="10">IHÄILÄ</text>
<text top="306" left="560" width="209" height="16" font="1">, <i>Genetic programming with </i></text>
<text top="327" left="176" width="585" height="16" font="15"><i>linear representation, a survey</i>, Int. J. Artif. Intel. Tool., 18 (2009), pp. 197-238. </text>
<text top="356" left="135" width="56" height="16" font="1">[19]  S.</text>
<text top="359" left="191" width="4" height="13" font="10"> </text>
<text top="356" left="194" width="12" height="16" font="1">R</text>
<text top="359" left="206" width="90" height="13" font="10">USSELL AND </text>
<text top="356" left="296" width="15" height="16" font="1">P.</text>
<text top="359" left="311" width="4" height="13" font="10"> </text>
<text top="356" left="315" width="13" height="16" font="1">N</text>
<text top="359" left="327" width="45" height="13" font="10">ORVIG</text>
<text top="356" left="372" width="434" height="16" font="1">, <i>Artificial Intelligence: A Modern Approach,</i> Prentice Hall, </text>
<text top="377" left="176" width="289" height="16" font="1">Upper Saddle River, New Jersey, 2003. </text>
<text top="407" left="135" width="57" height="16" font="1">[20]  T.</text>
<text top="409" left="192" width="4" height="13" font="10"> </text>
<text top="407" left="195" width="10" height="16" font="1">S</text>
<text top="409" left="205" width="38" height="13" font="10">OULE</text>
<text top="407" left="243" width="569" height="16" font="1">, <i>Code growth in genetic programming</i>, PhD dissertation, University of Idaho, </text>
<text top="428" left="176" width="144" height="16" font="1">Moscow, ID, 1998. </text>
<text top="457" left="135" width="58" height="16" font="1">[21]  D.</text>
<text top="460" left="194" width="4" height="13" font="10"> </text>
<text top="457" left="197" width="17" height="16" font="1">W</text>
<text top="460" left="214" width="51" height="13" font="10">HITLEY</text>
<text top="457" left="265" width="5" height="16" font="1">,</text>
<text top="460" left="270" width="4" height="13" font="10"> </text>
<text top="457" left="273" width="17" height="16" font="1">K.</text>
<text top="460" left="291" width="4" height="13" font="10"> </text>
<text top="457" left="295" width="16" height="16" font="1">M</text>
<text top="460" left="311" width="52" height="13" font="10">ATHIAS</text>
<text top="457" left="363" width="5" height="16" font="1">,</text>
<text top="460" left="367" width="38" height="13" font="10"> AND </text>
<text top="457" left="405" width="15" height="16" font="1">P.</text>
<text top="460" left="420" width="4" height="13" font="10"> </text>
<text top="457" left="424" width="10" height="16" font="1">F</text>
<text top="460" left="434" width="62" height="13" font="10">ITZHORN</text>
<text top="457" left="496" width="317" height="16" font="1">, <i>Delta coding: An iterative search strategy </i></text>
<text top="478" left="176" width="585" height="16" font="15"><i>for genetic algorithms</i>, in Proceedings of the Fourth International Conference on </text>
<text top="499" left="176" width="365" height="16" font="1">Genetic Algorithms, San Mateo, California, 1991. </text>
</page>
</pdf2xml>
