<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="0" size="19" family="Times" color="#000000"/>
	<fontspec id="1" size="23" family="Helvetica" color="#000000"/>
	<fontspec id="2" size="15" family="Times" color="#000000"/>
<text top="126" left="360" width="195" height="19" font="0">McGill University</text>
<text top="151" left="306" width="303" height="19" font="0">School of Computer Science</text>
<text top="175" left="337" width="241" height="19" font="0">Sable Research Group</text>
<text top="508" left="357" width="204" height="24" font="1"><b>Taming MATLAB</b></text>
<text top="566" left="274" width="371" height="20" font="0">Sable Technical Report No. sable-2011-04</text>
<text top="610" left="332" width="254" height="16" font="2">Anton Dubrau and Laurie Hendren</text>
<text top="795" left="388" width="143" height="16" font="2">December 17, 2011</text>
<text top="1032" left="286" width="346" height="20" font="0">w w w . s a b l e . m c g i l l . c a</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="3" size="14" family="Times" color="#000000"/>
<text top="109" left="108" width="88" height="20" font="0">Contents</text>
<text top="158" left="108" width="9" height="15" font="3">1</text>
<text top="158" left="132" width="104" height="15" font="3">Introduction</text>
<text top="158" left="801" width="9" height="15" font="3">4</text>
<text top="203" left="108" width="9" height="15" font="3">2</text>
<text top="203" left="132" width="264" height="15" font="3">MATLAB - a dynamic language</text>
<text top="203" left="801" width="9" height="15" font="3">6</text>
<text top="231" left="132" width="21" height="16" font="3">2.1</text>
<text top="231" left="170" width="608" height="16" font="3">Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="231" left="802" width="8" height="16" font="3">6</text>
<text top="260" left="132" width="21" height="16" font="3">2.2</text>
<text top="261" left="170" width="63" height="12" font="3">Matlab</text>
<text top="260" left="238" width="540" height="16" font="3">Type System . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="260" left="802" width="8" height="16" font="3">6</text>
<text top="289" left="132" width="21" height="16" font="3">2.3</text>
<text top="290" left="170" width="63" height="12" font="3">Matlab</text>
<text top="289" left="238" width="540" height="16" font="3">Functions and Specialization . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="289" left="802" width="8" height="16" font="3">7</text>
<text top="318" left="132" width="21" height="16" font="3">2.4</text>
<text top="319" left="170" width="63" height="12" font="3">Matlab</text>
<text top="318" left="238" width="540" height="16" font="3">Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="318" left="802" width="8" height="16" font="3">9</text>
<text top="347" left="132" width="21" height="16" font="3">2.5</text>
<text top="347" left="170" width="608" height="16" font="3">Function Handles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="347" left="802" width="8" height="16" font="3">9</text>
<text top="375" left="132" width="21" height="16" font="3">2.6</text>
<text top="375" left="170" width="265" height="16" font="3">Function Parameters and Arguments</text>
<text top="375" left="456" width="323" height="16" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="375" left="802" width="8" height="16" font="3">9</text>
<text top="404" left="132" width="21" height="16" font="3">2.7</text>
<text top="404" left="170" width="640" height="16" font="3">Wild Dynamic Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10</text>
<text top="433" left="132" width="21" height="16" font="3">2.8</text>
<text top="433" left="170" width="640" height="16" font="3">Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10</text>
<text top="479" left="108" width="9" height="15" font="3">3</text>
<text top="479" left="132" width="192" height="15" font="3">Framework for Builtins</text>
<text top="479" left="791" width="19" height="15" font="3">11</text>
<text top="507" left="132" width="21" height="16" font="3">3.1</text>
<text top="507" left="170" width="640" height="16" font="3">Learning about Builtins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11</text>
<text top="536" left="170" width="33" height="16" font="3">3.1.1</text>
<text top="536" left="222" width="587" height="16" font="3">Identifying Builtins: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11</text>
<text top="565" left="170" width="33" height="16" font="3">3.1.2</text>
<text top="565" left="222" width="587" height="16" font="3">Finding Builtin Behaviours: . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12</text>
<text top="594" left="132" width="21" height="16" font="3">3.2</text>
<text top="594" left="170" width="640" height="16" font="3">Specifying Builtins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13</text>
<text top="623" left="132" width="21" height="16" font="3">3.3</text>
<text top="623" left="170" width="640" height="16" font="3">Specifying Builtin attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14</text>
<text top="651" left="132" width="21" height="16" font="3">3.4</text>
<text top="651" left="170" width="640" height="16" font="3">Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15</text>
<text top="697" left="108" width="9" height="15" font="3">4</text>
<text top="697" left="132" width="73" height="15" font="3">Tame IR</text>
<text top="697" left="791" width="19" height="15" font="3">15</text>
<text top="725" left="132" width="21" height="16" font="3">4.1</text>
<text top="725" left="170" width="640" height="16" font="3">Specialized AST nodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16</text>
<text top="754" left="132" width="21" height="16" font="3">4.2</text>
<text top="754" left="170" width="640" height="16" font="3">Lambda Simpliﬁcation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16</text>
<text top="783" left="132" width="21" height="16" font="3">4.3</text>
<text top="783" left="170" width="640" height="16" font="3">Switch simpliﬁcation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16</text>
<text top="829" left="108" width="9" height="15" font="3">5</text>
<text top="829" left="132" width="505" height="15" font="3">Interprocedural Value Analysis and Call Graph Construction</text>
<text top="829" left="791" width="19" height="15" font="3">17</text>
<text top="857" left="132" width="21" height="16" font="3">5.1</text>
<text top="857" left="170" width="295" height="16" font="3">The Interprocedural Analysis Framework</text>
<text top="857" left="481" width="329" height="16" font="3">. . . . . . . . . . . . . . . . . . . . . . . . 18</text>
<text top="886" left="132" width="21" height="16" font="3">5.2</text>
<text top="886" left="170" width="640" height="16" font="3">Introducing the Value Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19</text>
<text top="915" left="170" width="33" height="16" font="3">5.2.1</text>
<text top="915" left="222" width="587" height="16" font="3">Mclasses, Values and Value Sets: . . . . . . . . . . . . . . . . . . . . . . . . . 19</text>
<text top="944" left="170" width="33" height="16" font="3">5.2.2</text>
<text top="944" left="222" width="587" height="16" font="3">Flow Sets: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20</text>
<text top="972" left="170" width="33" height="16" font="3">5.2.3</text>
<text top="972" left="222" width="587" height="16" font="3">Argument and Return sets: . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20</text>
<text top="1001" left="170" width="33" height="16" font="3">5.2.4</text>
<text top="1001" left="222" width="587" height="16" font="3">Builtin Propagators: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21</text>
<text top="1030" left="132" width="21" height="16" font="3">5.3</text>
<text top="1030" left="170" width="640" height="16" font="3">Flow Equations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21</text>
<text top="1102" left="455" width="8" height="16" font="3">1</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="132" width="21" height="16" font="3">5.4</text>
<text top="112" left="170" width="640" height="16" font="3">Structures, Cell Arrays and Function Handles . . . . . . . . . . . . . . . . . . . . . . 21</text>
<text top="141" left="170" width="33" height="16" font="3">5.4.1</text>
<text top="142" left="222" width="52" height="15" font="3">struct</text>
<text top="141" left="274" width="536" height="16" font="3">, cell: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22</text>
<text top="170" left="170" width="33" height="16" font="3">5.4.2</text>
<text top="171" left="222" width="127" height="15" font="3">function handle</text>
<text top="170" left="349" width="461" height="16" font="3">: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22</text>
<text top="199" left="132" width="21" height="16" font="3">5.5</text>
<text top="199" left="170" width="640" height="16" font="3">The Simple Matrix Abstraction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22</text>
<text top="227" left="132" width="21" height="16" font="3">5.6</text>
<text top="227" left="170" width="640" height="16" font="3">Applying the Value Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23</text>
<text top="273" left="108" width="9" height="15" font="3">6</text>
<text top="273" left="132" width="115" height="15" font="3">Related Work</text>
<text top="273" left="791" width="19" height="15" font="3">24</text>
<text top="319" left="108" width="9" height="15" font="3">7</text>
<text top="319" left="132" width="246" height="15" font="3">Conclusions and Future Work</text>
<text top="319" left="791" width="19" height="15" font="3">25</text>
<text top="1102" left="455" width="8" height="16" font="3">2</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1188" width="918">
<text top="109" left="108" width="141" height="20" font="0">List of Figures</text>
<text top="157" left="132" width="8" height="16" font="3">1</text>
<text top="157" left="170" width="608" height="16" font="3">Overview of the Matlab Tamer . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="157" left="802" width="8" height="16" font="3">5</text>
<text top="186" left="132" width="8" height="16" font="3">2</text>
<text top="186" left="170" width="608" height="16" font="3">Superior/inferior class relationships for Matlab . . . . . . . . . . . . . . . . . . . .</text>
<text top="186" left="802" width="8" height="16" font="3">8</text>
<text top="215" left="132" width="8" height="16" font="3">3</text>
<text top="215" left="170" width="640" height="16" font="3">Example mclass results for groups of Built-in binary operators . . . . . . . . . . . . 12</text>
<text top="244" left="132" width="8" height="16" font="3">4</text>
<text top="244" left="170" width="640" height="16" font="3">Subtree of builtin tree, showing all deﬁned ﬂoating point builtins of Matlab . . . . 14</text>
<text top="272" left="132" width="8" height="16" font="3">5</text>
<text top="272" left="170" width="640" height="16" font="3">Specializations of an assignment statement . . . . . . . . . . . . . . . . . . . . . . . . 16</text>
<text top="301" left="132" width="8" height="16" font="3">6</text>
<text top="301" left="170" width="640" height="16" font="3">Transforming lambda expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17</text>
<text top="330" left="132" width="8" height="16" font="3">7</text>
<text top="330" left="170" width="640" height="16" font="3">Transforming switch statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17</text>
<text top="387" left="108" width="133" height="20" font="0">List of Tables</text>
<text top="435" left="132" width="6" height="16" font="3">I</text>
<text top="435" left="170" width="640" height="16" font="3">Results of Running Value Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23</text>
<text top="1102" left="455" width="8" height="16" font="3">3</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="4" size="12" family="Times" color="#000000"/>
<text top="114" left="426" width="66" height="13" font="4">Abstract</text>
<text top="145" left="171" width="57" height="11" font="4">Matlab</text>
<text top="144" left="234" width="535" height="15" font="4">is a dynamic scientiﬁc language used by scientists, engineers and students world-</text>
<text top="162" left="149" width="620" height="15" font="4">wide. Although Matlab is very suitable for rapid prototyping and development, Matlab users</text>
<text top="180" left="149" width="620" height="15" font="4">often want to convert their ﬁnal Matlab programs to a static language such as Fortran. This</text>
<text top="198" left="149" width="620" height="15" font="4">paper presents an extensible object-oriented toolkit for supporting the generation of static pro-</text>
<text top="216" left="149" width="620" height="15" font="4">grams from dynamic Matlab programs. Our open source toolkit, called the Matlab Tamer,</text>
<text top="234" left="149" width="620" height="15" font="4">identiﬁes a large tame subset of Matlab, supports the generation of a specialized Tame IR for</text>
<text top="252" left="149" width="620" height="15" font="4">that subset, provides a principled approach to handling the large number of builtin Matlab</text>
<text top="270" left="149" width="620" height="15" font="4">functions, and supports an extensible interprocedural value analysis for estimating Matlab</text>
<text top="288" left="149" width="144" height="15" font="4">types and call graphs.</text>
<text top="344" left="108" width="12" height="20" font="0">1</text>
<text top="344" left="143" width="121" height="20" font="0">Introduction</text>
<text top="393" left="108" width="63" height="12" font="3">Matlab</text>
<text top="392" left="178" width="632" height="16" font="3">is a popular numeric programming language, used by millions of scientists, engineers</text>
<text top="412" left="108" width="702" height="16" font="3">and students worldwide [13]. Matlab programmers appreciate the high-level matrix operators,</text>
<text top="433" left="108" width="702" height="16" font="3">the fact that variables and types do not need to be declared, the large number of library and</text>
<text top="453" left="108" width="702" height="16" font="3">builtin functions available, and the interactive style of program development available through the</text>
<text top="473" left="108" width="702" height="16" font="3">IDE and the interpreter-style read-eval-print loop. However, even though Matlab programmers</text>
<text top="494" left="108" width="702" height="16" font="3">appreciate all of the features that enable rapid prototyping, they often have other ultimate goals.</text>
<text top="514" left="108" width="702" height="16" font="3">Frequently their computations are quite computationally intensive and they really want an eﬃcient</text>
<text top="534" left="108" width="702" height="16" font="3">implementation. Programmers also often want to integrate their Matlab program into existing</text>
<text top="555" left="108" width="702" height="16" font="3">static systems. As just one example, one of our users wanted to generate Fortran code that can</text>
<text top="575" left="108" width="364" height="16" font="3">be plugged into a weather simulation environment.</text>
<text top="604" left="108" width="702" height="16" font="3">This paper addresses the problem of how to provide the bridge between the dynamic realities of</text>
<text top="625" left="108" width="63" height="12" font="3">Matlab</text>
<text top="624" left="175" width="635" height="16" font="3">and the ultimate goal of wanting eﬃcient and static programs in languages like Fortran.</text>
<text top="644" left="108" width="702" height="16" font="3">It is not realistic to support all the Matlab features, but our goal is to deﬁne and provide support</text>
<text top="665" left="108" width="702" height="16" font="3">for a very large subset of Matlab which includes dynamic typing, variable numbers of input and</text>
<text top="685" left="108" width="702" height="16" font="3">output arguments, support for a variety of Matlab data types including arrays, cell arrays and</text>
<text top="705" left="108" width="474" height="16" font="3">structs, and support for function handles and lambda expressions.</text>
<text top="734" left="108" width="702" height="16" font="3">Providing this bridge presents two main challenges. The ﬁrst is that Matlab is actually quite a</text>
<text top="755" left="108" width="702" height="16" font="3">complex language which has evolved over many years and which has non-standard type rules and</text>
<text top="775" left="108" width="702" height="16" font="3">function lookup semantics. The second major challenge is properly dealing with the large number</text>
<text top="795" left="108" width="702" height="16" font="3">of builtin and library functions, which have also been developed over time and which sometimes</text>
<text top="816" left="108" width="286" height="16" font="3">have unexpected or irregular behaviour.</text>
<text top="844" left="108" width="702" height="16" font="3">Our solution is an open-source extensible objected-oriented framework, implemented in Java, as</text>
<text top="865" left="108" width="702" height="16" font="3">presented in Fig. 1. The overall goal of the system is to take Matlab programs as input and</text>
<text top="885" left="108" width="702" height="16" font="3">produce output which is suitable for static compilation, a process that we call Taming Matlab.</text>
<text top="905" left="108" width="702" height="16" font="3">Given a .m ﬁle as input, which is the entry point, the Matlab Tamer produces as output: (1) a</text>
<text top="926" left="108" width="702" height="16" font="3">Tame IR for all functions (both user and library) which are reachable from the entry point, (2) a</text>
<text top="946" left="108" width="542" height="16" font="3">complete call graph, and (3) an estimation of classes/types for all variables.</text>
<text top="975" left="108" width="702" height="16" font="3">There are some features in Matlab that are simply too wild to handle, and so our system will</text>
<text top="995" left="108" width="702" height="16" font="3">reject programs using those features, and the user will need to refactor their program to eliminate</text>
<text top="1015" left="108" width="702" height="16" font="3">that feature. Thus, another important goal in our work is to deﬁne as large as possible subset of</text>
<text top="1036" left="108" width="63" height="12" font="3">Matlab</text>
<text top="1036" left="176" width="323" height="16" font="3">that can be tamed without user intervention.</text>
<text top="1102" left="455" width="8" height="16" font="3">4</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="5" size="8" family="Helvetica" color="#000000"/>
	<fontspec id="6" size="6" family="Times" color="#000000"/>
	<fontspec id="7" size="6" family="Helvetica" color="#000000"/>
	<fontspec id="8" size="-1" family="Times" color="#000000"/>
<text top="175" left="355" width="87" height="9" font="5"><b>McLAB Front−end</b></text>
<text top="132" left="407" width="9" height="8" font="6">.m</text>
<text top="205" left="416" width="28" height="8" font="6">McAST</text>
<text top="292" left="442" width="33" height="8" font="7">Tame IR</text>
<text top="482" left="316" width="49" height="9" font="5"><b>FORTRAN</b></text>
<text top="496" left="316" width="48" height="9" font="5"><b>Generator</b></text>
<text top="496" left="464" width="48" height="9" font="5"><b>Generator</b></text>
<text top="484" left="478" width="18" height="9" font="5"><b>X10</b></text>
<text top="228" left="598" width="22" height="9" font="5"><b>TOO</b></text>
<text top="242" left="596" width="32" height="9" font="5"><b>WILD!!</b></text>
<text top="155" left="529" width="41" height="9" font="5"><b>Refactor</b></text>
<text top="330" left="424" width="80" height="9" font="5"><b>Initial Call Graph</b></text>
<text top="340" left="448" width="35" height="9" font="5"><b>Builder</b></text>
<text top="351" left="444" width="42" height="8" font="7">(Section 5)</text>
<text top="398" left="444" width="42" height="8" font="7">(Section 5)</text>
<text top="376" left="428" width="76" height="9" font="5"><b>Interprocedural </b></text>
<text top="387" left="430" width="71" height="9" font="5"><b>Value Analysis</b></text>
<text top="376" left="306" width="37" height="9" font="5"><b>Built−in</b></text>
<text top="387" left="330" width="53" height="9" font="5"><b>Framework</b></text>
<text top="398" left="326" width="42" height="8" font="7">(Section 3)</text>
<text top="126" left="324" width="42" height="8" font="7">(Section 2)</text>
<text top="446" left="355" width="149" height="8" font="7">Tame IR + classes + types + call graph</text>
<text top="238" left="318" width="37" height="9" font="5"><b>McSAF </b></text>
<text top="260" left="304" width="64" height="8" font="7">Function Lookup</text>
<text top="250" left="310" width="52" height="8" font="7">Kind Analysis</text>
<text top="238" left="436" width="38" height="9" font="5"><b>Taming </b></text>
<text top="249" left="416" width="82" height="9" font="5"><b>Transformations </b></text>
<text top="260" left="434" width="42" height="8" font="7">(Section 4)</text>
<text top="535" left="108" width="702" height="16" font="3">Figure 1: Overview of our Matlab Tamer. The shaded boxes indicate the components presented</text>
<text top="556" left="108" width="702" height="16" font="3">in this paper. The other solid boxes correspond to existing McLab tools we use, and the dashed</text>
<text top="576" left="108" width="565" height="16" font="3">boxes correspond to ongoing projects which are using the results of this paper.</text>
<text top="619" left="108" width="371" height="16" font="3">The main contributions of this paper are as follows.</text>
<text top="662" left="149" width="661" height="16" font="3">We present an overall design and implementation for the Matlab Tamer, an extensible</text>
<text top="682" left="149" width="661" height="16" font="3">object-oriented framework which provides the bridge between the dynamic Matlab language</text>
<text top="702" left="149" width="225" height="16" font="3">and a static back-end compiler.</text>
<text top="735" left="149" width="661" height="16" font="3">We describe the key features of Matlab necessary for compiler developers and for tool writers</text>
<text top="755" left="149" width="661" height="16" font="3">to understand Matlab and the analyses in this paper. We hope that by carefully explaining</text>
<text top="775" left="149" width="661" height="16" font="3">these ideas, we can enable other researchers to also work on static tools for Matlab. Our</text>
<text top="796" left="149" width="661" height="16" font="3">discussion of Matlab features also motivates our choice of the subset of Matlab that we</text>
<text top="816" left="149" width="92" height="16" font="3">aim to tame.</text>
<text top="848" left="149" width="661" height="16" font="3">We provide a principled approach to understanding, grouping, and analyzing the large number</text>
<text top="869" left="149" width="209" height="16" font="3">of Matlab builtin functions.</text>
<text top="901" left="149" width="661" height="16" font="3">We developed extensions to the McSaf [4] framework to support a lower-level and more</text>
<text top="921" left="149" width="471" height="16" font="3">specialized Tame IR, suitable for back-end static code generation.</text>
<text top="954" left="149" width="661" height="16" font="3">We present an interprocedural ﬂow analysis framework that computes both abstract values</text>
<text top="974" left="149" width="661" height="16" font="3">and the complete call graph. This ﬂow analysis provides an object-oriented approach which</text>
<text top="994" left="149" width="524" height="16" font="3">allows for extension and reﬁnement of the abstract value representations.</text>
<text top="1037" left="108" width="702" height="16" font="3">The remainder of the paper is structured as follows. Sec. 2 introduces the key Matlab features,</text>
<text top="1057" left="108" width="702" height="16" font="3">Sec. 3 describes our approach to Matlab builtins, Sec. 4 describes the Tame IR and transforma-</text>
<text top="1102" left="455" width="8" height="16" font="3">5</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="9" size="11" family="Times" color="#000000"/>
	<fontspec id="10" size="11" family="Times" color="#0000ff"/>
<text top="112" left="108" width="702" height="16" font="3">tions, Sec. 5 explains our extensible and interprocedural value analysis and call graph construction,</text>
<text top="132" left="108" width="467" height="16" font="3">Sec. 6 provides an overview of related work and Sec. 7 concludes.</text>
<text top="189" left="108" width="12" height="20" font="0">2</text>
<text top="189" left="143" width="314" height="20" font="0">MATLAB - a dynamic language</text>
<text top="238" left="108" width="702" height="16" font="3">In this section we describe key Matlab semantics and features to provide necessary background</text>
<text top="258" left="108" width="702" height="16" font="3">for compiler writers and tool developers to understand Matlab and its challenges, and to motivate</text>
<text top="278" left="108" width="702" height="16" font="3">our approach of constructing a “tame” intermediate representation and Matlab callgraph. In each</text>
<text top="299" left="108" width="702" height="16" font="3">subsection we give a description followed by annotated examples using the Matlab read-eval-print</text>
<text top="319" left="108" width="173" height="16" font="3">loop. In the examples, “</text>
<text top="322" left="281" width="14" height="12" font="9">&gt;&gt;</text>
<text top="319" left="295" width="515" height="16" font="3">” indicates a line of user input, and the following line(s) give the printed</text>
<text top="339" left="108" width="53" height="16" font="3">output.</text>
<text top="391" left="108" width="25" height="17" font="2">2.1</text>
<text top="391" left="153" width="51" height="17" font="2">Basics</text>
<text top="432" left="108" width="63" height="12" font="3">Matlab</text>
<text top="431" left="175" width="635" height="16" font="3">was originally designed in the 1970s to give access to features of Fortran (like Linpack,</text>
<text top="452" left="108" width="62" height="12" font="3">Eispack</text>
<text top="451" left="170" width="639" height="16" font="3">) without having to learn Fortran [14]. As the name Matlab(MATrix LABoratory)</text>
<text top="472" left="108" width="702" height="16" font="3">suggests, Matlab is centered around numerical computation. Floating point matrices are the core</text>
<text top="492" left="108" width="702" height="16" font="3">of the language. However, the language has evolved beyond just simple matrices and now has a</text>
<text top="512" left="108" width="702" height="16" font="3">type system including matrices of diﬀerent types, compound types including cell arrays and structs,</text>
<text top="533" left="108" width="170" height="16" font="3">and function references.</text>
<text top="561" left="108" width="702" height="16" font="3">Given its origins, Matlab is a language that is built around matrices. Every value is a Matrix with</text>
<text top="582" left="108" width="702" height="16" font="3">some number of dimensions, so every value has an associated array shape. Even scalar values are</text>
<text top="602" left="108" width="702" height="16" font="3">1 × 1 matrices. Vectors are either 1 × n or n × 1 matrices and strings are just vectors of characters.</text>
<text top="622" left="108" width="379" height="16" font="3">Most operations are deﬁned for matrices, for example</text>
<text top="625" left="491" width="35" height="12" font="9">a * b</text>
<text top="622" left="531" width="267" height="16" font="3">speciﬁes matrix multiplication if both</text>
<text top="625" left="803" width="7" height="12" font="9">a</text>
<text top="643" left="108" width="26" height="16" font="3">and</text>
<text top="646" left="139" width="7" height="12" font="9">b</text>
<text top="643" left="151" width="659" height="16" font="3">are matrices. Operators are overloaded and sometimes refer to scalar operations, for example</text>
<text top="666" left="108" width="35" height="12" font="9">a * b</text>
<text top="663" left="149" width="297" height="16" font="3">speciﬁes an element-wise multiplication if</text>
<text top="666" left="451" width="7" height="12" font="9">a</text>
<text top="663" left="463" width="110" height="16" font="3">is a matrix and</text>
<text top="666" left="579" width="7" height="12" font="9">b</text>
<text top="663" left="591" width="76" height="16" font="3">is a scalar.</text>
<text top="687" left="108" width="71" height="12" font="9">&gt;&gt; size(3)</text>
<text top="686" left="267" width="190" height="13" font="10">% the scalar 3 is a 1x1 matrix</text>
<text top="703" left="140" width="7" height="12" font="9">1</text>
<text top="703" left="178" width="7" height="12" font="9">1</text>
<text top="720" left="108" width="113" height="12" font="9">&gt;&gt; size([1 2 3])</text>
<text top="719" left="267" width="88" height="13" font="10">% a 1x3 vector</text>
<text top="736" left="140" width="7" height="12" font="9">1</text>
<text top="736" left="178" width="7" height="12" font="9">3</text>
<text top="753" left="108" width="169" height="12" font="9">&gt;&gt; size([5; 6; 7; 8; 9])</text>
<text top="752" left="285" width="87" height="13" font="10">% a 5x1 vector</text>
<text top="769" left="140" width="7" height="12" font="9">5</text>
<text top="769" left="178" width="7" height="12" font="9">1</text>
<text top="786" left="108" width="57" height="12" font="9">&gt;&gt; size(</text>
<text top="795" left="165" width="7" height="0" font="8">³</text>
<text top="786" left="172" width="77" height="12" font="9">hello world</text>
<text top="795" left="249" width="7" height="0" font="8">³</text>
<text top="786" left="256" width="7" height="12" font="9">)</text>
<text top="785" left="270" width="211" height="13" font="10">% a string , which is a 1x11 vector</text>
<text top="802" left="140" width="7" height="12" font="9">1</text>
<text top="802" left="172" width="14" height="12" font="9">11</text>
<text top="818" left="108" width="28" height="12" font="9">&gt;&gt; [</text>
<text top="827" left="136" width="7" height="0" font="8">³</text>
<text top="818" left="143" width="7" height="12" font="9">a</text>
<text top="827" left="150" width="7" height="0" font="8">³</text>
<text top="827" left="165" width="7" height="0" font="8">³</text>
<text top="818" left="172" width="7" height="12" font="9">b</text>
<text top="827" left="179" width="7" height="0" font="8">³</text>
<text top="818" left="186" width="7" height="12" font="9">;</text>
<text top="827" left="200" width="7" height="0" font="8">³</text>
<text top="818" left="207" width="7" height="12" font="9">e</text>
<text top="827" left="214" width="7" height="0" font="8">³</text>
<text top="827" left="228" width="7" height="0" font="8">³</text>
<text top="818" left="235" width="7" height="12" font="9">f</text>
<text top="827" left="242" width="7" height="0" font="8">³</text>
<text top="818" left="249" width="7" height="12" font="9">]</text>
<text top="818" left="267" width="239" height="15" font="10">% a 2−dimensional matrix of characters</text>
<text top="835" left="140" width="14" height="12" font="9">ab</text>
<text top="851" left="140" width="14" height="12" font="9">ef</text>
<text top="905" left="108" width="25" height="17" font="2">2.2</text>
<text top="905" left="153" width="69" height="13" font="2">Matlab</text>
<text top="905" left="228" width="106" height="17" font="2">Type System</text>
<text top="945" left="108" width="63" height="12" font="3">Matlab</text>
<text top="944" left="176" width="634" height="16" font="3">is dynamically typed - variables need not be declared, they will take on any value that is</text>
<text top="965" left="108" width="702" height="16" font="3">assigned to them. Every Matlab value has an associated Matlab class (henceforth we will use</text>
<text top="985" left="108" width="702" height="16" font="3">the name mclass when referring to a Matlab class, in order to avoid confusion with the usual</text>
<text top="1005" left="108" width="702" height="16" font="3">notion of a class). The mclass generally denotes the type of the elements of a value. For example,</text>
<text top="1026" left="108" width="702" height="16" font="3">the mclass of an array of doubles is double. The default numeric mclass is double. While Matlab</text>
<text top="1046" left="108" width="422" height="16" font="3">also includes integer types, all numeric literals are doubles.</text>
<text top="1102" left="455" width="8" height="16" font="3">6</text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="11" size="9" family="Times" color="#000000"/>
	<fontspec id="12" size="6" family="Times" color="#000000"/>
<text top="115" left="108" width="57" height="12" font="9">&gt;&gt; n = 1</text>
<text top="114" left="222" width="341" height="13" font="10">% the input literal and the ouput look like an integer</text>
<text top="132" left="140" width="7" height="12" font="9">1</text>
<text top="148" left="108" width="78" height="12" font="9">&gt;&gt; class(n)</text>
<text top="147" left="222" width="334" height="13" font="10">% however the mclass is is really double , the default</text>
<text top="164" left="140" width="42" height="12" font="9">double</text>
<text top="181" left="108" width="106" height="12" font="9">&gt;&gt; class(1:100)</text>
<text top="180" left="222" width="337" height="13" font="10">% the mclass of the vector [1, 2, ..., 100] is double</text>
<text top="197" left="140" width="42" height="12" font="9">double</text>
<text top="228" left="108" width="63" height="12" font="3">Matlab</text>
<text top="228" left="176" width="473" height="16" font="3">has a set of builtin mclasses, which can be summarized as follows:</text>
<text top="271" left="149" width="52" height="15" font="3">double</text>
<text top="270" left="201" width="218" height="16" font="3">, single: ﬂoating point values</text>
<text top="305" left="149" width="43" height="15" font="3">uint8</text>
<text top="304" left="192" width="488" height="16" font="3">, uint16, uint32, uint64, int8, int16, in32, int64: integer values</text>
<text top="338" left="149" width="60" height="15" font="3">logical</text>
<text top="337" left="209" width="116" height="16" font="3">: boolean values</text>
<text top="372" left="149" width="35" height="15" font="3">char</text>
<text top="371" left="183" width="192" height="16" font="3">: character values (strings)</text>
<text top="406" left="149" width="35" height="15" font="3">cell</text>
<text top="405" left="183" width="169" height="16" font="3">: inhomogeneous arrays</text>
<text top="440" left="149" width="52" height="15" font="3">struct</text>
<text top="439" left="201" width="83" height="16" font="3">: structures</text>
<text top="474" left="149" width="129" height="15" font="3">function handle</text>
<text top="473" left="278" width="172" height="16" font="3">: references to functions</text>
<text top="515" left="108" width="702" height="16" font="3">Given that by default any numerical value in Matlab is a double, all values that are intended</text>
<text top="535" left="108" width="702" height="16" font="3">to be of a diﬀerent numeric type have to be speciﬁcally converted. This also means that when</text>
<text top="555" left="108" width="702" height="16" font="3">combining a value of some non-double mclass with a value that is a double, the result will be</text>
<text top="576" left="108" width="702" height="16" font="3">of the non-double mclass. This leads to the surprising semantics that adding an integer and a</text>
<text top="597" left="108" width="52" height="15" font="3">double</text>
<text top="596" left="165" width="463" height="16" font="3">results in an integer, because that is the more specialized type.</text>
<text top="620" left="108" width="155" height="12" font="9">&gt;&gt; x = 3; y = int8(5);</text>
<text top="619" left="270" width="122" height="13" font="10">% assign to x and y,</text>
<text top="619" left="407" width="23" height="13" font="10">y is</text>
<text top="619" left="444" width="119" height="13" font="10">explictly an integer</text>
<text top="637" left="108" width="78" height="12" font="9">&gt;&gt; class(x)</text>
<text top="636" left="267" width="165" height="13" font="10">% the class of x is double</text>
<text top="653" left="140" width="42" height="12" font="9">double</text>
<text top="669" left="108" width="78" height="12" font="9">&gt;&gt; class(y)</text>
<text top="669" left="267" width="151" height="13" font="10">% the class of y is int8</text>
<text top="686" left="140" width="28" height="12" font="9">int8</text>
<text top="702" left="108" width="92" height="12" font="9">&gt;&gt; class(x+y)</text>
<text top="701" left="267" width="177" height="13" font="10">% the result of x+y is int8 ,</text>
<text top="701" left="458" width="63" height="13" font="10">not double</text>
<text top="719" left="140" width="28" height="12" font="9">int8</text>
<text top="772" left="108" width="25" height="17" font="2">2.3</text>
<text top="772" left="153" width="69" height="13" font="2">Matlab</text>
<text top="772" left="228" width="233" height="17" font="2">Functions and Specialization</text>
<text top="812" left="108" width="633" height="16" font="3">A Matlab function is deﬁned in a .m ﬁle which has the same name as the function.</text>
<text top="809" left="741" width="6" height="12" font="11">1</text>
<text top="812" left="761" width="49" height="16" font="3">So, for</text>
<text top="832" left="108" width="702" height="16" font="3">example, a function named foo would be deﬁned in a ﬁle foo.m, and that ﬁle needs to be placed</text>
<text top="853" left="108" width="702" height="16" font="3">either in the current directory, or in a directory on the Matlab path. A .m ﬁle can also deﬁne</text>
<text top="873" left="108" width="702" height="16" font="3">subfunctions following the main (primary) function deﬁnition in a ﬁle, but those subfunctions are</text>
<text top="893" left="108" width="702" height="16" font="3">only visible to the functions within the ﬁle. Functions may also be deﬁned in a private/ directory,</text>
<text top="913" left="108" width="564" height="16" font="3">in which case they are visible only to functions deﬁned in the parent directory.</text>
<text top="943" left="108" width="63" height="12" font="3">Matlab</text>
<text top="942" left="176" width="634" height="16" font="3">allows overriding or specializing operations and functions to operate on speciﬁc mclasses.</text>
<text top="963" left="108" width="702" height="16" font="3">This is accomplished by deﬁning the function in a ﬁle inside a specially named directory which starts</text>
<text top="983" left="108" width="702" height="16" font="3">with the character @ followed by the name of the mclass. For example, one could create a specialized</text>
<text top="1003" left="108" width="702" height="16" font="3">function firstWord deﬁned for Strings, by creating a ﬁle @char/firstWord.m somewhere on the</text>
<text top="1024" left="108" width="63" height="12" font="3">Matlab</text>
<text top="1024" left="176" width="633" height="16" font="3">path. Functions that are specialized in such a way have precedence over non-specialized</text>
<text top="1054" left="127" width="5" height="6" font="12">1</text>
<text top="1056" left="133" width="654" height="13" font="9">In the case where the name of the ﬁle and the function do not match, the name of the ﬁle takes precedence.</text>
<text top="1102" left="455" width="8" height="16" font="3">7</text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="13" size="5" family="Times" color="#000000"/>
<text top="112" left="108" width="702" height="16" font="3">functions, but they do not have precedence over inner functions, subfunctions (deﬁned in the same</text>
<text top="132" left="108" width="702" height="16" font="3">ﬁle) or private functions (deﬁned in the /private directory). So, in our example, if there existed</text>
<text top="153" left="108" width="702" height="16" font="3">two deﬁnitions of firstWord.m, one general implementation somewhere on the Matlab path, and</text>
<text top="173" left="108" width="702" height="16" font="3">one specialized implementation in a directory @char on the Matlab path, then a call to firstWord</text>
<text top="193" left="108" width="702" height="16" font="3">with a char argument will result in a call to @char/firstWord.m, whereas a call with an argument</text>
<text top="214" left="108" width="583" height="16" font="3">with any other mclass, will result in a call to the general firstWord.m deﬁnition.</text>
<text top="243" left="108" width="702" height="16" font="3">When calling a function that has mclass-specialized versions with multiple arguments of diﬀerent</text>
<text top="263" left="108" width="702" height="16" font="3">mclasses, Matlab has to resolve which version of the function to call. There doesn’t exist a stan-</text>
<text top="283" left="108" width="702" height="16" font="3">dard inheritance relationship between the builtin mclasses. Rather, Matlab has the notion of a</text>
<text top="304" left="108" width="702" height="16" font="3">superior or inferior class. We were unable to ﬁnd a succinct summary of these relationships, so</text>
<text top="324" left="108" width="702" height="16" font="3">we generated a Matlab program which exercised all cases and which produced a .dot ﬁle de-</text>
<text top="344" left="108" width="702" height="16" font="3">scribing all relationships, with all transitive relationships removed. Fig. 2 shows the relationships</text>
<text top="364" left="108" width="702" height="16" font="3">between diﬀerent builtin mclasses, showing superior classes above inferior classes. Note that some</text>
<text top="385" left="108" width="702" height="16" font="3">mclasses have no deﬁned relationship, for example, there are no deﬁned inferior/superior relation-</text>
<text top="405" left="108" width="702" height="16" font="3">ships between the diﬀerent integer mclasses. Further, note that double, being the default mclass,</text>
<text top="425" left="108" width="702" height="16" font="3">is inferior to integer mclasses. Also, the compound mclasses (struct and cell), are superior to all</text>
<text top="446" left="108" width="118" height="16" font="3">matrix mclasses.</text>
<text top="654" left="448" width="22" height="7" font="13">single</text>
<text top="697" left="420" width="26" height="7" font="13">d o u b l e</text>
<text top="697" left="478" width="17" height="7" font="13">c h a r</text>
<text top="739" left="447" width="24" height="7" font="13">logical</text>
<text top="612" left="376" width="15" height="7" font="13">i n t 8</text>
<text top="612" left="423" width="20" height="7" font="13">i n t 1 6</text>
<text top="612" left="475" width="20" height="7" font="13">i n t 3 2</text>
<text top="612" left="528" width="20" height="7" font="13">i n t 6 4</text>
<text top="612" left="580" width="20" height="7" font="13">u i n t 8</text>
<text top="612" left="634" width="25" height="7" font="13">u i n t 1 6</text>
<text top="612" left="257" width="25" height="7" font="13">u i n t 3 2</text>
<text top="612" left="318" width="25" height="7" font="13">u i n t 6 4</text>
<text top="527" left="427" width="63" height="7" font="13">f u n c t i o n _ h a n d l e</text>
<text top="570" left="423" width="22" height="7" font="13">s t r u c t</text>
<text top="570" left="477" width="13" height="7" font="13">cell</text>
<text top="485" left="441" width="35" height="7" font="13">a n O b j e c t</text>
<text top="779" left="247" width="419" height="16" font="3">Figure 2: Superior/inferior class relationships for Matlab</text>
<text top="818" left="108" width="702" height="16" font="3">When resolving a call with multiple arguments, Matlab ﬁnds the most superior argument, and uses</text>
<text top="838" left="108" width="702" height="16" font="3">its mclass to resolve the call. If multiple arguments have no deﬁned superior/inferior relationships,</text>
<text top="859" left="108" width="63" height="12" font="3">Matlab</text>
<text top="858" left="179" width="632" height="16" font="3">uses the leftmost superior argument. For example, if a function is called with three</text>
<text top="879" left="108" width="702" height="16" font="3">arguments with the mclasses (double, int8, uint32), in that order, Matlab attempts to ﬁnd a</text>
<text top="899" left="108" width="702" height="16" font="3">specialized version for mclass int8. If none is found, Matlab attempts to ﬁnd a non-specialized</text>
<text top="919" left="108" width="55" height="16" font="3">version.</text>
<text top="948" left="108" width="702" height="16" font="3">The class specialization semantics for Matlab means that if one intends to build a complete</text>
<text top="969" left="108" width="702" height="16" font="3">callgraph, i.e. resolve all possible call edges, one has to ﬁnd all possible Matlab classes for all</text>
<text top="989" left="108" width="702" height="16" font="3">arguments, and one must safely approximate the lookup semantics of functions, including the correct</text>
<text top="1009" left="108" width="702" height="16" font="3">lookup of specialized functions using the mclass and the superior/inferior mclass relationships from</text>
<text top="1029" left="108" width="46" height="16" font="3">Fig. 2.</text>
<text top="1102" left="455" width="8" height="16" font="3">8</text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="25" height="17" font="2">2.4</text>
<text top="112" left="153" width="69" height="13" font="2">Matlab</text>
<text top="112" left="228" width="58" height="17" font="2">Classes</text>
<text top="152" left="108" width="702" height="16" font="3">It is important to note that the mclass of a value does not completely deﬁne its type. For example,</text>
<text top="172" left="108" width="702" height="16" font="3">numeric Matlab values may be real or complex, and matrices have an array shape. Both of these</text>
<text top="192" left="108" width="702" height="16" font="3">properties are deﬁned orthogonally to the notion of its mclass. Although a computation can ask</text>
<text top="213" left="108" width="702" height="16" font="3">whether a value is complex or real, and can ask for the shape of an array, the lookup semantics</text>
<text top="233" left="108" width="702" height="16" font="3">solely depend on the mclass, which is eﬀectively just a name. Within the Matlab language, there</text>
<text top="253" left="108" width="702" height="16" font="3">is no dedicated class of values to represent mclasses. Usually, strings (char vectors) are used to</text>
<text top="274" left="108" width="218" height="16" font="3">denote mclasses. For example,</text>
<text top="277" left="332" width="63" height="12" font="9">ones(3,2,</text>
<text top="286" left="395" width="7" height="0" font="8">³</text>
<text top="277" left="402" width="42" height="12" font="9">single</text>
<text top="286" left="445" width="7" height="0" font="8">³</text>
<text top="277" left="452" width="7" height="12" font="9">)</text>
<text top="274" left="459" width="351" height="16" font="3">, will call the builtin function ’ones’ and create a</text>
<text top="294" left="108" width="314" height="16" font="3">3 × 2 array of unit values of mclass single.</text>
<text top="346" left="108" width="25" height="17" font="2">2.5</text>
<text top="346" left="153" width="143" height="17" font="2">Function Handles</text>
<text top="386" left="108" width="63" height="12" font="3">Matlab</text>
<text top="386" left="176" width="634" height="16" font="3">values with mclass function handle store a reference to a function. This allows passing</text>
<text top="406" left="108" width="702" height="16" font="3">functions as arguments to other functions. Function handles can either be created to refer to an</text>
<text top="426" left="108" width="702" height="16" font="3">existing function, or can be a lambda expression. Lambda expressions may also encapsulate state</text>
<text top="447" left="108" width="512" height="16" font="3">from the current workspace via free variables in the lambda expression.</text>
<text top="470" left="108" width="78" height="12" font="9">&gt;&gt; f = @sin</text>
<text top="470" left="267" width="248" height="13" font="10">% a function handle to a named function</text>
<text top="487" left="108" width="56" height="12" font="9">f = @sin</text>
<text top="503" left="108" width="141" height="12" font="9">&gt;&gt; g = @(x) exp(a*x)</text>
<text top="503" left="267" width="224" height="13" font="10">% a lambda with a free variable ”a”</text>
<text top="520" left="108" width="113" height="12" font="9">g = @(x)exp(a*x)</text>
<text top="550" left="108" width="702" height="16" font="3">Function handles, and especially lambdas, are useful in numerical computing, for example when</text>
<text top="570" left="108" width="328" height="16" font="3">calling numerical solvers, as illustrated below.</text>
<text top="594" left="108" width="134" height="12" font="9">f = @(t,y) D*t + c;</text>
<text top="593" left="249" width="163" height="13" font="10">% set up derivative function</text>
<text top="611" left="108" width="92" height="12" font="9">span = [0 1];</text>
<text top="610" left="235" width="85" height="13" font="10">% set interval</text>
<text top="627" left="108" width="106" height="12" font="9">y0 = [0:0.1:10]</text>
<text top="636" left="213" width="7" height="0" font="8">³</text>
<text top="627" left="221" width="7" height="12" font="9">;</text>
<text top="626" left="235" width="76" height="13" font="10">% set initial</text>
<text top="626" left="325" width="30" height="13" font="10">value</text>
<text top="644" left="108" width="191" height="12" font="9">result = ode23s(f,span,y0);</text>
<text top="643" left="306" width="269" height="13" font="10">% use MATLAB library function to solve ODE</text>
<text top="674" left="108" width="702" height="16" font="3">When building a callgraph of a program that includes function handles, one needs to propagate</text>
<text top="694" left="108" width="702" height="16" font="3">function handles through the program interprocedurally in order to ﬁnd out which variables may</text>
<text top="715" left="108" width="421" height="16" font="3">refer to function handles, and to ﬁnd associated call edges.</text>
<text top="766" left="108" width="25" height="17" font="2">2.6</text>
<text top="766" left="153" width="302" height="17" font="2">Function Parameters and Arguments</text>
<text top="807" left="108" width="63" height="12" font="3">Matlab</text>
<text top="806" left="176" width="626" height="16" font="3">uses call-by-value semantics, so that each parameter denotes a fresh copy of a variable.</text>
<text top="804" left="803" width="6" height="12" font="11">2</text>
<text top="827" left="108" width="702" height="16" font="3">This simpliﬁes interprocedural analyses for static compilation as calling a function cannot directly</text>
<text top="847" left="108" width="251" height="16" font="3">modify local variables in the caller.</text>
<text top="876" left="108" width="702" height="16" font="3">In Matlab, function arguments are optional. That is, when calling a function one may provide</text>
<text top="896" left="108" width="702" height="16" font="3">fewer arguments than the function is declared with. However, Matlab does not have a declarative</text>
<text top="916" left="108" width="702" height="16" font="3">way of specifying default values, nor does it automatically provide default values. That is, a</text>
<text top="937" left="108" width="702" height="16" font="3">parameter corresponding to an argument that was not provided will simply be unassigned and a</text>
<text top="957" left="108" width="445" height="16" font="3">runtime error will be thrown if an unassigned variable is read.</text>
<text top="987" left="108" width="63" height="12" font="3">Matlab</text>
<text top="986" left="175" width="635" height="16" font="3">does provide the function nargin to query how many arguments have been provided to the</text>
<text top="1017" left="127" width="5" height="6" font="12">2</text>
<text top="1018" left="133" width="677" height="13" font="9">Actual Matlab implementations only make copies where actually necessary, using either lazy copying when</text>
<text top="1035" left="108" width="702" height="13" font="9">writing to an array with reference count greater than 1, or by using static analyses to determine where to insert</text>
<text top="1051" left="108" width="66" height="13" font="9">copies [10].</text>
<text top="1102" left="455" width="8" height="16" font="3">9</text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="702" height="16" font="3">currently executing function. This allows the programmer to use the value of nargin to explicitly</text>
<text top="132" left="108" width="437" height="16" font="3">assign values to the missing parameters, as illustrated below.</text>
<text top="156" left="108" width="360" height="12" font="9">function [result1, result2] = myFunction(arg1,arg2)</text>
<text top="173" left="127" width="106" height="12" font="9">if (nargin &lt; 1)</text>
<text top="189" left="140" width="63" height="12" font="9">arg1 = 0;</text>
<text top="206" left="127" width="21" height="12" font="9">end</text>
<text top="222" left="127" width="106" height="12" font="9">if (nargin &lt; 2)</text>
<text top="239" left="140" width="63" height="12" font="9">arg2 = 1;</text>
<text top="255" left="127" width="28" height="12" font="9">end;</text>
<text top="271" left="127" width="21" height="12" font="9">...</text>
<text top="288" left="108" width="21" height="12" font="9">end</text>
<text top="318" left="108" width="702" height="16" font="3">As shown above, Matlab also supports assigning multiple return variables. A function call may</text>
<text top="339" left="108" width="702" height="16" font="3">request any number of return values simply by assigning the call into a vector of lvalues. Just</text>
<text top="359" left="108" width="702" height="16" font="3">like the function arguments, the return values don’t all need to be assigned, and a runtime error</text>
<text top="379" left="108" width="702" height="16" font="3">is thrown if a requested return value is not assigned. Matlab provides the nargout function to</text>
<text top="400" left="108" width="322" height="16" font="3">query how many results need to be returned.</text>
<text top="428" left="108" width="666" height="16" font="3">Clearly a static compiler for Matlab must deal with optional arguments in a sound fashion.</text>
<text top="480" left="108" width="25" height="17" font="2">2.7</text>
<text top="480" left="153" width="192" height="17" font="2">Wild Dynamic Features</text>
<text top="520" left="108" width="702" height="16" font="3">Whereas features like dynamic typing, function handles, and variable numbers of input arguments</text>
<text top="540" left="108" width="702" height="16" font="3">are both widely used and possible to tame, there are other truly wild dynamic features in Matlab</text>
<text top="561" left="108" width="694" height="16" font="3">that are not as heavily used, are sometimes abused, and are not amenable for static compilation.</text>
<text top="589" left="108" width="702" height="16" font="3">These features include the use of scripts (instead of functions), arbitrary dynamic evaluation (eval),</text>
<text top="610" left="108" width="702" height="16" font="3">dynamic calls to functions using feval, deletion of workspace variables (clear), assigning variables</text>
<text top="630" left="108" width="702" height="16" font="3">at runtime in the caller scope of a function (assignin), changing the function lookup directories</text>
<text top="650" left="108" width="702" height="16" font="3">during runtime (cd) and certain introspective features. Some of these can destroy all available</text>
<text top="671" left="108" width="557" height="16" font="3">static information, even information associated with diﬀerent function scopes.</text>
<text top="700" left="108" width="702" height="16" font="3">Our approach to these features is to detect such features and help programmers to remove them</text>
<text top="720" left="108" width="702" height="16" font="3">via refactorings. Some refactorings can be automated. For example, McLab already supports</text>
<text top="740" left="108" width="702" height="16" font="3">refactorings to convert scripts to functions and some calls to feval to direct function calls [15].</text>
<text top="761" left="108" width="702" height="16" font="3">Other refactorings may need to be done by the programmer. For example, the programmer may</text>
<text top="781" left="108" width="702" height="16" font="3">use cd to change directory to access some data ﬁle, not being aware that this also changes the</text>
<text top="801" left="108" width="702" height="16" font="3">function lookup order. The solution in this case is to use a path to access the data ﬁle, and not to</text>
<text top="822" left="108" width="702" height="16" font="3">perform a dynamic call to cd. We have also observed many cases where dynamic eval or feval</text>
<text top="842" left="108" width="702" height="16" font="3">calls are used because the programmer was not aware of the correct direct syntax or programming</text>
<text top="862" left="108" width="103" height="16" font="3">feature to use.</text>
<text top="860" left="211" width="6" height="12" font="11">3</text>
<text top="862" left="226" width="584" height="16" font="3">For example, feval is often used to evaluate a function name passed as a String,</text>
<text top="883" left="108" width="551" height="16" font="3">where a more correct programming idiom would be to use a function handle.</text>
<text top="934" left="108" width="25" height="17" font="2">2.8</text>
<text top="934" left="153" width="76" height="17" font="2">Summary</text>
<text top="974" left="108" width="702" height="16" font="3">In this section we have outlined key Matlab features and semantics, especially concentrating on the</text>
<text top="995" left="108" width="702" height="16" font="3">deﬁnition of mclass and function lookup. Our approach is to tame as much of Matlab as possible,</text>
<text top="1015" left="108" width="702" height="16" font="3">including support for function pointers and lambda deﬁnitions. Capturing as much as possible of</text>
<text top="1045" left="127" width="5" height="6" font="12">3</text>
<text top="1047" left="133" width="677" height="13" font="9">This is at least partly due to the fact that older versions of Matlab did not support all of the modern features.</text>
<text top="1102" left="451" width="16" height="16" font="3">10</text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="702" height="16" font="3">the evolved language is not just useful to allow access to a wider set of Matlab features for user</text>
<text top="132" left="108" width="702" height="16" font="3">code. Also, a signiﬁcant portion of Matlab’s extensive libraries are written in Matlab itself,</text>
<text top="153" left="108" width="702" height="16" font="3">and make extensive use of some of the features discussed above. Since we implement the Matlab</text>
<text top="173" left="108" width="701" height="16" font="3">lookup semantics, and allow the inclusion of the Matlab path, our callgraph will automatically</text>
<text top="193" left="108" width="702" height="16" font="3">include available Matlab library functions. Thus, implementing more features will also beneﬁt</text>
<text top="214" left="108" width="395" height="16" font="3">users who do not make direct use of advanced features.</text>
<text top="271" left="108" width="12" height="20" font="0">3</text>
<text top="271" left="143" width="224" height="20" font="0">Framework for Builtins</text>
<text top="319" left="108" width="702" height="16" font="3">One of the strengths of Matlab is in its large library, which doesn’t only provide access to a large</text>
<text top="339" left="108" width="702" height="16" font="3">number of matrix computation functions, but packages for other scientiﬁc ﬁelds. Even relatively</text>
<text top="360" left="108" width="702" height="16" font="3">simple programs tend to use a fair number of library functions. Many library functions are actually</text>
<text top="380" left="108" width="702" height="16" font="3">implemented in Matlab code. Thus, to provide their functionality, the callgraph construction</text>
<text top="400" left="108" width="702" height="16" font="3">needs to include any Matlab function on the Matlab path, if it is available. Thus we can provide</text>
<text top="420" left="108" width="702" height="16" font="3">access to a large number of library functions as long as we can support the language features they</text>
<text top="441" left="108" width="702" height="16" font="3">use. However, hundreds of Matlab functions, termed builtin functions, are actually implemented</text>
<text top="461" left="108" width="702" height="16" font="3">in native code. We call these functions builtins or builtin functions. Every Matlab operator (such</text>
<text top="481" left="108" width="702" height="16" font="3">as +, ∗) is actually a builtin function; the operations are merely syntactic sugar for calling the</text>
<text top="502" left="108" width="702" height="16" font="3">functions that represent the operations (like ’plus’, ’mtimes’). Thus, for an accurate static analysis</text>
<text top="522" left="108" width="702" height="16" font="3">of Matlab programs one requires an accurate model of the builtins. In this section we describe</text>
<text top="542" left="108" width="702" height="16" font="3">how we have modeled the builtins and how we integrate the analysis into the static interprocedural</text>
<text top="563" left="108" width="141" height="16" font="3">analysis framework.</text>
<text top="614" left="108" width="25" height="17" font="2">3.1</text>
<text top="614" left="153" width="192" height="17" font="2">Learning about Builtins</text>
<text top="654" left="108" width="702" height="16" font="3">As a ﬁrst step to build a framework of builtin functions, we need to identify builtins, and need to</text>
<text top="675" left="108" width="471" height="16" font="3">ﬁnd out about their behavior, especially with respect to mclasses.</text>
<text top="727" left="108" width="37" height="15" font="3">3.1.1</text>
<text top="727" left="163" width="146" height="15" font="3">Identifying Builtins:</text>
<text top="766" left="108" width="702" height="16" font="3">To make the task of building a framework for builtins manageable, we wanted to identify the most</text>
<text top="786" left="108" width="702" height="16" font="3">commonly used builtin functions and organize those into a framework. Other builtins can be added</text>
<text top="807" left="108" width="494" height="16" font="3">incrementally, but this initial set was useful to ﬁnd a good structure.</text>
<text top="835" left="108" width="702" height="16" font="3">To identify commonly used builtins we used the McBench framework [15] to ﬁnd all references to</text>
<text top="856" left="108" width="498" height="16" font="3">functions that occur in a large corpus of over 3000 Matlab programs.</text>
<text top="853" left="606" width="6" height="12" font="11">4</text>
<text top="856" left="621" width="189" height="16" font="3">We recorded the frequency</text>
<text top="876" left="108" width="702" height="16" font="3">of use for every function and then using the Matlab function exist, which returns whether a name</text>
<text top="896" left="108" width="702" height="16" font="3">is a variable, user-deﬁned function or builtin, we identiﬁed which one of these functions is a builtin</text>
<text top="917" left="108" width="702" height="16" font="3">function. This provided us with a list of builtin functions used in real Matlab programs, with</text>
<text top="937" left="108" width="702" height="16" font="3">their associated frequency of use. We selected approximately three hundred of the most frequent</text>
<text top="957" left="108" width="654" height="16" font="3">functions, excluding very dynamic functions like eval as our initial set of builtin functions.</text>
<text top="955" left="762" width="6" height="12" font="11">5</text>
<text top="988" left="127" width="5" height="6" font="12">4</text>
<text top="989" left="133" width="677" height="13" font="9">This is the same set of projects that are used in [5]. The benchmarks come from a wide variety of application areas</text>
<text top="1006" left="108" width="702" height="13" font="9">including Computational Physics, Statistics, Computational Biology, Geometry, Linear Algebra, Signal Processing</text>
<text top="1022" left="108" width="135" height="13" font="9">and Image Processing.</text>
<text top="1037" left="127" width="5" height="6" font="12">5</text>
<text top="1038" left="133" width="463" height="13" font="9">The complete list can be found at www.sable.mcgill.ca/mclab/tamer.html</text>
<text top="1102" left="451" width="16" height="16" font="3">11</text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="37" height="15" font="3">3.1.2</text>
<text top="113" left="163" width="203" height="15" font="3">Finding Builtin Behaviours:</text>
<text top="152" left="108" width="702" height="16" font="3">In order to build a call graph it is very important to be able to approximate the behaviour of</text>
<text top="172" left="108" width="702" height="16" font="3">builtins. More precisely, given the mclass of the input arguments, one needs to know a safe ap-</text>
<text top="192" left="108" width="702" height="16" font="3">proximation of the mclass of the output arguments. This behaviour is actually quite complex, and</text>
<text top="213" left="108" width="702" height="16" font="3">since the behaviour of Matlab 7 is the defacto speciﬁcation of the behaviour we decided to take</text>
<text top="233" left="108" width="439" height="16" font="3">a programmatic approach to determining the the behaviours.</text>
<text top="262" left="108" width="702" height="16" font="3">We developed a set of scripts that generated random Matlab values of all combinations of builtin</text>
<text top="282" left="108" width="702" height="16" font="3">mclasses, and called selected builtins using these arguments. If diﬀerent random values of the same</text>
<text top="302" left="108" width="702" height="16" font="3">mclass result in consistent resulting mclasses over many trials, the scripts record the associated</text>
<text top="323" left="108" width="702" height="16" font="3">mclass propagation for builtins in a table, and collect functions with the same mclass propagation</text>
<text top="343" left="108" width="473" height="16" font="3">tables together. Examples of three such tables are given in Fig. 3.</text>
<text top="340" left="581" width="6" height="12" font="11">6</text>
<text top="379" left="168" width="217" height="15" font="3">i8 i16 i32 i64 f32 f64 c</text>
<text top="379" left="413" width="9" height="15" font="3">b</text>
<text top="402" left="129" width="17" height="15" font="3">i8</text>
<text top="402" left="168" width="17" height="15" font="3">i8</text>
<text top="402" left="196" width="5" height="16" font="3">-</text>
<text top="402" left="232" width="5" height="16" font="3">-</text>
<text top="402" left="268" width="5" height="16" font="3">-</text>
<text top="402" left="305" width="5" height="16" font="3">-</text>
<text top="402" left="341" width="17" height="15" font="3">i8</text>
<text top="402" left="377" width="17" height="15" font="3">i8</text>
<text top="402" left="413" width="5" height="16" font="3">-</text>
<text top="423" left="129" width="26" height="15" font="3">i16</text>
<text top="422" left="168" width="5" height="16" font="3">-</text>
<text top="423" left="196" width="26" height="15" font="3">i16</text>
<text top="422" left="232" width="5" height="16" font="3">-</text>
<text top="422" left="268" width="5" height="16" font="3">-</text>
<text top="422" left="305" width="5" height="16" font="3">-</text>
<text top="423" left="341" width="62" height="15" font="3">i16 i16</text>
<text top="422" left="413" width="5" height="16" font="3">-</text>
<text top="444" left="129" width="26" height="15" font="3">i32</text>
<text top="443" left="168" width="5" height="16" font="3">-</text>
<text top="443" left="196" width="5" height="16" font="3">-</text>
<text top="444" left="232" width="26" height="15" font="3">i32</text>
<text top="443" left="268" width="5" height="16" font="3">-</text>
<text top="443" left="305" width="5" height="16" font="3">-</text>
<text top="444" left="341" width="62" height="15" font="3">i32 i32</text>
<text top="443" left="413" width="5" height="16" font="3">-</text>
<text top="465" left="129" width="26" height="15" font="3">i64</text>
<text top="464" left="168" width="5" height="16" font="3">-</text>
<text top="464" left="196" width="5" height="16" font="3">-</text>
<text top="464" left="232" width="5" height="16" font="3">-</text>
<text top="465" left="268" width="26" height="15" font="3">i64</text>
<text top="464" left="305" width="5" height="16" font="3">-</text>
<text top="465" left="341" width="62" height="15" font="3">i64 i64</text>
<text top="464" left="413" width="5" height="16" font="3">-</text>
<text top="486" left="129" width="26" height="15" font="3">f32</text>
<text top="485" left="168" width="5" height="16" font="3">-</text>
<text top="485" left="196" width="5" height="16" font="3">-</text>
<text top="485" left="232" width="5" height="16" font="3">-</text>
<text top="485" left="268" width="5" height="16" font="3">-</text>
<text top="486" left="305" width="134" height="15" font="3">f32 f32 f32 f32</text>
<text top="507" left="129" width="310" height="15" font="3">f64 i8 i16 i32 i64 f32 f64 f64 f64</text>
<text top="528" left="129" width="9" height="15" font="3">c</text>
<text top="528" left="168" width="271" height="15" font="3">i8 i16 i32 i64 f32 f64 f64 f64</text>
<text top="549" left="129" width="9" height="15" font="3">b</text>
<text top="548" left="168" width="5" height="16" font="3">-</text>
<text top="548" left="196" width="5" height="16" font="3">-</text>
<text top="548" left="232" width="5" height="16" font="3">-</text>
<text top="548" left="268" width="5" height="16" font="3">-</text>
<text top="549" left="305" width="134" height="15" font="3">f32 f64 f64 f64</text>
<text top="569" left="149" width="273" height="16" font="3">(a) plus, minus, mtimes, times, kron</text>
<text top="379" left="513" width="217" height="15" font="3">i8 i16 i32 i64 f32 f64 c</text>
<text top="379" left="758" width="9" height="15" font="3">b</text>
<text top="402" left="474" width="17" height="15" font="3">i8</text>
<text top="402" left="513" width="17" height="15" font="3">i8</text>
<text top="402" left="541" width="5" height="16" font="3">-</text>
<text top="402" left="577" width="5" height="16" font="3">-</text>
<text top="402" left="613" width="5" height="16" font="3">-</text>
<text top="402" left="649" width="5" height="16" font="3">-</text>
<text top="402" left="686" width="5" height="16" font="3">-</text>
<text top="402" left="722" width="17" height="15" font="3">i8</text>
<text top="402" left="758" width="5" height="16" font="3">-</text>
<text top="423" left="474" width="26" height="15" font="3">i16</text>
<text top="422" left="513" width="5" height="16" font="3">-</text>
<text top="423" left="541" width="26" height="15" font="3">i16</text>
<text top="422" left="577" width="5" height="16" font="3">-</text>
<text top="422" left="613" width="5" height="16" font="3">-</text>
<text top="422" left="649" width="5" height="16" font="3">-</text>
<text top="422" left="686" width="5" height="16" font="3">-</text>
<text top="423" left="722" width="26" height="15" font="3">i16</text>
<text top="422" left="758" width="5" height="16" font="3">-</text>
<text top="444" left="474" width="26" height="15" font="3">i32</text>
<text top="443" left="513" width="5" height="16" font="3">-</text>
<text top="443" left="541" width="5" height="16" font="3">-</text>
<text top="444" left="577" width="26" height="15" font="3">i32</text>
<text top="443" left="613" width="5" height="16" font="3">-</text>
<text top="443" left="649" width="5" height="16" font="3">-</text>
<text top="443" left="686" width="5" height="16" font="3">-</text>
<text top="444" left="722" width="26" height="15" font="3">i32</text>
<text top="443" left="758" width="5" height="16" font="3">-</text>
<text top="465" left="474" width="26" height="15" font="3">i64</text>
<text top="464" left="513" width="5" height="16" font="3">-</text>
<text top="464" left="541" width="5" height="16" font="3">-</text>
<text top="464" left="577" width="5" height="16" font="3">-</text>
<text top="465" left="613" width="26" height="15" font="3">i64</text>
<text top="464" left="649" width="5" height="16" font="3">-</text>
<text top="464" left="686" width="5" height="16" font="3">-</text>
<text top="465" left="722" width="26" height="15" font="3">i64</text>
<text top="464" left="758" width="5" height="16" font="3">-</text>
<text top="486" left="474" width="26" height="15" font="3">f32</text>
<text top="485" left="513" width="5" height="16" font="3">-</text>
<text top="485" left="541" width="5" height="16" font="3">-</text>
<text top="485" left="577" width="5" height="16" font="3">-</text>
<text top="485" left="613" width="5" height="16" font="3">-</text>
<text top="486" left="649" width="26" height="15" font="3">f32</text>
<text top="485" left="686" width="5" height="16" font="3">-</text>
<text top="486" left="722" width="62" height="15" font="3">f32 f32</text>
<text top="507" left="474" width="310" height="15" font="3">f64 i8 i16 i32 i64 f32 f64 f64 f64</text>
<text top="528" left="474" width="9" height="15" font="3">c</text>
<text top="528" left="513" width="271" height="15" font="3">i8 i16 i32 i64 f32 f64 f64 f64</text>
<text top="549" left="474" width="9" height="15" font="3">b</text>
<text top="548" left="513" width="5" height="16" font="3">-</text>
<text top="548" left="541" width="5" height="16" font="3">-</text>
<text top="548" left="577" width="5" height="16" font="3">-</text>
<text top="548" left="613" width="5" height="16" font="3">-</text>
<text top="549" left="649" width="98" height="15" font="3">f32 f64 f64</text>
<text top="548" left="758" width="5" height="16" font="3">-</text>
<text top="569" left="565" width="132" height="16" font="3">(b) mpower, power</text>
<text top="611" left="341" width="217" height="15" font="3">i8 i16 i32 i64 f32 f64 c</text>
<text top="611" left="586" width="9" height="15" font="3">b</text>
<text top="635" left="301" width="17" height="15" font="3">i8</text>
<text top="635" left="341" width="17" height="15" font="3">i8</text>
<text top="634" left="368" width="5" height="16" font="3">-</text>
<text top="634" left="404" width="5" height="16" font="3">-</text>
<text top="634" left="441" width="5" height="16" font="3">-</text>
<text top="634" left="477" width="5" height="16" font="3">-</text>
<text top="635" left="513" width="17" height="15" font="3">i8</text>
<text top="635" left="549" width="17" height="15" font="3">i8</text>
<text top="634" left="586" width="5" height="16" font="3">-</text>
<text top="656" left="301" width="26" height="15" font="3">i16</text>
<text top="655" left="341" width="5" height="16" font="3">-</text>
<text top="656" left="368" width="26" height="15" font="3">i16</text>
<text top="655" left="404" width="5" height="16" font="3">-</text>
<text top="655" left="441" width="5" height="16" font="3">-</text>
<text top="655" left="477" width="5" height="16" font="3">-</text>
<text top="656" left="513" width="62" height="15" font="3">i16 i16</text>
<text top="655" left="586" width="5" height="16" font="3">-</text>
<text top="677" left="301" width="26" height="15" font="3">i32</text>
<text top="676" left="341" width="5" height="16" font="3">-</text>
<text top="676" left="368" width="5" height="16" font="3">-</text>
<text top="677" left="404" width="26" height="15" font="3">i32</text>
<text top="676" left="441" width="5" height="16" font="3">-</text>
<text top="676" left="477" width="5" height="16" font="3">-</text>
<text top="677" left="513" width="62" height="15" font="3">i32 i32</text>
<text top="676" left="586" width="5" height="16" font="3">-</text>
<text top="698" left="301" width="26" height="15" font="3">i64</text>
<text top="697" left="341" width="5" height="16" font="3">-</text>
<text top="697" left="368" width="5" height="16" font="3">-</text>
<text top="697" left="404" width="5" height="16" font="3">-</text>
<text top="698" left="441" width="26" height="15" font="3">i64</text>
<text top="697" left="477" width="5" height="16" font="3">-</text>
<text top="698" left="513" width="62" height="15" font="3">i64 i64</text>
<text top="697" left="586" width="5" height="16" font="3">-</text>
<text top="719" left="301" width="26" height="15" font="3">f32</text>
<text top="718" left="341" width="5" height="16" font="3">-</text>
<text top="718" left="368" width="5" height="16" font="3">-</text>
<text top="718" left="404" width="5" height="16" font="3">-</text>
<text top="718" left="441" width="5" height="16" font="3">-</text>
<text top="719" left="477" width="135" height="15" font="3">f32 f32 f32 f32</text>
<text top="740" left="301" width="310" height="15" font="3">f64 i8 i16 i32 i64 f32 f64 f64 f64</text>
<text top="760" left="301" width="9" height="15" font="3">c</text>
<text top="760" left="341" width="271" height="15" font="3">i8 i16 i32 i64 f32 f64 f64 f64</text>
<text top="781" left="301" width="9" height="15" font="3">b</text>
<text top="780" left="341" width="5" height="16" font="3">-</text>
<text top="780" left="368" width="5" height="16" font="3">-</text>
<text top="780" left="404" width="5" height="16" font="3">-</text>
<text top="780" left="441" width="5" height="16" font="3">-</text>
<text top="781" left="477" width="98" height="15" font="3">f32 f64 f64</text>
<text top="780" left="586" width="5" height="16" font="3">-</text>
<text top="801" left="248" width="421" height="16" font="3">(c) mldivide, mrdivide, ldivide, rdivide, mod, rem, mod</text>
<text top="835" left="108" width="702" height="16" font="3">Figure 3: Example mclass results for groups of Built-in binary operators. Rows correspond to the</text>
<text top="856" left="108" width="702" height="16" font="3">mclass of the left operand, columns correspond to the mclass of the right operand, and the table</text>
<text top="876" left="108" width="702" height="16" font="3">entries give the mclass of the result. The labels i8 to i64 represent the classes int8 through int64,</text>
<text top="896" left="108" width="702" height="16" font="3">f32 is single, f64 is double, c is char, and b is logical. Entries of the form “-” indicate that this</text>
<text top="917" left="108" width="439" height="16" font="3">combination is not allowed and will result in a runtime error.</text>
<text top="950" left="108" width="702" height="16" font="3">As compared with type rules in other languages, these results may seem a bit strange. For example,</text>
<text top="971" left="108" width="115" height="16" font="3">the “-” entry for</text>
<text top="974" left="227" width="120" height="12" font="9">plus(int16,int32)</text>
<text top="971" left="352" width="458" height="16" font="3">in Fig. 3(a) shows that it is an error to add an int16 to and int32.</text>
<text top="991" left="108" width="702" height="16" font="3">However adding an int64 to a double is allowed and it results in an int64. Also, note that although</text>
<text top="1011" left="108" width="702" height="16" font="3">the three tables in Fig. 3 are similar, they are not identical. For example, in Fig. 3(a), multiplying</text>
<text top="1041" left="127" width="5" height="6" font="12">6</text>
<text top="1043" left="133" width="677" height="13" font="9">To save space we have not included the whole table, we have left out the columns and rows for unsigned integer</text>
<text top="1059" left="108" width="613" height="13" font="9">mclasses and for handles. All result tables can be found at www.sable.mcgill.ca/mclab/tamer.html</text>
<text top="1102" left="451" width="16" height="16" font="3">12</text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="702" height="16" font="3">a logical with a logical results in a double, but using the power operator with two logicals is an</text>
<text top="132" left="108" width="702" height="16" font="3">error. Finally, note that the tables are not always symmetrical. In particular, the f64 column and</text>
<text top="153" left="108" width="244" height="16" font="3">row in Fig. 3(b) are not the same.</text>
<text top="182" left="108" width="702" height="16" font="3">The reader may have noticed how the superior/inferior m-class relationships as shown in ﬁgure Fig. 2</text>
<text top="202" left="108" width="702" height="16" font="3">seem to resemble the implicit type conversion rules for Matlab builtin functions. For example,</text>
<text top="222" left="108" width="702" height="16" font="3">when adding an integer and a double, the result will be double. However, it is not suﬃcient to</text>
<text top="243" left="108" width="702" height="16" font="3">model the implicit Matlab class conversion semantics by just using class-specialized functions and</text>
<text top="263" left="108" width="702" height="16" font="3">their relationships. Many Matlab builtins perform explicit checks on the actual runtime types</text>
<text top="283" left="108" width="702" height="16" font="3">and shapes of the arguments and perform diﬀerent computations or raise errors based on those</text>
<text top="304" left="108" width="49" height="16" font="3">checks.</text>
<text top="332" left="108" width="702" height="16" font="3">Through the collection of a large number of tables we found that many builtins have similar high-</text>
<text top="353" left="108" width="702" height="16" font="3">level behaviour. We found that some functions work on any matrix, some work on numeric data,</text>
<text top="373" left="108" width="702" height="16" font="3">some only work on ﬂoats, and some work on arbitrary builtin values, including cell arrays or function</text>
<text top="393" left="108" width="58" height="16" font="3">handles.</text>
<text top="445" left="108" width="25" height="17" font="2">3.2</text>
<text top="445" left="153" width="152" height="17" font="2">Specifying Builtins</text>
<text top="485" left="108" width="702" height="16" font="3">To capture the regularities in the builtin behaviour we arranged all of the builtins in a hierarchy</text>
<text top="505" left="108" width="702" height="16" font="3">- a part of the hierarchy is given in Fig. 4. Leaves of the hierarchy correspond to actual builtins</text>
<text top="526" left="108" width="702" height="16" font="3">and upper levels correspond to abstract groups which share some sort of similar behaviour. The</text>
<text top="546" left="108" width="702" height="16" font="3">motivation is that some ﬂow analyses need only specify the abstract behaviour of a group, and</text>
<text top="566" left="108" width="702" height="16" font="3">the ﬂow analysis framework will automatically apply the correct (most specialized) behaviour for</text>
<text top="587" left="108" width="122" height="16" font="3">a speciﬁc builtin.</text>
<text top="616" left="108" width="702" height="16" font="3">To specify builtins and their relationships, we developed a simple domain-speciﬁc language. One</text>
<text top="636" left="108" width="702" height="16" font="3">just needs to specify the name of a builtin. If the builtin is abstract (i.e. it refers to a group of</text>
<text top="656" left="108" width="702" height="16" font="3">builtins), the parent group has to be speciﬁes. If no parent is speciﬁed, the speciﬁed name is an</text>
<text top="677" left="108" width="702" height="16" font="3">actual builtin, belonging to the group of the most recently speciﬁed builtin. This leads to a very</text>
<text top="697" left="108" width="702" height="16" font="3">compact representation, allowing builtins to be speciﬁed on one line each, as illustrated by the</text>
<text top="717" left="108" width="266" height="16" font="3">following snippet of the speciﬁcation.</text>
<text top="741" left="108" width="204" height="12" font="9">floatFunction; matrixFunction</text>
<text top="757" left="108" width="240" height="12" font="9">properFloatFunction; floatFunction</text>
<text top="774" left="108" width="275" height="12" font="9">unaryFloatFunction; properFloatFunction</text>
<text top="790" left="108" width="331" height="12" font="9">elementalUnaryFloatFunction; unaryFloatFunction</text>
<text top="807" left="108" width="28" height="12" font="9">sqrt</text>
<text top="823" left="108" width="56" height="12" font="9">realsqrt</text>
<text top="840" left="108" width="21" height="12" font="9">erf</text>
<text top="856" left="108" width="21" height="12" font="9">...</text>
<text top="872" left="108" width="254" height="12" font="9">improperFloatFunction; floatFunction</text>
<text top="889" left="108" width="21" height="12" font="9">...</text>
<text top="919" left="108" width="702" height="16" font="3">The builtin framework takes a speciﬁcation like above, and generates a set of Java classes, whose</text>
<text top="940" left="108" width="702" height="16" font="3">inheritance relationship reﬂects the speciﬁed tree. It also generates a visitor class, which allows</text>
<text top="960" left="108" width="702" height="16" font="3">annotating methods to Builtins using the visitor pattern - a pattern that is already extensively</text>
<text top="980" left="108" width="247" height="16" font="3">used in the McSaf framework [4].</text>
<text top="1009" left="108" width="702" height="16" font="3">We categorize the Matlab builtin functions according to many properties, such as mclass, arity,</text>
<text top="1029" left="108" width="702" height="16" font="3">shape, semantics. This means that diﬀerent analyses or attributes can be specify at exactly the</text>
<text top="1050" left="108" width="701" height="16" font="3">required category. It also means that when adding builtins that do ﬁt in already existing categories,</text>
<text top="1102" left="451" width="16" height="16" font="3">13</text>
</page>
<page number="15" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="14" size="7" family="Times" color="#000000"/>
<text top="179" left="209" width="32" height="8" font="14">FloatFn</text>
<text top="157" left="293" width="61" height="8" font="14">ProperFloatFn</text>
<text top="200" left="287" width="73" height="8" font="14">ImproperFloatFn</text>
<text top="598" left="195" width="60" height="8" font="14">UnaryFloatFn</text>
<text top="141" left="423" width="62" height="8" font="14">BinaryFloatFn</text>
<text top="554" left="272" width="104" height="8" font="14">ElementalUnaryFloatFn</text>
<text top="641" left="282" width="85" height="8" font="14">ArrayUnaryFloatFn</text>
<text top="376" left="445" width="17" height="8" font="14">s q r t</text>
<text top="387" left="437" width="33" height="8" font="14">r e a l s q r t</text>
<text top="398" left="448" width="12" height="8" font="14">e r f</text>
<text top="410" left="440" width="26" height="8" font="14">e r f i n v</text>
<text top="421" left="445" width="17" height="8" font="14">erfc</text>
<text top="432" left="438" width="31" height="8" font="14">erfcinv</text>
<text top="443" left="436" width="33" height="8" font="14">g a m m a</text>
<text top="454" left="432" width="42" height="8" font="14">g a m m a l n</text>
<text top="465" left="445" width="16" height="8" font="14">e x p</text>
<text top="477" left="447" width="13" height="8" font="14">log</text>
<text top="488" left="444" width="19" height="8" font="14">log2</text>
<text top="499" left="441" width="24" height="8" font="14">log10</text>
<text top="523" left="399" width="110" height="8" font="14">ForwardTrigonometricFn</text>
<text top="614" left="403" width="100" height="8" font="14">InverseTrigonmetricFn</text>
<text top="393" left="554" width="103" height="8" font="14">RadianTrigonometricFn</text>
<text top="471" left="553" width="105" height="8" font="14">DegreeTrigonometricFn</text>
<text top="523" left="545" width="121" height="8" font="14">HyperbolicTrigonometricFn</text>
<text top="338" left="703" width="12" height="8" font="14">s i n</text>
<text top="350" left="702" width="14" height="8" font="14">c o s</text>
<text top="361" left="702" width="14" height="8" font="14">t a n</text>
<text top="372" left="703" width="13" height="8" font="14">c o t</text>
<text top="383" left="702" width="14" height="8" font="14">s e c</text>
<text top="394" left="702" width="14" height="8" font="14">c s c</text>
<text top="417" left="700" width="18" height="8" font="14">s i n d</text>
<text top="428" left="699" width="20" height="8" font="14">c o s d</text>
<text top="439" left="700" width="19" height="8" font="14">t a n d</text>
<text top="450" left="700" width="19" height="8" font="14">c o t d</text>
<text top="461" left="699" width="20" height="8" font="14">s e c d</text>
<text top="473" left="700" width="19" height="8" font="14">c s c d</text>
<text top="495" left="700" width="18" height="8" font="14">s i n h</text>
<text top="506" left="699" width="20" height="8" font="14">c o s h</text>
<text top="517" left="700" width="19" height="8" font="14">t a n h</text>
<text top="528" left="700" width="19" height="8" font="14">c o t h</text>
<text top="540" left="699" width="20" height="8" font="14">s e c h</text>
<text top="551" left="700" width="19" height="8" font="14">c s c h</text>
<text top="601" left="540" width="131" height="8" font="14">RadianInverseTrigonmetricFn</text>
<text top="627" left="539" width="132" height="8" font="14">DegreeInverseTrigonmetricFn</text>
<text top="652" left="531" width="149" height="8" font="14">HyperbolicInverseTrigonmetricFn</text>
<text top="573" left="700" width="18" height="8" font="14">a s i n</text>
<text top="584" left="700" width="19" height="8" font="14">a c o s</text>
<text top="596" left="700" width="19" height="8" font="14">a t a n</text>
<text top="607" left="700" width="18" height="8" font="14">a c o t</text>
<text top="618" left="700" width="19" height="8" font="14">a s e c</text>
<text top="629" left="700" width="19" height="8" font="14">a c s c</text>
<text top="652" left="697" width="23" height="8" font="14">a s i n d</text>
<text top="663" left="696" width="25" height="8" font="14">a c o s d</text>
<text top="674" left="697" width="25" height="8" font="14">a t a n d</text>
<text top="685" left="697" width="24" height="8" font="14">a c o t d</text>
<text top="696" left="696" width="25" height="8" font="14">a s e c d</text>
<text top="707" left="697" width="25" height="8" font="14">a c s c d</text>
<text top="730" left="697" width="23" height="8" font="14">a s i n h</text>
<text top="741" left="696" width="25" height="8" font="14">a c o s h</text>
<text top="752" left="697" width="25" height="8" font="14">a t a n h</text>
<text top="763" left="697" width="24" height="8" font="14">a c o t h</text>
<text top="775" left="696" width="25" height="8" font="14">a s e c h</text>
<text top="786" left="697" width="25" height="8" font="14">a c s c h</text>
<text top="660" left="396" width="116" height="8" font="14">SquareArrayUnaryFloatFn</text>
<text top="676" left="595" width="22" height="8" font="14">l o g m</text>
<text top="687" left="592" width="26" height="8" font="14">s q r t m</text>
<text top="698" left="593" width="25" height="8" font="14">e x p m</text>
<text top="710" left="599" width="13" height="8" font="14">i n v</text>
<text top="115" left="552" width="107" height="8" font="14">ElementalBinaryFloatFn</text>
<text top="141" left="562" width="87" height="8" font="14">ArrayBinaryFloatFn</text>
<text top="115" left="697" width="25" height="8" font="14">a t a n 2</text>
<text top="141" left="696" width="25" height="8" font="14">h y p o t</text>
<text top="174" left="446" width="15" height="8" font="14">e p s</text>
<text top="200" left="393" width="122" height="8" font="14">DimensionSensitiveFloatFn</text>
<text top="241" left="420" width="68" height="8" font="14">MatrixLibaryFn</text>
<text top="311" left="417" width="74" height="8" font="14">FacotorizationFn</text>
<text top="164" left="586" width="38" height="8" font="14">c u m s u m</text>
<text top="176" left="586" width="39" height="8" font="14">c u m p r o d</text>
<text top="200" left="542" width="126" height="8" font="14">DimensionCollapsingFloatFn</text>
<text top="183" left="697" width="25" height="8" font="14">m o d e</text>
<text top="194" left="700" width="19" height="8" font="14">p r o d</text>
<text top="205" left="700" width="18" height="8" font="14">s u m</text>
<text top="216" left="697" width="24" height="8" font="14">m e a n</text>
<text top="223" left="599" width="13" height="8" font="14">e i g</text>
<text top="235" left="594" width="23" height="8" font="14">n o r m</text>
<text top="246" left="596" width="19" height="8" font="14">r a n k</text>
<text top="257" left="595" width="21" height="8" font="14">c o n d</text>
<text top="268" left="599" width="14" height="8" font="14">d e t</text>
<text top="279" left="593" width="25" height="8" font="14">r c o n d</text>
<text top="291" left="589" width="33" height="8" font="14">linsolve</text>
<text top="313" left="593" width="24" height="8" font="14">s c h u r</text>
<text top="324" left="586" width="39" height="8" font="14">o r d s c h u r</text>
<text top="335" left="602" width="8" height="8" font="14">lu</text>
<text top="346" left="597" width="18" height="8" font="14">chol</text>
<text top="358" left="598" width="15" height="8" font="14">s v d</text>
<text top="369" left="601" width="9" height="8" font="14">q r</text>
<text top="823" left="144" width="624" height="16" font="3">Figure 4: Subtree of builtin tree, showing all deﬁned ﬂoating point builtins of Matlab</text>
<text top="869" left="108" width="475" height="16" font="3">one does not need to add all required attributes or ﬂow equations.</text>
<text top="920" left="108" width="25" height="17" font="2">3.3</text>
<text top="920" left="153" width="230" height="17" font="2">Specifying Builtin attributes</text>
<text top="960" left="108" width="702" height="16" font="3">It is not suﬃcient to just specify the existence of builtins; their behavior needs to be speciﬁed</text>
<text top="981" left="108" width="702" height="16" font="3">as well. In particular, we need ﬂow equations for the propagation of mclasses. Thus the builtin</text>
<text top="1001" left="108" width="702" height="16" font="3">speciﬁcation language allows the addition of properties. A property is just a name, with a set of</text>
<text top="1021" left="108" width="702" height="16" font="3">arguments that follow it. A speciﬁc property can be deﬁned for any builtin, and it will trigger the</text>
<text top="1042" left="108" width="702" height="16" font="3">addition of more methods in the generated Java code as well as the inclusion of interfaces. In this</text>
<text top="1102" left="451" width="16" height="16" font="3">14</text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="702" height="16" font="3">way, any property deﬁned for an abstract builtin group is deﬁned for any builtin inside that group</text>
<text top="132" left="108" width="236" height="16" font="3">as well, unless it gets overridden.</text>
<text top="161" left="108" width="702" height="16" font="3">The ﬁrst property we deﬁned was the property Class. When speciﬁed for a builtin, it forces the</text>
<text top="182" left="108" width="702" height="16" font="3">inclusion of the Java interface ClassPropagationDefined in the generated Java code, and will</text>
<text top="202" left="108" width="702" height="16" font="3">add a method that returns an mclass ﬂow equation. The mclass ﬂow equation itself is speciﬁed as</text>
<text top="222" left="108" width="702" height="16" font="3">an argument to the Class attribute using a small domain speciﬁc language that allows matching</text>
<text top="243" left="108" width="702" height="16" font="3">argument mclasses, and returns result mclasses based on matches. An example snippet is given</text>
<text top="263" left="108" width="702" height="16" font="3">below which shows the speciﬁcation of m-lass ﬂow equations for unary functions taking numeric</text>
<text top="283" left="108" width="702" height="16" font="3">arguments. Functions in that group accept any numeric argument and return a result of the same</text>
<text top="304" left="108" width="511" height="16" font="3">mclass (numeric&gt;0), a char or logical argument will result in a double.</text>
<text top="344" left="108" width="586" height="12" font="9">unaryNumericFunction; properNumericFunction;; Class(numeric&gt;0, char|logical&gt;double)</text>
<text top="377" left="108" width="430" height="12" font="9">elementalUnaryNumericFunction; unaryNumericFunction; abstract</text>
<text top="393" left="108" width="28" height="12" font="9">real</text>
<text top="410" left="108" width="28" height="12" font="9">imag</text>
<text top="426" left="108" width="21" height="12" font="9">abs</text>
<text top="442" left="108" width="282" height="12" font="9">conj;; MatlabClass(logical&gt;error,natlab)</text>
<text top="459" left="108" width="282" height="12" font="9">sign;; MatlabClass(logical&gt;error,natlab)</text>
<text top="489" left="108" width="702" height="16" font="3">We have noticed some irregularities in the pure Matlab semantics, and our speciﬁcation sometimes</text>
<text top="510" left="108" width="702" height="16" font="3">removes those. In order to keep a record of the diﬀerences we use the MatlabClass speciﬁcation</text>
<text top="530" left="108" width="702" height="16" font="3">which allows us to specify the exact Matlab semantics - and thus provides an exact deﬁnition and</text>
<text top="550" left="108" width="702" height="16" font="3">documentation of Matlab class semantics. In the example above, we specify that the functions</text>
<text top="571" left="108" width="35" height="15" font="3">conj</text>
<text top="571" left="149" width="661" height="16" font="3">and sign have diﬀerent Matlab semantics: they disallow logical arguments, which will</text>
<text top="591" left="108" width="127" height="16" font="3">result in an error.</text>
<text top="643" left="108" width="25" height="17" font="2">3.4</text>
<text top="643" left="153" width="76" height="17" font="2">Summary</text>
<text top="683" left="108" width="702" height="16" font="3">We have performed an extensive analysis of the behavior of Matlab builtin functions. Based on</text>
<text top="703" left="108" width="702" height="16" font="3">that we developed a framework that allows to specify Matlab builtin functions, their relationships</text>
<text top="723" left="108" width="702" height="16" font="3">and properties such as ﬂow equations in a compact way. This framework is extensible both by</text>
<text top="744" left="108" width="702" height="16" font="3">allowing the quick addition of more builtin functions; and by allowing to specify information and</text>
<text top="764" left="108" width="702" height="16" font="3">behavior for builtin functions. This can be done either adding new properties to the framework</text>
<text top="784" left="108" width="291" height="16" font="3">itself; or by implementing visitor classes.</text>
<text top="782" left="406" width="6" height="12" font="11">7</text>
<text top="841" left="108" width="12" height="20" font="0">4</text>
<text top="841" left="143" width="85" height="20" font="0">Tame IR</text>
<text top="889" left="108" width="702" height="16" font="3">As indicated in Fig. 1, we build upon the McSaf framework by adding taming transformations</text>
<text top="910" left="108" width="702" height="16" font="3">and by producing a more specialized Tame IR. To produce an easily analyzable Tame IR we</text>
<text top="930" left="108" width="702" height="16" font="3">have made three important additions: (1) generating more specialized AST nodes, (2) translating</text>
<text top="951" left="108" width="52" height="15" font="3">switch</text>
<text top="950" left="165" width="645" height="16" font="3">statements to equivalent conditional statements, and (3) transforming lambda expressions</text>
<text top="971" left="108" width="702" height="16" font="3">to analyzable equivalents. One might wonder why these transformations are not already part of</text>
<text top="992" left="108" width="55" height="12" font="3">McSaf</text>
<text top="991" left="163" width="647" height="16" font="3">. The important point is that McSaf must handle all of Matlab, whereas for our Tame</text>
<text top="1021" left="127" width="5" height="6" font="12">7</text>
<text top="1023" left="133" width="677" height="13" font="9">The complete speciﬁcation of builtins, documentation of the speciﬁcation and diagrams of all builtins is available</text>
<text top="1039" left="108" width="254" height="13" font="9">at www.sable.mcgill.ca/mclab/tamer.html</text>
<text top="1102" left="451" width="16" height="16" font="3">15</text>
</page>
<page number="17" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="702" height="16" font="3">IR we can make restrictions that are reasonable for the purposes of static compilation. This allows</text>
<text top="132" left="108" width="634" height="16" font="3">us to make the Tame IR more specialized and enables more simplifying transformations.</text>
<text top="184" left="108" width="25" height="17" font="2">4.1</text>
<text top="184" left="153" width="188" height="17" font="2">Specialized AST nodes</text>
<text top="224" left="108" width="702" height="16" font="3">One goal for our Taming framework was to produce an IR that is very simple to analyze, and has</text>
<text top="245" left="108" width="702" height="16" font="3">operations that are low-level enough to map fairly naturally to static languages like Fortran.</text>
<text top="265" left="108" width="702" height="16" font="3">As one example, in McSaf there is only one kind of assignment statement, assigning from an</text>
<text top="285" left="108" width="702" height="16" font="3">expression to an lvalue expression. For the Tame IR, we have many more specialized cases as</text>
<text top="305" left="108" width="702" height="16" font="3">illustrated in Fig. 5. We also extended McSaf’s analysis framework to recognize these new IR</text>
<text top="326" left="108" width="702" height="16" font="3">nodes, so ﬂow equations can be speciﬁed for all these new nodes. Note how the Tame IR has a</text>
<text top="346" left="108" width="702" height="16" font="3">diﬀerent statement for a function call or an array indexing operation. In Matlab these use the</text>
<text top="366" left="108" width="702" height="16" font="3">same syntax, a parameterized expression. We use kind analysis to resolve names to being a function</text>
<text top="387" left="108" width="702" height="16" font="3">or variable, but there are rare cases when this is not possible. Tame Matlab will reject these cases.</text>
<text top="462" left="369" width="83" height="7" font="13">TIRAbstractAssignStmt</text>
<text top="427" left="391" width="41" height="7" font="13">AssignStmt</text>
<text top="496" left="226" width="113" height="7" font="13">TIRAbstractAssignFromVarStmt</text>
<text top="530" left="167" width="60" height="7" font="13">TIRArraySetStmt</text>
<text top="530" left="238" width="74" height="7" font="13">TIRCellArraySetStmt</text>
<text top="530" left="323" width="53" height="7" font="13">TIRDotSetStmt</text>
<text top="496" left="359" width="104" height="7" font="13">TIRAsbtractAssignToListStmt</text>
<text top="565" left="289" width="61" height="7" font="13">TIRArrayGetStmt</text>
<text top="565" left="361" width="75" height="7" font="13">TIRCellArrayGetStmt</text>
<text top="565" left="447" width="54" height="7" font="13">TIRDotGetStmt</text>
<text top="565" left="512" width="42" height="7" font="13">TIRCallStmt</text>
<text top="530" left="494" width="76" height="7" font="13">TIRAssignLiteralStmt</text>
<text top="496" left="517" width="103" height="7" font="13">TIRAbstractAssignToVarStmt</text>
<text top="530" left="581" width="47" height="7" font="13">TIRCopyStmt</text>
<text top="530" left="639" width="111" height="7" font="13">T I R C r e a t e F u n c t i o n H a n d l e S t m t</text>
<text top="602" left="270" width="378" height="16" font="3">Figure 5: Specializations of an assignment statement</text>
<text top="681" left="108" width="25" height="17" font="2">4.2</text>
<text top="681" left="153" width="182" height="17" font="2">Lambda Simpliﬁcation</text>
<text top="722" left="108" width="63" height="12" font="3">Matlab</text>
<text top="721" left="176" width="634" height="16" font="3">supports lambda expressions. In order to be compatible with the Tame IR, their bodies</text>
<text top="741" left="108" width="702" height="16" font="3">need to be converted to a three address form in some way. Matlab lambda expressions are just a</text>
<text top="762" left="108" width="702" height="16" font="3">single expression (rather than, say, statement lists), so we extract the body of the lambda expression</text>
<text top="782" left="108" width="702" height="16" font="3">into an external function. The lambda expression still remains, but will encapsulate only a single</text>
<text top="802" left="108" width="702" height="16" font="3">call, all whose arguments are variables. For example, the lambda simpliﬁcation will transform the</text>
<text top="823" left="108" width="702" height="16" font="3">expression in Fig. 6(a) to the code in Fig. 6(b). The new lambda expression encapsulates a call to</text>
<text top="843" left="108" width="702" height="16" font="3">the new function lambda1. Note that the ﬁrst two arguments are variables from the workspace, the</text>
<text top="863" left="108" width="702" height="16" font="3">remaining ones are the parameters of the lambda expression. In the analyses, we can thus model the</text>
<text top="884" left="108" width="702" height="16" font="3">lambda expression using partial evaluation of the function lambda1. To make this transformation</text>
<text top="904" left="108" width="702" height="16" font="3">work, the generated function must return exactly one value, and thus Tame Matlab makes the</text>
<text top="924" left="108" width="702" height="16" font="3">restriction that lambda expressions return a single value (of course that value may be an array,</text>
<text top="945" left="108" width="145" height="16" font="3">struct or cell array).</text>
<text top="996" left="108" width="25" height="17" font="2">4.3</text>
<text top="996" left="153" width="168" height="17" font="2">Switch simpliﬁcation</text>
<text top="1036" left="108" width="702" height="16" font="3">As illustrated in Fig. 7(a), Matlab has support for very ﬂexible switch statements. Unlike in</text>
<text top="1057" left="108" width="702" height="16" font="3">other languages, all case blocks have implicit breaks at the end. In order to specify multiple case</text>
<text top="1102" left="451" width="16" height="16" font="3">16</text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1188" width="918">
<text top="129" left="169" width="99" height="12" font="9">function outer</text>
<text top="145" left="182" width="21" height="12" font="9">...</text>
<text top="162" left="182" width="127" height="12" font="9">f = @(t,y) D*t + c</text>
<text top="178" left="182" width="21" height="12" font="9">...</text>
<text top="195" left="169" width="21" height="12" font="9">end</text>
<text top="129" left="425" width="99" height="12" font="9">function outer</text>
<text top="145" left="437" width="21" height="12" font="9">...</text>
<text top="162" left="437" width="191" height="12" font="9">f = @(t,y) lambda1(D,c,t,y)</text>
<text top="178" left="437" width="21" height="12" font="9">...</text>
<text top="195" left="425" width="21" height="12" font="9">end</text>
<text top="228" left="425" width="205" height="12" font="9">function r = lambda1(D,c,t,y)</text>
<text top="244" left="437" width="78" height="12" font="9">r = D*t + c</text>
<text top="260" left="425" width="21" height="12" font="9">end</text>
<text top="303" left="169" width="79" height="16" font="3">(a) lambda</text>
<text top="303" left="425" width="172" height="16" font="3">(b) transformed lambda</text>
<text top="337" left="304" width="310" height="16" font="3">Figure 6: Transforming lambda expressions</text>
<text top="383" left="108" width="702" height="16" font="3">comparisons for the same case block, Matlab allows using cell arrays of case expressions, for</text>
<text top="403" left="108" width="641" height="16" font="3">example {2, 3} in Fig. 7(a). Indeed, Matlab allows arbitrary case expressions, such as</text>
<text top="406" left="755" width="7" height="12" font="9">c</text>
<text top="403" left="768" width="42" height="16" font="3">in the</text>
<text top="423" left="108" width="81" height="16" font="3">example. If</text>
<text top="426" left="193" width="7" height="12" font="9">c</text>
<text top="423" left="205" width="605" height="16" font="3">refers to a cell array, then the case will match if any element of the cell array matches.</text>
<text top="444" left="108" width="702" height="16" font="3">Without knowing the static type and size of the case expressions, a simpliﬁcation transformation</text>
<text top="464" left="108" width="702" height="16" font="3">is not possible. Thus, to enable the static simpliﬁcation shown in Fig. 7(b) we add the constraint</text>
<text top="484" left="108" width="632" height="16" font="3">for the Tame Matlab that case-expressions are only allowed to be syntactic cell arrays.</text>
<text top="539" left="180" width="57" height="12" font="9">switch n</text>
<text top="555" left="193" width="42" height="12" font="9">case 1</text>
<text top="571" left="205" width="21" height="12" font="9">...</text>
<text top="588" left="193" width="78" height="12" font="9">case {2, 3}</text>
<text top="604" left="205" width="21" height="12" font="9">...</text>
<text top="621" left="193" width="42" height="12" font="9">case c</text>
<text top="637" left="205" width="21" height="12" font="9">...</text>
<text top="654" left="193" width="63" height="12" font="9">otherwise</text>
<text top="670" left="205" width="21" height="12" font="9">...</text>
<text top="687" left="180" width="21" height="12" font="9">end</text>
<text top="539" left="414" width="35" height="12" font="9">t = n</text>
<text top="555" left="414" width="120" height="12" font="9">if (isequal(t,1))</text>
<text top="571" left="439" width="21" height="12" font="9">...</text>
<text top="588" left="414" width="261" height="12" font="9">elseif (isequal(t,2) || isequal(t,3))</text>
<text top="604" left="439" width="21" height="12" font="9">...</text>
<text top="621" left="414" width="148" height="12" font="9">elseif (isequal(t,c))</text>
<text top="637" left="439" width="21" height="12" font="9">...</text>
<text top="654" left="414" width="28" height="12" font="9">else</text>
<text top="670" left="439" width="21" height="12" font="9">...</text>
<text top="687" left="414" width="21" height="12" font="9">end</text>
<text top="729" left="180" width="71" height="16" font="3">(a) switch</text>
<text top="729" left="414" width="164" height="16" font="3">(b) transformed switch</text>
<text top="763" left="305" width="307" height="16" font="3">Figure 7: Transforming switch statements</text>
<text top="847" left="108" width="12" height="20" font="0">5</text>
<text top="847" left="143" width="588" height="20" font="0">Interprocedural Value Analysis and Call Graph Construction</text>
<text top="895" left="108" width="701" height="16" font="3">The core of the Matlab Tamer is the value analysis. It’s an extensible monolithic context-sensitive</text>
<text top="915" left="108" width="702" height="16" font="3">inter-procedural forward propagation of abstract Matlab values. For every program point, it</text>
<text top="936" left="108" width="702" height="16" font="3">estimates what possible values every variable can take on. Most notably it ﬁnds the possible set</text>
<text top="956" left="108" width="702" height="16" font="3">of mclasses. It also propagates function handle values. This allows resolution of all possible call</text>
<text top="976" left="108" width="586" height="16" font="3">edges, and the construction of a complete call graph of a tame Matlab program.</text>
<text top="1005" left="108" width="702" height="16" font="3">The value analysis is part of an extensible interprocedural analysis framework. It contains a set of</text>
<text top="1025" left="108" width="702" height="16" font="3">modules, one building on top of the other. All of them can be used by users of the framework to</text>
<text top="1046" left="108" width="105" height="16" font="3">build analyses.</text>
<text top="1102" left="451" width="16" height="16" font="3">17</text>
</page>
<page number="19" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="149" width="661" height="16" font="3">The interprocedural analysis framework (section 5.1) builds on top of the Tame IR and</text>
<text top="132" left="149" width="661" height="16" font="3">the McSaf intraprocedural analysis framework. It allows the construction of interprocedural</text>
<text top="153" left="149" width="661" height="16" font="3">analyses by extending an intraprocedural analysis built using the McSaf framework. This</text>
<text top="173" left="149" width="661" height="16" font="3">framework works together with a callgraph object implementing the correct Matlab look up</text>
<text top="193" left="149" width="661" height="16" font="3">semantics. An analysis can be run on an existing callgraph object, or it can be used to build</text>
<text top="214" left="149" width="499" height="16" font="3">new callgraph objects, discovering new functions as the analysis runs.</text>
<text top="248" left="149" width="661" height="16" font="3">The abstract value analysis (section 5.2), built using the interprocedural analysis frame-</text>
<text top="268" left="149" width="661" height="16" font="3">work, is a generic analysis of abstract Matlab values. The implementation is agnostic to the</text>
<text top="288" left="149" width="661" height="16" font="3">actual representation of abstract values, but is aware of Matlab mclasses. It can thus build</text>
<text top="308" left="149" width="637" height="16" font="3">a callgraph using the correct function lookup semantics including function specialization.</text>
<text top="342" left="149" width="661" height="16" font="3">We provide an implementation of composite values like cell arrays, structures and func-</text>
<text top="363" left="149" width="661" height="16" font="3">tion handles, which is generic in the implementation of abstract matrix values (section 5.4).</text>
<text top="383" left="149" width="661" height="16" font="3">This makes composite values completely transparent, allowing users to implement very ﬁne-</text>
<text top="403" left="149" width="661" height="16" font="3">grained abstract value analyses by only providing an abstraction for Matlab values which</text>
<text top="424" left="149" width="92" height="16" font="3">are matrices.</text>
<text top="457" left="149" width="661" height="16" font="3">Building on top of all the above modules and putting everything together, we provide an</text>
<text top="478" left="149" width="661" height="16" font="3">abstraction for all Matlab values, which we call simple values (section 5.5). Since it includes</text>
<text top="498" left="149" width="661" height="16" font="3">the function handle abstractions, this can be used by users to build a complete tame Matlab</text>
<text top="518" left="149" width="657" height="16" font="3">callgraph. This is the concrete value analysis, whose results are presented in section 5.6.</text>
<text top="570" left="108" width="25" height="17" font="2">5.1</text>
<text top="570" left="153" width="332" height="17" font="2">The Interprocedural Analysis Framework</text>
<text top="610" left="108" width="702" height="16" font="3">The interprocedural Analysis framework is an extension of the intraprocedural ﬂow analyses pro-</text>
<text top="630" left="108" width="702" height="16" font="3">vided by the McSaf framework. It is context-sensitive to aid code generation targeting static</text>
<text top="651" left="108" width="702" height="16" font="3">languages like Fortran. Fortran’s polymorphism features are quite limited; every generated</text>
<text top="671" left="108" width="702" height="16" font="3">variable needs to have one speciﬁc type. The backend may thus require that every Matlab vari-</text>
<text top="691" left="108" width="702" height="16" font="3">able has a speciﬁc known mclass at every program point. Functions may need to be specialized for</text>
<text top="712" left="108" width="667" height="16" font="3">diﬀerent kinds of arguments, which a context-sensitive analysis provides at the analysis level.</text>
<text top="740" left="108" width="702" height="16" font="3">An interprocedural analysis is a collection of interprocedural analysis nodes, which represent a</text>
<text top="761" left="108" width="702" height="16" font="3">speciﬁc intraprocedural analysis for some function and some context. The context is usually a ﬂow</text>
<text top="781" left="108" width="702" height="16" font="3">representation of the passed arguments. Every such interprocedural analysis node produces a result</text>
<text top="802" left="108" width="347" height="16" font="3">set using the contained intraprocedural analysis.</text>
<text top="830" left="108" width="702" height="16" font="3">Every interprocedural analysis has an associated callgraph object, which may initially contain only</text>
<text top="851" left="108" width="702" height="16" font="3">one function acting as the entry point for the program. The interprocedural analysis requires a</text>
<text top="871" left="108" width="379" height="16" font="3">context or argument set for the entry point function.</text>
<text top="900" left="108" width="702" height="16" font="3">The analysis starts by creating an interprocedural analysis node for the entry point function and</text>
<text top="920" left="108" width="702" height="16" font="3">the associated context, which triggers the associated intraprocedural ﬂow analysis. As the intrapro-</text>
<text top="940" left="108" width="702" height="16" font="3">cedural ﬂow analysis encounters calls to other functions, it has to create context objects for those</text>
<text top="961" left="108" width="702" height="16" font="3">calls, and ask the interprocedural analysis to analyze the called functions using the given context.</text>
<text top="981" left="108" width="702" height="16" font="3">The call also gets added to the set of call edges associated with the interprocedural analysis node.</text>
<text top="1010" left="108" width="702" height="16" font="3">As the interprocedural has to analyze newly encountered calls, the associated functions are resolved,</text>
<text top="1030" left="108" width="702" height="16" font="3">and loaded into the callgraph if necessary. The result is a complete callgraph, and an interprocedural</text>
<text top="1051" left="108" width="61" height="16" font="3">analysis.</text>
<text top="1102" left="451" width="16" height="16" font="3">18</text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="702" height="16" font="3">The interprocedural analysis framework supports simple and mutual recursion by performing a</text>
<text top="132" left="108" width="545" height="16" font="3">ﬁxed point iteration within the ﬁrst recursive interprocedural analysis node.</text>
<text top="184" left="108" width="25" height="17" font="2">5.2</text>
<text top="184" left="153" width="251" height="17" font="2">Introducing the Value Analysis</text>
<text top="224" left="108" width="702" height="16" font="3">The abstract value analysis is a forward propagation of generic abstract Matlab values. The</text>
<text top="245" left="108" width="327" height="16" font="3">mclass of any abstract value is always known.</text>
<text top="273" left="108" width="702" height="16" font="3">A speciﬁc instance of a value analysis may use diﬀerent representations for values of diﬀerent</text>
<text top="294" left="108" width="702" height="16" font="3">mclasses. For example, function handle values may be represented in a diﬀerent way than numeric</text>
<text top="314" left="108" width="673" height="16" font="3">values. This in turn means that values of diﬀerent Matlab classes can not be merged (joined).</text>
<text top="366" left="108" width="37" height="15" font="3">5.2.1</text>
<text top="366" left="163" width="249" height="15" font="3">Mclasses, Values and Value Sets:</text>
<text top="405" left="108" width="702" height="16" font="3">To deﬁne the value analysis independently of a speciﬁc representation of values, We ﬁrst deﬁne the</text>
<text top="425" left="108" width="132" height="16" font="3">set of all mclasses:</text>
<text top="447" left="311" width="12" height="15" font="3">C</text>
<text top="446" left="328" width="279" height="16" font="3">= {double, single, logical, cell, . . .}</text>
<text top="476" left="108" width="702" height="16" font="3">For each mclass, we need some lattice of values that represent estimations of Matlab values of</text>
<text top="496" left="108" width="73" height="16" font="3">that class:</text>
<text top="534" left="181" width="10" height="15" font="3">V</text>
<text top="540" left="191" width="39" height="11" font="11">mclass</text>
<text top="533" left="235" width="500" height="16" font="3">= {v : v represents a Matlab value with mclass mclass}, mclass ∈ C</text>
<text top="570" left="108" width="372" height="16" font="3">We require that merge operations are deﬁned, so ∀v</text>
<text top="575" left="480" width="6" height="12" font="11">1</text>
<text top="570" left="487" width="15" height="15" font="3">, v</text>
<text top="575" left="502" width="6" height="12" font="11">2</text>
<text top="570" left="514" width="25" height="16" font="3">∈ V</text>
<text top="576" left="539" width="39" height="11" font="11">mclass</text>
<text top="570" left="579" width="15" height="15" font="3">, v</text>
<text top="575" left="594" width="6" height="12" font="11">1</text>
<text top="570" left="605" width="22" height="16" font="3">∧ v</text>
<text top="575" left="627" width="6" height="12" font="11">2</text>
<text top="570" left="639" width="25" height="16" font="3">∈ V</text>
<text top="576" left="664" width="39" height="11" font="11">mclass</text>
<text top="570" left="704" width="5" height="15" font="3">.</text>
<text top="598" left="108" width="702" height="16" font="3">We can not join values of diﬀerent mclasses, because their actual representation may be incom-</text>
<text top="619" left="108" width="702" height="16" font="3">patible. In order to allow union values for variables, i.e. to allow variables to have more than one</text>
<text top="639" left="108" width="702" height="16" font="3">possible mclass, we estimate the value of a Matlab variable as a set of pairs of abstract values and</text>
<text top="659" left="108" width="702" height="16" font="3">their mclasses, where the mclasses are disjoint. We call this a value set. More formally, we deﬁne</text>
<text top="680" left="108" width="101" height="16" font="3">a value set as:</text>
<text top="717" left="243" width="68" height="15" font="3">V alueSet</text>
<text top="717" left="316" width="83" height="16" font="3">= {(mclass</text>
<text top="722" left="399" width="6" height="12" font="11">1</text>
<text top="717" left="406" width="15" height="15" font="3">, v</text>
<text top="722" left="421" width="6" height="12" font="11">1</text>
<text top="717" left="428" width="70" height="16" font="3">), (mclass</text>
<text top="722" left="498" width="6" height="12" font="11">2</text>
<text top="717" left="506" width="15" height="15" font="3">, v</text>
<text top="722" left="521" width="6" height="12" font="11">2</text>
<text top="717" left="528" width="100" height="16" font="3">), . . . , (mclass</text>
<text top="723" left="627" width="8" height="11" font="11">n</text>
<text top="717" left="636" width="15" height="15" font="3">, v</text>
<text top="723" left="651" width="8" height="11" font="11">n</text>
<text top="717" left="660" width="16" height="16" font="3">) :</text>
<text top="742" left="341" width="36" height="15" font="3">class</text>
<text top="748" left="378" width="4" height="11" font="11">i</text>
<text top="741" left="387" width="54" height="16" font="3">= class</text>
<text top="748" left="441" width="5" height="11" font="11">j</text>
<text top="742" left="447" width="43" height="15" font="3">, class</text>
<text top="748" left="491" width="4" height="11" font="11">i</text>
<text top="741" left="501" width="42" height="16" font="3">∈ C, v</text>
<text top="748" left="543" width="4" height="11" font="11">i</text>
<text top="741" left="553" width="25" height="16" font="3">∈ V</text>
<text top="748" left="578" width="28" height="11" font="11">class</text>
<text top="752" left="606" width="4" height="8" font="12">i</text>
<text top="741" left="611" width="8" height="16" font="3">}</text>
<text top="778" left="108" width="550" height="16" font="3">Or the set of all possible value sets given a set V of lattices for every mclass.</text>
<text top="816" left="168" width="10" height="15" font="3">S</text>
<text top="821" left="179" width="7" height="11" font="11">V</text>
<text top="815" left="194" width="90" height="16" font="3">= {{(mclass</text>
<text top="821" left="285" width="7" height="11" font="11">k</text>
<text top="816" left="292" width="15" height="15" font="3">, v</text>
<text top="821" left="307" width="7" height="11" font="11">k</text>
<text top="815" left="315" width="71" height="16" font="3">) : mclass</text>
<text top="821" left="386" width="4" height="11" font="11">i</text>
<text top="815" left="395" width="68" height="16" font="3">= mclass</text>
<text top="821" left="463" width="5" height="11" font="11">j</text>
<text top="816" left="470" width="15" height="15" font="3">, v</text>
<text top="821" left="485" width="4" height="11" font="11">i</text>
<text top="815" left="495" width="25" height="16" font="3">∈ V</text>
<text top="821" left="520" width="39" height="11" font="11">mclass</text>
<text top="826" left="559" width="4" height="8" font="12">i</text>
<text top="816" left="564" width="16" height="15" font="3">, k</text>
<text top="815" left="585" width="164" height="16" font="3">∈ 0..n} : 0 ≤ n ≤ |C|}}</text>
<text top="852" left="108" width="702" height="16" font="3">This is a lattice, with the join operation which is the simple set union of all the pairs, but for any</text>
<text top="872" left="108" width="702" height="16" font="3">two pairs with matching mclasses, their values get joined, resulting in only one pair in the result</text>
<text top="892" left="108" width="25" height="16" font="3">set.</text>
<text top="921" left="108" width="702" height="16" font="3">While the notion of a value set allows the analysis to deal with ambiguous variables, still building</text>
<text top="941" left="108" width="702" height="16" font="3">a complete callgraph and giving a valid estimation of types, having ambiguous variables is not</text>
<text top="962" left="108" width="449" height="16" font="3">conducive to code generation for a language like Fortran. So</text>
<text top="983" left="302" width="309" height="15" font="3">if (...); t = 4; else; t = ’hi’; end</text>
<text top="1002" left="108" width="702" height="16" font="3">results in t having the abstract value {(double, 4), (char, ’hi’)}. This example is not tame Mat-</text>
<text top="1023" left="108" width="28" height="12" font="3">lab</text>
<text top="1023" left="136" width="5" height="16" font="3">.</text>
<text top="1102" left="451" width="16" height="16" font="3">19</text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="37" height="15" font="3">5.2.2</text>
<text top="113" left="163" width="78" height="15" font="3">Flow Sets:</text>
<text top="152" left="108" width="485" height="16" font="3">We deﬁne a ﬂow set as a set of pairs of variables and value sets, i.e.</text>
<text top="186" left="225" width="35" height="15" font="3">f low</text>
<text top="186" left="265" width="56" height="16" font="3">= {(var</text>
<text top="192" left="321" width="6" height="12" font="11">1</text>
<text top="186" left="328" width="15" height="15" font="3">, s</text>
<text top="192" left="343" width="6" height="12" font="11">1</text>
<text top="186" left="350" width="44" height="16" font="3">), (var</text>
<text top="192" left="394" width="6" height="12" font="11">2</text>
<text top="186" left="402" width="15" height="15" font="3">, s</text>
<text top="192" left="417" width="6" height="12" font="11">2</text>
<text top="186" left="424" width="65" height="16" font="3">), ..., (var</text>
<text top="192" left="489" width="8" height="11" font="11">n</text>
<text top="186" left="498" width="15" height="15" font="3">, s</text>
<text top="192" left="513" width="8" height="11" font="11">n</text>
<text top="186" left="521" width="28" height="16" font="3">) : s</text>
<text top="192" left="549" width="4" height="11" font="11">i</text>
<text top="186" left="559" width="25" height="16" font="3">∈ S</text>
<text top="192" left="584" width="7" height="11" font="11">V</text>
<text top="186" left="595" width="32" height="15" font="3">, var</text>
<text top="192" left="627" width="4" height="11" font="11">i</text>
<text top="186" left="636" width="42" height="16" font="3">= var</text>
<text top="192" left="678" width="5" height="11" font="11">j</text>
<text top="186" left="685" width="8" height="16" font="3">}</text>
<text top="220" left="108" width="331" height="16" font="3">and we deﬁne an associated look-up operation</text>
<text top="255" left="344" width="35" height="15" font="3">f low</text>
<text top="254" left="379" width="194" height="16" font="3">(var) = s if (var, s) ∈ f low</text>
<text top="288" left="108" width="516" height="16" font="3">This is a lattice whose merge operation resembles that of the value sets.</text>
<text top="317" left="108" width="702" height="16" font="3">Flow sets may be nonviable, representing non-reachable code (for statements after errors, or non-</text>
<text top="337" left="108" width="702" height="16" font="3">viable branches). Joining any non-bottom ﬂow set with the nonviable set results in the viable ﬂow</text>
<text top="358" left="108" width="394" height="16" font="3">set. joining bottom and nonviable results in nonviable.</text>
<text top="409" left="108" width="37" height="15" font="3">5.2.3</text>
<text top="409" left="163" width="204" height="15" font="3">Argument and Return sets:</text>
<text top="448" left="108" width="702" height="16" font="3">The context or argument set for the interprocedural analysis is a vector of values representing</text>
<text top="469" left="108" width="502" height="16" font="3">argument values. Arguments are not value sets, but simple values v ∈ V</text>
<text top="475" left="610" width="5" height="11" font="11">c</text>
<text top="469" left="621" width="189" height="16" font="3">with a single known mclass</text>
<text top="490" left="108" width="7" height="15" font="3">c</text>
<text top="489" left="115" width="695" height="16" font="3">. When encountering a call, the analysis has to construct all combinations of possible argument</text>
<text top="509" left="108" width="702" height="16" font="3">sets, construct a context from that and analyze the call for all such contexts. For example, if we</text>
<text top="530" left="108" width="305" height="16" font="3">reach a call r = foo(a,b), with a ﬂow set</text>
<text top="564" left="275" width="112" height="16" font="3">{(a, {(double, v</text>
<text top="570" left="386" width="6" height="12" font="11">1</text>
<text top="564" left="393" width="69" height="16" font="3">), (char, v</text>
<text top="570" left="463" width="6" height="12" font="11">2</text>
<text top="564" left="470" width="132" height="16" font="3">)}, (b, {(logical, v</text>
<text top="570" left="602" width="6" height="12" font="11">3</text>
<text top="564" left="610" width="33" height="16" font="3">)})},</text>
<text top="598" left="108" width="374" height="16" font="3">the value analysis constructs two contexts, from (v</text>
<text top="604" left="482" width="6" height="12" font="11">1</text>
<text top="599" left="489" width="15" height="15" font="3">, v</text>
<text top="604" left="504" width="6" height="12" font="11">3</text>
<text top="598" left="511" width="61" height="16" font="3">) and (v</text>
<text top="604" left="572" width="6" height="12" font="11">2</text>
<text top="599" left="579" width="15" height="15" font="3">, v</text>
<text top="604" left="594" width="6" height="12" font="11">3</text>
<text top="598" left="601" width="209" height="16" font="3">), and analyzes function foo</text>
<text top="618" left="108" width="702" height="16" font="3">with each context. Note how the dominant argument for the ﬁrst context is double, whereas it is</text>
<text top="640" left="108" width="35" height="15" font="3">char</text>
<text top="639" left="147" width="663" height="16" font="3">for the second. If there exist mclass specialized versions for foo, then this results in call edges</text>
<text top="659" left="108" width="306" height="16" font="3">to, and analysis of, two diﬀerent functions.</text>
<text top="688" left="108" width="231" height="16" font="3">More formally, for a call f unc(a</text>
<text top="694" left="339" width="6" height="12" font="11">1</text>
<text top="688" left="346" width="19" height="16" font="3">, a</text>
<text top="694" left="365" width="6" height="12" font="11">2</text>
<text top="688" left="372" width="57" height="16" font="3">, · · · , a</text>
<text top="694" left="429" width="8" height="11" font="11">n</text>
<text top="688" left="437" width="337" height="16" font="3">) at program point p, with the input ﬂow set f</text>
<text top="694" left="774" width="6" height="11" font="11">p</text>
<text top="688" left="781" width="29" height="16" font="3">, we</text>
<text top="708" left="108" width="253" height="16" font="3">have the set of all possible contexts</text>
<text top="744" left="267" width="52" height="15" font="3">allargs</text>
<text top="744" left="323" width="21" height="16" font="3">=f</text>
<text top="750" left="344" width="6" height="11" font="11">p</text>
<text top="744" left="351" width="15" height="16" font="3">(a</text>
<text top="750" left="366" width="6" height="12" font="11">1</text>
<text top="744" left="373" width="34" height="16" font="3">) × f</text>
<text top="750" left="407" width="6" height="11" font="11">p</text>
<text top="744" left="414" width="15" height="16" font="3">(a</text>
<text top="750" left="429" width="6" height="12" font="11">2</text>
<text top="744" left="437" width="74" height="16" font="3">) × · · · × f</text>
<text top="750" left="510" width="6" height="11" font="11">p</text>
<text top="744" left="517" width="15" height="16" font="3">(a</text>
<text top="750" left="532" width="8" height="11" font="11">n</text>
<text top="744" left="541" width="24" height="16" font="3">) =</text>
<text top="767" left="569" width="38" height="12" font="11">1≤i≤n</text>
<text top="744" left="610" width="8" height="15" font="3">f</text>
<text top="750" left="618" width="6" height="11" font="11">p</text>
<text top="744" left="625" width="15" height="16" font="3">(a</text>
<text top="750" left="640" width="4" height="11" font="11">i</text>
<text top="744" left="645" width="6" height="16" font="3">)</text>
<text top="802" left="108" width="689" height="16" font="3">the interprocedural analysis needs to analyze f unc with all these contexts and merge the result,</text>
<text top="852" left="338" width="12" height="15" font="3">R</text>
<text top="852" left="355" width="13" height="16" font="3">=</text>
<text top="875" left="372" width="67" height="11" font="11">arg∈allargs</text>
<text top="852" left="442" width="57" height="15" font="3">analyze</text>
<text top="852" left="499" width="81" height="16" font="3">(f unc, arg)</text>
<text top="906" left="108" width="702" height="16" font="3">To construct a context, the value analysis may simplify (push up) values to a more general rep-</text>
<text top="926" left="108" width="702" height="16" font="3">resentation. For example, if the value abstraction includes constants, the push up operation may</text>
<text top="947" left="108" width="702" height="16" font="3">turn constants into top. Otherwise, the number of contexts for any given function may grow</text>
<text top="967" left="108" width="139" height="16" font="3">unnecessarily large.</text>
<text top="996" left="108" width="702" height="16" font="3">The result of analyzing a function with an argument set is a vector of value sets, where every</text>
<text top="1016" left="108" width="702" height="16" font="3">component represents a returned variable. They are joined by component-wise joining of the value</text>
<text top="1037" left="108" width="702" height="16" font="3">sets. In the value analysis we require that for a particular call, the number of returned variables is</text>
<text top="1057" left="108" width="242" height="16" font="3">the same for all possible contexts.</text>
<text top="1102" left="451" width="16" height="16" font="3">20</text>
</page>
<page number="22" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="37" height="15" font="3">5.2.4</text>
<text top="113" left="163" width="151" height="15" font="3">Builtin Propagators:</text>
<text top="152" left="108" width="702" height="16" font="3">Every implementation of the value abstractions needs to provide a builtin propagator, which pro-</text>
<text top="172" left="108" width="704" height="16" font="3">vides ﬂow equations for builtins. If B is the set of all deﬁned builtin functions {plus, minus, sin, . . .},</text>
<text top="192" left="108" width="209" height="16" font="3">then the builtin propagator P</text>
<text top="199" left="317" width="7" height="11" font="11">V</text>
<text top="192" left="332" width="245" height="16" font="3">for some representation of values V</text>
<text top="199" left="577" width="9" height="11" font="11">C</text>
<text top="192" left="592" width="218" height="16" font="3">is a function mapping a builtin</text>
<text top="213" left="108" width="234" height="16" font="3">and argument set to a result set.</text>
<text top="249" left="354" width="11" height="15" font="3">P</text>
<text top="254" left="365" width="7" height="11" font="11">V</text>
<text top="248" left="380" width="39" height="16" font="3">: B ×</text>
<text top="272" left="422" width="25" height="11" font="11">n∈N</text>
<text top="249" left="450" width="10" height="15" font="3">V</text>
<text top="245" left="463" width="8" height="11" font="11">n</text>
<text top="248" left="476" width="16" height="16" font="3">→</text>
<text top="272" left="497" width="25" height="11" font="11">n∈N</text>
<text top="248" left="522" width="16" height="16" font="3">(S</text>
<text top="254" left="538" width="7" height="11" font="11">V</text>
<text top="248" left="549" width="6" height="16" font="3">)</text>
<text top="245" left="555" width="8" height="11" font="11">n</text>
<text top="297" left="108" width="702" height="16" font="3">The builtin framework provides tools to help implement builtin propagators by providing builtin</text>
<text top="317" left="108" width="702" height="16" font="3">visitor classes. The framework also provides attributes for builtin functions, for example the class</text>
<text top="338" left="108" width="254" height="16" font="3">propagation information attributes.</text>
<text top="389" left="108" width="25" height="17" font="2">5.3</text>
<text top="389" left="153" width="125" height="17" font="2">Flow Equations</text>
<text top="429" left="108" width="702" height="16" font="3">In the following subsection we will show a sample of ﬂow equations to illustrate the ﬂow analysis.</text>
<text top="449" left="108" width="531" height="16" font="3">We assume a statement to be at program point p, with incoming ﬂow set f</text>
<text top="456" left="639" width="6" height="11" font="11">p</text>
<text top="449" left="646" width="164" height="16" font="3">. The ﬂow equation for</text>
<text top="469" left="108" width="323" height="16" font="3">program point p results in the new ﬂow set f</text>
<text top="468" left="433" width="3" height="10" font="11">′</text>
<text top="477" left="431" width="6" height="11" font="11">p</text>
<text top="514" left="149" width="24" height="15" font="3">var</text>
<text top="520" left="173" width="5" height="11" font="11">t</text>
<text top="514" left="187" width="42" height="15" font="3">= var</text>
<text top="520" left="229" width="6" height="11" font="11">s</text>
<text top="514" left="236" width="5" height="16" font="3">:</text>
<text top="514" left="276" width="8" height="15" font="3">f</text>
<text top="512" left="286" width="3" height="10" font="11">′</text>
<text top="521" left="284" width="6" height="11" font="11">p</text>
<text top="514" left="296" width="25" height="16" font="3">= f</text>
<text top="520" left="321" width="6" height="11" font="11">p</text>
<text top="514" left="332" width="51" height="16" font="3">\ {(var</text>
<text top="520" left="382" width="5" height="11" font="11">t</text>
<text top="514" left="388" width="15" height="15" font="3">, f</text>
<text top="520" left="403" width="6" height="11" font="11">p</text>
<text top="514" left="411" width="31" height="16" font="3">(var</text>
<text top="520" left="441" width="5" height="11" font="11">t</text>
<text top="514" left="447" width="93" height="16" font="3">))} ∪ {(var, f</text>
<text top="520" left="539" width="6" height="11" font="11">p</text>
<text top="514" left="547" width="31" height="16" font="3">(var</text>
<text top="520" left="578" width="6" height="11" font="11">s</text>
<text top="514" left="584" width="21" height="16" font="3">))}</text>
<text top="547" left="149" width="56" height="15" font="3">var = l</text>
<text top="546" left="205" width="242" height="16" font="3">, where l is a literal with mclass c</text>
<text top="553" left="447" width="4" height="11" font="11">l</text>
<text top="546" left="457" width="189" height="16" font="3">and value representation v</text>
<text top="553" left="646" width="4" height="11" font="11">l</text>
<text top="546" left="651" width="5" height="16" font="3">:</text>
<text top="570" left="319" width="8" height="15" font="3">f</text>
<text top="567" left="329" width="3" height="10" font="11">′</text>
<text top="578" left="327" width="6" height="11" font="11">p</text>
<text top="570" left="339" width="25" height="16" font="3">= f</text>
<text top="576" left="364" width="6" height="11" font="11">p</text>
<text top="570" left="375" width="65" height="16" font="3">\ {(var, f</text>
<text top="576" left="440" width="6" height="11" font="11">p</text>
<text top="570" left="448" width="137" height="16" font="3">(var))} ∪ {(var, {(c</text>
<text top="576" left="585" width="4" height="11" font="11">l</text>
<text top="570" left="591" width="15" height="15" font="3">, v</text>
<text top="576" left="606" width="4" height="11" font="11">l</text>
<text top="570" left="611" width="29" height="16" font="3">)})}</text>
<text top="611" left="149" width="15" height="15" font="3">[t</text>
<text top="616" left="163" width="6" height="12" font="11">1</text>
<text top="611" left="170" width="15" height="15" font="3">,t</text>
<text top="616" left="185" width="6" height="12" font="11">2</text>
<text top="611" left="192" width="42" height="15" font="3">,. . .,t</text>
<text top="616" left="234" width="11" height="11" font="11">m</text>
<text top="611" left="246" width="88" height="15" font="3">] = f unc(a</text>
<text top="616" left="334" width="6" height="12" font="11">1</text>
<text top="611" left="341" width="17" height="15" font="3">,a</text>
<text top="616" left="358" width="6" height="12" font="11">2</text>
<text top="611" left="365" width="45" height="15" font="3">,. . .,a</text>
<text top="616" left="410" width="8" height="11" font="11">n</text>
<text top="611" left="419" width="9" height="15" font="3">)</text>
<text top="610" left="427" width="284" height="16" font="3">, a function call to some function f unc:</text>
<text top="630" left="149" width="32" height="16" font="3">with</text>
<text top="660" left="207" width="26" height="15" font="3">call</text>
<text top="666" left="233" width="50" height="11" font="11">f unc,arg</text>
<text top="659" left="289" width="13" height="16" font="3">=</text>
<text top="650" left="326" width="11" height="15" font="3">P</text>
<text top="655" left="336" width="7" height="11" font="11">V</text>
<text top="649" left="347" width="59" height="16" font="3">(b, args)</text>
<text top="649" left="459" width="269" height="16" font="3">if f unc with args refers to a builtin b</text>
<text top="670" left="326" width="57" height="15" font="3">analyze</text>
<text top="669" left="383" width="358" height="16" font="3">(f, args) if f unc with args refers to a function f</text>
<text top="701" left="149" width="44" height="16" font="3">we set</text>
<text top="711" left="328" width="12" height="15" font="3">R</text>
<text top="710" left="346" width="13" height="16" font="3">=</text>
<text top="735" left="363" width="40" height="11" font="11">args∈f</text>
<text top="739" left="403" width="6" height="8" font="12">p</text>
<text top="734" left="409" width="12" height="12" font="11">(a</text>
<text top="739" left="421" width="5" height="6" font="12">1</text>
<text top="734" left="427" width="21" height="12" font="11">)×f</text>
<text top="739" left="448" width="6" height="8" font="12">p</text>
<text top="734" left="454" width="12" height="12" font="11">(a</text>
<text top="739" left="466" width="5" height="6" font="12">2</text>
<text top="734" left="472" width="41" height="12" font="11">)×···×f</text>
<text top="739" left="514" width="6" height="8" font="12">p</text>
<text top="734" left="520" width="12" height="12" font="11">(a</text>
<text top="739" left="532" width="7" height="8" font="12">n</text>
<text top="734" left="539" width="5" height="12" font="11">)</text>
<text top="711" left="547" width="26" height="15" font="3">call</text>
<text top="717" left="573" width="57" height="11" font="11">f unc,args</text>
<text top="757" left="149" width="32" height="16" font="3">then</text>
<text top="776" left="341" width="8" height="15" font="3">f</text>
<text top="773" left="350" width="3" height="10" font="11">′</text>
<text top="783" left="349" width="6" height="11" font="11">p</text>
<text top="775" left="360" width="25" height="16" font="3">= f</text>
<text top="782" left="386" width="6" height="11" font="11">p</text>
<text top="775" left="396" width="8" height="16" font="3">\</text>
<text top="759" left="413" width="11" height="11" font="11">m</text>
<text top="799" left="408" width="4" height="11" font="11">i</text>
<text top="798" left="412" width="16" height="12" font="11">=1</text>
<text top="775" left="429" width="20" height="16" font="3">{(t</text>
<text top="782" left="449" width="4" height="11" font="11">i</text>
<text top="776" left="454" width="15" height="15" font="3">, f</text>
<text top="782" left="469" width="6" height="11" font="11">p</text>
<text top="775" left="477" width="12" height="16" font="3">(t</text>
<text top="782" left="489" width="4" height="11" font="11">i</text>
<text top="775" left="494" width="35" height="16" font="3">))} ∪</text>
<text top="759" left="538" width="11" height="11" font="11">m</text>
<text top="799" left="533" width="4" height="11" font="11">i</text>
<text top="798" left="537" width="16" height="12" font="11">=1</text>
<text top="775" left="553" width="20" height="16" font="3">{(t</text>
<text top="782" left="574" width="4" height="11" font="11">i</text>
<text top="776" left="579" width="20" height="15" font="3">, R</text>
<text top="782" left="599" width="4" height="11" font="11">i</text>
<text top="775" left="604" width="14" height="16" font="3">)}</text>
<text top="833" left="108" width="702" height="16" font="3">Note that when analyzing a call to a function in an m-ﬁle, the argument values will be pushed up.</text>
<text top="853" left="108" width="702" height="16" font="3">For calls to builtins, the actual argument values will be used, eﬀectively in-lining the behaviour of</text>
<text top="874" left="108" width="122" height="16" font="3">builtin functions.</text>
<text top="925" left="108" width="25" height="17" font="2">5.4</text>
<text top="925" left="153" width="371" height="17" font="2">Structures, Cell Arrays and Function Handles</text>
<text top="965" left="108" width="702" height="16" font="3">We implemented a value abstraction for structs, cell arrays and function handles. This abstraction</text>
<text top="985" left="108" width="702" height="16" font="3">is again modular, this one with respect to the representation of matrix values (i.e. values with</text>
<text top="1005" left="108" width="702" height="16" font="3">mclass double, single, char, logical or integer). Structures, cell arrays and function handles</text>
<text top="1026" left="108" width="702" height="16" font="3">act as containers for other values, making them eﬀectively transparent. A user may provide a</text>
<text top="1046" left="108" width="702" height="16" font="3">ﬁne-grained abstraction for just matrix values and combine it with abstraction of composite values</text>
<text top="1066" left="108" width="282" height="16" font="3">to implement a concrete value analysis.</text>
<text top="1102" left="451" width="16" height="16" font="3">21</text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="37" height="15" font="3">5.4.1</text>
<text top="113" left="163" width="102" height="15" font="3">struct, cell:</text>
<text top="152" left="108" width="473" height="16" font="3">For structures and cell arrays, there are two possible abstractions:</text>
<text top="168" left="149" width="661" height="16" font="3">tuple: The exact index set of the struct/cell is known and every indexing operation can be</text>
<text top="189" left="149" width="553" height="16" font="3">completely resolved statically. Then the value is represented as a set of pairs {(i</text>
<text top="194" left="702" width="6" height="12" font="11">1</text>
<text top="189" left="709" width="15" height="15" font="3">, s</text>
<text top="194" left="724" width="6" height="12" font="11">1</text>
<text top="189" left="731" width="25" height="16" font="3">), (i</text>
<text top="194" left="757" width="6" height="12" font="11">2</text>
<text top="189" left="764" width="15" height="15" font="3">, s</text>
<text top="194" left="779" width="6" height="12" font="11">2</text>
<text top="189" left="786" width="42" height="16" font="3">), .., (i</text>
<text top="195" left="827" width="8" height="11" font="11">n</text>
<text top="189" left="836" width="15" height="15" font="3">, s</text>
<text top="195" left="851" width="8" height="11" font="11">n</text>
<text top="189" left="860" width="15" height="16" font="3">) :</text>
<text top="210" left="149" width="6" height="15" font="3">i</text>
<text top="216" left="154" width="7" height="11" font="11">k</text>
<text top="209" left="167" width="39" height="16" font="3">∈ I, s</text>
<text top="215" left="206" width="8" height="11" font="11">n</text>
<text top="209" left="219" width="26" height="16" font="3">∈ S</text>
<text top="215" left="244" width="7" height="11" font="11">V</text>
<text top="209" left="255" width="555" height="16" font="3">}, where I is an index set - integer vectors for cell arrays, and names for structs.</text>
<text top="267" left="149" width="661" height="16" font="3">collection: Not all indexing operations can be statically resolved, or the set of indices is</text>
<text top="288" left="149" width="661" height="16" font="3">unknown. In this case, all value sets contained in the struct or cell are merged together, and</text>
<text top="308" left="149" width="316" height="16" font="3">the representation is a single value set s ∈ S</text>
<text top="314" left="465" width="7" height="11" font="11">V</text>
<text top="308" left="476" width="5" height="16" font="3">.</text>
<text top="350" left="108" width="702" height="16" font="3">The usual representation for a structure is a tuple, because usually all accesses (dot-expressions) are</text>
<text top="371" left="108" width="702" height="16" font="3">explicit in the code and known. Cell arrays are usually a collection, because the index expressions</text>
<text top="391" left="108" width="702" height="16" font="3">are usually not constant. But cell arrays tend to have homogeneous mclass values, so there is some</text>
<text top="411" left="108" width="702" height="16" font="3">expectation that any access of a struct or cell results in some unambiguous mclass and thus</text>
<text top="432" left="108" width="181" height="16" font="3">allows static compilation.</text>
<text top="471" left="108" width="37" height="15" font="3">5.4.2</text>
<text top="471" left="163" width="132" height="15" font="3">function handle:</text>
<text top="510" left="108" width="702" height="16" font="3">As explained in section 2.5, function handles can be created either by referring to an existing</text>
<text top="530" left="108" width="702" height="16" font="3">function, or by using a lambda expression to generate an anonymous function using a lambda</text>
<text top="551" left="108" width="702" height="16" font="3">expression. The lambda simpliﬁcation (presented in section 4.2) reduces lambda expressions to</text>
<text top="571" left="108" width="81" height="16" font="3">single calls.</text>
<text top="600" left="108" width="702" height="16" font="3">We model all function handles as sets of function handle pairs. A function handle pair consists of</text>
<text top="620" left="108" width="702" height="16" font="3">a reference to a function and a vector of partial argument value sets. A function handle value may</text>
<text top="640" left="108" width="451" height="16" font="3">thus refer to multiple possible function/partial argument pairs.</text>
<text top="669" left="108" width="156" height="16" font="3">Given some ﬂow set f</text>
<text top="676" left="264" width="6" height="11" font="11">p</text>
<text top="669" left="277" width="226" height="16" font="3">deﬁned at the program point p,</text>
<text top="699" left="108" width="69" height="15" font="3">g = @sin</text>
<text top="698" left="182" width="66" height="16" font="3">results in</text>
<text top="719" left="245" width="8" height="15" font="3">f</text>
<text top="717" left="255" width="3" height="10" font="11">′</text>
<text top="726" left="253" width="6" height="11" font="11">p</text>
<text top="718" left="265" width="25" height="16" font="3">= f</text>
<text top="725" left="290" width="6" height="11" font="11">p</text>
<text top="718" left="301" width="41" height="16" font="3">\ (g, f</text>
<text top="725" left="343" width="6" height="11" font="11">p</text>
<text top="718" left="350" width="328" height="16" font="3">(g)) ∪ {(g, {(function handle, {(sin, ())})})}</text>
<text top="740" left="108" width="233" height="15" font="3">g = @(t,y) lambda1(D,c,t,y)</text>
<text top="739" left="345" width="66" height="16" font="3">results in</text>
<text top="760" left="186" width="8" height="15" font="3">f</text>
<text top="757" left="196" width="3" height="10" font="11">′</text>
<text top="767" left="194" width="6" height="11" font="11">p</text>
<text top="759" left="206" width="25" height="16" font="3">= f</text>
<text top="765" left="231" width="6" height="11" font="11">p</text>
<text top="759" left="242" width="42" height="16" font="3">\ (g, f</text>
<text top="765" left="283" width="6" height="11" font="11">p</text>
<text top="759" left="291" width="320" height="16" font="3">(g)) ∪ {(g, {(function handle, {(lambda1, (f</text>
<text top="765" left="611" width="6" height="11" font="11">p</text>
<text top="759" left="618" width="42" height="16" font="3">(D), f</text>
<text top="765" left="660" width="6" height="11" font="11">p</text>
<text top="759" left="668" width="69" height="16" font="3">(c)))})})}</text>
<text top="791" left="108" width="702" height="16" font="3">Note that function handles get invoked at array get statements, rather than calls. That is because</text>
<text top="811" left="108" width="702" height="16" font="3">the tame IR is constructed without mclass information, and will correctly interpret a function</text>
<text top="832" left="108" width="702" height="16" font="3">handle as a variable. When the target of an array get statement is a function handle, the analysis</text>
<text top="852" left="108" width="702" height="16" font="3">inserts one or more call edges at that program point, referring to the functions contained in the</text>
<text top="872" left="108" width="116" height="16" font="3">function handle.</text>
<text top="924" left="108" width="25" height="17" font="2">5.5</text>
<text top="924" left="153" width="256" height="17" font="2">The Simple Matrix Abstraction</text>
<text top="964" left="108" width="702" height="16" font="3">Using the value abstraction for structures, cell arrays and function, we implemented a concrete</text>
<text top="984" left="108" width="702" height="16" font="3">value abstraction by adding an abstraction for matrix values, which we call simple matrix values.</text>
<text top="1005" left="108" width="702" height="16" font="3">On top of the required mclass, this abstraction merely adds constant propagation for scalar doubles,</text>
<text top="1025" left="108" width="296" height="16" font="3">strings (char vectors), and scalar logicals.</text>
<text top="1102" left="451" width="16" height="16" font="3">22</text>
</page>
<page number="24" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="702" height="16" font="3">This allows the analysis of Matlab code utilizing optional function arguments using the builtin</text>
<text top="132" left="108" width="702" height="16" font="3">function nargin, and some limited dynamic features utilizing strings. For example, a call like</text>
<text top="154" left="108" width="138" height="15" font="3">ones(n,m,’int8’)</text>
<text top="153" left="251" width="172" height="16" font="3">can be considered tame.</text>
<text top="182" left="108" width="702" height="16" font="3">This implementation represents the concrete value analysis that is used to construct complete</text>
<text top="202" left="108" width="76" height="16" font="3">callgraphs.</text>
<text top="253" left="108" width="25" height="17" font="2">5.6</text>
<text top="253" left="153" width="229" height="17" font="2">Applying the Value Analysis</text>
<text top="293" left="108" width="702" height="16" font="3">In order to exercise the framework, we applied it to the set of benchmarks we have previously used</text>
<text top="313" left="108" width="702" height="16" font="3">for evaluating McVM/McJIT [10], a dynamic system. The benchmarks and results are given in</text>
<text top="334" left="108" width="702" height="16" font="3">Table I. About half of the benchmarks come from the FALCON project [16] and are purely array-</text>
<text top="354" left="108" width="702" height="16" font="3">based computations. The other half of the benchmarks were collected by the McLab team and</text>
<text top="374" left="108" width="702" height="16" font="3">cover a broader set of applications and use more language features such as lambda expressions, cell</text>
<text top="395" left="108" width="702" height="16" font="3">arrays and recursion. The columns labeled #Fn correspond to the number of user functions, and</text>
<text top="415" left="108" width="702" height="16" font="3">the column labeled #BFn corresponds to the number of builtin functions used by the benchmark.</text>
<text top="435" left="108" width="702" height="16" font="3">Note the high number of builtins. The column labeled “Wild” indicates if our system rejected</text>
<text top="456" left="108" width="702" height="16" font="3">the program as too wild. Only the sdku benchmark was rejected because it used the load library</text>
<text top="476" left="108" width="702" height="16" font="3">function which loads arbitrary variables from a stored ﬁle. It is likely that we should provide a</text>
<text top="496" left="108" width="702" height="16" font="3">tamer version of load. The column labeled “Mclass” indicates “unique” if the interprocedural value</text>
<text top="517" left="108" width="702" height="16" font="3">propagation found a unique mclass for every variable in the program. Only three benchmarks had</text>
<text top="537" left="108" width="702" height="16" font="3">one or more variables with multiple diﬀerent mclasses. We veriﬁed that it was really the case that</text>
<text top="557" left="108" width="460" height="16" font="3">a variable had two diﬀerent possible classes in those three cases.</text>
<text top="591" left="140" width="32" height="12" font="11">Name</text>
<text top="591" left="190" width="63" height="12" font="11">Description</text>
<text top="591" left="379" width="37" height="12" font="11">Source</text>
<text top="591" left="506" width="26" height="12" font="11">#Fn</text>
<text top="591" left="550" width="35" height="12" font="11">#BFn</text>
<text top="591" left="617" width="47" height="12" font="11">Features</text>
<text top="591" left="695" width="27" height="12" font="11">Wild</text>
<text top="591" left="740" width="37" height="12" font="11">Mclass</text>
<text top="606" left="140" width="25" height="12" font="11">adpt</text>
<text top="606" left="190" width="112" height="11" font="11">Adaptive quadrature</text>
<text top="606" left="379" width="109" height="12" font="11">Numerical Methods</text>
<text top="606" left="516" width="6" height="12" font="11">1</text>
<text top="606" left="561" width="13" height="12" font="11">17</text>
<text top="606" left="702" width="13" height="12" font="11">no</text>
<text top="606" left="741" width="37" height="12" font="11">unique</text>
<text top="620" left="140" width="24" height="12" font="11">beul</text>
<text top="620" left="190" width="94" height="11" font="11">Backward Eurler</text>
<text top="620" left="379" width="44" height="12" font="11">McLAB</text>
<text top="620" left="512" width="13" height="12" font="11">11</text>
<text top="620" left="561" width="13" height="12" font="11">30</text>
<text top="620" left="620" width="41" height="12" font="11">lambda</text>
<text top="620" left="702" width="13" height="12" font="11">no</text>
<text top="620" left="741" width="37" height="12" font="11">unique</text>
<text top="634" left="140" width="24" height="12" font="11">capr</text>
<text top="634" left="190" width="67" height="11" font="11">Capacitance</text>
<text top="634" left="379" width="107" height="12" font="11">Chalmers EEK 170</text>
<text top="634" left="516" width="6" height="12" font="11">4</text>
<text top="634" left="561" width="13" height="12" font="11">12</text>
<text top="634" left="702" width="13" height="12" font="11">no</text>
<text top="634" left="741" width="37" height="12" font="11">unique</text>
<text top="648" left="140" width="20" height="12" font="11">clos</text>
<text top="649" left="190" width="102" height="11" font="11">Transitive Closure</text>
<text top="648" left="379" width="30" height="12" font="11">Otter</text>
<text top="648" left="516" width="6" height="12" font="11">1</text>
<text top="648" left="561" width="13" height="12" font="11">10</text>
<text top="648" left="702" width="13" height="12" font="11">no</text>
<text top="648" left="741" width="37" height="12" font="11">unique</text>
<text top="662" left="140" width="21" height="12" font="11">crni</text>
<text top="663" left="190" width="103" height="11" font="11">Tridiagonal Solver</text>
<text top="662" left="379" width="109" height="12" font="11">Numerical Methods</text>
<text top="662" left="516" width="6" height="12" font="11">2</text>
<text top="662" left="561" width="13" height="12" font="11">14</text>
<text top="662" left="702" width="13" height="12" font="11">no</text>
<text top="662" left="741" width="37" height="12" font="11">unique</text>
<text top="677" left="140" width="23" height="12" font="11">dich</text>
<text top="677" left="190" width="88" height="11" font="11">Dirichlet Solver</text>
<text top="677" left="379" width="109" height="12" font="11">Numerical Methods</text>
<text top="677" left="516" width="6" height="12" font="11">1</text>
<text top="677" left="561" width="13" height="12" font="11">14</text>
<text top="677" left="702" width="13" height="12" font="11">no</text>
<text top="677" left="741" width="37" height="12" font="11">unique</text>
<text top="691" left="140" width="18" height="12" font="11">diﬀ</text>
<text top="691" left="190" width="94" height="11" font="11">Light Diﬀraction</text>
<text top="691" left="379" width="109" height="12" font="11">Appelbaum (MUC)</text>
<text top="691" left="516" width="6" height="12" font="11">1</text>
<text top="691" left="561" width="13" height="12" font="11">13</text>
<text top="691" left="702" width="13" height="12" font="11">no</text>
<text top="691" left="741" width="37" height="12" font="11">unique</text>
<text top="705" left="140" width="21" height="12" font="11">edit</text>
<text top="705" left="190" width="76" height="11" font="11">Edit Distance</text>
<text top="705" left="379" width="81" height="12" font="11">Castro (MUC)</text>
<text top="705" left="516" width="6" height="12" font="11">1</text>
<text top="705" left="564" width="6" height="12" font="11">6</text>
<text top="705" left="702" width="13" height="12" font="11">no</text>
<text top="705" left="741" width="37" height="12" font="11">unique</text>
<text top="719" left="140" width="23" height="12" font="11">fdtd</text>
<text top="720" left="190" width="169" height="11" font="11">Finite Distance Time Domain</text>
<text top="719" left="379" width="107" height="12" font="11">Chalmers EEK 170</text>
<text top="719" left="516" width="6" height="12" font="11">1</text>
<text top="719" left="564" width="6" height="12" font="11">8</text>
<text top="719" left="702" width="13" height="12" font="11">no</text>
<text top="719" left="741" width="37" height="12" font="11">unique</text>
<text top="733" left="140" width="12" height="12" font="11">ﬀt</text>
<text top="734" left="190" width="132" height="11" font="11">Fast Fourier Transform</text>
<text top="733" left="379" width="103" height="12" font="11">Numerical Recipes</text>
<text top="733" left="516" width="6" height="12" font="11">1</text>
<text top="733" left="561" width="13" height="12" font="11">13</text>
<text top="733" left="702" width="13" height="12" font="11">no</text>
<text top="734" left="742" width="34" height="11" font="11">multi</text>
<text top="748" left="140" width="14" height="12" font="11">ﬁﬀ</text>
<text top="748" left="190" width="95" height="11" font="11">Finite Diﬀerence</text>
<text top="748" left="379" width="109" height="12" font="11">Numerical Methods</text>
<text top="748" left="516" width="6" height="12" font="11">1</text>
<text top="748" left="564" width="6" height="12" font="11">8</text>
<text top="748" left="702" width="13" height="12" font="11">no</text>
<text top="748" left="741" width="37" height="12" font="11">unique</text>
<text top="762" left="140" width="27" height="12" font="11">mbrt</text>
<text top="762" left="190" width="85" height="11" font="11">Mandelbrot Set</text>
<text top="762" left="379" width="44" height="12" font="11">McLAB</text>
<text top="762" left="516" width="6" height="12" font="11">2</text>
<text top="762" left="561" width="13" height="12" font="11">12</text>
<text top="762" left="702" width="13" height="12" font="11">no</text>
<text top="762" left="741" width="37" height="12" font="11">unique</text>
<text top="776" left="140" width="23" height="12" font="11">mils</text>
<text top="776" left="190" width="157" height="11" font="11">Mixed Integer Least Squares</text>
<text top="776" left="379" width="93" height="12" font="11">Chang and Zhou</text>
<text top="776" left="516" width="6" height="12" font="11">6</text>
<text top="776" left="561" width="13" height="12" font="11">35</text>
<text top="776" left="702" width="13" height="12" font="11">no</text>
<text top="776" left="741" width="37" height="12" font="11">unique</text>
<text top="790" left="140" width="27" height="12" font="11">nb1d</text>
<text top="791" left="190" width="59" height="11" font="11">1-D Nbody</text>
<text top="790" left="379" width="30" height="12" font="11">Otter</text>
<text top="790" left="516" width="6" height="12" font="11">2</text>
<text top="790" left="564" width="6" height="12" font="11">9</text>
<text top="790" left="702" width="13" height="12" font="11">no</text>
<text top="790" left="741" width="37" height="12" font="11">unique</text>
<text top="804" left="140" width="27" height="12" font="11">nb3d</text>
<text top="805" left="190" width="59" height="11" font="11">3-D Nbody</text>
<text top="804" left="379" width="30" height="12" font="11">Otter</text>
<text top="804" left="516" width="6" height="12" font="11">2</text>
<text top="804" left="561" width="13" height="12" font="11">12</text>
<text top="804" left="702" width="13" height="12" font="11">no</text>
<text top="804" left="741" width="37" height="12" font="11">unique</text>
<text top="818" left="140" width="22" height="12" font="11">nfrc</text>
<text top="819" left="190" width="85" height="11" font="11">Newton Fractal</text>
<text top="818" left="379" width="44" height="12" font="11">McLAB</text>
<text top="818" left="516" width="6" height="12" font="11">4</text>
<text top="818" left="561" width="13" height="12" font="11">16</text>
<text top="818" left="702" width="13" height="12" font="11">no</text>
<text top="818" left="741" width="37" height="12" font="11">unique</text>
<text top="833" left="140" width="20" height="12" font="11">nne</text>
<text top="833" left="190" width="61" height="11" font="11">Neural Net</text>
<text top="833" left="379" width="44" height="12" font="11">McLAB</text>
<text top="833" left="516" width="6" height="12" font="11">3</text>
<text top="833" left="561" width="13" height="12" font="11">16</text>
<text top="833" left="631" width="18" height="12" font="11">cell</text>
<text top="833" left="702" width="13" height="12" font="11">no</text>
<text top="833" left="741" width="37" height="12" font="11">unique</text>
<text top="847" left="140" width="23" height="12" font="11">play</text>
<text top="847" left="190" width="90" height="11" font="11">Minimax Search</text>
<text top="847" left="379" width="44" height="12" font="11">McLAB</text>
<text top="847" left="516" width="6" height="12" font="11">5</text>
<text top="847" left="561" width="13" height="12" font="11">26</text>
<text top="847" left="602" width="75" height="12" font="11">recursive, cell</text>
<text top="847" left="702" width="13" height="12" font="11">no</text>
<text top="848" left="742" width="34" height="11" font="11">multi</text>
<text top="861" left="140" width="23" height="12" font="11">rayt</text>
<text top="862" left="190" width="53" height="11" font="11">Raytracer</text>
<text top="861" left="379" width="95" height="12" font="11">Aalborg (Jensen)</text>
<text top="861" left="516" width="6" height="12" font="11">2</text>
<text top="861" left="561" width="13" height="12" font="11">28</text>
<text top="861" left="702" width="13" height="12" font="11">no</text>
<text top="861" left="741" width="37" height="12" font="11">unique</text>
<text top="875" left="140" width="24" height="12" font="11">sch2</text>
<text top="876" left="190" width="153" height="11" font="11">Sparse Schroed. Eqn Solver</text>
<text top="875" left="379" width="44" height="12" font="11">McLAB</text>
<text top="875" left="516" width="6" height="12" font="11">8</text>
<text top="875" left="561" width="13" height="12" font="11">32</text>
<text top="875" left="606" width="67" height="12" font="11">cell, lambda</text>
<text top="875" left="702" width="13" height="12" font="11">no</text>
<text top="875" left="741" width="37" height="12" font="11">unique</text>
<text top="890" left="140" width="22" height="12" font="11">schr</text>
<text top="890" left="190" width="136" height="11" font="11">Schroedinger Eqn Solver</text>
<text top="890" left="379" width="44" height="12" font="11">McLAB</text>
<text top="890" left="516" width="6" height="12" font="11">8</text>
<text top="890" left="561" width="13" height="12" font="11">31</text>
<text top="890" left="606" width="67" height="12" font="11">cell, lambda</text>
<text top="890" left="702" width="13" height="12" font="11">no</text>
<text top="890" left="741" width="37" height="12" font="11">unique</text>
<text top="904" left="140" width="26" height="12" font="11">sdku</text>
<text top="904" left="190" width="118" height="11" font="11">Sodoku Puzzle Solver</text>
<text top="904" left="379" width="44" height="12" font="11">McLAB</text>
<text top="904" left="516" width="6" height="12" font="11">8</text>
<text top="904" left="628" width="23" height="12" font="11">load</text>
<text top="904" left="699" width="20" height="11" font="11">yes</text>
<text top="918" left="140" width="18" height="12" font="11">sga</text>
<text top="918" left="190" width="165" height="11" font="11">Vectorized Genetic Algorithm</text>
<text top="918" left="379" width="52" height="12" font="11">Burjorjee</text>
<text top="918" left="516" width="6" height="12" font="11">4</text>
<text top="918" left="561" width="13" height="12" font="11">30</text>
<text top="918" left="702" width="13" height="12" font="11">no</text>
<text top="919" left="742" width="34" height="11" font="11">multi</text>
<text top="932" left="140" width="19" height="12" font="11">svd</text>
<text top="933" left="190" width="105" height="11" font="11">SVD Factorization</text>
<text top="932" left="379" width="44" height="12" font="11">McLAB</text>
<text top="932" left="512" width="13" height="12" font="11">11</text>
<text top="932" left="561" width="13" height="12" font="11">26</text>
<text top="932" left="702" width="13" height="12" font="11">no</text>
<text top="932" left="741" width="37" height="12" font="11">unique</text>
<text top="979" left="304" width="309" height="16" font="3">Table I: Results of Running Value Analysis</text>
<text top="1016" left="108" width="702" height="16" font="3">Although the main point of this experiment was just to exercise the framework, we were very</text>
<text top="1037" left="108" width="702" height="16" font="3">encouraged by the number of benchmarks that were not wild and the overall accuracy of the basic</text>
<text top="1057" left="108" width="702" height="16" font="3">interprocedural value analysis. We expect many other analyses to be built using the framework,</text>
<text top="1102" left="451" width="16" height="16" font="3">23</text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="702" height="16" font="3">with diﬀerent abstractions. By implementing them all in a common framework we will be be able</text>
<text top="132" left="108" width="261" height="16" font="3">to compare the diﬀerent approaches.</text>
<text top="189" left="108" width="12" height="20" font="0">6</text>
<text top="189" left="143" width="135" height="20" font="0">Related Work</text>
<text top="238" left="108" width="702" height="16" font="3">There are several categories of related work. First, we have the immediate work upon which we</text>
<text top="258" left="108" width="702" height="16" font="3">are building. The McLab project already provided the front-end and the McSaf [4] analysis</text>
<text top="278" left="108" width="702" height="16" font="3">framework, which provided an important basis for the Tamer. We also learned a lot from McLab’s</text>
<text top="299" left="108" width="702" height="16" font="3">previous McFor project [11] which was a ﬁrst prototype Matlab to Fortran95 compiler. Mc-</text>
<text top="320" left="108" width="31" height="12" font="3">For</text>
<text top="319" left="146" width="664" height="16" font="3">supported a smaller subset of the language, did not have a comprehensive approach to the</text>
<text top="339" left="108" width="702" height="16" font="3">builtin functions, and had a much more ad hoc approach to the analyses. However, it really showed</text>
<text top="360" left="108" width="702" height="16" font="3">that conversion of Matlab to Fortran95 was possible, and that Fortran95 is an excellent tar-</text>
<text top="380" left="108" width="702" height="16" font="3">get language. In this paper we have gone back to the basics and deﬁned a much larger subset of</text>
<text top="401" left="108" width="63" height="12" font="3">Matlab</text>
<text top="400" left="171" width="639" height="16" font="3">, taken a more structured and extensible approach to building a general toolkit, tackled</text>
<text top="420" left="108" width="702" height="16" font="3">the problem of a principled approach to the builtins, and deﬁned the interprocedural analyses in a</text>
<text top="441" left="108" width="702" height="16" font="3">more rigorous and extensible fashion. The next generation of McFor can now be built upon these</text>
<text top="461" left="108" width="122" height="16" font="3">new foundations.</text>
<text top="490" left="108" width="702" height="16" font="3">Although we were not able to ﬁnd publicly available versions, there have been several excellent</text>
<text top="510" left="108" width="702" height="16" font="3">previous research projects on static compilation of Matlab which focused particularly on the array-</text>
<text top="531" left="108" width="702" height="16" font="3">based subset of Matlab and developed advanced static analyses for determining shapes and sizes</text>
<text top="551" left="108" width="702" height="16" font="3">of arrays. For example, FALCON [16] is a Matlab to Fortran90 translator with sophisticated</text>
<text top="571" left="108" width="702" height="16" font="3">type inference algorithms. Our Tamer is targeting a larger and more modern set of Matlab that</text>
<text top="592" left="108" width="702" height="16" font="3">includes other types of data structures such as cell arrays and structs, function handles and lambda</text>
<text top="612" left="108" width="702" height="16" font="3">expressions, and which obeys the modern semantics of Matlab 7. We should note that FALCON</text>
<text top="632" left="108" width="702" height="16" font="3">handled interprocedural issues by fully inlining all of the the code. MaJIC [2], a MATLAB Just-In-</text>
<text top="653" left="108" width="702" height="16" font="3">Time compiler, is patterned after FALCON. It uses similar type inference techniques to FALCON,</text>
<text top="673" left="108" width="702" height="16" font="3">but are simpler to ﬁt the JIT context. MAGICA [8, 9] is a type inference engine developed by</text>
<text top="693" left="108" width="702" height="16" font="3">Joisha and Banerjee of Northwestern University, and is written in Mathematica and is designed as</text>
<text top="713" left="108" width="702" height="16" font="3">an add-on module used by MAT2C compiler [7]. We hope to learn from the advanced type inference</text>
<text top="734" left="108" width="702" height="16" font="3">approaches in these projects and to implement similar approximations using our interprocedural</text>
<text top="754" left="108" width="103" height="16" font="3">value analysis.</text>
<text top="783" left="108" width="702" height="16" font="3">There are also commercial compilers, which are not publicly available, and for which there are no</text>
<text top="803" left="108" width="702" height="16" font="3">research articles. One such product is the MATLAB Coder recently released by MathWorks [12].</text>
<text top="824" left="108" width="702" height="16" font="3">This product produces C code for a subset of Matlab. According to our preliminary tests, this</text>
<text top="844" left="108" width="702" height="16" font="3">product does not appear to support cell arrays except in very speciﬁc circumstances, nor does it</text>
<text top="864" left="108" width="702" height="16" font="3">support a general form of lambda expressions, and was therefore unable to handle quite a few of</text>
<text top="885" left="108" width="702" height="16" font="3">our benchmarks. However, the key diﬀerences with our work is that we are designing and providing</text>
<text top="905" left="108" width="702" height="16" font="3">an extensible and open source toolkit for compiler and tool researchers. This is clearly not the</text>
<text top="925" left="108" width="252" height="16" font="3">main goal of proprietary compilers.</text>
<text top="954" left="108" width="702" height="16" font="3">There are other projects providing open source implementations of Matlab-like languages, such as</text>
<text top="974" left="108" width="702" height="16" font="3">Octave [1] and Scilab [6]. Although these add valuable contributions to the open source community,</text>
<text top="995" left="108" width="702" height="16" font="3">their focus is on providing interpreters and open library support and they have not tackled the</text>
<text top="1015" left="108" width="657" height="16" font="3">problems of static compilation. Thus, we believe that our contributions are complementary.</text>
<text top="1044" left="108" width="702" height="16" font="3">Other dynamic languages have had very successful eﬀorts in deﬁning compilable subsets. For</text>
<text top="1102" left="451" width="16" height="16" font="3">24</text>
</page>
<page number="26" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="108" width="702" height="16" font="3">example RPython [3] uses a similar approach to ours, deﬁning a reduced set of python that can be</text>
<text top="132" left="108" width="607" height="16" font="3">statically compiled, while providing an analysis and compiler to compile that subset.</text>
<text top="189" left="108" width="12" height="20" font="0">7</text>
<text top="189" left="143" width="290" height="20" font="0">Conclusions and Future Work</text>
<text top="238" left="108" width="702" height="16" font="3">This paper has introduced the Matlab Tamer, an extensible object-oriented framework for sup-</text>
<text top="258" left="108" width="702" height="16" font="3">porting the translation from dynamic Matlab programs to a Tame IR, call graph and class/type</text>
<text top="278" left="108" width="702" height="16" font="3">information suitable for generating static code. We provided an introduction to the features of</text>
<text top="299" left="108" width="63" height="12" font="3">Matlab</text>
<text top="299" left="178" width="632" height="16" font="3">in a form that we believe helps expose the semantics of mclasses and function lookup</text>
<text top="319" left="108" width="702" height="16" font="3">for compiler and tool writers. We tackled the somewhat daunting problem of handling the large</text>
<text top="339" left="108" width="702" height="16" font="3">number of builtin functions in Matlab by deﬁning an extensible hierarchy of builtins and a small</text>
<text top="360" left="108" width="702" height="16" font="3">domain-speciﬁc language to deﬁne their behaviour. We deﬁned a Tame IR and added functionality</text>
<text top="380" left="108" width="702" height="16" font="3">to McSaf to produce the IR and to extend the analysis framework to handle to new IR nodes in-</text>
<text top="400" left="108" width="702" height="16" font="3">troduced. Finally, we developed an extensible interprocedural analysis framework and an extensible</text>
<text top="420" left="108" width="508" height="16" font="3">value analysis that we used for estimating the mclass of every variable.</text>
<text top="449" left="108" width="702" height="16" font="3">Our initial experiments with the framework are very encouraging and we are now working on using</text>
<text top="470" left="108" width="702" height="16" font="3">the framework to implement back-ends, and we hope that others will also use the framework for a</text>
<text top="490" left="108" width="218" height="16" font="3">variety of static Matlab tools.</text>
<text top="487" left="326" width="6" height="12" font="11">8</text>
<text top="490" left="340" width="470" height="16" font="3">We also plan to continue developing the value analysis to add richer</text>
<text top="510" left="108" width="702" height="16" font="3">abstractions for shape and other data structure properties. Finally, as a part of a larger project on</text>
<text top="531" left="108" width="702" height="16" font="3">benchmarking Matlab, we hope to expand our set of benchmarks and to further examine which</text>
<text top="551" left="108" width="533" height="16" font="3">features might be tamed, and to extend our set of automated refactorings.</text>
<text top="608" left="108" width="106" height="20" font="0">References</text>
<text top="654" left="116" width="522" height="16" font="3">[1] GNU Octave. http://www.gnu.org/software/octave/index.html.</text>
<text top="688" left="116" width="694" height="16" font="3">[2] G. Alm´asi and D. Padua. MaJIC: compiling MATLAB for speed and responsiveness. In PLDI</text>
<text top="708" left="142" width="668" height="16" font="3">’02: Proceedings of the ACM SIGPLAN 2002 Conference on Programming language design</text>
<text top="729" left="142" width="509" height="16" font="3">and implementation, pages 294–303, New York, NY, USA, 2002. ACM.</text>
<text top="762" left="116" width="694" height="16" font="3">[3] D. Ancona, M. Ancona, A. Cuni, and N. D. Matsakis. Rpython: a step towards reconciling</text>
<text top="783" left="142" width="668" height="16" font="3">dynamically and statically typed oo languages. In DLS ’07: Proceedings of the 2007 symposium</text>
<text top="803" left="142" width="512" height="16" font="3">on Dynamic languages, pages 53–64, New York, NY, USA, 2007. ACM.</text>
<text top="837" left="116" width="694" height="16" font="3">[4] J. Doherty. McSAF: An Extensible Static Analysis Framework for the MATLAB Language.</text>
<text top="857" left="142" width="366" height="16" font="3">Master’s thesis, McGill University, December 2011.</text>
<text top="891" left="116" width="694" height="16" font="3">[5] J. Doherty, L. Hendren, and S. Radpour. Kind analysis for MATLAB. In In Proceedings of</text>
<text top="911" left="142" width="258" height="16" font="3">OOPSLA 2011, pages 99–118, 2011.</text>
<text top="945" left="116" width="455" height="16" font="3">[6] INRIA. Scilab, 2009. http://www.scilab.org/platform/.</text>
<text top="979" left="116" width="370" height="16" font="3">[7] P. G. Joisha. a MATLAB-to-C translator, 2003.</text>
<text top="1010" left="127" width="5" height="6" font="12">8</text>
<text top="1012" left="133" width="392" height="13" font="9">The URL for a distribution will be released with the ﬁnal paper.</text>
<text top="1102" left="451" width="16" height="16" font="3">25</text>
</page>
<page number="27" position="absolute" top="0" left="0" height="1188" width="918">
<text top="112" left="116" width="694" height="16" font="3">[8] P. G. Joisha and P. Banerjee. Correctly detecting intrinsic type errors in typeless languages</text>
<text top="132" left="142" width="668" height="16" font="3">such as MATLAB. In APL ’01: Proceedings of the 2001 conference on APL, pages 7–21, New</text>
<text top="153" left="142" width="208" height="16" font="3">York, NY, USA, 2001. ACM.</text>
<text top="187" left="116" width="694" height="16" font="3">[9] P. G. Joisha and P. Banerjee. Static array storage optimization in MATLAB. In PLDI ’03:</text>
<text top="207" left="142" width="668" height="16" font="3">Proceedings of the ACM SIGPLAN 2003 conference on Programming language design and</text>
<text top="227" left="142" width="477" height="16" font="3">implementation, pages 258–268, New York, NY, USA, 2003. ACM.</text>
<text top="261" left="108" width="702" height="16" font="3">[10] N. Lameed and L. J. Hendren. Staged static techniques to eﬃciently implement array copy se-</text>
<text top="281" left="142" width="668" height="16" font="3">mantics in a MATLAB JIT compiler. In Proceedings of the International Compiler Conference</text>
<text top="302" left="142" width="196" height="16" font="3">(CC11), pages 22–41, 2011.</text>
<text top="335" left="108" width="702" height="16" font="3">[11] J. Li. McFor: A MATLAB to FORTRAN 95 Compiler. Master’s thesis, McGill University,</text>
<text top="356" left="142" width="94" height="16" font="3">August 2009.</text>
<text top="389" left="108" width="677" height="16" font="3">[12] MathWorks. MATLAB Coder. http://www.mathworks.com/products/matlab-coder/.</text>
<text top="423" left="108" width="702" height="16" font="3">[13] C. Moler. The Growth of MATLAB and The MathWorks over Two Decades. http://www.</text>
<text top="445" left="142" width="577" height="15" font="3">mathworks.com/company/newsletters/news_notes/clevescorner/jan06.pdf</text>
<text top="444" left="718" width="5" height="16" font="3">.</text>
<text top="477" left="108" width="703" height="16" font="3">[14] C. Moler. The Origins of MATLAB. http://www.mathworks.com/company/newsletters/</text>
<text top="499" left="142" width="293" height="15" font="3">news_notes/clevescorner/dec04.html</text>
<text top="498" left="435" width="5" height="16" font="3">.</text>
<text top="532" left="108" width="702" height="16" font="3">[15] S. Radpour. Understanding and Refactoring MATLAB. Master’s thesis, McGill University,</text>
<text top="552" left="142" width="100" height="16" font="3">January 2012.</text>
<text top="586" left="108" width="702" height="16" font="3">[16] L. D. Rose and D. Padua. Techniques for the translation of MATLAB programs into Fortran</text>
<text top="606" left="142" width="430" height="16" font="3">90. ACM Trans. Program. Lang. Syst., 21(2):286–323, 1999.</text>
<text top="1102" left="451" width="16" height="16" font="3">26</text>
</page>
</pdf2xml>
