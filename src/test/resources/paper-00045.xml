<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="0" size="16" family="Times" color="#000000"/>
	<fontspec id="1" size="18" family="Times" color="#000000"/>
	<fontspec id="2" size="13" family="Times" color="#000000"/>
	<fontspec id="3" size="25" family="Helvetica" color="#000000"/>
	<fontspec id="4" size="26" family="Helvetica" color="#000000"/>
	<fontspec id="5" size="16" family="Helvetica" color="#000000"/>
	<fontspec id="6" size="34" family="Helvetica" color="#000000"/>
	<fontspec id="7" size="18" family="Helvetica" color="#000000"/>
	<fontspec id="8" size="18" family="Helvetica" color="#000000"/>
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="191" left="607" width="5" height="21" font="1"> </text>
<text top="229" left="108" width="3" height="15" font="2"> </text>
<text top="259" left="108" width="4" height="18" font="0"> </text>
<text top="291" left="108" width="10" height="18" font="0">‐ </text>
<text top="327" left="108" width="8" height="25" font="3"> </text>
<text top="369" left="127" width="648" height="26" font="4"><b>Automatic XSS detection and Snort signatures/ </b></text>
<text top="406" left="120" width="660" height="26" font="4"><b>ACLs generation by the means of a cloud-based </b></text>
<text top="444" left="329" width="242" height="26" font="4"><b>honeypot system </b></text>
<text top="487" left="108" width="8" height="25" font="3"> </text>
<text top="529" left="108" width="5" height="17" font="5"><b> </b></text>
<text top="568" left="108" width="5" height="17" font="5"><b> </b></text>
<text top="609" left="368" width="164" height="25" font="3">Benoit Jacob </text>
<text top="660" left="446" width="8" height="25" font="3"> </text>
<text top="710" left="386" width="128" height="25" font="3">08009764 </text>
<text top="763" left="446" width="10" height="33" font="6"> </text>
<text top="822" left="300" width="305" height="19" font="7">Submitted in partial fulfilment of  </text>
<text top="856" left="222" width="454" height="19" font="7">the requirements of Edinburgh Napier University </text>
<text top="890" left="366" width="166" height="19" font="7"> for the degree of </text>
<text top="924" left="313" width="273" height="19" font="8"><b>Msc Advanced Networking </b></text>
<text top="957" left="446" width="6" height="19" font="7"> </text>
<text top="996" left="250" width="398" height="19" font="7">Supervisor Professor William J. Buchanan </text>
<text top="1036" left="287" width="325" height="19" font="7">Second marker Mr Alistair Lawson </text>
<text top="1075" left="351" width="196" height="19" font="7">School of computing </text>
<text top="1114" left="372" width="150" height="19" font="7">December 2011</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="9" size="31" family="Times" color="#000000"/>
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="776" width="13" height="18" font="0">2 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="115" left="108" width="7" height="33" font="9"> </text>
<text top="115" left="324" width="7" height="33" font="9"> </text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="10" size="25" family="Times" color="#000000"/>
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="776" width="13" height="18" font="0">3 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="115" left="108" width="319" height="33" font="9">Authorship Declaration </text>
<text top="166" left="108" width="6" height="27" font="10"> </text>
<text top="208" left="108" width="681" height="18" font="0">I,  Benoit  Jacob,  confirm  that  this  dissertation  and  the  work  presented  in  it  are  my  own </text>
<text top="233" left="108" width="103" height="18" font="0">achievement. </text>
<text top="264" left="108" width="4" height="18" font="0"> </text>
<text top="296" left="108" width="627" height="18" font="0">Where I have consulted the published work of others this is always clearly attributed; </text>
<text top="327" left="108" width="4" height="18" font="0"> </text>
<text top="358" left="108" width="681" height="18" font="0">Where I have quoted from the work of others the source is always given. With the exception </text>
<text top="383" left="108" width="445" height="18" font="0">of such quotations this dissertation is entirely my own work; </text>
<text top="415" left="108" width="4" height="18" font="0"> </text>
<text top="446" left="108" width="339" height="18" font="0">I have acknowledged all main sources of help; </text>
<text top="477" left="108" width="4" height="18" font="0"> </text>
<text top="508" left="108" width="681" height="18" font="0">If  my  research  follows  on  from  previous  work  or  is  part  of  a  larger  collaborative  research </text>
<text top="534" left="108" width="681" height="18" font="0">project  I  have  made  clear  exactly  what  was  done  by  others  and  what  I  have  contributed </text>
<text top="559" left="108" width="57" height="18" font="0">myself; </text>
<text top="590" left="108" width="4" height="18" font="0"> </text>
<text top="622" left="108" width="592" height="18" font="0">I have read and understand the penalties associated with Academic Misconduct. </text>
<text top="653" left="108" width="4" height="18" font="0"> </text>
<text top="684" left="108" width="681" height="18" font="0">I also confirm that I have obtained informed consent from all people I have involved in the </text>
<text top="709" left="108" width="475" height="18" font="0">work in this dissertation following the School's ethical guidelines </text>
<text top="741" left="108" width="4" height="18" font="0"> </text>
<text top="772" left="108" width="62" height="18" font="0">Signed:  </text>
<text top="803" left="108" width="4" height="18" font="0"> </text>
<text top="834" left="108" width="4" height="18" font="0"> </text>
<text top="866" left="108" width="4" height="18" font="0"> </text>
<text top="897" left="108" width="186" height="18" font="0">Date: 12 December 2011 </text>
<text top="928" left="108" width="4" height="18" font="0"> </text>
<text top="959" left="108" width="4" height="18" font="0"> </text>
<text top="991" left="108" width="208" height="18" font="0">Matriculation no: 08009764 </text>
<text top="1022" left="108" width="4" height="18" font="0"> </text>
<text top="1053" left="108" width="4" height="18" font="0"> </text>
<text top="1084" left="108" width="4" height="18" font="0"> </text>
<text top="1084" left="324" width="4" height="18" font="0"> </text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="776" width="13" height="18" font="0">4 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="115" left="108" width="381" height="33" font="9">Data Protection Declaration </text>
<text top="164" left="108" width="4" height="18" font="0"> </text>
<text top="195" left="108" width="681" height="18" font="0">Under  the  1998  Data  Protection  Act,  The  University  cannot  disclose  your  grade  to  an </text>
<text top="220" left="108" width="681" height="18" font="0">unauthorised  person.  However,  other  students  benefit  from  studying  dissertations  that </text>
<text top="246" left="108" width="204" height="18" font="0">have their grades attached. </text>
<text top="277" left="108" width="4" height="18" font="0"> </text>
<text top="308" left="108" width="4" height="18" font="0"> </text>
<text top="339" left="108" width="591" height="18" font="0">Please sign your name below one of the options below to state your preference. </text>
<text top="371" left="108" width="4" height="18" font="0"> </text>
<text top="402" left="108" width="4" height="18" font="0"> </text>
<text top="433" left="108" width="620" height="18" font="0">The University may make this dissertation, with indicative grade, available to others. </text>
<text top="464" left="108" width="4" height="18" font="0"> </text>
<text top="496" left="108" width="4" height="18" font="0"> </text>
<text top="527" left="108" width="4" height="18" font="0"> </text>
<text top="558" left="108" width="4" height="18" font="0"> </text>
<text top="590" left="108" width="681" height="18" font="0">The  University  may  make  this  dissertation  available  to  others,  but  the  grade  may  not  be </text>
<text top="615" left="108" width="76" height="18" font="0">disclosed. </text>
<text top="646" left="108" width="4" height="18" font="0"> </text>
<text top="677" left="108" width="4" height="18" font="0"> </text>
<text top="709" left="108" width="4" height="18" font="0"> </text>
<text top="740" left="108" width="4" height="18" font="0"> </text>
<text top="771" left="108" width="31" height="18" font="0">The </text>
<text top="771" left="161" width="78" height="18" font="0">University </text>
<text top="771" left="261" width="35" height="18" font="0">may </text>
<text top="771" left="318" width="29" height="18" font="0">not </text>
<text top="771" left="369" width="44" height="18" font="0">make </text>
<text top="771" left="436" width="31" height="18" font="0">this </text>
<text top="771" left="488" width="91" height="18" font="0">dissertation </text>
<text top="771" left="601" width="69" height="18" font="0">available </text>
<text top="771" left="692" width="20" height="18" font="0">to </text>
<text top="771" left="733" width="52" height="18" font="0">others.</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="11" size="34" family="Times" color="#000000"/>
<text top="57" left="108" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="776" width="13" height="18" font="0">5 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="119" left="108" width="153" height="37" font="11"> Abstract </text>
<text top="173" left="108" width="681" height="18" font="0">It is no secret that nowadays cloud computing is becoming popular with large companies, </text>
<text top="199" left="108" width="681" height="18" font="0">mainly  because  they  can  share  valuable  resources  in  a  cost  effective  way.  This  is  just  the </text>
<text top="224" left="108" width="681" height="18" font="0">beginning  of  the  cloud  computing,  an  independent  research  firm  “Forrester  Research” </text>
<text top="249" left="108" width="681" height="18" font="0">expects the global cloud computing market to grow from $40.7 billion in 2011 to more than </text>
<text top="274" left="108" width="681" height="18" font="0">$241  billion  in  2020  (Ried,  et  al.,  April  2011).  This  increasing  migration  towards  cloud </text>
<text top="300" left="108" width="681" height="18" font="0">computing is resulting in an escalation of security threats, which is becoming a major issue. </text>
<text top="325" left="108" width="681" height="18" font="0">The  cloud  computing  is  even  considered  to  be  a  “security  nightmare»,  according  to  John </text>
<text top="350" left="108" width="296" height="18" font="0">Chambers, Cisco CEO (McMillan, 2009).  </text>
<text top="382" left="108" width="681" height="18" font="0">The  migration  of  networks  and  servers  over  the  cloud  means  that  hacking  techniques  are </text>
<text top="407" left="108" width="681" height="18" font="0">now aimed at cloud‐based servers. According to the Web Hacking Incident Database (WHID, </text>
<text top="432" left="108" width="681" height="18" font="0">2011)  the  Cross  Site  Scripting  (XSS)  attacks  are  currently  the  second  most  implemented </text>
<text top="457" left="108" width="681" height="18" font="0">attacks and they are associated with a 12.58% of the overall attacks on the web. Moreover, </text>
<text top="483" left="108" width="681" height="18" font="0">XSS attacks can easily pass through Intrusion Detection Systems (IDS), such as Snort, without </text>
<text top="508" left="108" width="681" height="18" font="0">raising  an  alert  as  these  systems  lack  detection  for  attacks  which  use  hex‐encoded  values </text>
<text top="533" left="108" width="179" height="18" font="0">(Mookhey, et al., 2010). </text>
<text top="564" left="108" width="681" height="18" font="0">This  thesis  aimed  to  detect  XSS  attacks  sent  to  a  cloud‐based  Webserver  by  using  a </text>
<text top="590" left="108" width="681" height="18" font="0">honeypot that simulates a fake Webserver onto the cloud computing of Edinburgh Napier </text>
<text top="615" left="108" width="681" height="18" font="0">University.  The  honeypot  is  able  to  log  any  interaction  with  the  webserver  simulated.  By </text>
<text top="640" left="108" width="681" height="18" font="0">developing  specifics  Bash  scripts,  this  thesis  showed  the  possibility  to  detect  XSS  attacks, </text>
<text top="665" left="108" width="681" height="18" font="0">through  analysis  of  the  honeypot’s  log  file,  leading  to  the  generation  of  ACLs/Snort </text>
<text top="691" left="108" width="681" height="18" font="0">signatures. ACLs will block the IP addresses source of the attacks and the Snort signatures </text>
<text top="716" left="108" width="394" height="18" font="0">will block similar packets to enter the network again.  </text>
<text top="747" left="108" width="681" height="18" font="0">All experiments were done through the cloud of Edinburgh Napier University to ensure that </text>
<text top="773" left="108" width="681" height="18" font="0">the results are the more realistic possible. The result shows that out of a random set of 50 </text>
<text top="798" left="108" width="681" height="18" font="0">XSS attacks, the Bash scripts implemented in the honeypot generated 26 Snort signatures. </text>
<text top="823" left="108" width="681" height="18" font="0">These  signatures  were  implemented  into  Snort  which  was  then  able  to  detect  64%  of  the </text>
<text top="848" left="108" width="681" height="18" font="0">same set of XSS attacks. This is 4% above the acceptable level of True Positive alerts, which </text>
<text top="874" left="108" width="681" height="18" font="0">should be at least 60% of the total alerts raised (Timm, 2010). Finally, background traffic and </text>
<text top="899" left="108" width="681" height="18" font="0">XSS attacks were injected into the honeypot at increasing speed, to measure the efficiency </text>
<text top="924" left="108" width="681" height="18" font="0">of  the  honeypot  in  detecting  attacks  within  high  loads  of  traffic.  Despite  an  increasing </text>
<text top="949" left="108" width="681" height="18" font="0">latency in correlation with the network load speed, HoneyD was able to log/detect the same </text>
<text top="975" left="108" width="681" height="18" font="0">XSS  attacks,  as  seen  previously.  However,  at  2mbps,  the  honeypot  generated  a </text>
<text top="1000" left="108" width="681" height="18" font="0">“segmentation  fault”  error  due  to  insufficient  memory  that  the  CPU  could  not  physically </text>
<text top="1025" left="108" width="681" height="18" font="0">address. The 2mbps load speed was identified to be the breaking point of the honeypot and </text>
<text top="1050" left="108" width="424" height="18" font="0">an unstable interval was established between 1.5‐2mbps. </text>
<text top="1082" left="108" width="681" height="18" font="0">The  conclusion  drawn  in  this  thesis  is  that  HoneyD  coupled  with  Bash  scripts,  are </text>
<text top="1107" left="108" width="681" height="18" font="0">successfully  able  to  automatically  detect  XSS  attacks  and  trigger  the  generation  of </text>
<text top="1132" left="108" width="657" height="18" font="0">ACLs/Snort signatures. Further work could be realised by improving the detecting engine. </text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="12" size="13" family="Times" color="#000000"/>
	<fontspec id="13" size="10" family="Times" color="#000000"/>
	<fontspec id="14" size="13" family="Times" color="#000000"/>
<text top="57" left="108" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="776" width="13" height="18" font="0">6 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="119" left="108" width="274" height="37" font="11">Table of Content </text>
<text top="173" left="108" width="680" height="16" font="12"><b>ACKNOWLEDGEMENTS ....................................................................................................................... 10</b> </text>
<text top="195" left="108" width="680" height="16" font="12"><b>CHAPTER 1.</b>  <b>INTRODUCTION ............................................................................................................. 12</b> </text>
<text top="217" left="126" width="44" height="16" font="2">1.1  C</text>
<text top="219" left="170" width="42" height="13" font="13">ONTEXT</text>
<text top="217" left="212" width="575" height="16" font="2"> ............................................................................................................................................12 </text>
<text top="239" left="126" width="45" height="16" font="2">1.2  B</text>
<text top="242" left="171" width="69" height="13" font="13">ACKGROUND</text>
<text top="239" left="239" width="549" height="16" font="2"> .....................................................................................................................................12 </text>
<text top="261" left="126" width="45" height="16" font="2">1.3  A</text>
<text top="264" left="171" width="49" height="13" font="13">IMS AND </text>
<text top="261" left="220" width="10" height="16" font="2">O</text>
<text top="264" left="231" width="53" height="13" font="13">BJECTIVES</text>
<text top="261" left="284" width="504" height="16" font="2"> ..........................................................................................................................13 </text>
<text top="284" left="126" width="44" height="16" font="2">1.4  T</text>
<text top="286" left="170" width="74" height="13" font="13">HESIS LAYOUT</text>
<text top="284" left="243" width="544" height="16" font="2"> ....................................................................................................................................13 </text>
<text top="306" left="108" width="680" height="16" font="12"><b>CHAPTER 2.</b>  <b>TECHNOLOGIES REVIEW ................................................................................................. 16</b> </text>
<text top="328" left="126" width="40" height="16" font="2">2.1  I</text>
<text top="330" left="166" width="79" height="13" font="13">NTRODUCTION</text>
<text top="328" left="245" width="543" height="16" font="2"> ....................................................................................................................................16 </text>
<text top="350" left="126" width="46" height="16" font="2">2.2  H</text>
<text top="352" left="172" width="100" height="13" font="13">ONEYPOT SYSTEMS</text>
<text top="350" left="272" width="516" height="16" font="2"> .............................................................................................................................16 </text>
<text top="372" left="144" width="35" height="16" font="14"><i>2.2.1</i> </text>
<text top="372" left="198" width="590" height="16" font="14"><i>Level of interactivity ...............................................................................................................17</i> </text>
<text top="394" left="162" width="47" height="16" font="2">2.2.1.1 </text>
<text top="394" left="234" width="554" height="16" font="2">Low interaction honeypot .............................................................................................17 </text>
<text top="416" left="162" width="47" height="16" font="2">2.2.1.2 </text>
<text top="416" left="234" width="554" height="16" font="2">Medium interaction ......................................................................................................17 </text>
<text top="438" left="162" width="47" height="16" font="2">2.2.1.3 </text>
<text top="438" left="234" width="554" height="16" font="2">High interaction ............................................................................................................18 </text>
<text top="460" left="144" width="35" height="16" font="14"><i>2.2.2</i> </text>
<text top="460" left="198" width="590" height="16" font="14"><i>Purpose of Deployment ..........................................................................................................18</i> </text>
<text top="483" left="126" width="40" height="16" font="2">2.3  I</text>
<text top="485" left="166" width="58" height="13" font="13">NTRUSION </text>
<text top="483" left="224" width="10" height="16" font="2">D</text>
<text top="485" left="234" width="54" height="13" font="13">ETECTION </text>
<text top="483" left="288" width="7" height="16" font="2">S</text>
<text top="485" left="295" width="41" height="13" font="13">YSTEMS</text>
<text top="483" left="337" width="451" height="16" font="2"> ............................................................................................................19 </text>
<text top="505" left="144" width="35" height="16" font="14"><i>2.3.1</i> </text>
<text top="505" left="198" width="590" height="16" font="14"><i>Types of IDS ............................................................................................................................19</i> </text>
<text top="527" left="162" width="47" height="16" font="2">2.3.1.1 </text>
<text top="527" left="234" width="554" height="16" font="2">Network‐based ..............................................................................................................19 </text>
<text top="549" left="162" width="47" height="16" font="2">2.3.1.2 </text>
<text top="549" left="234" width="554" height="16" font="2">Host‐based IDS ..............................................................................................................20 </text>
<text top="571" left="144" width="35" height="16" font="14"><i>2.3.2</i> </text>
<text top="571" left="198" width="590" height="16" font="14"><i>Detection Techniques .............................................................................................................21</i> </text>
<text top="593" left="162" width="47" height="16" font="2">2.3.2.1 </text>
<text top="593" left="234" width="554" height="16" font="2">Signature‐based Intrusion Detection ............................................................................21 </text>
<text top="615" left="162" width="47" height="16" font="2">2.3.2.2 </text>
<text top="615" left="234" width="554" height="16" font="2">Anomaly‐based Intrusion Detection .............................................................................21 </text>
<text top="637" left="144" width="35" height="16" font="14"><i>2.3.3</i> </text>
<text top="637" left="198" width="590" height="16" font="14"><i>Acceptable levels of false alarms ...........................................................................................22</i> </text>
<text top="659" left="126" width="44" height="16" font="2">2.4  C</text>
<text top="662" left="170" width="99" height="13" font="13">LOUD COMPUTING</text>
<text top="659" left="270" width="518" height="16" font="2"> .............................................................................................................................23 </text>
<text top="682" left="144" width="35" height="16" font="14"><i>2.4.1</i> </text>
<text top="682" left="198" width="590" height="16" font="14"><i>Essential Characteristics .........................................................................................................23</i> </text>
<text top="704" left="144" width="35" height="16" font="14"><i>2.4.2</i> </text>
<text top="704" left="198" width="590" height="16" font="14"><i>Deployment Models ...............................................................................................................23</i> </text>
<text top="726" left="144" width="35" height="16" font="14"><i>2.4.3</i> </text>
<text top="726" left="198" width="590" height="16" font="14"><i>Service Models .......................................................................................................................23</i> </text>
<text top="748" left="144" width="35" height="16" font="14"><i>2.4.4</i> </text>
<text top="748" left="198" width="590" height="16" font="14"><i>Virtualisation ..........................................................................................................................24</i> </text>
<text top="770" left="144" width="35" height="16" font="14"><i>2.4.5</i> </text>
<text top="770" left="198" width="590" height="16" font="14"><i>Cloud Hypervisors ...................................................................................................................25</i> </text>
<text top="792" left="162" width="47" height="16" font="2">2.4.5.1 </text>
<text top="792" left="234" width="554" height="16" font="2">General Overview .........................................................................................................25 </text>
<text top="814" left="162" width="47" height="16" font="2">2.4.5.2 </text>
<text top="814" left="234" width="554" height="16" font="2">VMware ESXi .................................................................................................................26 </text>
<text top="836" left="126" width="46" height="16" font="2">2.5  H</text>
<text top="838" left="172" width="111" height="13" font="13">ACKING TECHNIQUES</text>
<text top="836" left="282" width="505" height="16" font="2"> ..........................................................................................................................27 </text>
<text top="858" left="144" width="35" height="16" font="14"><i>2.5.1</i> </text>
<text top="858" left="198" width="590" height="16" font="14"><i>SQL Injection ...........................................................................................................................27</i> </text>
<text top="881" left="144" width="35" height="16" font="14"><i>2.5.2</i> </text>
<text top="881" left="198" width="590" height="16" font="14"><i>Cross Site Scripting (XSS) ........................................................................................................27</i> </text>
<text top="903" left="144" width="35" height="16" font="14"><i>2.5.3</i> </text>
<text top="903" left="198" width="590" height="16" font="14"><i>Denial of Service .....................................................................................................................28</i> </text>
<text top="925" left="126" width="44" height="16" font="2">2.6  C</text>
<text top="927" left="170" width="63" height="13" font="13">ONCLUSION</text>
<text top="925" left="233" width="555" height="16" font="2"> .......................................................................................................................................29 </text>
<text top="947" left="108" width="680" height="16" font="12"><b>CHAPTER 3.</b>  <b>LITERATURE REVIEW ...................................................................................................... 31</b> </text>
<text top="969" left="126" width="40" height="16" font="2">3.1  I</text>
<text top="971" left="166" width="79" height="13" font="13">NTRODUCTION</text>
<text top="969" left="245" width="543" height="16" font="2"> ....................................................................................................................................31 </text>
<text top="991" left="126" width="44" height="16" font="2">3.2  C</text>
<text top="993" left="170" width="102" height="13" font="13">LOUD COMPUTING </text>
<text top="991" left="273" width="7" height="16" font="2">S</text>
<text top="993" left="280" width="82" height="13" font="13">ECURITY ISSUES</text>
<text top="991" left="362" width="426" height="16" font="2"> ......................................................................................................31 </text>
<text top="1013" left="144" width="35" height="16" font="14"><i>3.2.1</i> </text>
<text top="1013" left="198" width="590" height="16" font="14"><i>Virtualisation issues ...............................................................................................................31</i> </text>
<text top="1035" left="144" width="35" height="16" font="14"><i>3.2.2</i> </text>
<text top="1035" left="198" width="590" height="16" font="14"><i>Side‐channels information leaks ............................................................................................33</i> </text>
<text top="1057" left="144" width="35" height="16" font="14"><i>3.2.3</i> </text>
<text top="1057" left="198" width="590" height="16" font="14"><i>Security Management ............................................................................................................33</i> </text>
<text top="1080" left="126" width="43" height="16" font="2">3.3  S</text>
<text top="1082" left="169" width="63" height="13" font="13">IGNATURES </text>
<text top="1080" left="232" width="10" height="16" font="2">G</text>
<text top="1082" left="242" width="162" height="13" font="13">ENERATION BY THE MEANS OF </text>
<text top="1080" left="404" width="10" height="16" font="2">H</text>
<text top="1082" left="414" width="50" height="13" font="13">ONEYPOT</text>
<text top="1080" left="464" width="323" height="16" font="2"> ............................................................................34 </text>
<text top="1102" left="126" width="46" height="16" font="2">3.4  H</text>
<text top="1104" left="172" width="127" height="13" font="13">ONEYPOTS EVALUATION</text>
<text top="1102" left="299" width="489" height="16" font="2"> ......................................................................................................................36 </text>
<text top="1124" left="144" width="35" height="16" font="14"><i>3.4.1</i> </text>
<text top="1124" left="198" width="590" height="16" font="14"><i>Low/mid interaction honeypots .............................................................................................36</i> </text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="776" width="13" height="18" font="0">7 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="111" left="144" width="35" height="16" font="14"><i>3.4.2</i> </text>
<text top="111" left="198" width="590" height="16" font="14"><i>High interaction honeypot .....................................................................................................37</i> </text>
<text top="133" left="144" width="35" height="16" font="14"><i>3.4.3</i> </text>
<text top="133" left="198" width="590" height="16" font="14"><i>Decision towards a honeypot system .....................................................................................37</i> </text>
<text top="155" left="126" width="44" height="16" font="2">3.5  C</text>
<text top="158" left="170" width="30" height="13" font="13">ROSS </text>
<text top="155" left="200" width="7" height="16" font="2">S</text>
<text top="158" left="208" width="19" height="13" font="13">ITE </text>
<text top="155" left="226" width="7" height="16" font="2">S</text>
<text top="158" left="233" width="52" height="13" font="13">CRIPTING </text>
<text top="155" left="286" width="502" height="16" font="2">(XSS) .................................................................................................................38 </text>
<text top="177" left="144" width="35" height="16" font="14"><i>3.5.1</i> </text>
<text top="177" left="198" width="590" height="16" font="14"><i>Introduction and Decision ......................................................................................................38</i> </text>
<text top="200" left="144" width="35" height="16" font="14"><i>3.5.2</i> </text>
<text top="200" left="198" width="590" height="16" font="14"><i>Injection theory ......................................................................................................................39</i> </text>
<text top="222" left="144" width="35" height="16" font="14"><i>3.5.3</i> </text>
<text top="222" left="198" width="590" height="16" font="14"><i>Detection Rules ......................................................................................................................40</i> </text>
<text top="244" left="144" width="35" height="16" font="14"><i>3.5.4</i> </text>
<text top="244" left="198" width="590" height="16" font="14"><i>Recent Cross Site Scripting Attacks ........................................................................................41</i> </text>
<text top="266" left="162" width="47" height="16" font="2">3.5.4.1 </text>
<text top="266" left="234" width="554" height="16" font="2">A Wide spectrum of websites targeted ........................................................................41 </text>
<text top="288" left="162" width="47" height="16" font="2">3.5.4.2 </text>
<text top="288" left="234" width="554" height="16" font="2">Up to date example: Facebook XSS ...............................................................................41 </text>
<text top="310" left="126" width="43" height="16" font="2">3.6  L</text>
<text top="312" left="169" width="65" height="13" font="13">EGAL ISSUES</text>
<text top="310" left="234" width="554" height="16" font="2"> ......................................................................................................................................42 </text>
<text top="332" left="126" width="44" height="16" font="2">3.7  C</text>
<text top="334" left="170" width="63" height="13" font="13">ONCLUSION</text>
<text top="332" left="233" width="555" height="16" font="2"> .......................................................................................................................................43 </text>
<text top="354" left="108" width="680" height="16" font="12"><b>CHAPTER 4.</b>  <b>DESIGN .......................................................................................................................... 46</b> </text>
<text top="376" left="126" width="40" height="16" font="2">4.1  I</text>
<text top="379" left="166" width="79" height="13" font="13">NTRODUCTION</text>
<text top="376" left="245" width="543" height="16" font="2"> ....................................................................................................................................46 </text>
<text top="399" left="126" width="46" height="16" font="2">4.2  N</text>
<text top="401" left="172" width="49" height="13" font="13">ETWORK </text>
<text top="399" left="221" width="9" height="16" font="2">A</text>
<text top="401" left="230" width="75" height="13" font="13">RCHITECTURE </text>
<text top="399" left="304" width="10" height="16" font="2">O</text>
<text top="401" left="315" width="48" height="13" font="13">VERVIEW</text>
<text top="399" left="363" width="424" height="16" font="2"> ......................................................................................................46 </text>
<text top="421" left="126" width="59" height="16" font="2">4.3  XSS</text>
<text top="423" left="185" width="3" height="13" font="13"> </text>
<text top="421" left="187" width="7" height="16" font="2">S</text>
<text top="423" left="195" width="91" height="13" font="13">IMULATION AND </text>
<text top="421" left="285" width="7" height="16" font="2">L</text>
<text top="423" left="292" width="106" height="13" font="13">OGGING CAPABILITY</text>
<text top="421" left="398" width="390" height="16" font="2"> .............................................................................................48 </text>
<text top="443" left="126" width="46" height="16" font="2">4.4  D</text>
<text top="445" left="172" width="72" height="13" font="13">ETECTION OF </text>
<text top="443" left="243" width="23" height="16" font="2">XSS</text>
<text top="445" left="266" width="79" height="13" font="13"> ATTACKS AND </text>
<text top="443" left="345" width="10" height="16" font="2">G</text>
<text top="445" left="354" width="81" height="13" font="13">ENERATION OF </text>
<text top="443" left="436" width="24" height="16" font="2">ACL</text>
<text top="445" left="460" width="6" height="13" font="13">S</text>
<text top="443" left="466" width="13" height="16" font="2">/S</text>
<text top="445" left="479" width="33" height="13" font="13">NORT </text>
<text top="443" left="512" width="7" height="16" font="2">S</text>
<text top="445" left="519" width="60" height="13" font="13">IGNATURES</text>
<text top="443" left="579" width="209" height="16" font="2"> ...............................................48 </text>
<text top="465" left="144" width="35" height="16" font="14"><i>4.4.1</i> </text>
<text top="465" left="198" width="590" height="16" font="14"><i>Extracting content and IP address .........................................................................................48</i> </text>
<text top="487" left="144" width="35" height="16" font="14"><i>4.4.2</i> </text>
<text top="487" left="198" width="590" height="16" font="14"><i>Programming language decision ...........................................................................................49</i> </text>
<text top="509" left="126" width="44" height="16" font="2">4.5  E</text>
<text top="511" left="170" width="101" height="13" font="13">XPERIMENTATIONS</text>
<text top="509" left="270" width="518" height="16" font="2"> .............................................................................................................................49 </text>
<text top="531" left="144" width="35" height="16" font="14"><i>4.5.1</i> </text>
<text top="531" left="198" width="590" height="16" font="14"><i>Scripts effectiveness ...............................................................................................................50</i> </text>
<text top="553" left="144" width="35" height="16" font="14"><i>4.5.2</i> </text>
<text top="553" left="198" width="590" height="16" font="14"><i>NIDS within Lab environment .................................................................................................50</i> </text>
<text top="575" left="144" width="35" height="16" font="14"><i>4.5.3</i> </text>
<text top="575" left="198" width="590" height="16" font="14"><i>NIDS in Real World simulation ...............................................................................................51</i> </text>
<text top="598" left="144" width="35" height="16" font="14"><i>4.5.4</i> </text>
<text top="598" left="198" width="590" height="16" font="14"><i>Honeypot in Real World simulation .......................................................................................51</i> </text>
<text top="620" left="126" width="44" height="16" font="2">4.6  C</text>
<text top="622" left="170" width="63" height="13" font="13">ONCLUSION</text>
<text top="620" left="233" width="555" height="16" font="2"> .......................................................................................................................................51 </text>
<text top="642" left="108" width="680" height="16" font="12"><b>CHAPTER 5.</b>  <b>IMPLEMENTATION ......................................................................................................... 54</b> </text>
<text top="664" left="126" width="40" height="16" font="2">5.1  I</text>
<text top="666" left="166" width="79" height="13" font="13">NTRODUCTION</text>
<text top="664" left="245" width="543" height="16" font="2"> ....................................................................................................................................54 </text>
<text top="686" left="126" width="44" height="16" font="2">5.2  C</text>
<text top="688" left="170" width="151" height="13" font="13">LOUD CONFIGURATION AND </text>
<text top="686" left="322" width="8" height="16" font="2">T</text>
<text top="688" left="329" width="42" height="13" font="13">EST BED</text>
<text top="686" left="371" width="416" height="16" font="2"> ....................................................................................................54 </text>
<text top="708" left="126" width="40" height="16" font="2">5.3  I</text>
<text top="710" left="166" width="147" height="13" font="13">NSTANCES CONFIGURATION</text>
<text top="708" left="313" width="475" height="16" font="2">...................................................................................................................56 </text>
<text top="730" left="144" width="35" height="16" font="14"><i>5.3.1</i> </text>
<text top="730" left="198" width="590" height="16" font="14"><i>HoneyD ...................................................................................................................................56</i> </text>
<text top="752" left="162" width="47" height="16" font="2">5.3.1.1 </text>
<text top="752" left="234" width="554" height="16" font="2">Basic installation ...........................................................................................................56 </text>
<text top="774" left="162" width="47" height="16" font="2">5.3.1.2 </text>
<text top="774" left="234" width="554" height="16" font="2">Configuration file ..........................................................................................................56 </text>
<text top="797" left="162" width="47" height="16" font="2">5.3.1.3 </text>
<text top="797" left="234" width="554" height="16" font="2">Service script adaptation ..............................................................................................57 </text>
<text top="819" left="162" width="47" height="16" font="2">5.3.1.4 </text>
<text top="819" left="234" width="554" height="16" font="2">Starting HoneyD ............................................................................................................57 </text>
<text top="841" left="144" width="35" height="16" font="14"><i>5.3.2</i> </text>
<text top="841" left="198" width="590" height="16" font="14"><i>Snort .......................................................................................................................................57</i> </text>
<text top="863" left="162" width="47" height="16" font="2">5.3.2.1 </text>
<text top="863" left="234" width="554" height="16" font="2">Network interface .........................................................................................................58 </text>
<text top="885" left="162" width="47" height="16" font="2">5.3.2.2 </text>
<text top="885" left="234" width="554" height="16" font="2">Configuration file ..........................................................................................................58 </text>
<text top="907" left="162" width="47" height="16" font="2">5.3.2.3 </text>
<text top="907" left="234" width="554" height="16" font="2">Starting Snort ................................................................................................................58 </text>
<text top="929" left="144" width="35" height="16" font="14"><i>5.3.3</i> </text>
<text top="929" left="198" width="590" height="16" font="14"><i>Attacker ..................................................................................................................................59</i> </text>
<text top="951" left="162" width="47" height="16" font="2">5.3.3.1 </text>
<text top="951" left="234" width="554" height="16" font="2">XSS list ...........................................................................................................................59 </text>
<text top="973" left="162" width="47" height="16" font="2">5.3.3.2 </text>
<text top="973" left="234" width="554" height="16" font="2">Tcpreplay suite ..............................................................................................................59 </text>
<text top="996" left="126" width="44" height="16" font="2">5.4  P</text>
<text top="998" left="170" width="156" height="13" font="13">ROTOTYPE SCRIPTS CREATION</text>
<text top="996" left="326" width="462" height="16" font="2"> ...............................................................................................................60 </text>
<text top="1018" left="144" width="35" height="16" font="14"><i>5.4.1</i> </text>
<text top="1018" left="198" width="590" height="16" font="14"><i>Scripts overview .....................................................................................................................60</i> </text>
<text top="1040" left="144" width="35" height="16" font="14"><i>5.4.2</i> </text>
<text top="1040" left="198" width="590" height="16" font="14"><i>Snort signature script .............................................................................................................61</i> </text>
<text top="1062" left="144" width="35" height="16" font="14"><i>5.4.3</i> </text>
<text top="1062" left="198" width="590" height="16" font="14"><i>ACL script ................................................................................................................................62</i> </text>
<text top="1084" left="144" width="35" height="16" font="14"><i>5.4.4</i> </text>
<text top="1084" left="198" width="590" height="16" font="14"><i>Snort signature transfer .........................................................................................................63</i> </text>
<text top="1106" left="126" width="44" height="16" font="2">5.5  E</text>
<text top="1108" left="170" width="101" height="13" font="13">XPERIMENTATIONS</text>
<text top="1106" left="270" width="518" height="16" font="2"> .............................................................................................................................63 </text>
<text top="1128" left="144" width="35" height="16" font="14"><i>5.5.1</i> </text>
<text top="1128" left="198" width="590" height="16" font="14"><i>Scripts effectiveness ...............................................................................................................64</i> </text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="776" width="13" height="18" font="0">8 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="111" left="144" width="35" height="16" font="14"><i>5.5.2</i> </text>
<text top="111" left="198" width="590" height="16" font="14"><i>Snort within Lab environment ................................................................................................65</i> </text>
<text top="133" left="144" width="35" height="16" font="14"><i>5.5.3</i> </text>
<text top="133" left="198" width="590" height="16" font="14"><i>Snort in Real World simulation...............................................................................................66</i> </text>
<text top="155" left="144" width="35" height="16" font="14"><i>5.5.4</i> </text>
<text top="155" left="198" width="590" height="16" font="14"><i>HoneyD in Real World simulation ..........................................................................................67</i> </text>
<text top="177" left="126" width="44" height="16" font="2">5.6  C</text>
<text top="180" left="170" width="63" height="13" font="13">ONCLUSION</text>
<text top="177" left="233" width="555" height="16" font="2"> .......................................................................................................................................68 </text>
<text top="200" left="108" width="680" height="16" font="12"><b>CHAPTER 6.</b>  <b>EVALUATION ................................................................................................................. 70</b> </text>
<text top="222" left="126" width="40" height="16" font="2">6.1  I</text>
<text top="224" left="166" width="79" height="13" font="13">NTRODUCTION</text>
<text top="222" left="245" width="543" height="16" font="2"> ....................................................................................................................................70 </text>
<text top="244" left="126" width="43" height="16" font="2">6.2  S</text>
<text top="246" left="169" width="119" height="13" font="13">CRIPTS EFFECTIVENESS</text>
<text top="244" left="288" width="500" height="16" font="2"> .........................................................................................................................70 </text>
<text top="266" left="126" width="43" height="16" font="2">6.3  S</text>
<text top="268" left="169" width="76" height="13" font="13">NORT WITHIN </text>
<text top="266" left="245" width="7" height="16" font="2">L</text>
<text top="268" left="252" width="97" height="13" font="13">AB ENVIRONMENT</text>
<text top="266" left="349" width="439" height="16" font="2"> .........................................................................................................71 </text>
<text top="288" left="126" width="43" height="16" font="2">6.4  S</text>
<text top="290" left="169" width="47" height="13" font="13">NORT IN </text>
<text top="288" left="216" width="9" height="16" font="2">R</text>
<text top="290" left="225" width="22" height="13" font="13">EAL </text>
<text top="288" left="247" width="14" height="16" font="2">W</text>
<text top="290" left="261" width="98" height="13" font="13">ORLD SIMULATION</text>
<text top="288" left="359" width="429" height="16" font="2"> .......................................................................................................73 </text>
<text top="310" left="126" width="46" height="16" font="2">6.5  H</text>
<text top="312" left="172" width="29" height="13" font="13">ONEY</text>
<text top="310" left="201" width="10" height="16" font="2">D</text>
<text top="312" left="211" width="17" height="13" font="13"> IN </text>
<text top="310" left="228" width="9" height="16" font="2">R</text>
<text top="312" left="236" width="22" height="13" font="13">EAL </text>
<text top="310" left="258" width="14" height="16" font="2">W</text>
<text top="312" left="272" width="98" height="13" font="13">ORLD SIMULATION</text>
<text top="310" left="371" width="417" height="16" font="2"> ....................................................................................................74 </text>
<text top="332" left="126" width="45" height="16" font="2">6.6  R</text>
<text top="334" left="171" width="275" height="13" font="13">ESULTS ANALYSIS COMPARED TO EXPECTED RESULTS</text>
<text top="332" left="445" width="342" height="16" font="2"> .................................................................................76 </text>
<text top="354" left="126" width="44" height="16" font="2">6.7  C</text>
<text top="357" left="170" width="63" height="13" font="13">ONCLUSION</text>
<text top="354" left="233" width="555" height="16" font="2"> .......................................................................................................................................77 </text>
<text top="376" left="108" width="680" height="16" font="12"><b>CHAPTER 7.</b>  <b>CONCLUSION ................................................................................................................. 80</b> </text>
<text top="399" left="126" width="40" height="16" font="2">7.1  I</text>
<text top="401" left="166" width="79" height="13" font="13">NTRODUCTION</text>
<text top="399" left="245" width="543" height="16" font="2"> ....................................................................................................................................80 </text>
<text top="421" left="126" width="49" height="16" font="2">7.2  M</text>
<text top="423" left="176" width="126" height="13" font="13">EETING THE OBJECTIVES</text>
<text top="421" left="301" width="487" height="16" font="2">......................................................................................................................80 </text>
<text top="443" left="144" width="35" height="16" font="14"><i>7.2.1</i> </text>
<text top="443" left="198" width="590" height="16" font="14"><i>Objective 1 ..............................................................................................................................80</i> </text>
<text top="465" left="144" width="35" height="16" font="14"><i>7.2.2</i> </text>
<text top="465" left="198" width="590" height="16" font="14"><i>Objective 2 ..............................................................................................................................81</i> </text>
<text top="487" left="144" width="35" height="16" font="14"><i>7.2.3</i> </text>
<text top="487" left="198" width="590" height="16" font="14"><i>Objective 3 ..............................................................................................................................81</i> </text>
<text top="509" left="126" width="44" height="16" font="2">7.3  C</text>
<text top="511" left="170" width="69" height="13" font="13">ONCLUSIONS</text>
<text top="509" left="239" width="549" height="16" font="2"> .....................................................................................................................................81 </text>
<text top="531" left="126" width="44" height="16" font="2">7.4  C</text>
<text top="533" left="170" width="92" height="13" font="13">RITICAL ANALYSIS</text>
<text top="531" left="262" width="526" height="16" font="2"> ...............................................................................................................................82 </text>
<text top="553" left="126" width="43" height="16" font="2">7.5  F</text>
<text top="556" left="169" width="39" height="13" font="13">UTURE </text>
<text top="553" left="208" width="14" height="16" font="2">W</text>
<text top="556" left="222" width="22" height="13" font="13">ORK</text>
<text top="553" left="244" width="544" height="16" font="2"> ....................................................................................................................................83 </text>
<text top="575" left="108" width="680" height="16" font="12"><b>CHAPTER 8.</b>  <b>WORKS CITED ................................................................................................................ 86</b> </text>
<text top="598" left="108" width="88" height="16" font="12"><b>APPENDIX A.</b> </text>
<text top="598" left="216" width="572" height="16" font="12"><b>UNDERSTANDING HONEYD ........................................................................................ 90</b> </text>
<text top="620" left="126" width="29" height="16" font="2">A.1. </text>
<text top="620" left="180" width="7" height="16" font="2">F</text>
<text top="622" left="187" width="47" height="13" font="13">EATURES</text>
<text top="620" left="234" width="553" height="16" font="2"> ......................................................................................................................................90 </text>
<text top="642" left="126" width="29" height="16" font="2">A.2. </text>
<text top="642" left="180" width="9" height="16" font="2">A</text>
<text top="644" left="189" width="131" height="13" font="13">RCHITECTURE OVERVIEW</text>
<text top="642" left="320" width="467" height="16" font="2"> .................................................................................................................91 </text>
<text top="664" left="126" width="29" height="16" font="2">A.3. </text>
<text top="664" left="180" width="8" height="16" font="2">C</text>
<text top="666" left="188" width="106" height="13" font="13">ONFIGURATION FILE</text>
<text top="664" left="294" width="493" height="16" font="2"> .......................................................................................................................93 </text>
<text top="686" left="126" width="29" height="16" font="2">A.4. </text>
<text top="686" left="180" width="7" height="16" font="2">L</text>
<text top="688" left="187" width="106" height="13" font="13">OGGING CAPABILITY</text>
<text top="686" left="293" width="495" height="16" font="2"> ........................................................................................................................93 </text>
<text top="708" left="108" width="87" height="16" font="12"><b>APPENDIX B.</b> </text>
<text top="708" left="216" width="572" height="16" font="12"><b>UNDERSTANDING SNORT .......................................................................................... 95</b> </text>
<text top="730" left="126" width="28" height="16" font="2">B.1. </text>
<text top="730" left="180" width="7" height="16" font="2">S</text>
<text top="732" left="187" width="109" height="13" font="13">NORT COMPONENTS</text>
<text top="730" left="296" width="492" height="16" font="2"> .......................................................................................................................95 </text>
<text top="752" left="126" width="28" height="16" font="2">B.2. </text>
<text top="752" left="180" width="7" height="16" font="2">S</text>
<text top="755" left="187" width="145" height="13" font="13">NORT CONFIGURATION FILE</text>
<text top="752" left="333" width="455" height="16" font="2"> ..............................................................................................................96 </text>
<text top="774" left="126" width="28" height="16" font="2">B.3. </text>
<text top="774" left="180" width="9" height="16" font="2">R</text>
<text top="777" left="189" width="68" height="13" font="13">ULE FORMAT</text>
<text top="774" left="257" width="531" height="16" font="2"> .................................................................................................................................96 </text>
<text top="797" left="144" width="644" height="16" font="14"><i>B.3.1.</i>  <i>Rule header ............................................................................................................................96</i> </text>
<text top="819" left="144" width="644" height="16" font="14"><i>B.3.2.</i>  <i>Rule options ............................................................................................................................97</i> </text>
<text top="841" left="126" width="28" height="16" font="2">B.4. </text>
<text top="841" left="180" width="7" height="16" font="2">S</text>
<text top="843" left="187" width="212" height="13" font="13">TANDARD OUTPUT ALERT AND LOGGING</text>
<text top="841" left="399" width="388" height="16" font="2"> .............................................................................................97 </text>
<text top="863" left="108" width="87" height="16" font="12"><b>APPENDIX C.</b> </text>
<text top="863" left="216" width="572" height="16" font="12"><b>SCRIPT ANALYSIS ....................................................................................................... 98</b> </text>
<text top="885" left="126" width="28" height="16" font="2">C.1. </text>
<text top="885" left="180" width="7" height="16" font="2">S</text>
<text top="887" left="187" width="68" height="13" font="13">NORT SCRIPT</text>
<text top="885" left="256" width="532" height="16" font="2"> .................................................................................................................................98 </text>
<text top="907" left="126" width="28" height="16" font="2">C.2. </text>
<text top="907" left="180" width="24" height="16" font="2">ACL</text>
<text top="909" left="204" width="3" height="13" font="13"> </text>
<text top="907" left="207" width="7" height="16" font="2">S</text>
<text top="909" left="214" width="30" height="13" font="13">CRIPT</text>
<text top="907" left="244" width="544" height="16" font="2"> ....................................................................................................................................99 </text>
<text top="929" left="108" width="88" height="16" font="12"><b>APPENDIX D.</b> </text>
<text top="929" left="216" width="572" height="16" font="12"><b>CONFIGURATION OF A PASSWORD LESS SSH CONNECTION ..................................... 100</b> </text>
<text top="951" left="126" width="29" height="16" font="2">D.1. </text>
<text top="951" left="180" width="7" height="16" font="2">S</text>
<text top="954" left="187" width="62" height="13" font="13">ERVER SIDE </text>
<text top="951" left="250" width="5" height="16" font="2">(</text>
<text top="954" left="254" width="58" height="13" font="13">HONEYPOT</text>
<text top="951" left="313" width="475" height="16" font="2">) .............................................................................................................. 100 </text>
<text top="973" left="126" width="29" height="16" font="2">D.2. </text>
<text top="973" left="180" width="8" height="16" font="2">C</text>
<text top="976" left="188" width="58" height="13" font="13">LIENT SIDE </text>
<text top="973" left="247" width="12" height="16" font="2">(S</text>
<text top="976" left="259" width="30" height="13" font="13">NORT</text>
<text top="973" left="288" width="499" height="16" font="2">) .................................................................................................................... 100 </text>
<text top="996" left="108" width="86" height="16" font="12"><b>APPENDIX E.</b> </text>
<text top="996" left="216" width="572" height="16" font="12"><b>SNORT SIGNATURES CREATED ................................................................................. 101</b> </text>
<text top="1018" left="108" width="86" height="16" font="12"><b>APPENDIX F.</b> </text>
<text top="1018" left="216" width="572" height="16" font="12"><b>GANTT CHART ......................................................................................................... 103</b> </text>
<text top="1040" left="108" width="89" height="16" font="12"><b>APPENDIX G.</b> </text>
<text top="1040" left="216" width="572" height="16" font="12"><b>RESEARCH PROPOSAL .............................................................................................. 103</b> </text>
<text top="1062" left="126" width="29" height="16" font="2">G.1. </text>
<text top="1062" left="180" width="9" height="16" font="2">B</text>
<text top="1064" left="189" width="226" height="13" font="13">RIEF DESCRIPTION OF THE RESEARCH AREA </text>
<text top="1062" left="415" width="5" height="16" font="2">‐</text>
<text top="1064" left="419" width="78" height="13" font="13"> BACKGROUND</text>
<text top="1062" left="498" width="290" height="16" font="2"> ................................................................. 103 </text>
<text top="1084" left="126" width="29" height="16" font="2">G.2. </text>
<text top="1084" left="180" width="8" height="16" font="2">P</text>
<text top="1086" left="188" width="356" height="13" font="13">ROJECT OUTLINE FOR THE WORK THAT YOU PROPOSE TO COMPLETE</text>
<text top="1084" left="545" width="243" height="16" font="2"> ..................................................... 104 </text>
<text top="1106" left="126" width="29" height="16" font="2">G.3. </text>
<text top="1106" left="180" width="8" height="16" font="2">P</text>
<text top="1108" left="188" width="52" height="13" font="13">ROPOSAL </text>
<text top="1106" left="240" width="9" height="16" font="2">R</text>
<text top="1108" left="249" width="59" height="13" font="13">EFERENCES</text>
<text top="1106" left="307" width="481" height="16" font="2"> ................................................................................................................. 106 </text>
<text top="1129" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="15" size="14" family="Times" color="#000000"/>
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="776" width="13" height="18" font="0">9 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="119" left="108" width="237" height="37" font="11">List of Figures </text>
<text top="167" left="108" width="676" height="18" font="0">Figure 1 ‐ Honeypot taxonomy based on (Christian Seifert, 2006) ......................................... 16</text>
<text top="169" left="784" width="4" height="16" font="15"> </text>
<text top="193" left="108" width="676" height="18" font="0">Figure 2 ‐ Low interactivity (Koot, 2007) ................................................................................. 17</text>
<text top="194" left="784" width="4" height="16" font="15"> </text>
<text top="218" left="108" width="676" height="18" font="0">Figure 3 ‐ Medium interactivity (Koot, 2007) .......................................................................... 17</text>
<text top="219" left="784" width="4" height="16" font="15"> </text>
<text top="243" left="108" width="676" height="18" font="0">Figure 4 ‐ High interactivity (Koot, 2007) ................................................................................. 18</text>
<text top="244" left="784" width="4" height="16" font="15"> </text>
<text top="268" left="108" width="676" height="18" font="0">Figure 5 ‐ Honeypot deployment: Research and Production .................................................. 19</text>
<text top="270" left="784" width="4" height="16" font="15"> </text>
<text top="294" left="108" width="676" height="18" font="0">Figure 6 ‐ Network‐based IDS .................................................................................................. 20</text>
<text top="295" left="784" width="4" height="16" font="15"> </text>
<text top="319" left="108" width="676" height="18" font="0">Figure 7 ‐ Host‐based IDS ......................................................................................................... 20</text>
<text top="320" left="784" width="4" height="16" font="15"> </text>
<text top="344" left="108" width="676" height="18" font="0">Figure 8 ‐ Hypervisor Types (Scsami, 2011) ............................................................................. 25</text>
<text top="345" left="784" width="4" height="16" font="15"> </text>
<text top="370" left="108" width="676" height="18" font="0">Figure 9 ‐ VMware ESXi Server (Venezia, 2008) ...................................................................... 26</text>
<text top="371" left="784" width="4" height="16" font="15"> </text>
<text top="395" left="108" width="676" height="18" font="0">Figure 10 ‐ Vulnerable VMs represent a risk (Jarabek, 2009) .................................................. 32</text>
<text top="396" left="784" width="4" height="16" font="15"> </text>
<text top="420" left="108" width="676" height="18" font="0">Figure 11 ‐ Dedicated security VMs update vulnerable VMs (Agastya, 2011) ........................ 32</text>
<text top="421" left="784" width="4" height="16" font="15"> </text>
<text top="445" left="108" width="676" height="18" font="0">Figure 12 ‐ Side‐channels attack (Agastya, 2011) .................................................................... 33</text>
<text top="446" left="784" width="4" height="16" font="15"> </text>
<text top="471" left="108" width="676" height="18" font="0">Figure 13 ‐ Statistics of top attacks 2011 (WHID, 2011) .......................................................... 39</text>
<text top="472" left="784" width="4" height="16" font="15"> </text>
<text top="496" left="108" width="676" height="18" font="0">Figure 14 ‐ Facebook XSS text prompt (Harmonyguy, 2011) ................................................... 41</text>
<text top="497" left="784" width="4" height="16" font="15"> </text>
<text top="521" left="108" width="676" height="18" font="0">Figure 15 ‐ Facebook XSS Javascript (Harmonyguy, 2011) ...................................................... 42</text>
<text top="522" left="784" width="4" height="16" font="15"> </text>
<text top="546" left="108" width="676" height="18" font="0">Figure 16 ‐ Network Architecture Design ................................................................................ 47</text>
<text top="548" left="784" width="4" height="16" font="15"> </text>
<text top="572" left="108" width="676" height="18" font="0">Figure 17 ‐ Flow chart paths choices for incoming packets ..................................................... 47</text>
<text top="573" left="784" width="4" height="16" font="15"> </text>
<text top="597" left="108" width="676" height="18" font="0">Figure 18 ‐ Experiments summary ........................................................................................... 50</text>
<text top="598" left="784" width="4" height="16" font="15"> </text>
<text top="622" left="108" width="676" height="18" font="0">Figure 19 ‐ Deployment of instances ....................................................................................... 55</text>
<text top="623" left="784" width="4" height="16" font="15"> </text>
<text top="647" left="108" width="676" height="18" font="0">Figure 20 ‐ Instances implementation overview ..................................................................... 55</text>
<text top="649" left="784" width="4" height="16" font="15"> </text>
<text top="673" left="108" width="676" height="18" font="0">Figure 21 ‐ Flow Chart Snort Script prototype ......................................................................... 60</text>
<text top="674" left="784" width="4" height="16" font="15"> </text>
<text top="698" left="108" width="676" height="18" font="0">Figure 22 ‐ Flow Chart ACL script prototype ............................................................................ 60</text>
<text top="699" left="784" width="4" height="16" font="15"> </text>
<text top="723" left="108" width="676" height="18" font="0">Figure 23 ‐ UML Sequence Experiments model ....................................................................... 64</text>
<text top="724" left="784" width="4" height="16" font="15"> </text>
<text top="749" left="108" width="676" height="18" font="0">Figure 24 ‐ Wireshark capture honeyd_attack.pcap ............................................................... 65</text>
<text top="750" left="784" width="4" height="16" font="15"> </text>
<text top="774" left="108" width="676" height="18" font="0">Figure 25 ‐ Snort Lab results .................................................................................................... 72</text>
<text top="775" left="784" width="4" height="16" font="15"> </text>
<text top="799" left="108" width="676" height="18" font="0">Figure 26 ‐ Snort log file lab ..................................................................................................... 72</text>
<text top="800" left="784" width="4" height="16" font="15"> </text>
<text top="824" left="108" width="676" height="18" font="0">Figure 27 ‐ Real world Snort alerts .......................................................................................... 73</text>
<text top="825" left="784" width="4" height="16" font="15"> </text>
<text top="850" left="108" width="676" height="18" font="0">Figure 28 ‐ Chart XSS injection latency according to the background traffic speed ............... 75</text>
<text top="851" left="784" width="4" height="16" font="15"> </text>
<text top="875" left="108" width="676" height="18" font="0">Figure 29 ‐ Chart attacks detected according to the background traffic speed ...................... 75</text>
<text top="876" left="784" width="4" height="16" font="15"> </text>
<text top="900" left="108" width="676" height="18" font="0">Figure 30 ‐ Error message HoneyD with background traffic at 2mbps ................................... 76</text>
<text top="901" left="784" width="4" height="16" font="15"> </text>
<text top="925" left="108" width="676" height="18" font="0">Figure 31 ‐ HoneyD architecture (Provos, 2007) ..................................................................... 92</text>
<text top="927" left="784" width="4" height="16" font="15"> </text>
<text top="951" left="108" width="676" height="18" font="0">Figure 32 ‐ Snort components overview based on (Snort, 2011) ............................................ 95</text>
<text top="952" left="784" width="4" height="16" font="15"> </text>
<text top="1002" left="108" width="221" height="37" font="11"> List of Tables</text>
<text top="1015" left="329" width="4" height="18" font="0"> </text>
<text top="1050" left="108" width="676" height="18" font="0">Table 1 ‐ Confusion Matrix ....................................................................................................... 22</text>
<text top="1051" left="784" width="4" height="16" font="15"> </text>
<text top="1075" left="108" width="676" height="18" font="0">Table 2 ‐ Differences between each level of involvement based on (Mishra, 2004) .............. 37</text>
<text top="1076" left="784" width="4" height="16" font="15"> </text>
<text top="1100" left="108" width="676" height="18" font="0">Table 3 ‐ Special characters specification based on (Mookhey, et al., 2010) .......................... 40</text>
<text top="1101" left="784" width="4" height="16" font="15"> </text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">10 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="122" left="108" width="346" height="37" font="11">  Acknowledgements </text>
<text top="173" left="108" width="4" height="18" font="0"> </text>
<text top="205" left="108" width="681" height="18" font="0">This  dissertation  would  not  have  been  possible  unless  my  supervisor  Professor  William  J. </text>
<text top="230" left="108" width="681" height="18" font="0">Buchanan. Thank you for giving me access to Edinburgh Napier cloud computing, for helping </text>
<text top="255" left="108" width="681" height="18" font="0">me refine my ideas, giving me valuable advices and answering to the numerous amounts of </text>
<text top="280" left="108" width="234" height="18" font="0">emails sent during this project.  </text>
<text top="312" left="108" width="681" height="18" font="0">Moreover, I would like to thank Mr Alistair Lawson, my second marker, for the time spent </text>
<text top="337" left="108" width="392" height="18" font="0">reviewing this thesis and taking part to the viva voce. </text>
<text top="368" left="108" width="681" height="18" font="0">Finally  and  not  least,  I  would  like  to  thank  Ms  Selina  Kubo  for  the  proof  reading  and  the </text>
<text top="393" left="108" width="334" height="18" font="0">moral support throughout the whole project. </text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">11 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="16" size="23" family="Times" color="#000000"/>
	<fontspec id="17" size="23" family="Helvetica" color="#000000"/>
<text top="57" left="361" width="175" height="18" font="0">Chapter 1  Introduction </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">12 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="158" left="108" width="165" height="37" font="11">Chapter 1.</text>
<text top="158" left="273" width="10" height="33" font="6"> </text>
<text top="158" left="324" width="210" height="37" font="11">Introduction </text>
<text top="237" left="108" width="32" height="26" font="16">1.1</text>
<text top="237" left="140" width="7" height="24" font="17"> </text>
<text top="237" left="182" width="95" height="26" font="16">Context </text>
<text top="283" left="108" width="681" height="18" font="0">With the increasing migration towards cloud computing, it was obvious that working on a </text>
<text top="308" left="108" width="681" height="18" font="0">subject  related  to  the  cloud  would  be  an  interesting  topic.  After  reading  about  this </text>
<text top="333" left="108" width="681" height="18" font="0">technology, the main issues that were repeatedly highlighted were the security issues. The </text>
<text top="358" left="108" width="681" height="18" font="0">security  issues  concerning  data  privacy  and  protection  are  major  factors  that  deter  some </text>
<text top="384" left="108" width="681" height="18" font="0">companies from moving to the cloud. Based on these findings, the choice was taken to work </text>
<text top="409" left="108" width="681" height="18" font="0">in  the  area  of  Cloud  Computing  Security.  Luckily,  Edinburgh  Napier  University  started  to </text>
<text top="434" left="108" width="681" height="18" font="0">migrate to the Cloud Computing at the beginning of the year 2011 and was proposing to its </text>
<text top="460" left="108" width="681" height="18" font="0">students to devise their network laboratory work through instances emulated by the cloud. </text>
<text top="485" left="108" width="681" height="18" font="0">Therefore,  after  agreement  with  Prof  Bill  Buchanan,  it  was  possible  for  this  project  to  be </text>
<text top="510" left="108" width="681" height="18" font="0">implemented  within  the  University  cloud.  After  further  research,  a  way  to  detect  attacks </text>
<text top="535" left="108" width="681" height="18" font="0">and intruders was found by setting up a fake server, known as honeypot, able to lure them. </text>
<text top="561" left="108" width="681" height="18" font="0">The  implementation  of  a  honeypot  within  the  cloud  computing  seemed  to  be  interesting </text>
<text top="586" left="108" width="681" height="18" font="0">project and a deeper investigation was carried out through the three technologies involved </text>
<text top="611" left="108" width="681" height="18" font="0">in this project, Honeypot systems, Intrusion Detection System (IDS) and Cloud Computing. </text>
<text top="636" left="108" width="681" height="18" font="0">These  technologies  are  analysed  and  compared  in  the  next  chapter,  in  order  to  provide  a </text>
<text top="662" left="108" width="261" height="18" font="0">good understanding to the reader.  </text>
<text top="716" left="108" width="32" height="26" font="16">1.2</text>
<text top="716" left="140" width="7" height="24" font="17"> </text>
<text top="716" left="182" width="144" height="26" font="16">Background </text>
<text top="762" left="108" width="681" height="18" font="0">It is no secret that cloud computing is becoming popular  with large companies nowadays, </text>
<text top="787" left="108" width="681" height="18" font="0">mainly  because  they  share  valuable  resources  in  a  cost  effective  way.  This  is  just  the </text>
<text top="812" left="108" width="681" height="18" font="0">beginning  of  the  cloud  computing,  an  independent  research  firm  “Forrester  Research” </text>
<text top="838" left="108" width="681" height="18" font="0">expects the global cloud computing market to grow from $40.7 billion in 2011 to more than </text>
<text top="863" left="108" width="681" height="18" font="0">$241  billion  in  2020  (Ried,  et  al.,  April  2011).  This  increasing  migration  towards  cloud </text>
<text top="888" left="108" width="681" height="18" font="0">computing results in an escalating security threat, which is becoming a major issue. Many </text>
<text top="913" left="108" width="681" height="18" font="0">studies (McDonald, 2011) (Wolf, 2010) show that there are major security issues to take in </text>
<text top="939" left="108" width="681" height="18" font="0">consideration  before  moving  onto  the  cloud.  The  cloud  has  even  been  called  “security </text>
<text top="964" left="108" width="443" height="18" font="0">nightmare” by John Chambers, Cisco CEO (McMillan, 2009).  </text>
<text top="995" left="108" width="681" height="18" font="0">On  the  other  hand,  there  is  a  wide  repertoire  of  hacking  techniques  used  by  pirates  to </text>
<text top="1021" left="108" width="681" height="18" font="0">gather  sensitive  data  and  stolen  credentials  from  web  servers.  According  to  the  Web </text>
<text top="1046" left="108" width="681" height="18" font="0">Hacking  Incident  Database  (WHID,  2011),  most  popular  attacks  concern  SQL  injections, </text>
<text top="1071" left="108" width="681" height="18" font="0">Cross Site Scripting (XSS) and Denial of Service (DoS). The SQL injections and DoS attacks are </text>
<text top="1096" left="108" width="681" height="18" font="0">often making the headlines of the news but the poorly‐known XSS attacks are kept in the </text>
<text top="1122" left="108" width="681" height="18" font="0">shadows. However, these XSS attacks, according to the WHID, are currently the second most </text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="18" size="16" family="Helvetica" color="#000000"/>
	<fontspec id="19" size="16" family="Times" color="#000000"/>
<text top="57" left="361" width="175" height="18" font="0">Chapter 1  Introduction </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">13 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">used attacks and associated with 12.58% of the overall attacks on the web. Moreover, XSS </text>
<text top="137" left="108" width="681" height="18" font="0">attacks  can  easily  pass  through  Intrusion  Detection  System  (IDS),  such  as  Snort,  without </text>
<text top="162" left="108" width="681" height="18" font="0">being  detected  as  it  lacks  the  ability  to  detect  XSS  attacks  using  hex‐encoded  values </text>
<text top="187" left="108" width="179" height="18" font="0">(Mookhey, et al., 2010). </text>
<text top="219" left="108" width="681" height="18" font="0">The migration of networks and servers over the cloud involves that XSS attacks are, or will </text>
<text top="244" left="108" width="681" height="18" font="0">be  soon,  aimed  at  cloud‐based  Web  servers.  This  report  aims  to  investigate  this  issue  by </text>
<text top="269" left="108" width="681" height="18" font="0">implementing a cloud‐based honeypot that simulates a fake Web server able to detect XSS </text>
<text top="294" left="108" width="681" height="18" font="0">attacks. The XSS attacks detected are used to generate Access Control Lists (ACLs) and IDS </text>
<text top="320" left="108" width="599" height="18" font="0">Signatures that will be implemented in the router and IDS to block future attacks. </text>
<text top="374" left="108" width="32" height="26" font="16">1.3</text>
<text top="374" left="140" width="7" height="24" font="17"> </text>
<text top="374" left="182" width="240" height="26" font="16">Aims and Objectives </text>
<text top="420" left="108" width="681" height="18" font="0">The aim of this project is to automatically detect XSS attacks and generate Snort signatures </text>
<text top="445" left="108" width="681" height="18" font="0">to block similar future attacks. To do so, a honeypot, that simulates a Webserver and handle </text>
<text top="470" left="108" width="681" height="18" font="0">the  XSS  attacks,  will  be  implemented  on  the  cloud  computing  of  Edinburgh  Napier </text>
<text top="496" left="108" width="681" height="18" font="0">University.  This  project  has  a  scientific  interest  as  it  should  complete  the  literature  in  the </text>
<text top="521" left="108" width="681" height="18" font="0">area of Intrusion Detection Signatures by providing an automatic way to detect attacks and </text>
<text top="546" left="108" width="681" height="18" font="0">generate Snort signatures. In order to achieve this project, the following objectives must be </text>
<text top="571" left="108" width="74" height="18" font="0">achieved: </text>
<text top="603" left="140" width="14" height="18" font="0">1.</text>
<text top="603" left="153" width="5" height="17" font="18"> </text>
<text top="603" left="167" width="623" height="18" font="0">Review  and  investigate  the  existing  literature  about  security  issues  related  to  the </text>
<text top="628" left="167" width="623" height="18" font="0">cloud computing. In addition, critically evaluate the previous work in generating IDS </text>
<text top="653" left="167" width="623" height="18" font="0">signatures  and  compare  different  honeypot  systems.  Finally,  analyse  a  specific </text>
<text top="678" left="167" width="295" height="18" font="0">attacking method and ways to detect it. </text>
<text top="704" left="139" width="14" height="18" font="0">2.</text>
<text top="704" left="153" width="5" height="17" font="18"> </text>
<text top="704" left="166" width="623" height="18" font="0">Design  some  scripts  to  generate  IDS  signatures  every  time  that  an  attack  is </text>
<text top="729" left="167" width="623" height="18" font="0">detected. Design some cloud‐based experiments that will show the effectiveness of </text>
<text top="754" left="167" width="518" height="18" font="0">the scripts created in detecting attacks and generating IDS signatures.  </text>
<text top="779" left="140" width="14" height="18" font="0">3.</text>
<text top="780" left="153" width="5" height="17" font="18"> </text>
<text top="779" left="167" width="623" height="18" font="0">Conduct  the  final  evaluation  based  on  the  results  collected  from  the  experiments. </text>
<text top="805" left="167" width="525" height="18" font="0">This evaluation should present the effectiveness of the scripts created.  </text>
<text top="859" left="108" width="32" height="26" font="16">1.4</text>
<text top="859" left="140" width="7" height="24" font="17"> </text>
<text top="859" left="182" width="156" height="26" font="16">Thesis layout </text>
<text top="905" left="108" width="385" height="18" font="0">The remainder of this report is organised as follows: </text>
<text top="932" left="135" width="8" height="22" font="0"></text>
<text top="938" left="143" width="5" height="17" font="18"> </text>
<text top="937" left="162" width="627" height="18" font="19"><b>Chapter 2 – Technologies review: </b>The first chapter provides a basic understanding </text>
<text top="962" left="162" width="627" height="18" font="0">for  the  reader  about  the  four  technologies  used  throughout  this  project.  This </text>
<text top="988" left="162" width="627" height="18" font="0">understanding is required in the next chapter, Literature Review, which investigates </text>
<text top="1013" left="162" width="440" height="18" font="0">further into contrasting these technologies and their issues.<b> </b></text>
<text top="1035" left="135" width="8" height="22" font="0"></text>
<text top="1040" left="143" width="5" height="17" font="18"> </text>
<text top="1039" left="162" width="627" height="18" font="19"><b>Chapter  3  –  Literature  review:</b>  This  chapter  critically  reviews  the  literature  in  the </text>
<text top="1064" left="162" width="627" height="18" font="0">area of cloud computing security issues, signature generation using honeypots, legal </text>
<text top="1090" left="162" width="627" height="18" font="0">issues  concerning  honeypot’s  implementation  and  cross  site  scripting  attacks.  In </text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="361" width="175" height="18" font="0">Chapter 1  Introduction </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">14 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="162" width="627" height="18" font="0">addition, a comparison of multiple honeypot system is carried out to determine the </text>
<text top="137" left="162" width="298" height="18" font="0">honeypot the most suited for this study.<b> </b></text>
<text top="158" left="135" width="8" height="22" font="0"></text>
<text top="164" left="143" width="5" height="17" font="18"> </text>
<text top="163" left="162" width="627" height="18" font="19"><b>Chapter  4  –  Design:  </b>This  chapter  presents  a  design  of  the  scripts  required  to </text>
<text top="188" left="162" width="627" height="18" font="0">generate  ACLs  and  Snort  signatures.  This  script  design  provides  a  good </text>
<text top="214" left="162" width="627" height="18" font="0">understanding  of  the  functions  required  and  help  in  making  a  decision  towards  an </text>
<text top="239" left="162" width="627" height="18" font="0">appropriate  programming  language.  The  methodology  used  in  the  experiments  is </text>
<text top="264" left="162" width="347" height="18" font="0">introduced and expected results are projected.<b> </b></text>
<text top="286" left="135" width="8" height="22" font="0"></text>
<text top="291" left="143" width="5" height="17" font="18"> </text>
<text top="290" left="162" width="627" height="18" font="19"><b>Chapter  5  –  Implementation:  </b>This  chapter  deploys  and  configure  the  instances </text>
<text top="316" left="162" width="627" height="18" font="0">required for the experiments. The experiments designed in the previous chapter are </text>
<text top="341" left="162" width="339" height="18" font="0">carried out and the resulting data is collected.<b> </b></text>
<text top="363" left="135" width="8" height="22" font="0"></text>
<text top="368" left="143" width="5" height="17" font="18"> </text>
<text top="367" left="162" width="627" height="18" font="19"><b>Chapter  6  –  Evaluation:</b>  This  chapter  evaluates  the  effectiveness  of  the  prototype </text>
<text top="392" left="162" width="627" height="18" font="0">created,  by  analysing  the  data  collected  during  the  experiments.  In  addition,  the </text>
<text top="418" left="162" width="564" height="18" font="0">results of the evaluation are compared to the results expected in the Design.<b> </b></text>
<text top="439" left="135" width="8" height="22" font="0"></text>
<text top="444" left="143" width="5" height="17" font="18"> </text>
<text top="444" left="162" width="627" height="18" font="19"><b>Chapter 7 – Conclusion: </b>This chapter provides a summary of the main findings and </text>
<text top="469" left="162" width="627" height="18" font="0">compares  them  with  the  initial  objectives.  A  critical  evaluation  of  the  project  is </text>
<text top="494" left="162" width="381" height="18" font="0">carried out and advice for future work is suggested. </text>
<text top="526" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="15" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="108" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">15 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="20" size="16" family="Times" color="#000000"/>
	<fontspec id="21" size="11" family="Times" color="#948a54"/>
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">16 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="152" left="108" width="165" height="37" font="11">Chapter 2.</text>
<text top="152" left="273" width="10" height="33" font="6"> </text>
<text top="152" left="324" width="347" height="37" font="11">Technologies Review </text>
<text top="231" left="108" width="32" height="26" font="16">2.1</text>
<text top="231" left="140" width="7" height="24" font="17"> </text>
<text top="231" left="182" width="149" height="26" font="16">Introduction </text>
<text top="277" left="108" width="681" height="18" font="0">This project aims to detect attacks targeting a cloud‐based server. In order to detect these </text>
<text top="302" left="108" width="681" height="18" font="0">attacks, a honeypot is used to simulate a fake server and log any interaction with a malicious </text>
<text top="327" left="108" width="681" height="18" font="0">user.  This  chapter  provides  a  good  background  and  understanding  about  the  three  main </text>
<text top="352" left="108" width="681" height="18" font="0">technologies used all along this paper: Honeypot, Cloud Computing, IDS and an up to date </text>
<text top="378" left="108" width="681" height="18" font="0">overview  of  the  most  popular  attacks  used  by  pirates  to  gather  sensitive  data  and  stolen </text>
<text top="403" left="108" width="89" height="18" font="0">credentials. </text>
<text top="457" left="108" width="32" height="26" font="16">2.2</text>
<text top="457" left="140" width="7" height="24" font="17"> </text>
<text top="457" left="182" width="216" height="26" font="16">Honeypot systems </text>
<text top="503" left="108" width="681" height="18" font="0">Honeypots  are  not  defensive  security  systems  as  Intrusion  Detection  Systems  (IDS)  and </text>
<text top="528" left="108" width="681" height="18" font="0">Firewalls  as  they  do  not  tend  to  protect  the  network  but  lean  towards  attracting  the </text>
<text top="554" left="108" width="681" height="18" font="0">intruder.  According  to  L.  Spitzner,  a  honeypot  is  “<i>an  information  system  resource  whose </i></text>
<text top="579" left="108" width="681" height="18" font="20"><i>value lies in unauthorized of illicit use of that resource”</i> (Spitzner, 2003). Honeypot systems </text>
<text top="604" left="108" width="681" height="18" font="0">are fake information (server or client) able to run multiple services, such as FTP, SQL, Web, </text>
<text top="629" left="108" width="681" height="18" font="0">SSH,  etc.  These  services  are  configured  using  weak  security  mechanisms,  making  them </text>
<text top="655" left="108" width="681" height="18" font="0">highly  interesting  for  an  intruder  in  search  for  an  easy  target.  Logging  mechanisms  are </text>
<text top="680" left="108" width="681" height="18" font="0">loaded with monitoring and tracking tools, which make them able to capture data resulting </text>
<text top="705" left="108" width="681" height="18" font="0">from an illicit access such as attacks techniques, events and intrusions. When more than a </text>
<text top="731" left="108" width="681" height="18" font="0">single  honeypot  system  is  used  in  a  network,  they  form  a  network  of  honeypot  called </text>
<text top="756" left="108" width="681" height="18" font="20"><i>Honeynet</i>.  The  following  Figure  1  represents  an  overview  of  the  taxonomy  of  a  honeypot </text>
<text top="781" left="108" width="64" height="18" font="0">system.  </text>
<text top="1119" left="716" width="4" height="18" font="0"> </text>
<text top="1138" left="267" width="362" height="14" font="21"><b>Figure 1 ‐ Honeypot taxonomy based on (Christian Seifert, 2006) </b></text>
</page>
<page number="17" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="22" size="22" family="Times" color="#000000"/>
	<fontspec id="23" size="22" family="Helvetica" color="#000000"/>
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">17 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="48" height="24" font="22">2.2.1</text>
<text top="116" left="156" width="7" height="22" font="23"> </text>
<text top="116" left="162" width="226" height="24" font="22">Level of interactivity </text>
<text top="149" left="108" width="681" height="18" font="0">A  honeypot  can  offer  three  levels  of  interaction  from  low  to  the  high  or  in  between.  The </text>
<text top="174" left="108" width="681" height="18" font="0">higher the interaction is, the more liberty of movement will be provided to an attacker and </text>
<text top="199" left="108" width="681" height="18" font="0">the  more  data  will  be  collected  about  that  attack.  However,  a  high  level  of  interaction </text>
<text top="225" left="108" width="681" height="18" font="0">induces a high risk of potential damages (Spitzner, 2002). The following description provides </text>
<text top="250" left="108" width="637" height="18" font="0">an evaluation of the three types of honeypots with their advantages and inconvenient. </text>
<text top="287" left="162" width="59" height="25" font="1">2.2.1.1</text>
<text top="291" left="221" width="6" height="19" font="7"> </text>
<text top="287" left="227" width="241" height="25" font="1">	Low	interaction	honeypot	</text>
<text top="318" left="108" width="681" height="18" font="0">A  low  interaction  honeypot  provides  a  limited  communication  between  the  honeypot  and </text>
<text top="344" left="108" width="681" height="18" font="0">the  attacker,  seen  Figure  2.  Low  interaction  honeypots  offer  the  possibility  to  emulate </text>
<text top="369" left="108" width="681" height="18" font="0">network  services  on  preconfigured  port,  such  as  FTP,  SQL,  Web,  SSH,  etc.  However,  these </text>
<text top="394" left="108" width="681" height="18" font="0">services  are  restricted  to  only  reply  to  basic  queries  (such  as  a  ping  or  a  connection </text>
<text top="419" left="108" width="78" height="18" font="0">attempt).  </text>
<text top="460" left="108" width="366" height="18" font="19"><b>Advantage</b>s:  the  ease  of  installation  and </text>
<text top="485" left="108" width="366" height="18" font="0">configuration,  as  well  as  a  low  risk  of  potential </text>
<text top="510" left="108" width="179" height="18" font="0">damage by an attacker.  </text>
<text top="542" left="108" width="366" height="18" font="19"><b>Inconvenient:</b>  the  collections  of  information  are </text>
<text top="567" left="108" width="366" height="18" font="0">limited to the date/time of the connection, the IP </text>
<text top="592" left="108" width="366" height="18" font="0">source  and  the  source/destination  ports. </text>
<text top="617" left="108" width="366" height="18" font="0">Therefore,  they  are  mostly  used  to  detect </text>
<text top="643" left="108" width="311" height="18" font="0">unauthorized connections in the network. </text>
<text top="679" left="162" width="59" height="25" font="1">2.2.1.2</text>
<text top="684" left="221" width="6" height="19" font="7"> </text>
<text top="679" left="227" width="187" height="25" font="1">	Medium	interaction	</text>
<text top="711" left="108" width="681" height="18" font="0">A  medium  interaction  honeypot  collects  more  information  about  attacks  than  a  low </text>
<text top="736" left="108" width="681" height="18" font="0">interaction,  by  giving  the  ability  to  the  attacker  to  interact  a  bit  more  with  the  honeypot, </text>
<text top="762" left="108" width="681" height="18" font="0">seen Figure 3. This medium interaction takes the attacker a step further and the honeypot is </text>
<text top="787" left="108" width="681" height="18" font="0">now  able  to  reply  to  specific  commands,  by  using  preconfigured  messages.  The  services </text>
<text top="812" left="108" width="681" height="18" font="0">emulated  are  programmed  in  some  templates,  which  provide  the  list  of  the  authorized </text>
<text top="838" left="108" width="681" height="18" font="0">commands  with  their  specific  replies.  In  the  case  of  a  command  being  received  by  the </text>
<text top="863" left="108" width="681" height="18" font="0">honeypot that does not match any authorized commands, a message “command unknown” </text>
<text top="888" left="108" width="103" height="18" font="0">is generated.  </text>
<text top="913" left="108" width="375" height="18" font="19"><b>Advantages</b>:  the  data  collected  is  more </text>
<text top="939" left="108" width="375" height="18" font="0">advantageous  than  a  low  interaction  honeypot, </text>
<text top="964" left="108" width="375" height="18" font="0">due to a higher interaction. In terms of security, a </text>
<text top="989" left="108" width="375" height="18" font="0">low  risk  of  potential  intrusion  is  expected  as  the </text>
<text top="1014" left="108" width="75" height="18" font="0">honeypot </text>
<text top="1014" left="203" width="35" height="18" font="0">only </text>
<text top="1014" left="258" width="57" height="18" font="0">answer </text>
<text top="1014" left="336" width="20" height="18" font="0">to </text>
<text top="1014" left="376" width="108" height="18" font="0">preconfigured </text>
<text top="1040" left="108" width="89" height="18" font="0">commands. </text>
<text top="1065" left="108" width="375" height="18" font="19"><b>Inconvenient:  </b>the  attacker  generally,  quickly </text>
<text top="1090" left="108" width="375" height="18" font="0">discovers  that  the  system  does  not  behave  as  it </text>
<text top="1115" left="108" width="58" height="18" font="0">should. </text>
<text top="677" left="528" width="221" height="14" font="21"><b>Figure 2 ‐ Low interactivity (Koot, 2007)</b></text>
<text top="1120" left="516" width="245" height="14" font="21"><b>Figure 3 ‐ Medium interactivity (Koot, 2007)</b></text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">18 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="108" left="162" width="59" height="25" font="1">2.2.1.3</text>
<text top="113" left="221" width="6" height="19" font="7"> </text>
<text top="108" left="227" width="160" height="25" font="1">	High	interaction		</text>
<text top="140" left="108" width="681" height="18" font="0">High interaction honeypots operate on real systems and provide the attacker the possibility </text>
<text top="165" left="108" width="681" height="18" font="0">to break into the operating system and take control over it, represented Figure 4. There are </text>
<text top="190" left="108" width="681" height="18" font="0">no  more  limited  commands  like  in  the  medium  interaction  honeypot,  the  attacker  is  now </text>
<text top="216" left="108" width="681" height="18" font="0">able  to  fully  interact  with  a  the  whole  operating  system  and  its  applications.  Multiple </text>
<text top="241" left="108" width="681" height="18" font="0">sensors are installed on the honeypot and collect all the data used by the attacker, such as </text>
<text top="266" left="108" width="604" height="18" font="0">toolkits uploaded, keystrokes typed in and network data flow (Awad Johny, 2009). </text>
<text top="291" left="108" width="681" height="18" font="19"><b>Advantages:</b> all the interaction of the hacker and all the files uploaded are captured by the </text>
<text top="317" left="108" width="681" height="18" font="0">honeypot.  It  provides  a  vast  amount  of  information  for  the  researcher  about  unknown </text>
<text top="342" left="108" width="271" height="18" font="0">attack and previously known attack.  </text>
<text top="367" left="108" width="375" height="18" font="19"><b>Inconvenient:  </b>the  setup  of  the  honeypot  is  time </text>
<text top="392" left="108" width="375" height="18" font="0">consuming:  Firstly,  it  must  be  customized  and </text>
<text top="418" left="108" width="375" height="18" font="0">configured to the only applications needed for the </text>
<text top="443" left="108" width="375" height="18" font="0">experiment.  Secondly,  the  vast  amount  of  data </text>
<text top="468" left="108" width="375" height="18" font="0">gathered  must  be  scrutinized  by  researchers  in </text>
<text top="494" left="108" width="375" height="18" font="0">order  to  determine  the  aim  of  the  attacker. </text>
<text top="519" left="108" width="375" height="18" font="0">Moreover,  this  type  of  honeypot  must  be  always </text>
<text top="544" left="108" width="375" height="18" font="0">behind  a  firewall  and  constantly  monitored  in </text>
<text top="569" left="108" width="375" height="18" font="0">order to reduce the risk of a nasty attacker, which </text>
<text top="595" left="108" width="375" height="18" font="0">might  compromise  the  honeypot  and  use  it  to </text>
<text top="620" left="108" width="375" height="18" font="0">spread  attacks  to  other  systems  (Awad  Johny, </text>
<text top="645" left="108" width="51" height="18" font="0">2009). </text>
<text top="690" left="108" width="48" height="24" font="22">2.2.2</text>
<text top="690" left="156" width="7" height="22" font="23"> </text>
<text top="690" left="162" width="259" height="24" font="22">Purpose of Deployment </text>
<text top="723" left="108" width="681" height="18" font="0">The deployment of a honeypots can be categorised into two categories, research honeypots </text>
<text top="748" left="108" width="364" height="18" font="0">and production honeypots, represented Figure 5: </text>
<text top="779" left="108" width="681" height="18" font="19"><b>Research  honeypots</b>  are  deployed  at  in  a  non‐secure  zone  and  are  used  primarily  for  a </text>
<text top="805" left="108" width="681" height="18" font="0">medium  or  high  interaction.  This  kind  of  honeypot  can  be  deployed  in  the  outside  of  the </text>
<text top="830" left="108" width="681" height="18" font="0">network  or  in  the  Demilitarize  Zone  (DMZ).  They  are  used  to  collect  the  maximum  of </text>
<text top="855" left="108" width="681" height="18" font="0">information about new attacks, such as new toolkits used by attackers and commands used </text>
<text top="880" left="108" width="681" height="18" font="0">to break into the system. All this information is analysed by researchers in order to create </text>
<text top="906" left="108" width="681" height="18" font="0">new  antivirus  or  IDS  signatures  that  aim  to  improve  the  system  defence  against  future </text>
<text top="931" left="108" width="681" height="18" font="0">attacks. However, research honeypots need to be under constant supervision in reason of </text>
<text top="956" left="108" width="681" height="18" font="0">their  dangerous  location  on  the  outside  of  the  network  and  their  high  interactivity,  which </text>
<text top="981" left="108" width="296" height="18" font="0">make them an easy target for attackers. </text>
<text top="1013" left="108" width="681" height="18" font="19"><b>Production  honeypots</b>  are  deployed  inside  secure  environments  with  the  aim  to  attract </text>
<text top="1038" left="108" width="681" height="18" font="0">intruders  away  from  critical  systems.  Usually,  a  low  interaction  honeypot  is  used  in  the </text>
<text top="1063" left="108" width="681" height="18" font="0">production network, as we do not want an attacker to take over the system. These kinds of </text>
<text top="1088" left="108" width="681" height="18" font="0">honeypots  are  also  used  to  discover  if  an  attacker  made  his  way  into  the  production </text>
<text top="1114" left="108" width="681" height="18" font="0">network and fooled the security equipment. In addition, this honeypot gives the possibility </text>
<text top="612" left="538" width="223" height="14" font="21"><b>Figure 4 ‐ High interactivity (Koot, 2007)</b></text>
</page>
<page number="19" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">19 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">to detect insiders trying to hack into the production network or Worms/Trojans spreading </text>
<text top="137" left="108" width="112" height="18" font="0">automatically.  </text>
<text top="594" left="725" width="4" height="18" font="0"> </text>
<text top="620" left="282" width="331" height="14" font="21"><b>Figure 5 ‐ Honeypot deployment: Research and Production </b></text>
<text top="666" left="108" width="32" height="26" font="16">2.3</text>
<text top="666" left="140" width="7" height="24" font="17"> </text>
<text top="666" left="182" width="324" height="26" font="16">Intrusion Detection Systems </text>
<text top="712" left="108" width="681" height="18" font="0">Intrusion Detection System is a process or device that analyses system and network activity </text>
<text top="737" left="108" width="681" height="18" font="0">for  abnormal  behaviours.  The  way  an  Intrusion  Detection  System  (IDS)  detects  malicious </text>
<text top="762" left="108" width="681" height="18" font="0">packets widely vary according to the type of implementation (host‐based or network‐based) </text>
<text top="787" left="108" width="681" height="18" font="0">and detection techniques (signature‐based or anomaly‐based) used by the IDS. This section </text>
<text top="813" left="108" width="531" height="18" font="0">gives an overview of the advantages and inconvenient of these systems. </text>
<text top="857" left="108" width="48" height="24" font="22">2.3.1</text>
<text top="857" left="156" width="7" height="22" font="23"> </text>
<text top="857" left="162" width="143" height="24" font="22">Types of IDS </text>
<text top="902" left="162" width="59" height="25" font="1">2.3.1.1</text>
<text top="907" left="221" width="6" height="19" font="7"> </text>
<text top="902" left="227" width="143" height="25" font="1">Network‐based	</text>
<text top="934" left="108" width="681" height="18" font="0">A Network‐based IDS identifies intrusion by examining network traffic, as seen Figure 6. The </text>
<text top="959" left="108" width="681" height="18" font="0">network IDS often contains a list of known attack signatures that are compared to the live </text>
<text top="984" left="108" width="685" height="18" font="0">network traffic. Whenever a packet matches a signature, an attack attempt alert is raised.  </text>
<text top="1009" left="108" width="610" height="18" font="0">There are two different ways to implement a network‐based IDS: Inline or Outline.  </text>
<text top="1041" left="108" width="681" height="18" font="0">An <b>inline implementation</b> acts like a gateway and ensures that all the traffic goes directly </text>
<text top="1066" left="108" width="681" height="18" font="0">into  the  IDS  before  reaching/leaving  the  production  network.  The  benefit  of  this </text>
<text top="1091" left="108" width="681" height="18" font="0">implementation is the effectiveness to quickly block potential attacks. However, it comes at </text>
<text top="1116" left="108" width="681" height="18" font="0">a price, as the IDS sits in the middle of the network and filters the whole network traffic. The </text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">20 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">risk is that an overload of the IDS could happen during peak times and this one could start </text>
<text top="137" left="108" width="239" height="18" font="0">dropping genuine data packets.  </text>
<text top="168" left="108" width="681" height="18" font="0">An <b>outline implementation</b> means that the IDS does not receive directly the data packets. </text>
<text top="193" left="108" width="681" height="18" font="0">The  IDS  is  plugged  into  a  switch  configured  to  mirror  the  network  traffic  to  the  IDS. </text>
<text top="219" left="108" width="681" height="18" font="0">Therefore, all the network traffic is copied and sent to the IDS for analysis. The benefit of an </text>
<text top="244" left="108" width="681" height="18" font="0">outline  implementation  is  that  the  IDS  cannot  slow  down  the  network  traffic  because  the </text>
<text top="269" left="108" width="681" height="18" font="0">traffic  is  copied  and  sent  to  it.  The  inconvenient  is  a  slow  reaction  from  the  IDS  when </text>
<text top="294" left="108" width="681" height="18" font="0">malicious packets are discovered. The reason is that the packets generally reach the IDS as </text>
<text top="320" left="108" width="525" height="18" font="0">the same time as the destination host, which make them hard to block. </text>
<text top="356" left="162" width="59" height="25" font="1">2.3.1.2</text>
<text top="361" left="221" width="6" height="19" font="7"> </text>
<text top="356" left="227" width="142" height="25" font="1">Host‐based	IDS	</text>
<text top="388" left="108" width="681" height="18" font="0">A  Host‐based  IDS  is  generally  used  to  analyse  all  the  network  traffic  reaching  or  leaving  a </text>
<text top="414" left="108" width="681" height="18" font="0">computer  that  hosts  a  network  service  and  are  sensible  to  attacks,  such  as  Webserver, </text>
<text top="439" left="108" width="681" height="18" font="0">Database  or  FTP  server,  see  Figure  7.  This  host‐based  analysis  acts  like  a  firewall  that </text>
<text top="464" left="108" width="681" height="18" font="0">inspects  every  data  packet  interacting  the  host  with  a  unique  advantage  of  being  able  to </text>
<text top="489" left="108" width="681" height="18" font="0">inspect  encoded  traffic.  This  advantage  is  possible  because  the  data  packets  are  decoded </text>
<text top="515" left="108" width="681" height="18" font="0">when they reach the destination host, therefore the host‐IDS is able to analyse them. The </text>
<text top="540" left="108" width="681" height="18" font="0">main  drawback  of  a  Host‐based  implementation  is  the  consumption  of  physical  resources </text>
<text top="565" left="108" width="681" height="18" font="0">needed  by  the  IDS  to  inspect  the  traffic,  which  could  result  in  using  most  of  the  host </text>
<text top="590" left="108" width="182" height="18" font="0">resources at peak times. </text>
<text top="622" left="108" width="4" height="18" font="0"> </text>
<text top="1062" left="108" width="4" height="16" font="15"> </text>
<text top="1088" left="191" width="166" height="14" font="21"><b>Figure 6 ‐ Network‐based IDS </b></text>
<text top="1016" left="452" width="4" height="16" font="15"> </text>
<text top="1042" left="549" width="143" height="14" font="21"><b>Figure 7 ‐ Host‐based IDS </b></text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">21 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="48" height="24" font="22">2.3.2</text>
<text top="116" left="156" width="7" height="22" font="23"> </text>
<text top="116" left="162" width="235" height="24" font="22">Detection Techniques </text>
<text top="149" left="108" width="681" height="18" font="0">There  are  two  detection  techniques  that  can  be  used  by  IDS  to  discover  malicious  data </text>
<text top="174" left="108" width="681" height="18" font="0">packets:  the  first  one  based  on  data  packets  signature  and  the  second  one  based  on </text>
<text top="199" left="108" width="681" height="18" font="0">anomaly  detection.  Each  detection  technique  has  its  own  benefits  and  weaknesses, </text>
<text top="225" left="108" width="258" height="18" font="0">compared in the following section. </text>
<text top="261" left="162" width="59" height="25" font="1">2.3.2.1</text>
<text top="266" left="221" width="6" height="19" font="7"> </text>
<text top="261" left="227" width="335" height="25" font="1">	Signature‐based	Intrusion	Detection	</text>
<text top="293" left="108" width="681" height="18" font="0">Signature‐based detection is the most widely type of detection used by IDS nowadays. The </text>
<text top="318" left="108" width="681" height="18" font="0">IDS  uses  a  local  database  with  multiple  packet  signatures  known  as  being  malicious.  Each </text>
<text top="344" left="108" width="681" height="18" font="0">data  packet  going  through  the  IDS  is  compared  to  a  list  of  known  malicious  patterns. </text>
<text top="369" left="108" width="681" height="18" font="0">Whenever a positive match is found, it means  that a malicious packet has been detected. </text>
<text top="394" left="108" width="681" height="18" font="0">This type of detection is similar to an antivirus, which compare files signatures to a database </text>
<text top="419" left="108" width="273" height="18" font="0">of malicious known virus signatures.  </text>
<text top="451" left="108" width="681" height="18" font="0">The advantages of a signature‐based IDS are the ease of configuration and the low rate of </text>
<text top="476" left="108" width="681" height="18" font="0">false  positive  (Allen,  2004).  However,  the  main  drawback  is  similar  to  antivirus  software: </text>
<text top="501" left="108" width="681" height="18" font="0">they cannot detect unknown malicious patterns. This means that firstly the IDS needs to be </text>
<text top="527" left="108" width="681" height="18" font="0">updated  regularly  and  secondly  that  the  IDS  will  always  be  one‐step  behind  the  attacker </text>
<text top="552" left="108" width="681" height="18" font="0">(Joho,  2004).  Another  type  of  IDS,  anomaly‐based  Intrusion  Detection  can  be  used  to </text>
<text top="577" left="108" width="228" height="18" font="0">counteract these weaknesses.  </text>
<text top="614" left="162" width="59" height="25" font="1">2.3.2.2</text>
<text top="619" left="221" width="6" height="19" font="7"> </text>
<text top="614" left="227" width="324" height="25" font="1">Anomaly‐based	Intrusion	Detection	</text>
<text top="646" left="108" width="681" height="18" font="0">Anomaly‐based Intrusion Detection inspects the data packets and compares them with the </text>
<text top="671" left="108" width="681" height="18" font="0">self‐learned network patterns specific to the network. To generate these network patterns, </text>
<text top="696" left="108" width="681" height="18" font="0">the IDS go through a training phase where its only objective is to listen to the network data </text>
<text top="721" left="108" width="681" height="18" font="0">flow and translate it into Metadata. The patterns generated give an enormous quantity of </text>
<text top="747" left="108" width="681" height="18" font="0">information  such  as  network  addresses,  flags,  used  ports,  timeouts,  etc.  These  results  are </text>
<text top="772" left="108" width="677" height="18" font="0">considered by the IDS as a normal network activity. After this training period, the anomaly‐</text>
<text top="797" left="108" width="681" height="18" font="0">based IDS is ready to be implemented and can compare the network traffic to the pattern </text>
<text top="823" left="108" width="681" height="18" font="0">generated during the training phase. Alerts are raised when the IDS detect unusual network </text>
<text top="848" left="108" width="681" height="18" font="0">activity,  such  as  detecting  new  services  which  should  not  be  active,  or  detecting  users’ </text>
<text top="873" left="108" width="411" height="18" font="0">access to new services that they never accessed before. </text>
<text top="904" left="108" width="681" height="18" font="0">The  main  strength  of  anomaly‐based  IDS  is  the  possibility  to  detect  unknown  malicious </text>
<text top="930" left="108" width="681" height="18" font="0">network  traffic,  which  is  not  possible  using  a  signature‐based  IDS.  However,  there  are </text>
<text top="955" left="108" width="681" height="18" font="0">important  drawbacks:  Firstly,  if  any  attacks  occur  during  the  training  period,  they  will  be </text>
<text top="980" left="108" width="681" height="18" font="0">considered  as  normal  traffic  and  remain  undetected  in  the  future.  Secondly,  there  are </text>
<text top="1005" left="108" width="681" height="18" font="0">concerned  towards  the  scalability  of  this  system  because  if  the  network  administrator </text>
<text top="1031" left="108" width="681" height="18" font="0">decides  to  give  new  service  accessibility  to  specifics  users,  the  IDS  will  raise  False Positive </text>
<text top="1056" left="108" width="681" height="18" font="0">alerts.  This  leads  to  the  main  drawback  of  this  system,  which  is  the  high  number  of  False </text>
<text top="1081" left="108" width="622" height="18" font="0">Positive alerts that are generated if the anomaly‐based IDS is not perfectly tuned up. </text>
</page>
<page number="22" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="24" size="14" family="Times" color="#000000"/>
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">22 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="48" height="24" font="22">2.3.3</text>
<text top="116" left="156" width="7" height="22" font="23"> </text>
<text top="116" left="162" width="350" height="24" font="22">Acceptable levels of false alarms </text>
<text top="149" left="108" width="681" height="18" font="0">The two previous paragraphs describe how IDSs work: they analyse network traffic and raise </text>
<text top="174" left="108" width="681" height="18" font="0">alarms  whenever  malicious  data  packets  are  discovered.  However,  these  alarms  are  not </text>
<text top="199" left="108" width="681" height="18" font="0">always right and unjustified alarms can be triggered. There are four kinds of alarms, they are </text>
<text top="225" left="108" width="681" height="18" font="0">based  on  the  success  to  detect  attacks  and  raise  alarms.  The  Table  1    represented  below </text>
<text top="250" left="108" width="304" height="18" font="0">illustrates the meanings of these alarms.  </text>
<text top="280" left="373" width="151" height="14" font="21"><b>Table 1 ‐ Confusion Matrix </b></text>
<text top="304" left="282" width="4" height="16" font="15"> </text>
<text top="304" left="387" width="4" height="16" font="15"> </text>
<text top="304" left="508" width="91" height="16" font="24"><b>Alarm raised </b></text>
<text top="331" left="282" width="4" height="16" font="15"> </text>
<text top="331" left="387" width="4" height="16" font="15"> </text>
<text top="331" left="476" width="26" height="16" font="15">Yes </text>
<text top="331" left="606" width="23" height="16" font="15">No </text>
<text top="358" left="230" width="108" height="16" font="24"><b>Attack attempt </b></text>
<text top="358" left="375" width="26" height="16" font="15">Yes </text>
<text top="358" left="444" width="91" height="16" font="15">True Positive </text>
<text top="358" left="567" width="101" height="16" font="15">False Negative </text>
<text top="385" left="377" width="23" height="16" font="15">No </text>
<text top="385" left="443" width="94" height="16" font="15">False Positive </text>
<text top="385" left="568" width="98" height="16" font="15">True Negative </text>
<text top="412" left="108" width="4" height="18" font="0"> </text>
<text top="443" left="108" width="681" height="18" font="0">In theory, a perfectly tuned IDS is able to rise only True Positive alerts, which means that a </text>
<text top="468" left="108" width="681" height="18" font="0">security related event has happened and an alert has been raised accordingly. However, in </text>
<text top="494" left="108" width="681" height="18" font="0">real  conditions  with  a  high  amount  of  network  traffic,  many  False  Positive  alerts  are </text>
<text top="519" left="108" width="681" height="18" font="0">generally raised up by IDS. False Positive alerts mean that an alert was raised without a true </text>
<text top="544" left="108" width="681" height="18" font="0">security related event. Therefore, the main question is: What is an acceptable level of True </text>
<text top="570" left="108" width="681" height="18" font="0">Positive  alerts?  This  question  is  debatable  and  every  network  engineers  have  their  own </text>
<text top="595" left="108" width="681" height="18" font="0">point  of  views  about  it.  However,  to  give  a  vague  idea,  an answer  has been  found  on  the </text>
<text top="620" left="108" width="681" height="18" font="0">Symantec  Website  (Timm,  2010):  “an  acceptable  level  of  True  Positive  alerts  should  be  at </text>
<text top="645" left="108" width="681" height="18" font="0">least 60% of the total alerts raised”. This True Positive Rate is calculated using the following </text>
<text top="671" left="108" width="67" height="18" font="0">formula: </text>
<text top="712" left="361" width="32" height="21" font="0">TPR</text>
<text top="712" left="489" width="47" height="22" font="0">∗ 100 </text>
<text top="754" left="108" width="474" height="18" font="0">With: TP = An attack has occurred and an alarm has been raised, </text>
<text top="785" left="108" width="433" height="18" font="0">          FN = An attack has occurred but no alarm was raised. </text>
<text top="819" left="108" width="681" height="18" font="0">In  addition,  the  False  Positive  ratio  can  be  calculated  with  a  similar  formula.  It  shows  the </text>
<text top="844" left="108" width="608" height="18" font="0">proportion of instances, which were not malicious but raised an alarm (false alert): </text>
<text top="885" left="362" width="31" height="21" font="0">FPR</text>
<text top="885" left="489" width="47" height="22" font="0">∗ 100 </text>
<text top="928" left="108" width="528" height="18" font="0">With: FP = An alarm has been raised but no attack occurred (False alert) </text>
<text top="959" left="108" width="447" height="18" font="0">          TN = The number of correct decisions on benign traffic. </text>
<text top="992" left="108" width="681" height="18" font="0">A  perfectly tuned  IDS  should  have  a  rate  of  TPR  =  100%  and  FPR  =  0%,  which  means  that </text>
<text top="1018" left="108" width="681" height="18" font="0">every attacks have raised alerts and that benign traffic has never raised any alert. However, </text>
<text top="1043" left="108" width="345" height="18" font="0">this case is extremely rare in live environment. </text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">23 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="32" height="26" font="16">2.4</text>
<text top="117" left="140" width="7" height="24" font="17"> </text>
<text top="116" left="182" width="206" height="26" font="16">Cloud computing </text>
<text top="162" left="108" width="681" height="18" font="0">The  emergence  of  the  Cloud  Computing  has  revolution  the  IT  industry  by  reducing  the </text>
<text top="188" left="108" width="681" height="18" font="0">hardware  cost  while  improving  its  scalability.  Edinburgh  Napier  University  has  been  using </text>
<text top="213" left="108" width="681" height="18" font="0">the cloud since the beginning of the year 2011. The cloud computing gives the possibility to </text>
<text top="238" left="108" width="681" height="18" font="0">any students to access their Virtual Machines used in the Networking labs, from any devices </text>
<text top="263" left="108" width="681" height="18" font="0">connected to internet, anywhere and at any time. An article written by Petter Mell for The </text>
<text top="289" left="108" width="681" height="18" font="0">National Institute of Standards and Technology (Peter Mell, 2011) gives a good definition of </text>
<text top="314" left="108" width="681" height="18" font="0">the  cloud  computing  through  five  essential  characteristics,  three  service  models  and  four </text>
<text top="339" left="108" width="288" height="18" font="0">deployment models, such as following. </text>
<text top="383" left="108" width="48" height="24" font="22">2.4.1</text>
<text top="384" left="156" width="7" height="22" font="23"> </text>
<text top="383" left="162" width="263" height="24" font="22">Essential Characteristics </text>
<text top="417" left="135" width="6" height="18" font="0">‐</text>
<text top="417" left="140" width="5" height="17" font="18"> </text>
<text top="417" left="162" width="627" height="18" font="19"><b>On‐demand  self‐service:</b>  individuals  can  manage  computing  resources  without </text>
<text top="442" left="162" width="174" height="18" font="0">needing anyone’s help; </text>
<text top="467" left="135" width="6" height="18" font="0">‐</text>
<text top="468" left="140" width="5" height="17" font="18"> </text>
<text top="467" left="162" width="627" height="18" font="19"><b>Ubiquitous  network  access:</b>  The  platform  can  be  accessed  through  standard </text>
<text top="492" left="162" width="191" height="18" font="0">Internet‐enabled devices; </text>
<text top="518" left="135" width="6" height="18" font="0">‐</text>
<text top="518" left="140" width="5" height="17" font="18"> </text>
<text top="518" left="162" width="627" height="18" font="19"><b>Rapid  elasticity:</b>  resources  are  scalable  and  can  be  quickly  adjusted  when  it  suits </text>
<text top="543" left="162" width="148" height="18" font="0">(raised or lowered); </text>
<text top="568" left="135" width="6" height="18" font="0">‐</text>
<text top="569" left="140" width="5" height="17" font="18"> </text>
<text top="568" left="162" width="627" height="18" font="19"><b>Resource  pooling:</b>  processing  and  storage  are  shared  across  a  common </text>
<text top="594" left="162" width="110" height="18" font="0">infrastructure; </text>
<text top="619" left="135" width="6" height="18" font="0">‐</text>
<text top="619" left="140" width="5" height="17" font="18"> </text>
<text top="619" left="162" width="627" height="18" font="19"><b>Pay per use:</b> consumers usage are tracked in order to determine charged fees based </text>
<text top="644" left="162" width="543" height="18" font="0">on a combination of computing power, bandwidth use and storage space; </text>
<text top="688" left="108" width="48" height="24" font="22">2.4.2</text>
<text top="689" left="156" width="7" height="22" font="23"> </text>
<text top="688" left="162" width="224" height="24" font="22">Deployment Models </text>
<text top="722" left="135" width="6" height="18" font="0">‐</text>
<text top="722" left="140" width="5" height="17" font="18"> </text>
<text top="722" left="162" width="627" height="18" font="19"><b>Private  cloud</b>  (internal  clouds):  The  cloud  infrastructure  is  owned  and  used  by  a </text>
<text top="747" left="162" width="627" height="18" font="0">single  organisation.  However,  a  third  party  service  provider  on  or  off‐premise  can </text>
<text top="772" left="162" width="349" height="18" font="0">manage the hosting and outsourced operation. </text>
<text top="797" left="135" width="6" height="18" font="0">‐</text>
<text top="798" left="140" width="5" height="17" font="18"> </text>
<text top="797" left="162" width="627" height="18" font="19"><b>Community  cloud</b>:  The  cloud  infrastructure  is  shared  by  several  related </text>
<text top="823" left="162" width="627" height="18" font="0">organisations.  For  example,  all  the  universities  of  a  country  can  use  a  community </text>
<text top="848" left="162" width="452" height="18" font="0">cloud in order to share their resources between each other’s. </text>
<text top="873" left="135" width="6" height="18" font="0">‐</text>
<text top="874" left="140" width="5" height="17" font="18"> </text>
<text top="873" left="162" width="627" height="18" font="19"><b>Public  cloud</b>  (external  clouds):  The  cloud  infrastructure  is  owned  by  a  third  party </text>
<text top="898" left="162" width="519" height="18" font="0">service provider that is selling cloud services to multiple organisations. </text>
<text top="924" left="135" width="6" height="18" font="0">‐</text>
<text top="924" left="140" width="5" height="17" font="18"> </text>
<text top="924" left="162" width="627" height="18" font="19"><b>Hybrid  cloud</b>:  The  cloud  infrastructure  is  a  composition  of  two  or  more  clouds </text>
<text top="949" left="162" width="627" height="18" font="0">infrastructure  (private,  community,  public).  The  advantage  of  this  technology  is  to </text>
<text top="974" left="162" width="627" height="18" font="0">provide  dedicated  resources  (private  cloud)  and  increased  scalability  (public  cloud) </text>
<text top="1000" left="162" width="101" height="18" font="0">when it suits. </text>
<text top="1044" left="108" width="48" height="24" font="22">2.4.3</text>
<text top="1044" left="156" width="7" height="22" font="23"> </text>
<text top="1044" left="162" width="167" height="24" font="22">Service Models </text>
<text top="1077" left="135" width="6" height="18" font="0">‐</text>
<text top="1078" left="140" width="5" height="17" font="18"> </text>
<text top="1077" left="162" width="627" height="18" font="19"><b>Software as a Service: SaaS </b>delivers to the costumers business applications hosted </text>
<text top="1102" left="162" width="627" height="18" font="0">on the cloud by a third party organisation. Customers can access these applications </text>
<text top="1128" left="162" width="627" height="18" font="0">through  an  internet  enable  device  using  a  thin  client  such  as  a  web  browser.  This </text>
</page>
<page number="24" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">24 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="162" width="627" height="18" font="0">model  eliminates  the  need  to  install  and  run  the  applications  because  the </text>
<text top="137" left="162" width="627" height="18" font="0">applications  are  not  installed  directly  on  the  customer’s  own  computer,  which </text>
<text top="162" left="162" width="627" height="18" font="0">induce  an  easier  maintenance  and  support.  An  example  of  SaaS  provider  is  <i>Oracle </i></text>
<text top="187" left="162" width="627" height="18" font="20"><i>CRM  On  Demand  </i>that  provides  both  multi‐tenant  (all  resources  are  shared  by </text>
<text top="213" left="162" width="541" height="18" font="0">customers) and single‐tenant (customers have owned resources) options.<b> </b></text>
<text top="238" left="135" width="6" height="18" font="0">‐</text>
<text top="238" left="140" width="5" height="17" font="18"> </text>
<text top="238" left="162" width="627" height="18" font="19"><b>Platform as a Service: PaaS </b>provides all the software needed by developer to build, </text>
<text top="263" left="162" width="627" height="18" font="0">deploy  and  manage  SaaS  applications.  However,  the  service  provider  defines  the </text>
<text top="288" left="162" width="627" height="18" font="0">supported  tools  and  programming  languages.  Moreover,  the  costumer  does  not </text>
<text top="314" left="162" width="627" height="18" font="0">control  the  underlying  cloud  infrastructure  such  as  network,  servers  or  operating </text>
<text top="339" left="162" width="627" height="18" font="0">systems. An example of SaaS provider is <i>Oracle PaaS Platform </i>that provides to the </text>
<text top="364" left="162" width="397" height="18" font="0">costumers the ability to build their own public clouds.<b> </b></text>
<text top="389" left="135" width="6" height="18" font="0">‐</text>
<text top="390" left="140" width="5" height="17" font="18"> </text>
<text top="389" left="162" width="627" height="18" font="19"><b>Infrastructure  as  a  Service:  IaaS  </b>provides  a  standardized  virtual  server  with  elastic </text>
<text top="415" left="162" width="627" height="18" font="0">resources.  The  consumer  is  able  to  deploy  operating  systems,  control  and  manage </text>
<text top="440" left="162" width="627" height="18" font="0">computing resources. However, the customer is not able to manage the underlying </text>
<text top="465" left="162" width="627" height="18" font="0">cloud infrastructure. An example of IaaS is <i>Amazon Elastic Compute Cloud (EC2)</i> and </text>
<text top="490" left="162" width="205" height="18" font="20"><i>Simple Storage Service (S3)</i>.<b> </b></text>
<text top="535" left="108" width="48" height="24" font="22">2.4.4</text>
<text top="535" left="156" width="7" height="22" font="23"> </text>
<text top="535" left="162" width="152" height="24" font="22">Virtualisation </text>
<text top="568" left="108" width="677" height="18" font="0">Today’s  virtualisation  technology  is  use  by  the  cloud  computing  in  order  to  deliver  on‐</text>
<text top="593" left="108" width="681" height="18" font="0">demand cloud services, which is the key technology of the cloud computing success (Perilli, </text>
<text top="619" left="108" width="681" height="18" font="0">2009).  However,  the  concept  of  virtualization  is  not  as  recent  as  the  cloud  computing. </text>
<text top="644" left="108" width="681" height="18" font="0">Actually,  it  is  in  the  mid‐1960s  that  IBM  created  for  the  first  time  some  virtual  machines </text>
<text top="669" left="108" width="681" height="18" font="0">implemented within an <i>IBM 7044 (M44).</i> At the time, IBM’s virtual machines were identical </text>
<text top="694" left="108" width="681" height="18" font="0">“copies” of the underlying hardware and each instance could run its own operating system </text>
<text top="720" left="108" width="681" height="18" font="0">(Singh, 2004). It was used to reduce the highly expensive hardware acquisition, which was at </text>
<text top="745" left="108" width="681" height="18" font="0">the time enormous pieces, and improve the ability for the users to work simultaneously. In </text>
<text top="770" left="108" width="681" height="18" font="0">recent days, virtualization technology has been able to separate the operating system and </text>
<text top="795" left="108" width="681" height="18" font="0">application  from  the  hardware.  Moreover,  the  hardware  got  cheaper  and  the  trend  for </text>
<text top="821" left="108" width="681" height="18" font="0">testing applications in a sand box has increased.  The main reasons to use virtualisation are </text>
<text top="846" left="108" width="545" height="18" font="0">described by a consultant for Citrix (Bogobowicz, 2011), such as following: </text>
<text top="877" left="135" width="6" height="18" font="0">‐</text>
<text top="878" left="140" width="5" height="17" font="18"> </text>
<text top="877" left="162" width="627" height="18" font="19"><b>Hardware independence: </b>The same image file of the computer/server can be used </text>
<text top="903" left="162" width="264" height="18" font="0">across multiples types of hardware.<b> </b></text>
<text top="928" left="135" width="6" height="18" font="0">‐</text>
<text top="928" left="140" width="5" height="17" font="18"> </text>
<text top="928" left="162" width="627" height="18" font="19"><b>More efficient resource use: </b>A single physical server can be split into multiple virtual </text>
<text top="953" left="162" width="627" height="18" font="0">machines that are sharing the resources of the physical server. Moreover, the virtual </text>
<text top="978" left="162" width="627" height="18" font="0">machines  can  be  upgraded  with  more  resources  (CPU,  memory,  hard  drive…) </text>
<text top="1004" left="162" width="175" height="18" font="0">without any downtime.<b> </b></text>
<text top="1029" left="135" width="6" height="18" font="0">‐</text>
<text top="1029" left="140" width="5" height="17" font="18"> </text>
<text top="1029" left="162" width="627" height="18" font="19"><b>Fast deployment and snapshotting: </b>The deployment of new virtual machines takes a </text>
<text top="1054" left="162" width="627" height="18" font="0">couple  of  seconds  and  snapshots  can  be  taken  at  any  given  time  in  order  to  allow </text>
<text top="1079" left="162" width="627" height="18" font="0">rollbacks  if    troubles  happen.  It  is  a  great  benefice  for  software  testing  and </text>
<text top="1105" left="162" width="86" height="18" font="0">evaluation.<b> </b></text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="25" size="9" family="Times" color="#000000"/>
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">25 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="135" width="6" height="18" font="0">‐</text>
<text top="112" left="140" width="5" height="17" font="18"> </text>
<text top="112" left="162" width="627" height="18" font="19"><b>Backup  and  transfer:</b>  Entire  operating  systems  can  be  backed  up  on‐site  or  be </text>
<text top="137" left="162" width="497" height="18" font="0">transferred off‐site, allowing a quick recovering in case of disasters.<b> </b></text>
<text top="168" left="108" width="681" height="18" font="0"> The management and execution of multiple operating systems is done, most of the time, </text>
<text top="193" left="108" width="681" height="18" font="0">through a hypervisor also called Virtual Machine Manager (VMM). Hypervisors are directly </text>
<text top="219" left="108" width="681" height="18" font="0">installed onto the server hardware whose provide multiple operating systems. Hypervisors </text>
<text top="244" left="108" width="681" height="18" font="0">are classified into two types named Type 1 and Type 2, see Figure 8 . <i>Virtualization Review</i>, </text>
<text top="269" left="108" width="681" height="18" font="0">an independent web guide to virtualisation, states that there is no formal standards‐based </text>
<text top="294" left="108" width="681" height="18" font="0">definition for both types but the distinction has to do with whether an underlying operating </text>
<text top="320" left="108" width="379" height="18" font="0">system  is  present  (Vanover,  2009).  Therefore, </text>
<text top="345" left="108" width="379" height="18" font="0">hypervisor type 1 level runs directly onto the host </text>
<text top="370" left="108" width="379" height="18" font="0">physical  hardware  to  control  and  manage  guest </text>
<text top="395" left="108" width="379" height="18" font="0">operating  systems,  while  type  2  runs  in  an </text>
<text top="421" left="108" width="379" height="18" font="0">operating  system  installed  onto  the  physical </text>
<text top="446" left="108" width="92" height="18" font="0">hardware  (2</text>
<text top="442" left="200" width="13" height="12" font="25">nd</text>
<text top="446" left="213" width="275" height="18" font="0">  level)  to  control  and  manage  third </text>
<text top="471" left="108" width="379" height="18" font="0">level operating system. Hypervisor type 1 refers to </text>
<text top="497" left="108" width="379" height="18" font="0">VMware  ESXi  and  Citrix  XenServer,  while </text>
<text top="522" left="108" width="379" height="18" font="0">Hypervisor  type  2  refers  to  Sun  VirtualBox, </text>
<text top="547" left="108" width="304" height="18" font="0">VMware Server and Microsoft Virtual PC. </text>
<text top="578" left="108" width="4" height="18" font="0"> </text>
<text top="623" left="108" width="48" height="24" font="22">2.4.5</text>
<text top="623" left="156" width="7" height="22" font="23"> </text>
<text top="623" left="162" width="210" height="24" font="22">Cloud Hypervisors </text>
<text top="667" left="162" width="59" height="25" font="1">2.4.5.1</text>
<text top="672" left="221" width="6" height="19" font="7"> </text>
<text top="667" left="227" width="165" height="25" font="1">General	Overview	</text>
<text top="699" left="108" width="681" height="18" font="0">A  cloud  hypervisor  is  a  mainframe  operating  system  sitting  at  the  lowest  of  the  hardware </text>
<text top="724" left="108" width="681" height="18" font="0">environment,  known  as  bare  metal.  The  hypervisor  is  able  to  support  many  different </text>
<text top="750" left="108" width="681" height="18" font="0">operating  environments  and  gives  a  very  practical  way  of  getting  virtualization  started </text>
<text top="775" left="108" width="620" height="18" font="0">quickly and efficiently. The main hypervisors available on the market nowadays are:  </text>
<text top="803" left="135" width="8" height="22" font="0"></text>
<text top="808" left="143" width="5" height="17" font="18"> </text>
<text top="807" left="162" width="253" height="18" font="0">VMware ESX (License proprietary) </text>
<text top="829" left="135" width="8" height="22" font="0"></text>
<text top="834" left="143" width="5" height="17" font="18"> </text>
<text top="833" left="162" width="257" height="18" font="0">VMware ESXi (License proprietary) </text>
<text top="855" left="135" width="8" height="22" font="0"></text>
<text top="860" left="143" width="5" height="17" font="18"> </text>
<text top="860" left="162" width="495" height="18" font="0">Microsoft Hyper‐V with Windows Server 2008 (License proprietary) </text>
<text top="881" left="135" width="8" height="22" font="0"></text>
<text top="886" left="143" width="5" height="17" font="18"> </text>
<text top="886" left="162" width="493" height="18" font="0">Microsoft Hyper‐V with Windows Server Core (License proprietary) </text>
<text top="908" left="135" width="8" height="22" font="0"></text>
<text top="913" left="143" width="5" height="17" font="18"> </text>
<text top="912" left="162" width="263" height="18" font="0">Citrix XenServer v4.1 (Open source) </text>
<text top="934" left="135" width="8" height="22" font="0"></text>
<text top="939" left="143" width="5" height="17" font="18"> </text>
<text top="938" left="162" width="204" height="18" font="0">OpenNebula (Open source) </text>
<text top="960" left="135" width="8" height="22" font="0"></text>
<text top="965" left="143" width="5" height="17" font="18"> </text>
<text top="965" left="162" width="190" height="18" font="0">Eucalyptus (Open source) </text>
<text top="996" left="108" width="681" height="18" font="0">The major difference between all these hypervisors is that some are free while others are </text>
<text top="1021" left="108" width="681" height="18" font="0">cost‐effective. The battle between open source and license proprietary hypervisors involves </text>
<text top="1046" left="108" width="681" height="18" font="0">the following advantages and disadvantages: The license proprietary hypervisor is expensive </text>
<text top="1072" left="108" width="681" height="18" font="0">and un‐flexible but benefit of a good support and an easy implementation, while the open </text>
<text top="1097" left="108" width="681" height="18" font="0">source  hypervisor  is  free  and  more  flexible  but  harder  to  implement  and  to  get  the </text>
<text top="1122" left="108" width="121" height="18" font="0">documentation. </text>
<text top="531" left="503" width="4" height="16" font="15"> </text>
<text top="556" left="526" width="235" height="14" font="21"><b>Figure 8 ‐ Hypervisor Types (Scsami, 2011)</b></text>
</page>
<page number="26" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">26 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">This  paper  presents  a  project  for  Edinburgh  Napier  University.  The  University  recently </text>
<text top="137" left="108" width="681" height="18" font="0">implemented  VMware  ESXi  in  the  laboratory  rooms,  which  will  be  used  in  this  project. </text>
<text top="162" left="108" width="681" height="18" font="0">Therefore,  the  next  section  aims  to  only  describe  the  features  of  the  cloud  hypervisor </text>
<text top="187" left="108" width="105" height="18" font="0">VMware ESXi. </text>
<text top="224" left="162" width="59" height="25" font="1">2.4.5.2</text>
<text top="229" left="221" width="6" height="19" font="7"> </text>
<text top="224" left="227" width="129" height="25" font="1">	VMware	ESXi	</text>
<text top="256" left="108" width="681" height="18" font="0">VMware  ESXi  hypervisor  is  a  production‐proven  virtualization  layer  that  abstracts  the </text>
<text top="281" left="108" width="681" height="18" font="0">physical server resources (processor, memory, storage…) into multiple virtual machines, see </text>
<text top="306" left="108" width="681" height="18" font="0">Figure 9. VMware ESXi is thinner than his big brother VMware ESX (less than 100Mb instead </text>
<text top="332" left="108" width="681" height="18" font="0">of  2  GB  footprint)  and  offers  all  the  same  functionality.  VMware  ESXi  is  used  in  Napier </text>
<text top="357" left="108" width="681" height="18" font="0">University  in  order  to  reduce  hardware  and  operation  costs  by  sharing  physical  resources </text>
<text top="382" left="108" width="681" height="18" font="0">across  virtual  environments.    VMware  ESXi  is  similar  to  an  operating  system,  it  is  installs </text>
<text top="408" left="108" width="681" height="18" font="0">directly on the server hardware, called “bare metal”, in order to give a complete control of </text>
<text top="433" left="108" width="681" height="18" font="0">the  server  resources.  Once  installed,  VMware  ESXi  allows  the  creation  of  multiple  virtual </text>
<text top="458" left="108" width="681" height="18" font="0">environments  with  their  own  specific  resources.  Virtual  environments  are  completely </text>
<text top="483" left="108" width="681" height="18" font="0">isolated  from  each  other  by  the  virtualization  layer.  In  consequence  when  a </text>
<text top="509" left="108" width="668" height="18" font="0">misconfiguration occurs in a Virtual Machine it does not affect other virtual environments.  </text>
<text top="762" left="601" width="4" height="18" font="0"> </text>
<text top="787" left="317" width="261" height="14" font="21"><b>Figure 9 ‐ VMware ESXi Server (Venezia, 2008) </b></text>
<text top="811" left="108" width="645" height="18" font="0">The Vendor (VMware, 2011) claims the following advantages when migrating to an ESXi </text>
<text top="836" left="108" width="55" height="18" font="0">server: </text>
<text top="864" left="135" width="8" height="22" font="0"></text>
<text top="869" left="143" width="5" height="17" font="18"> </text>
<text top="868" left="162" width="572" height="18" font="0">Run multiple applications on a single server in order to increase the hardware </text>
<text top="894" left="162" width="472" height="18" font="0">utilization through virtualization while reducing operating costs. </text>
<text top="915" left="135" width="8" height="22" font="0"></text>
<text top="920" left="143" width="5" height="17" font="18"> </text>
<text top="920" left="162" width="500" height="18" font="0">Run a greener datacentre, ESXi can reduce the energy costs by 80%. </text>
<text top="941" left="135" width="8" height="22" font="0"></text>
<text top="947" left="143" width="5" height="17" font="18"> </text>
<text top="946" left="162" width="597" height="18" font="0">Back up and recover applications more easily by taking snapshot of live machines </text>
<text top="971" left="162" width="384" height="18" font="0">and restoring them within seconds in case of errors. </text>
<text top="993" left="135" width="8" height="22" font="0"></text>
<text top="998" left="143" width="5" height="17" font="18"> </text>
<text top="997" left="162" width="505" height="18" font="0">Virtual machines can be easily accesses through a thin clients or PCs. </text>
<text top="1019" left="135" width="8" height="22" font="0"></text>
<text top="1024" left="143" width="5" height="17" font="18"> </text>
<text top="1024" left="162" width="626" height="18" font="0">Virtualize even business‐critical applications with a cost effective virtualization‐based </text>
<text top="1049" left="162" width="68" height="18" font="0">solution. </text>
<text top="1080" left="108" width="681" height="18" font="0">These  advantages  represent  for  Edinburgh  Napier  University,  the  possibility  for  professors </text>
<text top="1105" left="108" width="681" height="18" font="0">to create practical labs within multiple virtual environments. These virtual environments are </text>
<text top="1131" left="108" width="681" height="18" font="0">assigned to specific students in order to allow them to work with it from anywhere, at any </text>
</page>
<page number="27" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="26" size="14" family="Courier" color="#000000"/>
	<fontspec id="27" size="14" family="Courier" color="#ff0000"/>
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">27 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">time and using any device internet enable. Additionally, students are able to have a risk free </text>
<text top="137" left="108" width="681" height="18" font="0">environment to work on, because if a misconfiguration occurs they can rollback or re‐create </text>
<text top="162" left="108" width="195" height="18" font="0">a new VM within seconds. </text>
<text top="216" left="108" width="32" height="26" font="16">2.5</text>
<text top="216" left="140" width="7" height="24" font="17"> </text>
<text top="216" left="182" width="230" height="26" font="16">Hacking techniques </text>
<text top="262" left="108" width="681" height="18" font="0">Today, there is a wide repertoire of hacking techniques used by pirates to gather sensitive </text>
<text top="287" left="108" width="681" height="18" font="0">data and stolen credentials from servers. According to the Web Hacking Incident Database </text>
<text top="313" left="108" width="681" height="18" font="0">(WHID,  2011),  most  popular  attacks  concern  SQL  injections,  Cross  Site  Scripting  (XSS)  and </text>
<text top="338" left="108" width="647" height="18" font="0">Denial of Service. This section aims into giving on overview of each one of these attacks. </text>
<text top="382" left="108" width="48" height="24" font="22">2.5.1</text>
<text top="383" left="156" width="7" height="22" font="23"> </text>
<text top="382" left="162" width="150" height="24" font="22">SQL Injection </text>
<text top="415" left="108" width="681" height="18" font="0">SQL injection the most common application layer attack technique used to steal data from </text>
<text top="441" left="108" width="681" height="18" font="0">organizations. This type of attack aims websites with incorrect coding that allow hackers to </text>
<text top="466" left="108" width="681" height="18" font="0">inject  SQL  commands  in  order  to  retrieve  data  held  in  the  website’s  database.  To  achieve </text>
<text top="491" left="108" width="681" height="18" font="0">this  attack,  a  hacker  first  needs  a  web  page  with  features,  such  as  login  fields,  forms, </text>
<text top="517" left="108" width="681" height="18" font="0">shopping carts or dynamic content. These features are widely used on web sites nowadays </text>
<text top="542" left="108" width="681" height="18" font="0">and  too  often  not  coded  appropriately.  Once  a  weak  web  site  has  been  found,  a  hacker </text>
<text top="567" left="108" width="681" height="18" font="0">proceeds to a SQL injection, which aims to send SQL commands through a web application </text>
<text top="592" left="108" width="681" height="18" font="0">for execution by the backend database. A successful attack allows a hacker to communicate </text>
<text top="618" left="108" width="681" height="18" font="0">with  the  database  in  order  to  retrieve  and/or  modify  sensible  credentials  saved  on  the </text>
<text top="643" left="108" width="75" height="18" font="0">database. </text>
<text top="674" left="108" width="681" height="18" font="0">A famous example of a SQL injection is explained in a study realised by (Adam Kiezun, 2011) </text>
<text top="699" left="108" width="681" height="18" font="0">realised  through  a  login  form  by  submitting  “’  OR  1=1  –‐“  within  the  input  login  field  and </text>
<text top="725" left="108" width="376" height="18" font="0">keeping the password field empty, which result in:  </text>
<text top="753" left="108" width="69" height="13" font="26">login=’</text>
<text top="753" left="177" width="119" height="13" font="27">’ OR 1=1 –- </text>
<text top="753" left="296" width="119" height="13" font="26">AND pass=’’ </text>
<text top="778" left="108" width="681" height="18" font="0">The  injection  of  this  input  transforms  the  entire  WHERE  clause  into  a  tautology.  The </text>
<text top="803" left="108" width="681" height="18" font="0">tautology means a universal unconditioned truth, always valid (William G.J. Halfond, 2006). </text>
<text top="828" left="108" width="681" height="18" font="0">This  causes  the  application  to  conclude  that  the  user  authentication  is  successful  and </text>
<text top="853" left="108" width="488" height="18" font="0">therefore, the user is granted access without any real credentials.  </text>
<text top="898" left="108" width="48" height="24" font="22">2.5.2</text>
<text top="898" left="156" width="7" height="22" font="23"> </text>
<text top="898" left="162" width="276" height="24" font="22">Cross Site Scripting (XSS) </text>
<text top="931" left="108" width="681" height="18" font="0">Cross Site Scripting also known as XSS is one of the most common application layer hacking </text>
<text top="956" left="108" width="681" height="18" font="0">techniques. According to the WHID, 12.58% of the overall attacks on the web are associated </text>
<text top="981" left="108" width="681" height="18" font="0">with  XSS  (WHID,  2011).  Additionally,  XSS  is  also  the  origin  of  many  other  attacks  such  as </text>
<text top="1007" left="108" width="487" height="18" font="0">Information Disclosures, Content Spoofing and Stolen Credentials. </text>
<text top="1038" left="108" width="681" height="18" font="0">Nowadays,  websites  are  growing  exponentially  fast  and  include  more  complex  dynamic </text>
<text top="1063" left="108" width="681" height="18" font="0">features  that  deliver  new  services  to  their  customers.  The  drawback  of  these  dynamic </text>
<text top="1089" left="108" width="681" height="18" font="0">websites is that they do not have a complete control over the output’s interpretation by the </text>
</page>
<page number="28" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="28" size="14" family="Courier" color="#000000"/>
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">28 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">customer’s browser. In that case, malicious content can be introduced into a dynamic web </text>
<text top="137" left="108" width="387" height="18" font="0">page without the client or website knowing about it. </text>
<text top="168" left="108" width="681" height="18" font="0">XSS attacks work by injecting script tags in URLs and enticing unsuspecting users to click on </text>
<text top="193" left="108" width="681" height="18" font="0">them, ensuring that the malicious code, such as Flash, HTML, VBScript or get executed onto </text>
<text top="219" left="108" width="681" height="18" font="0">the user’s machine. To do so, the malicious script is inserted through common inputs, such </text>
<text top="244" left="108" width="681" height="18" font="0">as URL parameter, Form elements, cookies and databases queries. A random user browsing </text>
<text top="269" left="108" width="681" height="18" font="0">on the web page will then execute the malicious script without his knowledge or consent. </text>
<text top="294" left="108" width="681" height="18" font="0">Often,  XSS  is  used  to  compromise  private  information,  steal  cookies  or  execute  malicious </text>
<text top="320" left="108" width="681" height="18" font="0">code onto the end user machine. If not filtered appropriately, an example of an XSS attack </text>
<text top="345" left="108" width="681" height="18" font="0">could  be  a  user  navigating  on  Facebook  will  automatically  execute  a  script  that  a  friend </text>
<text top="370" left="108" width="681" height="18" font="0">posted  on  his  wall.  An  example  provided  by  (Jim,  et  al.,  2007)  reviews  the  XSS  script </text>
<text top="395" left="108" width="681" height="18" font="0">injection attack. This XSS involves injecting a malicious script, typically written in JavaScript </text>
<text top="421" left="108" width="499" height="18" font="0">into the content of a trusted website using the following command: </text>
<text top="455" left="108" width="366" height="13" font="28"><i>&lt;script</i> <i>src=”malicious.js”&gt;&lt;/script&gt; </i></text>
<text top="480" left="108" width="681" height="18" font="0">This injection results in loading and executing the script on the web browser of each visitor </text>
<text top="505" left="108" width="262" height="18" font="0">that are viewing the targeted page. </text>
<text top="549" left="108" width="48" height="24" font="22">2.5.3</text>
<text top="550" left="156" width="7" height="22" font="23"> </text>
<text top="549" left="162" width="185" height="24" font="22">Denial of Service </text>
<text top="582" left="108" width="681" height="18" font="0">A  Denial‐of‐service  attack  (DoS)  is  characterized  by  “an  explicit  attempt  by  attackers  to </text>
<text top="608" left="108" width="681" height="18" font="0">prevent legitimate users of a service from using that service” (CERT, 2007). Diverse attacks </text>
<text top="633" left="108" width="131" height="18" font="0">are able to do so: </text>
<text top="664" left="135" width="13" height="18" font="0">a.</text>
<text top="665" left="148" width="5" height="17" font="18"> </text>
<text top="664" left="162" width="559" height="18" font="0">Network flooding that prevent any legitimate traffic going into the network. </text>
<text top="690" left="135" width="14" height="18" font="0">b.</text>
<text top="690" left="149" width="5" height="17" font="18"> </text>
<text top="690" left="162" width="353" height="18" font="0">Connections disruption between two machines. </text>
<text top="715" left="135" width="12" height="18" font="0">c.</text>
<text top="715" left="147" width="5" height="17" font="18"> </text>
<text top="715" left="162" width="275" height="18" font="0">Restriction or Disruption of a service. </text>
<text top="746" left="108" width="681" height="18" font="0">In the recent years, attackers have found a way to exploit large pool of computers to launch </text>
<text top="771" left="108" width="681" height="18" font="0">DoS  attacks.  In  that  case,  the  name  Distributed  Denial  of  Service  (DDoS)  is  used.  These </text>
<text top="797" left="108" width="681" height="18" font="0">attacks cause disruption of large organization’s network, which generally induce a large loss </text>
<text top="822" left="108" width="681" height="18" font="0">of  profits.  DDoS  attack  used  a  large  pool  of  computers  to  attack  servers  by  sending  huge </text>
<text top="847" left="108" width="681" height="18" font="0">amount of network traffic at the same time. This flood attack results in an overflow of the </text>
<text top="872" left="108" width="681" height="18" font="0">server that cannot reply to genuine packet and end up paralyzing the whole network. There </text>
<text top="898" left="108" width="681" height="18" font="0">are some ways to protect the network against DDoS attacks. For example DDoS SYN flood </text>
<text top="923" left="108" width="681" height="18" font="0">attack (Sun, et al., 2009) uses the three way TCP handshakes to massively start connection </text>
<text top="948" left="108" width="681" height="18" font="0">on  the  remote  server.  These  connections  are  never  acknowledged  (ACK)  by  the  attacking </text>
<text top="974" left="108" width="681" height="18" font="0">host  and  stay  open  on  the  remote  server,  which  become  overflown.  A  simple  example  of </text>
<text top="999" left="108" width="681" height="18" font="0">protection  against  this  kind  of  attack  would  be  to  implement  a  timer  that  terminates  the </text>
<text top="1024" left="108" width="681" height="18" font="0">connection if no ACK is received in a short period of time. However, it is still hard to mitigate </text>
<text top="1049" left="108" width="597" height="18" font="0">DDoS attacks when hundreds of thousands of computers are used in the process. </text>
</page>
<page number="29" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="330" width="237" height="18" font="0">Chapter 2  Technologies Review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">29 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="32" height="26" font="16">2.6</text>
<text top="117" left="140" width="7" height="24" font="17"> </text>
<text top="116" left="182" width="134" height="26" font="16">Conclusion </text>
<text top="162" left="108" width="681" height="18" font="0">This  chapter  has  compared  and  contrasted  the  different  interactions  and  deployment </text>
<text top="188" left="108" width="681" height="18" font="0">purposes  of  honeypot  systems.  This  comparison  has  provided  an  understanding  of  the </text>
<text top="213" left="108" width="681" height="18" font="0">advantages and limitation of different honeypot systems classification. Moreover, Intrusion </text>
<text top="238" left="108" width="681" height="18" font="0">Detection  Systems  have  been  reviewed  in  order  to  learn  their  different  behaviours </text>
<text top="263" left="108" width="681" height="18" font="0">according  to  their  types  and  detection  techniques.  Cloud  computing  has  also  been </text>
<text top="289" left="108" width="681" height="18" font="0">introduced and defined through five essential characteristics, three service models and four </text>
<text top="314" left="108" width="681" height="18" font="0">deployment  models.  This  definition  concludes  with  an  overview  of  different  cloud </text>
<text top="339" left="108" width="681" height="18" font="0">hypervisors. Finally, the last section gives an overview of the three most popular attacks SQL </text>
<text top="364" left="108" width="309" height="18" font="0">injections, XSS injections and DoS attacks. </text>
<text top="396" left="108" width="681" height="18" font="0">The  basic  understanding  of  the  three  technologies  described  in  this  chapter  is  required  in </text>
<text top="421" left="108" width="681" height="18" font="0">the next chapter, Literature Review, which goes further into contrasting these technologies </text>
<text top="446" left="108" width="314" height="18" font="0">and the research undertaken in their area. </text>
<text top="478" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="30" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">30 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="31" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">31 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="152" left="108" width="165" height="37" font="11">Chapter 3.</text>
<text top="152" left="273" width="10" height="33" font="6"> </text>
<text top="152" left="324" width="286" height="37" font="11">Literature review </text>
<text top="231" left="108" width="32" height="26" font="16">3.1</text>
<text top="231" left="140" width="7" height="24" font="17"> </text>
<text top="231" left="182" width="149" height="26" font="16">Introduction </text>
<text top="277" left="108" width="681" height="18" font="0">The aim of this chapter is to critically compare the current literature in the research area. </text>
<text top="302" left="108" width="681" height="18" font="0">The  research  area  has  been  described  in  the  previous  chapter  throughout  three </text>
<text top="327" left="108" width="622" height="18" font="0">technologies: Honeypot systems, Intrusion Detection Systems and Cloud Computing. </text>
<text top="358" left="108" width="681" height="18" font="0">The  choice  for  an  appropriate  honeypot  system  is  based  on  first  three  sections  of  this </text>
<text top="384" left="108" width="681" height="18" font="0">chapter. Firstly, the security issues related to the Cloud computing are evaluated in order to </text>
<text top="409" left="108" width="681" height="18" font="0">determine  the  safety  of  the  Cloud  Computing  environment.  Secondly,  the  literature  is </text>
<text top="434" left="108" width="681" height="18" font="0">investigated to compare previous works done within the area of Signature Generation using </text>
<text top="460" left="108" width="681" height="18" font="0">honeypot  systems.  Thirdly,  multiple  honeypot  systems  are  compared  according  to  their </text>
<text top="485" left="108" width="681" height="18" font="0">degree  of  involvements  and  their  embedded  features.  The  end  of  the  third  section </text>
<text top="510" left="108" width="681" height="18" font="0">concludes on the best suited honeypot system for this project, based on the investigation </text>
<text top="535" left="108" width="266" height="18" font="0">carried out in the previous sections. </text>
<text top="567" left="108" width="681" height="18" font="0">In  addition,  Cross‐Site  Scripting  (XSS)  are  chosen  to  be  the  hacking  technique  used  in  this </text>
<text top="592" left="108" width="681" height="18" font="0">project.  This  decision  is  explained  and  XSS  are  reviewed  to  understand  their  injection </text>
<text top="617" left="108" width="681" height="18" font="0">mechanisms and to find out methods to detect them. Finally, a research about legal issues </text>
<text top="642" left="108" width="681" height="18" font="0">concerning honeypot systems is carried out, to discuss whether it is legal to implement one </text>
<text top="668" left="108" width="67" height="18" font="0">of them. </text>
<text top="722" left="108" width="32" height="26" font="16">3.2</text>
<text top="722" left="140" width="7" height="24" font="17"> </text>
<text top="722" left="182" width="379" height="26" font="16">Cloud computing Security issues </text>
<text top="768" left="108" width="681" height="18" font="0">The cloud computing is a growing interest for organisations considering cutting their IT costs </text>
<text top="793" left="108" width="412" height="18" font="0">by offloading infrastructure and software costs onto a 3</text>
<text top="789" left="520" width="10" height="12" font="25">rd</text>
<text top="793" left="531" width="258" height="18" font="0"> party service provider (SaaS, PaaS </text>
<text top="818" left="108" width="681" height="18" font="0">and IaaS). However, many studies (McDonald, 2011) (Wolf, 2010) show that there are major </text>
<text top="844" left="108" width="681" height="18" font="0">security  issues  to  take  in  consideration  before  moving  onto  the  cloud.  Cisco  CEO,  John </text>
<text top="869" left="108" width="681" height="18" font="0">Chambers, said during a RSA security conference that the Cloud computing was a “security </text>
<text top="894" left="108" width="681" height="18" font="0">nightmare”  (McMillan,  2009).  C.  Jarabek  (Jarabek,  2009)  relates  these  security  issues  into </text>
<text top="919" left="108" width="681" height="18" font="0">three  areas:  virtualisation’s  drawbacks,  side‐channels  information  leaks  and  security </text>
<text top="945" left="108" width="113" height="18" font="0">managements. </text>
<text top="989" left="108" width="48" height="24" font="22">3.2.1</text>
<text top="989" left="156" width="7" height="22" font="23"> </text>
<text top="989" left="162" width="222" height="24" font="22">Virtualisation issues </text>
<text top="1022" left="108" width="681" height="18" font="0">Virtualisation is one of the main components of IaaS cloud computing. Virtualisation enables </text>
<text top="1047" left="108" width="681" height="18" font="0">the implementation of multiples Virtual Machines onto a single piece of hardware. The main </text>
<text top="1073" left="108" width="681" height="18" font="0">security  concern  stated by  (Jarabek,  2009),  is  that  VMs  can regularly  appear,  disappear  or </text>
<text top="1098" left="108" width="681" height="18" font="0">become dormant (stopped or suspended) which make them difficult to manage in matters </text>
<text top="1123" left="108" width="681" height="18" font="0">of security patch. The first problem is that service providers have an important volume of </text>
</page>
<page number="32" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">32 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">VMs,  which  make  it  difficult  to  be  patched  at  the  same  time.  Secondly,  long‐dormant </text>
<text top="137" left="108" width="681" height="18" font="0">machines  might  take  a  long  time  before  being  patched  and  could  represent  a  risk  when </text>
<text top="162" left="108" width="681" height="18" font="0">being  turned  on,  cloned  or  moved  to  other  clouds  without  the  new  security  patch,  see </text>
<text top="187" left="108" width="681" height="18" font="0">Figure  10.  Furthermore,  the  ability  to  rollback  a  VM  to  a  previous  state  runs  the  risk  of </text>
<text top="213" left="108" width="428" height="18" font="0">removing the patch of a previously patched security hole.  </text>
<text top="463" left="586" width="4" height="18" font="0"> </text>
<text top="489" left="281" width="333" height="14" font="21"><b>Figure 10 ‐ Vulnerable VMs represent a risk (Jarabek, 2009) </b></text>
<text top="512" left="108" width="681" height="18" font="0">Christodorescu et al. propose a system to counteract the patching issues (Christodorescu, et </text>
<text top="537" left="108" width="681" height="18" font="0">al., 2009). They describe that the cloud provider has no knowledge about the software (OS, </text>
<text top="563" left="108" width="681" height="18" font="0">applications,  etc.)  running  on  each  VM.  To  counteract  this  effect,  they  propose  a  novel </text>
<text top="588" left="108" width="681" height="18" font="0">technique using the Interrupt Descriptor Table (IDT) to identify the OS being used on each </text>
<text top="613" left="108" width="681" height="18" font="0">VM. Then they compare a white‐list of known secure code against VM’ linked code (system </text>
<text top="639" left="108" width="681" height="18" font="0">calls, kernel modules, etc.) in order to determine if the VM runs the last security patch for </text>
<text top="664" left="108" width="116" height="18" font="0">each software.  </text>
<text top="695" left="108" width="681" height="18" font="0">However,  Trend  Micro  (Agastya,  2011)  shows  that  when  using  virtual  environments,  the </text>
<text top="720" left="108" width="428" height="18" font="0">security updates and antivirus scans should be scheduled </text>
<text top="746" left="108" width="428" height="18" font="0">carefully.  The  problem  is  if  every  VMs  were  updating </text>
<text top="771" left="108" width="428" height="18" font="0">themselves and  running  antivirus  scan  simultaneously,  it </text>
<text top="796" left="108" width="428" height="18" font="0">will affect the performance of the server and result into a </text>
<text top="822" left="108" width="428" height="18" font="0">drain  of  its  resources.  This  could  result  in  an  “antivirus </text>
<text top="847" left="108" width="428" height="18" font="0">storm”  and  crash  the  physical  server.  To  solve  this </text>
<text top="872" left="108" width="428" height="18" font="0">problem,  Trend  Micro  proposes  the  utilisation  of  a </text>
<text top="897" left="108" width="428" height="18" font="0">dedicated security VM on each server that automatically </text>
<text top="927" left="108" width="429" height="18" font="0">coordinates  VMs  security  updates  and  scans  when  they </text>
<text top="953" left="108" width="317" height="18" font="0">are switched on or cloned, seen Figure 11.  </text>
<text top="984" left="108" width="681" height="18" font="0">Additionally, another security issue about virtualisation stated by (Agastya, 2011) concerns </text>
<text top="1009" left="108" width="681" height="18" font="0">the  Virtual  Machine  Manager  (VMM),  which  is  used  to  manage  each  VM.  The  VMM  is  a </text>
<text top="1035" left="108" width="681" height="18" font="0">single  point  of  failure  that  could  theoretically  be  compromised.  In  that  case,  it  could </text>
<text top="1060" left="108" width="681" height="18" font="0">engender a network of compromised VMs. It is a potential risk but to this day, there are no </text>
<text top="1085" left="108" width="573" height="18" font="0">proofs in the security researches relating of a security whole within the VMM. </text>
<text top="932" left="547" width="235" height="14" font="21"><b>Figure  11  ‐  Dedicated  security  VMs</b></text>
<text top="949" left="547" width="221" height="14" font="21"><b>update vulnerable VMs (Agastya, 2011)</b></text>
</page>
<page number="33" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">33 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="48" height="24" font="22">3.2.2</text>
<text top="116" left="156" width="7" height="22" font="23"> </text>
<text top="116" left="162" width="346" height="24" font="22">Side‐channels information leaks </text>
<text top="149" left="108" width="677" height="18" font="0">Side‐channels  information  leaks  concern  the  potential  communication  between  VMs  co‐</text>
<text top="174" left="108" width="681" height="18" font="0">located  on  a  single  piece  of  hardware.  The  risk  is  that  a  malicious  VM  could  access  the </text>
<text top="199" left="108" width="681" height="18" font="0">sensitive information from a target VM sharing the same hardware resource. In their paper, </text>
<text top="225" left="108" width="681" height="18" font="0">Ristenpart  et  al.  use  the  Amazon’s  EC2  cloud  service  to  investigate  this  security  issue </text>
<text top="250" left="108" width="681" height="18" font="0">(Ristenpart, et al., 2009). They show how to determine if two instances are running on the </text>
<text top="275" left="108" width="681" height="18" font="0">same hardware, using some network mapping tools. Then, using a disk‐cache side channel, </text>
<text top="300" left="108" width="681" height="18" font="0">they successfully establish a means of communication between the two VMs in spite of their </text>
<text top="326" left="108" width="681" height="18" font="0">supposed  VM  isolation,  as  seen  Figure  12.  However,  it  is  nearly  impossible  that  this </text>
<text top="351" left="108" width="681" height="18" font="0">technique  could  target  a  single  specified  VM  because  this  one  needs  to  be  on  the  same </text>
<text top="376" left="108" width="681" height="18" font="0">hardware that the attacking VM. Authors claimed an 8.4% success over 1500 targets VM. To </text>
<text top="401" left="108" width="681" height="18" font="0">counteract  the  issue  of  side‐channels  information  leaks,  it  might  be  preferable  for </text>
<text top="427" left="108" width="681" height="18" font="0">organisations to pay the cloud provider in order to ensure that customer’s VM reside in an </text>
<text top="452" left="108" width="177" height="18" font="0">independent hardware. </text>
<text top="638" left="566" width="4" height="18" font="0"> </text>
<text top="663" left="313" width="270" height="14" font="21"><b>Figure 12 ‐ Side‐channels attack (Agastya, 2011) </b></text>
<text top="700" left="108" width="48" height="24" font="22">3.2.3</text>
<text top="700" left="156" width="7" height="22" font="23"> </text>
<text top="700" left="162" width="239" height="24" font="22">Security Management </text>
<text top="733" left="108" width="681" height="18" font="0">Security  Management  concerns  the  tendency  among  customers  to  believe  that  the  cloud </text>
<text top="758" left="108" width="681" height="18" font="0">provider is responsible to manage the security issues relatives to the VMs. These customers </text>
<text top="783" left="108" width="681" height="18" font="0">are wrong, in general, the cloud provider is not responsible for security issues on each VM. </text>
<text top="809" left="108" width="681" height="18" font="0">Therefore, each costumer needs to manage his VMs just as he will do in a non‐virtualized </text>
<text top="834" left="108" width="681" height="18" font="0">environment.  In  their  paper,  Bleikertz  et  al.  (Bleikertz,  et  al.,  2011)  propose  a  method  to </text>
<text top="859" left="108" width="681" height="18" font="0">perform  security  audits in  the  Amazon’s  EC2  cloud.  They  assign  VMs  in  to  security groups </text>
<text top="884" left="108" width="681" height="18" font="0">and  apply  firewall  rules  specific  to  each  groups.  Then,  they  use  the  EC2  API  to  group  the </text>
<text top="910" left="108" width="681" height="18" font="0">results  into  graphs,  which  let  the  administrator  now  the  open  ports  of  each  VMs.  To </text>
<text top="935" left="108" width="681" height="18" font="0">determinate which VM has a high‐risk of intrusion, they use a vulnerability scanner “Nessus” </text>
<text top="960" left="108" width="681" height="18" font="0">to do a penetration test on to their VMs. However, the author’s security auditing is based on </text>
<text top="985" left="108" width="639" height="18" font="0">only a single security tool, which provides a limited view of the security vulnerabilities.  </text>
<text top="1017" left="108" width="681" height="18" font="0">To  summarize,  the  security  related  to  the  cloud  computing  is  in  some  parts  similar  to  the </text>
<text top="1042" left="108" width="681" height="18" font="0">one related to physical hosts security. Firstly, the administrator needs to take care of each </text>
<text top="1067" left="108" width="681" height="18" font="0">single  instance  by  applying  security  patch.  Secondly,  the  hardware  where  the  VMs  are </text>
<text top="1093" left="108" width="681" height="18" font="0">hosted  should  preferably  be  specific  to  a  single  organisation.  Finally,  customers  should </text>
</page>
<page number="34" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">34 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">always  contact  their  cloud  providers  in  order  to  know  the  division  of  responsibilities  and </text>
<text top="137" left="108" width="378" height="18" font="0">service expectations if a security breach happened. </text>
<text top="191" left="108" width="32" height="26" font="16">3.3</text>
<text top="191" left="140" width="7" height="24" font="17"> </text>
<text top="191" left="182" width="563" height="26" font="16">Signatures Generation by the means of Honeypot </text>
<text top="237" left="108" width="681" height="18" font="0">Many  studies  have  been  realised  on  attack  detection  and  signature  generation  based  on </text>
<text top="262" left="108" width="681" height="18" font="0">honeypots.  The  earliest  found  is  a  paper  by  Levin  et  al.  (J.  Levine,  2003):  They  used  a </text>
<text top="287" left="108" width="681" height="18" font="0">honeypot to collect details of worm exploits in order to generate detection signature. This </text>
<text top="313" left="108" width="681" height="18" font="0">first attempt did not provide an automated way of generating signature, which results in a </text>
<text top="338" left="108" width="536" height="18" font="0">lot of hard manual work to analyse worms’ details and create signatures. </text>
<text top="369" left="108" width="681" height="18" font="0">C. Kreibich and J. Crowcroft were the firsts able to provide an automated way of generating </text>
<text top="394" left="108" width="681" height="18" font="0">signatures using Honeycomb (Christian Kreibich, 2004). Their method is to analyse the traffic </text>
<text top="420" left="108" width="681" height="18" font="0">from HoneyD, a honeypot proposed by Neil Provost, in extension with Honeycomb in order </text>
<text top="445" left="108" width="681" height="18" font="0">to generate intrusion detection signature. All the traffic going through HoneyD is considered </text>
<text top="470" left="108" width="681" height="18" font="0">as  suspicious;  therefore,  Honeycomb  uses  the  longest  common  substring  (LCS)  algorithm, </text>
<text top="496" left="108" width="681" height="18" font="0">which  looks  for  the  longest  shared  byte  sequences  across  pairs  of  connections  to  spot </text>
<text top="521" left="108" width="681" height="18" font="0">similarities  in  packet  payloads.  Then,  Honeycomb  generates  signatures  consisting  in  a </text>
<text top="546" left="108" width="681" height="18" font="0">continuous substring of a worm’s payload and provides the choice to convert the signature </text>
<text top="571" left="108" width="681" height="18" font="0">into Snort or Bro format. The efficiency of Honeycomb is famous to generate signatures for </text>
<text top="597" left="108" width="278" height="18" font="0">the worms Slammer and Code‐Red‐II. </text>
<text top="628" left="108" width="677" height="18" font="0">H.‐A. Kim and B. Karp designed the Autograph system for larger‐scale deployments (Hyang‐</text>
<text top="653" left="108" width="681" height="18" font="0">Ah Kim, 2004). The difference with Honeycomb is the implementation of Autograph within </text>
<text top="678" left="108" width="681" height="18" font="0">the  DMZ.  Therefore,  Autograph  does  not  only  collects  traffic  considered  as  malicious  but </text>
<text top="704" left="108" width="681" height="18" font="0">also collects benign traffic. The Autograph system operation mode follows two main stages. </text>
<text top="729" left="108" width="681" height="18" font="0">In  the  first  stage,  Autograph  use  a  port‐scanner  detection  technique  on  the  inbound  TCP </text>
<text top="754" left="108" width="681" height="18" font="0">flows to classify flows as either suspicious or non‐suspicious. In the second stage, Autograph </text>
<text top="779" left="108" width="681" height="18" font="0">generate  signature  based  on  the  content  of  suspicious  flows’  payloads.  The  generated </text>
<text top="805" left="108" width="681" height="18" font="0">signature  is  similar  as  the  Honeycomb’s  ones:  a  single,  contiguous  substring  of  worm’s </text>
<text top="830" left="108" width="681" height="18" font="0">payload. In their paper, Kim and Karp demonstrate that the Autograph system can detect a </text>
<text top="855" left="108" width="681" height="18" font="0">newly released Code‐RedI‐v2 worm’s signature before 2% of the vulnerable host population </text>
<text top="881" left="108" width="139" height="18" font="0">becomes infected. </text>
<text top="912" left="108" width="681" height="18" font="0">S.  Singh  et  al.  describes  the  Earlybird  system  (Sumeet  Singh,  2004)  as  an  improvement  to </text>
<text top="937" left="108" width="681" height="18" font="0">the Autograph system. This system eliminates the pre‐filtering step and focus on scalable, </text>
<text top="962" left="108" width="681" height="18" font="0">high‐performance implementation. In addition, Earlybird introduces two new metrics such </text>
<text top="988" left="108" width="681" height="18" font="0">as,  content  prevalence  and  address  dispersion.  The  content  prevalence  inspects  all  the </text>
<text top="1013" left="108" width="681" height="18" font="0">packets’  payloads  while  the  address  dispersion  tracks  source  and  destination  network </text>
<text top="1038" left="108" width="681" height="18" font="0">addresses. Using these 2 metrics, the Earlybird system flags as suspicious invariant packet’ </text>
<text top="1063" left="108" width="681" height="18" font="0">payloads sent to a large number of network addresses. In S. Singh et al.’s paper, Earlybird </text>
<text top="1089" left="108" width="589" height="18" font="0">detects precise signatures for the worms Code‐Red, MyDoom, Sasser and Kibvu. </text>
</page>
<page number="35" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">35 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">A first attempt to generate signature for polymorphic worms is described by J. Newsome et </text>
<text top="137" left="108" width="681" height="18" font="0">al.  using  the  Polygraph  system  (James  Newsome,  2005).  Polymorphic  worms  are  the  new </text>
<text top="162" left="108" width="681" height="18" font="0">generation of worms that mutate as they spread across the network through self‐encryption </text>
<text top="187" left="108" width="681" height="18" font="0">mechanisms. To understand the anatomy of polymorphic worms, they study a sample of a </text>
<text top="213" left="108" width="681" height="18" font="0">network  flow  containing  an  instance  of  a  polymorphic  worm.  Their  analyse  shows  that </text>
<text top="238" left="108" width="681" height="18" font="0">polymorphic worms after multiple re‐encoding keep some invariant due to the exploit of the </text>
<text top="263" left="108" width="681" height="18" font="0">same  vulnerability.  However,  they  demonstrate  that  a  single,  contiguous  byte  string </text>
<text top="288" left="108" width="681" height="18" font="0">signature,  like  in  Honeycomb,  Autograph  and  Earlybird,  is  not  efficient  at  matching </text>
<text top="314" left="108" width="681" height="18" font="0">polymorphic  worms.  To  solve  this  problem,  they  identify a  family  of  signature  types  more </text>
<text top="339" left="108" width="681" height="18" font="0">complex  based  on  conjunction,  token  subsequence  and  bays  signatures.  Using  all  three </text>
<text top="364" left="108" width="681" height="18" font="0">algorithms,  Polygraph  generates  good  signatures  even  in  presence  of  noise  flows  and </text>
<text top="389" left="108" width="681" height="18" font="0">multiple  worms.  Nevertheless,  R.  Predisci  et  al  have  done  controversy  research  about </text>
<text top="415" left="108" width="681" height="18" font="0">Polygraph (R. Perdisci, 2006 ) and they propose attacks using deliberate noise injections that </text>
<text top="440" left="108" width="539" height="18" font="0">successfully mislead Polygraph’s automatic signature generation process. </text>
<text top="471" left="108" width="681" height="18" font="0">A  recent  study  by  M.  Mohssen  et  al.  (Mohammed,  et  al.,  2010)  shows  that  automated </text>
<text top="497" left="108" width="681" height="18" font="0">signature  generation  approach  for  Polymorphic  Worms  are  now  able  to  generate  high </text>
<text top="522" left="108" width="681" height="18" font="0">quality signatures even in presence of noise flows. They propose a new detection method </text>
<text top="547" left="108" width="681" height="18" font="0">with  double‐honeynet  to  capture  all  worm  instances.  Then  they  generate  a  high‐quality </text>
<text top="572" left="108" width="681" height="18" font="0">signature using a Principal Component Analysis (PCA) that determines the most significant </text>
<text top="598" left="108" width="380" height="18" font="0">data that are shared between polymorphic worms.  </text>
<text top="629" left="108" width="681" height="18" font="0">All the researches cited above aims to generate signature for polymorphic/non‐polymorphic </text>
<text top="654" left="108" width="681" height="18" font="0">worms. However, it will be interesting to see the possibility to detect a wider spectrum of </text>
<text top="679" left="108" width="681" height="18" font="0">attack.  A  first  attempt  in  that  field  was  propose  by  V.  Yegneswaran  et  al.  who  describe </text>
<text top="705" left="108" width="681" height="18" font="0">Nemean  as  a  system  able  to  generate  signature  for  a  wider  class  of  attacks  (Vinod </text>
<text top="730" left="108" width="681" height="18" font="0">Yegneswaran, 2005). The specificity of Nemean is the ability to combine protocol semantics </text>
<text top="755" left="108" width="681" height="18" font="0">and signature generation algorithm. In V. Yegneswaran paper, Nemean is tested out using </text>
<text top="780" left="108" width="471" height="18" font="0">NetBIOS exploit, which is detected with a 0% false‐positive rate. </text>
<text top="812" left="108" width="681" height="18" font="0">In 2006, a study by (Grønland, 2006) focuses on seeing the effectiveness of a honeypot to </text>
<text top="837" left="108" width="681" height="18" font="0">generate  IDS  rules  based  on  FTP  attacks.  During  the  study,  Gronland  simulate  a  fake  FTP </text>
<text top="862" left="108" width="681" height="18" font="0">server using a honeypot and send FTP attacks using a vulnerability scanner. Using the results </text>
<text top="888" left="108" width="681" height="18" font="0">collected  in  the  log  file  of  the  honeypot,  Gronland  is  able  to  create  appropriate  Snort </text>
<text top="913" left="108" width="681" height="18" font="0">signatures to counteract future attacks. This study shows the possibility to collect log data </text>
<text top="938" left="108" width="681" height="18" font="0">from a honeypot and to create IDS rules based on them. However, the attacks simulated are </text>
<text top="963" left="108" width="681" height="18" font="0">FTP attacks, which are very rare attacks. In addition, the process of IDS signature generation </text>
<text top="989" left="108" width="681" height="18" font="0">is not fully automatized and an efficiency test of the honeypot prototype with background </text>
<text top="1014" left="108" width="181" height="18" font="0">traffic is not carried out. </text>
<text top="1045" left="108" width="681" height="18" font="0">Recently,  X.  Tang  proposed  another  technique  to  generate  attacks  signatures  based  on </text>
<text top="1070" left="108" width="681" height="18" font="0">Virtual Honeypots (Tang, 2011). He uses the honeypot <i>HoneyD</i> with a specific Long Common </text>
<text top="1096" left="108" width="681" height="18" font="0">String (LCS). The signatures are generated as a Snort format. By penetration testing using an </text>
<text top="1121" left="108" width="681" height="18" font="0">exploit  named  <i>THCIISSLAME,</i>  the  honeypot  is  able  to  generate  the  same  rule  as  the  one </text>
</page>
<page number="36" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">36 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">originally implemented in Snort. However, this paper does not provide an automated way to </text>
<text top="137" left="108" width="681" height="18" font="0">generate signatures. Moreover, the paper contains only one experiment and further study </text>
<text top="162" left="108" width="544" height="18" font="0">would be interesting to see if his system can be adapted to other exploits. </text>
<text top="216" left="108" width="32" height="26" font="16">3.4</text>
<text top="216" left="140" width="7" height="24" font="17"> </text>
<text top="216" left="182" width="257" height="26" font="16">Honeypots evaluation </text>
<text top="262" left="108" width="681" height="18" font="0">One of the leading research organisations in honeypot technology is<i> The Honeynet Project </i></text>
<text top="287" left="108" width="681" height="18" font="0">(Honeynet,  2011)<i>.  </i>Founded  in  1999,  the  Honeynet  Project  is  a  non‐profit  research </text>
<text top="313" left="108" width="681" height="18" font="0">organisation  dedicated  into  investigating  the  latest  attacks  and  developing  open  source </text>
<text top="338" left="108" width="681" height="18" font="0">security  tools.  The  website  provides  a  good  list  of  every  available  honeypot  systems </text>
<text top="363" left="108" width="681" height="18" font="0">associated with their descriptions. In addition, the investigation carried out in a book by Neil </text>
<text top="388" left="108" width="681" height="18" font="0">Provos  “Virtual  Honeypots  ‐  From  Botnet  Tracking  to  Intrusion  Detection”  (Niels  Provos, </text>
<text top="414" left="108" width="681" height="18" font="0">2007)  provides  a  good  understanding  of  some  low‐  and  high‐interaction  honeypots.  The </text>
<text top="439" left="108" width="506" height="18" font="0">following evaluation compares honeypot systems on the server side: </text>
<text top="483" left="108" width="48" height="24" font="22">3.4.1</text>
<text top="484" left="156" width="7" height="22" font="23"> </text>
<text top="483" left="162" width="342" height="24" font="22">Low/mid interaction honeypots </text>
<text top="517" left="108" width="681" height="18" font="19"><b>Labrea</b>  created  by  (Liston,  2003),  it  is  the  first  low‐interaction  honeypot  introducing  the </text>
<text top="542" left="108" width="681" height="18" font="0">concept of <i>tarpit. </i>A tarpit is a service<i> </i>that intentionally responds slowly to incoming request. </text>
<text top="567" left="108" width="681" height="18" font="0">It is mainly used to slow down spammers and worms by maintaining their TCP connection </text>
<text top="592" left="108" width="303" height="18" font="0">open while forbidding any traffic over it.  </text>
<text top="624" left="108" width="681" height="18" font="19"><b>Nepenthes</b>  are  a  versatile  low‐interaction  honeypot  able  to  collect  malware.  To  do  so, </text>
<text top="649" left="108" width="681" height="18" font="0">Nepenthes simulate open ports and known vulnerabilities in order to capture live malware </text>
<text top="674" left="108" width="681" height="18" font="0">samples trying to exploit these vulnerabilities. An interesting paper by Beacher et Al (Paul </text>
<text top="699" left="108" width="681" height="18" font="0">Baecher,  2006)  states  that  over  a  4  month  period,  Nephentes  has  been  able  collected  15 </text>
<text top="725" left="108" width="681" height="18" font="0">500 unique binaries. Moreover, four different antivirus engines have scanned those binaries </text>
<text top="750" left="108" width="681" height="18" font="0">and only 73% were detected as malicious binaries, which mean that the remaining 27% of </text>
<text top="775" left="108" width="489" height="18" font="0">malicious binaries went undetected through the antivirus engines. </text>
<text top="806" left="108" width="681" height="18" font="19"><b>Amun</b>  is  a  low‐interaction  honeypot  developed  by  (Gobel,  2007).  The  main  objective  of </text>
<text top="832" left="108" width="681" height="18" font="0">Amun  is  to  collect  binaries  of  malware  that  spread  automatically.  For  this  purpose,  Amun </text>
<text top="857" left="108" width="681" height="18" font="0">emulates network vulnerabilities known to attract malwares. Once a malware exploit one of </text>
<text top="882" left="108" width="681" height="18" font="0">these  vulnerabilities,  the  payload  transmitted  is  analysed  and  any  URL  found  is  extracted. </text>
<text top="908" left="108" width="663" height="18" font="0">Additionally, the honeypot try to download the malicious file and store it for later analyse. </text>
<text top="939" left="108" width="681" height="18" font="19"><b>Honeyd</b>  is  a  mid‐interaction  honeypot  created  by  Neil  Provos  in  2003  and  last  updated  in </text>
<text top="964" left="108" width="681" height="18" font="0">2007  (Provos,  2007).  It  is  a  small  daemon  able  to  simulate  up  to  65536  virtual  hosts  on  a </text>
<text top="989" left="108" width="681" height="18" font="0">network.  Each  host  can  be  customized  to  run  specific  operating  systems  with  a  unique  IP </text>
<text top="1015" left="108" width="681" height="18" font="0">address  (that  does  not  match  to  a  valid  system).  Additionally,  advanced  scripts  can  be </text>
<text top="1040" left="108" width="681" height="18" font="0">implemented  to  simulate  different  services  (telnet,  SSH,  SMTP,  FTP…).  These  scripts  go </text>
<text top="1065" left="108" width="681" height="18" font="0">further than a simple banner and can simulate a Login/Password security and answer to few </text>
<text top="1090" left="108" width="681" height="18" font="0">commands typed by an attacker. HoneyD is a mid‐interaction honeypot because an attacker </text>
<text top="1116" left="108" width="444" height="18" font="0">can interact with it by sending request and receiving replies. </text>
</page>
<page number="37" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="29" size="16" family="Times" color="#000000"/>
	<fontspec id="30" size="14" family="Times" color="#ffffff"/>
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">37 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="19"><b>Dionaea  </b>is  a  mid‐interaction  honeypot  developed  in  2009  by  the  Honeynet  Project  is  the </text>
<text top="137" left="108" width="681" height="18" font="0">successors of Nepenthes (Honeynet, 2011). The purpose of this honeypot is to gain a copy of </text>
<text top="162" left="108" width="681" height="18" font="0">a malware exploiting vulnerabilities of network services. To gain a copy of the malware, the </text>
<text top="187" left="108" width="681" height="18" font="0">honeypot accepts to download files triggered by the malware. These files are confined in a </text>
<text top="213" left="108" width="681" height="18" font="0">sandbox  for  later  analysis.  The  main  protocol  offered  by  dionaea  is  SMB,  which  is  a  very </text>
<text top="238" left="108" width="681" height="18" font="0">popular target for worms. Additionally, other network services are provided as HTTP, FTP, </text>
<text top="263" left="108" width="166" height="18" font="0">TFTP, SIP and MySQL.  </text>
<text top="307" left="108" width="48" height="24" font="22">3.4.2</text>
<text top="308" left="156" width="7" height="22" font="23"> </text>
<text top="307" left="162" width="288" height="24" font="22">High interaction honeypot </text>
<text top="341" left="108" width="681" height="18" font="0">A good list of high interaction honeypots is provided by the (Honeynet, 2011). One of the </text>
<text top="366" left="108" width="681" height="18" font="0">most  well‐known  is  <b>Sebek</b>  created  in  2003  by  the  honeynet  project.  Sebek  is  a  kernel </text>
<text top="391" left="108" width="681" height="18" font="0">module  installed  high  interaction  honeypot  that  allows  administrators  to  collect  malicious </text>
<text top="416" left="108" width="570" height="18" font="0">activities such as keystrokes on the system, even in encrypted environments.  </text>
<text top="448" left="108" width="681" height="18" font="0">The Honeynet Project's 3rd Generation Honeywall ('<i><b>Roo v1.4</b></i>') framework (honeywall, 2008) </text>
<text top="473" left="108" width="681" height="18" font="0">is  one  of  the  last  high  interaction  honeypot  created.  This  type  of  honeypot  allows  the </text>
<text top="498" left="108" width="681" height="18" font="0">attacker  to  interact  with  the  system  on  all  levels.  Attacker  can  probe,  attack  and </text>
<text top="524" left="108" width="681" height="18" font="0">compromise the system by his own initiative. Many monitor tools installed on the honeypot </text>
<text top="549" left="108" width="681" height="18" font="0">allow  the  capture  of  all  the  activity  done  by  the  attacker,  from  SSH  encrypted  sessions  to </text>
<text top="574" left="108" width="681" height="18" font="0">emails  and  toolkits  uploaded.  Additionally,  a  Honeywall  gateway,  which  sits  between  the </text>
<text top="599" left="108" width="681" height="18" font="0">honeypot  and  the  outside  world,  is  set  up  to  monitor  the  network  traffic  from/to  the </text>
<text top="625" left="108" width="681" height="18" font="0">honeypot  system.  The  Honeywall  gateway  allows  all  the  inbound  traffic  to  the  victim </text>
<text top="650" left="108" width="681" height="18" font="0">systems but control the outbound traffic with an IDS. This gives the attacker the possibility </text>
<text top="675" left="108" width="681" height="18" font="0">to interact with the honeypot and by the meantime prevents the honeypot of harming other </text>
<text top="700" left="108" width="677" height="18" font="0">systems. The Honeywall Roo is a bootable CDROM that installs onto the hard drive the Cent‐</text>
<text top="726" left="108" width="681" height="18" font="0">OS‐based  distribution  and  many  other  tools,  which  aim  to  capture  and  analyse  cyber </text>
<text top="751" left="108" width="65" height="18" font="0">threats.  </text>
<text top="781" left="220" width="456" height="14" font="21"><b>Table 2 ‐ Differences between each level of involvement based on (Mishra, 2004) </b></text>
<text top="806" left="194" width="4" height="16" font="30"><b> </b></text>
<text top="806" left="312" width="113" height="16" font="30"><b>Low‐Interaction </b></text>
<text top="806" left="475" width="112" height="16" font="30"><b>Mid‐Interaction </b></text>
<text top="806" left="645" width="116" height="16" font="30"><b>High‐Interaction </b></text>
<text top="834" left="116" width="160" height="16" font="30"><b>Degree of involvement </b></text>
<text top="834" left="352" width="31" height="16" font="15">Low </text>
<text top="834" left="516" width="30" height="16" font="15">Mid </text>
<text top="834" left="686" width="34" height="16" font="15">High </text>
<text top="861" left="118" width="156" height="16" font="30"><b>Real operating system </b></text>
<text top="861" left="364" width="9" height="16" font="15">‐ </text>
<text top="861" left="527" width="9" height="16" font="15">‐ </text>
<text top="861" left="690" width="26" height="16" font="15">Yes </text>
<text top="889" left="180" width="32" height="16" font="30"><b>Risk </b></text>
<text top="889" left="352" width="31" height="16" font="15">Low </text>
<text top="889" left="500" width="63" height="16" font="15">Low‐Mid </text>
<text top="889" left="686" width="34" height="16" font="15">High </text>
<text top="917" left="119" width="155" height="16" font="30"><b>Information gathering </b></text>
<text top="917" left="325" width="87" height="16" font="15">Connections </text>
<text top="917" left="499" width="65" height="16" font="15">Requests </text>
<text top="917" left="693" width="21" height="16" font="15">All </text>
<text top="944" left="120" width="152" height="16" font="30"><b>Compromised wished </b></text>
<text top="944" left="364" width="9" height="16" font="15">‐ </text>
<text top="944" left="527" width="9" height="16" font="15">‐ </text>
<text top="944" left="690" width="26" height="16" font="15">Yes </text>
<text top="972" left="133" width="126" height="16" font="30"><b>Knowledge to run </b></text>
<text top="972" left="352" width="31" height="16" font="15">Low </text>
<text top="972" left="500" width="63" height="16" font="15">Low‐Mid </text>
<text top="972" left="686" width="34" height="16" font="15">High </text>
<text top="999" left="118" width="157" height="16" font="30"><b>Knowledge to develop </b></text>
<text top="999" left="352" width="31" height="16" font="15">Low </text>
<text top="999" left="516" width="30" height="16" font="15">Mid </text>
<text top="999" left="670" width="66" height="16" font="15">Mid‐High </text>
<text top="1027" left="131" width="129" height="16" font="30"><b>Maintenance time </b></text>
<text top="1027" left="352" width="31" height="16" font="15">Low </text>
<text top="1027" left="516" width="31" height="16" font="15">Low </text>
<text top="1027" left="669" width="69" height="16" font="15">Very High </text>
<text top="1074" left="108" width="48" height="24" font="22">3.4.3</text>
<text top="1074" left="156" width="7" height="22" font="23"> </text>
<text top="1074" left="162" width="397" height="24" font="22">Decision towards a honeypot system </text>
<text top="1107" left="108" width="681" height="18" font="0">The Table 2 reflects well the result found in the literature in matter of differences between </text>
<text top="1132" left="108" width="681" height="18" font="0">low/mid‐interaction and high‐interaction honeypot. The literature (Honeynet, 2011) shows </text>
</page>
<page number="38" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">38 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">that  a  lot  of  researches  have  been  realised  in  the  development  of  low/mid  interaction </text>
<text top="137" left="108" width="681" height="18" font="0">honeypots in the past couple of years, while in general, far less works have been realised on </text>
<text top="162" left="108" width="677" height="18" font="0">high‐interaction  honeypots.  The  main  causes  stated  by  (Spitzner,  2010),  are  that  high‐</text>
<text top="187" left="108" width="681" height="18" font="0">interaction  honeypots  are  very  complex  to  deploy,  maintain  and  require  an  “extensive </text>
<text top="213" left="108" width="681" height="18" font="0">tender  loving  care”.    Moreover,  a  badly  configured  high‐interaction  honeypot  could </text>
<text top="238" left="108" width="298" height="18" font="0">potentially threaten the whole network. </text>
<text top="269" left="108" width="681" height="18" font="0">The honeypot system will be installed within the cloud computing of Napier University and </text>
<text top="294" left="108" width="681" height="18" font="0">the security issues of this implementation needs to be taken in consideration. The review of </text>
<text top="320" left="108" width="681" height="18" font="0">the  cloud  computing  security  issues  demonstrate  that  cloud,  at  the  time  of  writing  this </text>
<text top="345" left="108" width="337" height="18" font="0">project, has undoubted security weaknesses.  </text>
<text top="376" left="108" width="681" height="18" font="0">The  very  complex  configuration  of  the  high  interaction  honeypot  and  the  security  issues </text>
<text top="401" left="108" width="677" height="18" font="0">related  to  the  cloud  computing  shows  that  it  will  not  be  appropriate  to  install  a  high‐</text>
<text top="427" left="108" width="681" height="18" font="0">interactivity honeypot in the cloud of the University, because there will be a higher risk that </text>
<text top="452" left="108" width="474" height="18" font="0">an attacker compromises the honeypot and the entire network.  </text>
<text top="483" left="108" width="681" height="18" font="0">Therefore,  the  honeypot  involvement  leans  toward  a  low/mid  interaction  honeypot.  The </text>
<text top="508" left="108" width="314" height="18" font="0">following honeypot systems are reviewed: </text>
<text top="540" left="135" width="6" height="18" font="0">‐</text>
<text top="540" left="140" width="5" height="17" font="18"> </text>
<text top="540" left="162" width="394" height="18" font="0">Labrea is out‐dated and its functions are very limited. </text>
<text top="565" left="135" width="6" height="18" font="0">‐</text>
<text top="566" left="140" width="5" height="17" font="18"> </text>
<text top="565" left="162" width="627" height="18" font="0">Nepenthes,  Amun  and  Dionaea  are  used  to  trick  automated  malwares  into  the </text>
<text top="590" left="162" width="627" height="18" font="0">honeypot  in  order  to  get  the  payload  of  malicious  worms.  To  do  so,  they  require </text>
<text top="616" left="162" width="627" height="18" font="0">multiple attempts by the same worm in order to generate a signature. They are able </text>
<text top="641" left="162" width="457" height="18" font="0">to emulate a single host with multiple network vulnerabilities. </text>
<text top="666" left="135" width="6" height="18" font="0">‐</text>
<text top="667" left="140" width="5" height="17" font="18"> </text>
<text top="666" left="162" width="627" height="18" font="0">HoneyD  allows  the  creation  of  small‐  to  large‐scale  virtual  networks  (up  to  65000 </text>
<text top="691" left="162" width="627" height="18" font="0">hosts) using only one machine. HoneyD is open source and written in Python, which </text>
<text top="717" left="162" width="627" height="18" font="0">make  it  easily  configurable.  Moreover,  the  vulnerability  scripts  used  to  simulate </text>
<text top="742" left="162" width="564" height="18" font="0">different services (Telnet, Web, SSH...) are easily accessible and very flexible. </text>
<text top="773" left="108" width="681" height="18" font="0">Nephentes, Amun, Dioneae and HoneyD can all emulate services with specific vulnerability, </text>
<text top="798" left="108" width="681" height="18" font="0">as required by this study. In comparison and after a lot of research online, HoneyD seems to </text>
<text top="824" left="108" width="681" height="18" font="0">be  more  accessible  in  reason  of  the  multiple  sample  configurations,  service  scripts,  tools </text>
<text top="849" left="108" width="681" height="18" font="0">associated  and  large  open  forum  available  on  its  website  (Provos,  2007).  Consequently, </text>
<text top="874" left="108" width="262" height="18" font="0">HoneyD will be used in this project. </text>
<text top="928" left="108" width="32" height="26" font="16">3.5</text>
<text top="929" left="140" width="7" height="24" font="17"> </text>
<text top="928" left="182" width="294" height="26" font="16">Cross Site Scripting (XSS) </text>
<text top="984" left="108" width="48" height="24" font="22">3.5.1</text>
<text top="985" left="156" width="7" height="22" font="23"> </text>
<text top="984" left="162" width="285" height="24" font="22">Introduction and Decision </text>
<text top="1018" left="108" width="681" height="18" font="0">There is a wide repertoire of hacking techniques used by pirates to gather sensitive data and </text>
<text top="1043" left="108" width="681" height="18" font="0">stolen  credentials  from  web  servers.    According  to  the  Web  Hacking  Incident  Database </text>
<text top="1068" left="108" width="681" height="18" font="0">(WHID,  2011),  most  popular  attacks  concern  SQL  injections,  Cross  Site  Scripting  (XSS)  and </text>
<text top="1093" left="108" width="681" height="18" font="0">Denial  of  Service.  Statistics  concerning  the  top  attack  methods  used  in  2011  have  been </text>
<text top="1119" left="108" width="542" height="18" font="0">realised by the WHID. Their results are showed in the following Figure 13: </text>
</page>
<page number="39" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">39 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="511" left="784" width="4" height="18" font="0"> </text>
<text top="536" left="296" width="304" height="14" font="21"><b>Figure 13 ‐ Statistics of top attacks 2011 (WHID, 2011) </b></text>
<text top="560" left="108" width="681" height="18" font="0">The decision to study the Cross Site Scripting attacks has been made, after introducing the </text>
<text top="585" left="108" width="681" height="18" font="0">top three attack methods in the chapter Technologies Review 2.5. This decision is based on </text>
<text top="610" left="108" width="681" height="18" font="0">the unpopularity of this type of attack. Indeed, SQL Injections and DDoS attacks are often at </text>
<text top="635" left="108" width="681" height="18" font="0">the  headlines  of  the  news;  however,  it  is  rare  to  hear  about  Cross  Site  Scripting  even </text>
<text top="661" left="108" width="681" height="18" font="0">thought this year it has been the second most  used attack on the internet. This section is </text>
<text top="686" left="108" width="681" height="18" font="0">going  to  analyse  the  literature  about  the  injection  theory  of  XSS  attacks,  the  prevention </text>
<text top="711" left="108" width="615" height="18" font="0">rules used to prevent a XSS injection and examples showing up to date XSS attacks.  </text>
<text top="755" left="108" width="48" height="24" font="22">3.5.2</text>
<text top="756" left="156" width="7" height="22" font="23"> </text>
<text top="755" left="162" width="173" height="24" font="22">Injection theory </text>
<text top="789" left="108" width="681" height="18" font="0">Injection is an attack that allows a malicious user to break out of a data context and switch </text>
<text top="814" left="108" width="681" height="18" font="0">into a code context, through the use of special characters. These special characters injected </text>
<text top="839" left="108" width="681" height="18" font="0">in  a  text  context  will  be  interpreted  by  the  server  side  as a  code  context  and  could  cause </text>
<text top="864" left="108" width="681" height="18" font="0">serious issues. XSS injections use this technique to insert code into HTML documents. HTML </text>
<text top="890" left="108" width="681" height="18" font="0">is the predominant mark‐up language used in web pages. However, this language is one of </text>
<text top="915" left="108" width="681" height="18" font="0">the worst of all the coding languages, because it supports so many different types of valid </text>
<text top="940" left="108" width="681" height="18" font="0">encodings and becomes a total mishmash. Moreover, HTML supports the addition of other </text>
<text top="966" left="108" width="681" height="18" font="0">languages as XML, JavaScript, URL, CSS, VBScript etc., which make it even more confusing. </text>
<text top="991" left="108" width="681" height="18" font="0">XSS are injected in the hierarchical structure of the HTML Document Object Model (DOM) </text>
<text top="1016" left="108" width="681" height="18" font="0">through  fields  that  accept  untrusted  data.  This  untrusted  data  corresponds  to  the  data </text>
<text top="1041" left="108" width="681" height="18" font="0">entered by the users of a website. This data can be injected in two different ways (OWASP, </text>
<text top="1067" left="108" width="51" height="18" font="0">2011): </text>
<text top="1098" left="135" width="6" height="18" font="0">‐</text>
<text top="1098" left="140" width="5" height="17" font="18"> </text>
<text top="1098" left="162" width="627" height="18" font="0">Injecting UP is the most common way in XSS injection. This technique uses a special </text>
<text top="1123" left="162" width="627" height="18" font="0">character to close the current context, which results in going up a level in the HTML </text>
</page>
<page number="40" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="31" size="16" family="Times" color="#ff0000"/>
	<fontspec id="32" size="14" family="Courier" color="#9bbb59"/>
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">40 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="162" width="627" height="18" font="0">hierarchy  and  to  start  a  new  context  with  a  malicious  code.  An  HTML  example </text>
<text top="137" left="162" width="627" height="18" font="0">consists in inserting a closed angle‐bracket followed by a new script tag, which result </text>
<text top="162" left="162" width="459" height="18" font="0">in the execution of the script inserted between the scripts tag, </text>
<text top="162" left="621" width="103" height="18" font="31">as seen below</text>
<text top="162" left="724" width="9" height="18" font="0">: </text>
<text top="196" left="108" width="79" height="13" font="26">&lt;a href=</text>
<text top="196" left="187" width="346" height="13" font="32">http://website/Link_to_your_website</text>
<text top="196" left="534" width="69" height="13" font="26">/&gt;     </text>
<text top="196" left="603" width="129" height="13" font="32">--Normal user</text>
<text top="196" left="732" width="10" height="13" font="26"> </text>
<text top="219" left="108" width="89" height="13" font="26">&lt;a href=”</text>
<text top="219" left="197" width="337" height="13" font="27">/&gt; &lt;script&gt;alert(”XSS”)&lt;/script&gt; &lt;</text>
<text top="219" left="534" width="69" height="13" font="26">“/&gt;    </text>
<text top="219" left="603" width="158" height="13" font="27">--Malicious user</text>
<text top="219" left="761" width="10" height="13" font="26"> </text>
<text top="258" left="135" width="6" height="18" font="0">‐</text>
<text top="258" left="140" width="5" height="17" font="18"> </text>
<text top="258" left="162" width="627" height="18" font="0">Injecting DOWN is the less common way in XSS injection. This technique aims to start </text>
<text top="283" left="162" width="627" height="18" font="0">a code sub context without closing the existing context. An HTML example consist in </text>
<text top="308" left="162" width="627" height="18" font="0">inserting  JavaScript  within  the  current  context,  in  order  to  introduce  a  sub  context </text>
<text top="334" left="162" width="289" height="18" font="0">within the src attribute, as seen below: </text>
<text top="367" left="108" width="99" height="13" font="26">&lt;img src=”</text>
<text top="367" left="207" width="327" height="13" font="32">http://website/Link_to_your_image</text>
<text top="367" left="534" width="59" height="13" font="26">”/&gt;   </text>
<text top="367" left="593" width="129" height="13" font="32">--Normal user</text>
<text top="367" left="722" width="10" height="13" font="26"> </text>
<text top="391" left="108" width="99" height="13" font="26">&lt;img src=”</text>
<text top="391" left="207" width="346" height="13" font="27">javascript:alert('document.cookie')</text>
<text top="391" left="553" width="40" height="13" font="26">”/&gt; </text>
<text top="391" left="593" width="168" height="13" font="27">--Malicious user </text>
<text top="433" left="108" width="48" height="24" font="22">3.5.3</text>
<text top="433" left="156" width="7" height="22" font="23"> </text>
<text top="433" left="162" width="173" height="24" font="22">Detection Rules </text>
<text top="466" left="108" width="681" height="18" font="0">To  prevent  the  injection  of  malicious  script  through  URLs  or  forms  that  accept  untrusted </text>
<text top="492" left="108" width="681" height="18" font="0">data, a simple attempt consist in blocking the input of the characters “&lt;” and “&gt;&#34;, which are </text>
<text top="517" left="108" width="681" height="18" font="0">generally used to inject script tags (CERT, 2011). Therefore, an attacker will not be able to </text>
<text top="542" left="108" width="681" height="18" font="0">inject  the  previous  tag  “&lt;SCRIPT&gt;”  into  a  web  page  because  the  angled  brackets  will  be </text>
<text top="567" left="108" width="658" height="18" font="0">detected and blocked. This solution works well but blocks only a small part of the attacks. </text>
<text top="599" left="108" width="681" height="18" font="0">According to K. Mookhey, the famous IDS Snort, which has a set of signatures for detecting </text>
<text top="624" left="108" width="681" height="18" font="0">XSS attack, can be easily evaded by XSS attacks (Mookhey, et al., 2010). Indeed, Snort XSS </text>
<text top="649" left="108" width="681" height="18" font="0">signatures do not filter hex‐encoded values. Thus, Snort would not detect the characters “<b>&lt;</b>” </text>
<text top="675" left="108" width="681" height="18" font="0">and  “<b>&gt;</b>&#34;  that  appear  as  “<b>%3C</b>”  and  “<b>%3E</b>”  while  the  tag  <b>&lt;script&gt;  </b>would  appear  as </text>
<text top="700" left="108" width="681" height="18" font="19"><b>%3C%73%63%72%69%70%74%3E.</b> These hex‐encoded values are used to inject embedded </text>
<text top="725" left="108" width="360" height="18" font="0">scripts tags without being detected by the NIDS.  </text>
<text top="756" left="108" width="681" height="18" font="0">To avoid this problem, hex encoded values corresponding to the blocked characters, should </text>
<text top="782" left="108" width="681" height="18" font="0">be  also  blocked.  K.  Mookhey  gives  a  list  that  can  avoid  most  of  the  XSS  attacks  by  using </text>
<text top="807" left="108" width="667" height="18" font="0">specifics characters that should be restricted from the user’s input, represented in Table 3: </text>
<text top="837" left="240" width="416" height="14" font="21"><b>Table 3 ‐ Special characters specification based on (Mookhey, et al., 2010) </b></text>
<text top="862" left="108" width="129" height="16" font="30"><b>Special Characters </b></text>
<text top="862" left="265" width="88" height="16" font="30"><b>Signification </b></text>
<text top="890" left="174" width="12" height="16" font="24"><b>&lt; </b></text>
<text top="890" left="265" width="110" height="16" font="15">Introduce a tag. </text>
<text top="917" left="173" width="15" height="16" font="24"><b>&amp; </b></text>
<text top="917" left="265" width="519" height="16" font="15">Introduce a character entity when used in conjunction with some attributes </text>
<text top="937" left="265" width="129" height="16" font="15">in HTML encoding. </text>
<text top="965" left="174" width="12" height="16" font="24"><b>&gt; </b></text>
<text top="965" left="265" width="519" height="16" font="15">Some browsers treat this character as special because they assume that the </text>
<text top="985" left="265" width="513" height="16" font="15">author really meant an opening angled bracket (“&lt;”), but omitted it in error. </text>
<text top="1013" left="172" width="16" height="16" font="24"><b>% </b></text>
<text top="1013" left="265" width="519" height="16" font="15">Introduce Hexa‐encoded values that are used to avoid detection by security </text>
<text top="1033" left="265" width="91" height="16" font="15">mechanisms. </text>
<text top="1061" left="175" width="11" height="16" font="24"><b>/ </b></text>
<text top="1061" left="265" width="140" height="16" font="15">End an HTML entity. </text>
<text top="1088" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="41" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">41 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">In  addition  to  the  filtering  of  special  characters,  the  OWASP  foundation  provides  a  XSS </text>
<text top="137" left="108" width="681" height="18" font="0">prevention  sheet  composed  of  a  set  of  eight  prevention  rules  that  should  stop  the  vast </text>
<text top="162" left="108" width="681" height="18" font="0">majority of XSS (OWASP, 2011). These rules aim in reducing the freedom of the user’s input </text>
<text top="187" left="108" width="322" height="18" font="0">of untrusted data into an HTML document.  </text>
<text top="232" left="108" width="48" height="24" font="22">3.5.4</text>
<text top="232" left="156" width="7" height="22" font="23"> </text>
<text top="232" left="162" width="377" height="24" font="22">Recent Cross Site Scripting Attacks </text>
<text top="276" left="162" width="59" height="25" font="1">3.5.4.1</text>
<text top="281" left="221" width="6" height="19" font="7"> </text>
<text top="276" left="227" width="345" height="25" font="1">A	Wide	spectrum	of	websites	targeted	</text>
<text top="308" left="108" width="681" height="18" font="0">XSS attacks are really common, as seen in the Figure 13, 12.5% of the attacks are attributed </text>
<text top="333" left="108" width="681" height="18" font="0">to  XSS  (WHID,  2011).  However,  it  is  hard  to  realise  that  the  bigger  the  web  sites  are,  the </text>
<text top="359" left="108" width="681" height="18" font="0">more chances they had or have issues with XSS. A good source of recent XSS vulnerabilities </text>
<text top="384" left="108" width="681" height="18" font="0">can be found on the XXSed project (XSSed, 2011). This website aims to provide up to date </text>
<text top="409" left="108" width="681" height="18" font="0">information  about  the  last  XSS  vulnerabilities  found  by  their  community.  Before  being </text>
<text top="435" left="108" width="681" height="18" font="0">published,  the  XSS  are  validated  by  the  moderators,  an  email  is  sent  to  the  company </text>
<text top="460" left="108" width="681" height="18" font="0">targeted  and  an  archive  of  the  vulnerability  is  saved  on  their  website.  By  sorting  the </text>
<text top="485" left="108" width="681" height="18" font="0">vulnerabilities  by  websites,  main  stream  webservers  are  easily  found:  Google,  Yahoo, </text>
<text top="510" left="108" width="681" height="18" font="0">Lastminute,  Facebook,  Twitter,  Youtube,  Myspace,  Ebay,  Microsoft…  and  the  list  goes  on </text>
<text top="536" left="108" width="662" height="18" font="0">and on. Each one of these websites were, and are still probably, vulnerable to XSS attacks. </text>
<text top="572" left="162" width="59" height="25" font="1">3.5.4.2</text>
<text top="577" left="221" width="6" height="19" font="7"> </text>
<text top="572" left="227" width="310" height="25" font="1">Up	to	date	example:	Facebook	XSS	</text>
<text top="604" left="108" width="681" height="18" font="0">Facebook is a widely used social networking website that has more than 800 million users </text>
<text top="629" left="108" width="681" height="18" font="0">and  50%  of  them  log  on  the  website  on  any  given  day.  Last  April,  two  separate  cross‐site </text>
<text top="655" left="108" width="681" height="18" font="0">scripting  vulnerabilities  were  uncovered  (Harmonyguy,  2011).  These  holes  were  used  to </text>
<text top="680" left="108" width="207" height="18" font="0">spread viral links or attacks. </text>
<text top="711" left="108" width="681" height="18" font="0">On  April  3rd,  the  first  vulnerability  came  from  a  page  on  the  mobile  version  of  Facebook. </text>
<text top="736" left="108" width="681" height="18" font="0">The interface was a prompt used for posting stories to a user’s wall. The parameters used </text>
<text top="762" left="108" width="681" height="18" font="0">for the text input in that prompt were not accurately defined so that the text input was able </text>
<text top="787" left="108" width="681" height="18" font="0">to escape the filtering process. The vulnerability was a code that opens a connection to the </text>
<text top="812" left="108" width="681" height="18" font="0">Facebook  home  page  and  posts  into  the  wall  of  the  user  the  message  “Wow..cool!  Nice </text>
<text top="838" left="108" width="681" height="18" font="0">page…” followed by a link to a viral page. Anyone attempting to click on this link would have </text>
<text top="863" left="108" width="681" height="18" font="0">the same code executed and the same message posted on his wall.  Luckily, the viral page </text>
<text top="888" left="108" width="681" height="18" font="0">was  not  used  for  malwares  spreading  but  simply  for  advertisements  and  spam.  This </text>
<text top="913" left="108" width="354" height="18" font="0">vulnerability was using the code seen Figure 14: </text>
<text top="1049" left="790" width="4" height="18" font="0"> </text>
<text top="1075" left="283" width="329" height="14" font="21"><b>Figure 14 ‐ Facebook XSS text prompt (Harmonyguy, 2011) </b></text>
<text top="1098" left="108" width="110" height="18" font="0">Later, on the 7</text>
<text top="1094" left="218" width="10" height="12" font="25">th</text>
<text top="1098" left="228" width="561" height="18" font="0"> of April, a second vulnerability was detected and came from the Facebook </text>
<text top="1123" left="108" width="681" height="18" font="0">app  page  (Harmonyguy,  2011).  Despite  the  filters  installed  by  Facebook  to  prevent  scripts </text>
</page>
<page number="42" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">42 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">from apps to modify the page’s Document Object Model (DOM), the XSS vulnerability was </text>
<text top="137" left="108" width="681" height="18" font="0">still able to execute code. Indeed, this code was hidden within a video hyperlink, which is </text>
<text top="162" left="108" width="681" height="18" font="0">interpreted  on  Facebook  as  an  image  place  holder  (“href=”)  followed  by  the  link.  Users </text>
<text top="187" left="108" width="681" height="18" font="0">clicking on this video (that actually works) would execute without their consents the hidden </text>
<text top="213" left="108" width="681" height="18" font="0">script.  Again,  XSS  made  its  way  around  the  Facebook  filters  by  using  a  simple  space </text>
<text top="238" left="108" width="681" height="18" font="0">character  to  execute  a  JavaScript  code,  see  Figure  15.  Normally,  Facebook’s  filters  block </text>
<text top="263" left="108" width="681" height="18" font="0">JavaScript  input  but  the  simple  addition  of  a  space  preceding  the  command  in  the  place </text>
<text top="288" left="108" width="681" height="18" font="0">holder  field,  was  able  to  pass  undetected  by  the  filters  and  to  be  executed  as  JavaScript </text>
<text top="314" left="108" width="159" height="18" font="0">code by the browser. </text>
<text top="524" left="743" width="4" height="18" font="0"> </text>
<text top="549" left="289" width="317" height="14" font="21"><b>Figure 15 ‐ Facebook XSS Javascript (Harmonyguy, 2011) </b></text>
<text top="595" left="108" width="32" height="26" font="16">3.6</text>
<text top="596" left="140" width="7" height="24" font="17"> </text>
<text top="595" left="182" width="142" height="26" font="16">Legal issues </text>
<text top="641" left="108" width="681" height="18" font="0">The  legal  issues  concerning  honeypot  systems  remain  a  controversial  topic.  Most  of  the </text>
<text top="667" left="108" width="681" height="18" font="0">articles found on the web are out‐dated and only provide the authors’ self‐opinions. There </text>
<text top="692" left="108" width="681" height="18" font="0">are no law concerning honeypots deployment in the UK. Nevertheless, on the other side of </text>
<text top="717" left="108" width="681" height="18" font="0">the  Atlantic  Ocean,  the  CyberLaw101  (Radcliffe,  2007)  has  been  adopted  in  2007  in  the </text>
<text top="742" left="108" width="681" height="18" font="0">United‐States of America: “a primer to US law the deployment of honeypot systems”.  The </text>
<text top="768" left="108" width="681" height="18" font="0">major legal issues concern the privacy and entrapment. However, a recent article published </text>
<text top="793" left="108" width="681" height="18" font="0">on the Symantec website (Spitzner, 2010), stated: “there are no legal cases recorded on the </text>
<text top="818" left="108" width="681" height="18" font="0">issues  concerning  honeypot  deployment  in  the  US”.  Therefore,  until  a  judge  gives  a  court </text>
<text top="843" left="108" width="193" height="18" font="0">order, the law stay blurry. </text>
<text top="875" left="108" width="681" height="18" font="0">The legal issues of a honeypot deployment on the cloud are even more unclear because of </text>
<text top="900" left="108" width="681" height="18" font="0">the  multiple  countries  that  could  be  involved.  For  example,  a  French  person  could </text>
<text top="925" left="108" width="681" height="18" font="0">implement  a  honeypot  on  the  cloud.  The  cloud  is  based  in  California  and  the  honeypot </text>
<text top="950" left="108" width="681" height="18" font="0">receives attacks coming from China. In that case, there would be three countries involved, </text>
<text top="976" left="108" width="681" height="18" font="0">each  one  of  them  with  different  laws  enforcement.  Internet  can  become  exponentially </text>
<text top="1001" left="108" width="385" height="18" font="0">confusing and incomprehensible for law authorities. </text>
<text top="1032" left="108" width="681" height="18" font="0">To have a reasonable idea about the legal issues of a cloud‐based honeypot, I contacted the </text>
<text top="1058" left="108" width="681" height="18" font="0">Amazon Web Services (AWS) security group (Amazon, 2011) and asked if it was allowed to </text>
<text top="1083" left="108" width="399" height="18" font="0">implement a honeypot within EC2. Their reply is firm:  </text>
</page>
<page number="43" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">43 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="685" height="18" font="0">« <i>It is <b>against</b> <b>AWS Terms of Service </b>and Acceptable Use Policy to set up honeypots on EC2.  </i></text>
<text top="137" left="108" width="441" height="18" font="20"><i>Those restrictions are specifically called out in the following: </i></text>
<text top="168" left="140" width="649" height="18" font="20"><i>You may not use, or encourage, promote, facilitate or instruct others to use, the Services </i></text>
<text top="193" left="140" width="327" height="18" font="20"><i>or AWS Site for any illegal [or] harmful use... </i></text>
<text top="225" left="135" width="654" height="18" font="20"><i>Prohibited activities...include...activities that may be harmful to other, our operations or </i></text>
<text top="250" left="135" width="95" height="18" font="20"><i>reputation... </i></text>
<text top="281" left="135" width="654" height="18" font="20"><i>Prohibited content include[s]...content or other computer technology that may damage, </i></text>
<text top="306" left="135" width="654" height="18" font="20"><i>interfere  with,  surreptitiously  intercept,  or  expropriate  any  system,  program,  or  data, </i></text>
<text top="332" left="135" width="494" height="18" font="20"><i>including viruses, Trojan horses, worms, time bombs, or cancelbots. </i></text>
<text top="363" left="135" width="654" height="18" font="20"><i>Prohibited  activities...include...attempting  to  probe,  scan,  or  test  the  vulnerability  of  a </i></text>
<text top="388" left="135" width="654" height="18" font="20"><i>System or to breach any security or authentication measures used by a system.  System </i></text>
<text top="413" left="135" width="654" height="18" font="20"><i>includes  any  network,  computer  or  communications  system,  software  application,  or </i></text>
<text top="439" left="135" width="217" height="18" font="20"><i>network or computing device.</i></text>
<text top="426" left="352" width="9" height="37" font="11"> </text>
<text top="439" left="361" width="13" height="18" font="0">»<i> </i></text>
<text top="493" left="108" width="32" height="26" font="16">3.7</text>
<text top="493" left="140" width="7" height="24" font="17"> </text>
<text top="493" left="182" width="134" height="26" font="16">Conclusion </text>
<text top="539" left="108" width="681" height="18" font="0">Throughout  this  literature  review,  many  security  issues  concerning  the  cloud  computing </text>
<text top="564" left="108" width="681" height="18" font="0">have  been  discussed.  The  cloud  computing  is  far  from  being  a  safe  heaven  and  was  even </text>
<text top="589" left="108" width="681" height="18" font="0">described to be a “security nightmare” by Cisco CEO (McMillan, 2009). The main concerns </text>
<text top="615" left="108" width="681" height="18" font="0">related  to  the  security  patch  of  VMs  associated  with  the  roll  back  function,  which  make </text>
<text top="640" left="108" width="681" height="18" font="0">them  hard  to  be  kept  up  to  date  (Christodorescu,  et  al.,  2009).  In  addition,  researchers’ </text>
<text top="665" left="108" width="681" height="18" font="0">(Ristenpart, et al., 2009) show that VMs from different owners located on the same piece of </text>
<text top="690" left="108" width="681" height="18" font="0">hardware may be able to communicate together. Therefore, this investigation shows that, </text>
<text top="716" left="108" width="551" height="18" font="0">to this day, there are many security issues related to the Cloud Computing. </text>
<text top="747" left="108" width="681" height="18" font="0">Based  on  a  study  by  the  Web  Hacking  Incident  Database  (WHID,  2011),  one  of  the  most </text>
<text top="772" left="108" width="681" height="18" font="0">common application layer hacking techniques aiming webservers are the Cross‐site scripting </text>
<text top="797" left="108" width="681" height="18" font="0">attacks. The world is moving towards the cloud computing because it is cost effective and </text>
<text top="823" left="108" width="681" height="18" font="0">more  convenient.  This  means  that webservers are  being  moved  from  being  physical  hosts </text>
<text top="848" left="108" width="681" height="18" font="0">into  being  a  virtualized  host  on  the  cloud.  This  virtualization  of  webservers  on  the  cloud </text>
<text top="873" left="108" width="681" height="18" font="0">induces that Cross‐Site Scripting attacks are, nowadays, aiming cloud based webserver. By </text>
<text top="899" left="108" width="681" height="18" font="0">following  the  trend,  the  first  aim  of  this  project  is  to  implement  a  honeypot  simulating  a </text>
<text top="924" left="108" width="681" height="18" font="0">Web server onto the cloud computing. This honeypot aims to detect XSS attacks. A first gap </text>
<text top="949" left="108" width="681" height="18" font="0">in the literature has been identified during the literature review as no studies have set up a </text>
<text top="974" left="108" width="681" height="18" font="0">honeypot onto the cloud computing. Initially it was thought the gap was due to the recent </text>
<text top="1000" left="108" width="681" height="18" font="0">emergence of the cloud computing. However, after contacting the AWS (Amazon, 2011), a </text>
<text top="1025" left="108" width="681" height="18" font="0">second reason was found: regulations of cloud providers do not allow the implementation </text>
<text top="1050" left="108" width="681" height="18" font="0">of honeypots on their cloud infrastructure. Luckily, this project is going be implemented into </text>
<text top="1075" left="108" width="681" height="18" font="0">Edinburgh  Napier  University  privately  owned  cloud  infrastructure,  which  will  avoid  cloud </text>
<text top="1101" left="108" width="157" height="18" font="0">provider regulations. </text>
</page>
<page number="44" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="344" width="209" height="18" font="0">Chapter 3  Literature review </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">44 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">The second aim of this project is to generate ACLs and IDS signatures when XSS attacks are </text>
<text top="137" left="108" width="681" height="18" font="0">detected.  Similar  works  have  been  done  before  and  have  used  the  honeypot’s  log  file  in </text>
<text top="162" left="108" width="681" height="18" font="0">order  to  generate  IDS  signatures  to  counteract  FTP  attacks  (Grønland,  2006)  or  worms </text>
<text top="187" left="108" width="681" height="18" font="0">attacks  (Tang,  2011).  However,  a  second  gap  was  identified  in  the  literature  because  the </text>
<text top="213" left="108" width="681" height="18" font="0">signature  generation  always  required  user’s  intervention  during  the  process.  To  fulfil  this </text>
<text top="238" left="108" width="681" height="18" font="0">gap,  the  second  aim  is  redefined  into  fully  automate  the  whole  signature  generation </text>
<text top="263" left="108" width="64" height="18" font="0">process. </text>
<text top="294" left="108" width="681" height="18" font="0">Additionally, a third gap was found in the honeypot literature: studies reviewed show that </text>
<text top="320" left="108" width="681" height="18" font="0">honeypots can detect attacks even if background traffic is injected. However, there are no </text>
<text top="345" left="108" width="642" height="18" font="0">studies relating the background traffic speed breaking point to the honeypot’s stability. </text>
<text top="376" left="108" width="681" height="18" font="0">The  decision  towards  a  honeypot  system  is  based  on  a  comparison  of  multiple  honeypot </text>
<text top="401" left="108" width="681" height="18" font="0">systems according to their level of interactivity. Despite of keeping the risk low in Edinburgh </text>
<text top="427" left="108" width="681" height="18" font="0">Napier  University  Cloud,  the  decision  was  taken  not  to  use  a  high  interaction  honeypot. </text>
<text top="452" left="108" width="681" height="18" font="0">Therefore,  the  choice  was  based  on  a  panel  of  low/middle  interaction  honeypots.  After  a </text>
<text top="477" left="108" width="681" height="18" font="0">comparison of the features provided by each honeypot, the choice was taken to use HoneyD </text>
<text top="503" left="108" width="681" height="18" font="0">(Provos, 2007) because it seemed to be more accessible than other honeypots, according to </text>
<text top="528" left="108" width="681" height="18" font="0">the  multiple  sample  configurations,  service  scripts,  tools  associated  and  large  open  forum </text>
<text top="553" left="108" width="183" height="18" font="0">available on its website.  </text>
<text top="584" left="108" width="681" height="18" font="0">Finally,  by  carrying  out  the  literature  review,  three  gaps  have  been  highlighted  within  the </text>
<text top="610" left="108" width="681" height="18" font="0">research area. The aim of the next chapter is to propose a prototype design that will fulfil </text>
<text top="635" left="108" width="91" height="18" font="0">these gaps.  </text>
<text top="666" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="45" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">45 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="46" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="382" width="133" height="18" font="0">Chapter 4  Design </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">46 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="152" left="108" width="165" height="37" font="11">Chapter 4.</text>
<text top="152" left="273" width="10" height="33" font="6"> </text>
<text top="152" left="324" width="121" height="37" font="11">Design </text>
<text top="231" left="108" width="32" height="26" font="16">4.1</text>
<text top="231" left="140" width="7" height="24" font="17"> </text>
<text top="231" left="182" width="149" height="26" font="16">Introduction </text>
<text top="277" left="108" width="681" height="18" font="0">The literature review has outlined that previous works in the area of honeypot systems do </text>
<text top="302" left="108" width="681" height="18" font="0">not permit fully automated generation of signatures for NIDS. In addition, no studies discuss </text>
<text top="327" left="108" width="681" height="18" font="0">the installation of a honeypot within the Cloud Computing and no studies refer to measuring </text>
<text top="352" left="108" width="681" height="18" font="0">the  background  traffic  breaking  point  to  assess  whether  the  honeypot  becomes  unstable. </text>
<text top="378" left="108" width="681" height="18" font="0">This  chapter  is  going  to  fulfil  these  gaps  by  designing  some  scripts  to  fully  automate  the </text>
<text top="403" left="108" width="681" height="18" font="0">whole process of ACLs and Snort signature generation. In addition, a design of the honeypot </text>
<text top="428" left="108" width="681" height="18" font="0">within  the  cloud  infrastructure  will  be  proposed.  Finally,  this  chapter  will  design  some </text>
<text top="454" left="108" width="681" height="18" font="0">experiments to find out the effectiveness of the prototype created and the breaking point of </text>
<text top="479" left="108" width="681" height="18" font="0">the honeypot systems. The set up for this implementation will be operated within Edinburgh </text>
<text top="504" left="108" width="681" height="18" font="0">Napier  University’s  private  cloud  computing  infrastructure  and  kept  for  future  use  by  the </text>
<text top="529" left="108" width="76" height="18" font="0">students.  </text>
<text top="583" left="108" width="32" height="26" font="16">4.2</text>
<text top="584" left="140" width="7" height="24" font="17"> </text>
<text top="583" left="182" width="374" height="26" font="16">Network Architecture Overview </text>
<text top="629" left="108" width="681" height="18" font="0">An  ideal  network  architecture  design  is  to  filter  the  network  traffic  before  it  enters  inside </text>
<text top="655" left="108" width="681" height="18" font="0">the cloud infrastructure. To do so, the design of the prototype network architecture is split </text>
<text top="680" left="108" width="681" height="18" font="0">into  two  sections:  The  first  section  is  composed  of  two  security  layers  that  analyse  the  IP </text>
<text top="705" left="108" width="681" height="18" font="0">packet  and  content  before  entering  the  cloud  infrastructure.  The  second  section  is </text>
<text top="731" left="108" width="681" height="18" font="0">composed  of  a  security sensor  (honeypot)  placed  within  the  cloud  infrastructure, which  is </text>
<text top="756" left="108" width="269" height="18" font="0">able to detect undiscovered threats. </text>
<text top="787" left="108" width="681" height="18" font="0">On the front end of the network, a cisco router is placed and followed by Snort NIDS. The </text>
<text top="812" left="108" width="681" height="18" font="0">router  is  used  to  filter  the  traffic  by  using  IP  access  control  lists  known  as  ACLs.  The </text>
<text top="838" left="108" width="681" height="18" font="0">configurations of ACLs allow to filter network packets based on their IP source/destination, </text>
<text top="863" left="108" width="681" height="18" font="0">protocol  and  port.  ACLs  are  implemented  on  the  interface of  the  router  desired  and  filter </text>
<text top="888" left="108" width="681" height="18" font="0">inbound  and/or  outbound  traffic.  Each  ACL  have  specific  actions  (log/drop)  to  do  when  IP </text>
<text top="913" left="108" width="681" height="18" font="0">packet  match  is  discovered.  ACLs  are  effective  to  filter  IP  packets,  to  block  suspicious </text>
<text top="939" left="108" width="681" height="18" font="0">individuals or restrict access to specific services. However, they cannot examine the content </text>
<text top="964" left="108" width="681" height="18" font="0">carried out within the packet, which can be harmful to the network. To examine the content </text>
<text top="989" left="108" width="681" height="18" font="0">carried  out  by  a  packet,  the  NIDS  Snort  is  placed  below  the  router  and  provides  a  second </text>
<text top="1014" left="108" width="681" height="18" font="0">layer  of  security.  Snort  examines  the  packet’s  content  against  its  set  of  signatures,  to </text>
<text top="1040" left="108" width="681" height="18" font="0">determine  the  packet maliciousness.  Here  again,  if  a  content  match  is  discovered,  specific </text>
<text top="1065" left="108" width="681" height="18" font="0">actions will be taken to log or drop the packet. The choice of placing the router on the front </text>
<text top="1090" left="108" width="681" height="18" font="0">end  and  the  NIDS  above  is  well  thought:  the  router  can  process  packets  quicker  than  the </text>
<text top="1116" left="108" width="681" height="18" font="0">NIDS. Therefore, less traffic will be sent to the NIDS, which will ensure a low congestion in </text>
</page>
<page number="47" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="33" size="7" family="Times" color="#000000"/>
<text top="57" left="382" width="133" height="18" font="0">Chapter 4  Design </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">47 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">the  network.  Once  a  packet  successfully  passed  these  two  security  layer,  it  will  be </text>
<text top="137" left="108" width="263" height="18" font="0">forwarded to the cloud hypervisor.  </text>
<text top="168" left="108" width="681" height="18" font="0">The cloud hypervisor acts like a router and determine which packet goes to which instances. </text>
<text top="193" left="108" width="681" height="18" font="0">Instances can be any types of machines or servers allowed by the hypervisor. The honeypot </text>
<text top="219" left="108" width="681" height="18" font="0">system is one of these instances. The honeypot is able to emulate a template that simulates </text>
<text top="244" left="108" width="681" height="18" font="0">a  fake  web  server.  Packets  received  by  the  honeypot  are  analysed  to  determine  their </text>
<text top="269" left="108" width="681" height="18" font="0">maliciousness,  which  will  be  explained  in  the  next  section.  The  following  network </text>
<text top="294" left="108" width="681" height="18" font="0">architecture  draft  and  flow  chart  show  the  different  decisions  taken  when  a  packet  goes </text>
<text top="320" left="108" width="365" height="18" font="0">through the network architecture. Both Figure 16 </text>
<text top="351" left="108" width="681" height="18" font="0"> Figure 16 and Figure 17 have been place next to each other to ease the understanding of </text>
<text top="376" left="108" width="304" height="18" font="0">the device decisions within the network.  </text>
<text top="817" left="336" width="2" height="9" font="33"> </text>
<text top="1038" left="108" width="4" height="16" font="15"> </text>
<text top="1063" left="144" width="264" height="14" font="21"><b> Figure 16 – Ideal Network Architecture Design </b></text>
<text top="1038" left="457" width="4" height="16" font="15"> </text>
<text top="1064" left="460" width="325" height="14" font="21"><b> Figure 17 ‐ Flow chart paths choices for incoming packets </b></text>
<text top="1087" left="108" width="681" height="18" font="0">This network architecture design would be the best architecture to ensure security and high </text>
<text top="1112" left="108" width="681" height="18" font="0">efficiency of the network. However, for the rest of the project, instances for NIDS and the </text>
</page>
<page number="48" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="382" width="133" height="18" font="0">Chapter 4  Design </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">48 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">attacker will be implemented within the cloud infrastructure. Implementing these instances </text>
<text top="137" left="108" width="681" height="18" font="0">on  the  cloud  would  be  easier  to  manipulate  and  provide  the  same  results  than  if  the </text>
<text top="162" left="108" width="284" height="18" font="0">NIDS/attacker were outside the cloud. </text>
<text top="216" left="108" width="32" height="26" font="16">4.3</text>
<text top="216" left="140" width="7" height="24" font="17"> </text>
<text top="216" left="182" width="447" height="26" font="16">XSS Simulation and Logging capability </text>
<text top="262" left="108" width="681" height="18" font="0">To simulate and log XSS attacks, the first step consists in creating a source that will simulate </text>
<text top="287" left="108" width="681" height="18" font="0">the  attacks.  To  do  so,  XSS  vulnerabilities  will  be  retrieved  from  the  “XXSed.com”  website, </text>
<text top="313" left="108" width="681" height="18" font="0">which  is  a  database  of  recent  XSS  vulnerabilities  found  by  the  website’s  community, </text>
<text top="338" left="108" width="681" height="18" font="0">previously seen in the Literature Review 3.5.4.1. By using this database, a list containing 50 </text>
<text top="363" left="108" width="681" height="18" font="0">XSS will be established, which will give a large panel of realistic attacks that could be used </text>
<text top="388" left="108" width="159" height="18" font="0">against a webserver.  </text>
<text top="420" left="108" width="681" height="18" font="0">The second step consists in creating a target able to handle and log these XSS attacks. This is </text>
<text top="445" left="108" width="681" height="18" font="0">done by building a HoneyD’s template that simulates a web server. This web server will host </text>
<text top="470" left="108" width="615" height="18" font="0">a web page that will be closely monitored and any interaction with it will be logged. </text>
<text top="502" left="108" width="681" height="18" font="0">Finally, once these attacks are simulated and every interaction with the web page detected, </text>
<text top="527" left="108" width="681" height="18" font="0">the last step consists in choosing a logging method, which are detailed in Appendix A.4. The </text>
<text top="552" left="108" width="681" height="18" font="0">requirement for this logging method is that it should log any interaction with the web page. </text>
<text top="577" left="108" width="681" height="18" font="0">Therefore,  the  service  level  logging  capability  is  chosen  because  it  can  log  any  interaction </text>
<text top="603" left="108" width="299" height="18" font="0">with the service emulated (web server).  </text>
<text top="656" left="108" width="32" height="26" font="16">4.4</text>
<text top="657" left="140" width="7" height="24" font="17"> </text>
<text top="656" left="182" width="609" height="26" font="16">Detection  of  XSS  attacks  and  Generation  of </text>
<text top="696" left="182" width="265" height="26" font="16">ACLs/Snort Signatures </text>
<text top="752" left="108" width="48" height="24" font="22">4.4.1</text>
<text top="753" left="156" width="7" height="22" font="23"> </text>
<text top="752" left="162" width="364" height="24" font="22">Extracting content and IP address </text>
<text top="786" left="108" width="681" height="18" font="0">The  generation  of  ACLs  and  Snort  signatures  involve  the  understanding  on  how  these </text>
<text top="811" left="108" width="681" height="18" font="0">security measures works. The section reviewed in Design 4.2 explains that ACLs are mainly </text>
<text top="836" left="108" width="681" height="18" font="0">used  to  filter  packets  based  on  their  IP  addresses,  ports  and  services,  while  the  Snort </text>
<text top="861" left="108" width="603" height="18" font="0">signatures are used to analyse and filter suspicious content carried in the packet.   </text>
<text top="893" left="108" width="681" height="18" font="0">Concerning  the  generation  of  ACLs,  this  study  only  aims  in  discarding  suspicious </text>
<text top="918" left="108" width="681" height="18" font="0">IP/individuals  that  have  interacted  with  the  honeypot,  because  any  interaction  with  the </text>
<text top="943" left="108" width="681" height="18" font="0">honeypot  is  considered  as  malicious  activity.  Therefore,  IP  addresses  that  have  interacted </text>
<text top="968" left="108" width="681" height="18" font="0">with  the  honeypot  will  be  extracted  from  HoneyD’s  log  and  inserted  in  an  ACL  template. </text>
<text top="994" left="108" width="681" height="18" font="0">These ACLs, once implemented in the router, will block future packets coming from these IP </text>
<text top="1019" left="108" width="81" height="18" font="0">addresses. </text>
<text top="1050" left="108" width="681" height="18" font="0">The detection of XSS attack, in this study, is based in detecting the injection of the “&lt;script&gt; </text>
<text top="1075" left="108" width="681" height="18" font="0">&lt;/script&gt;”  tags  or  its  equivalent  in  hex‐encoded  value  “%3Cscript%3E  %3C%2Fscript%3E” </text>
<text top="1101" left="108" width="681" height="18" font="0">into  the  webpage,  as  seen  in  the  Literature  Review  3.5.2.  These  tags  are  widely  used  to </text>
<text top="1126" left="108" width="681" height="18" font="0">inject  malicious  scripts  into  webpages  and  a  common  way  of  evading  security  filters  is  to </text>
</page>
<page number="49" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="34" size="14" family="Courier" color="#9bbb59"/>
	<fontspec id="35" size="14" family="Courier" color="#e36c0a"/>
	<fontspec id="36" size="14" family="Helvetica" color="#000000"/>
<text top="57" left="382" width="133" height="18" font="0">Chapter 4  Design </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">49 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">replace their angle brackets by their equivalent in hex‐encoded value. Every interaction with </text>
<text top="137" left="108" width="681" height="18" font="0">the webpage is monitored and logged into HoneyD’s log file. The aim of the prototype script </text>
<text top="162" left="108" width="681" height="18" font="0">is to automatically extract this information and parse it into a Snort signature template that </text>
<text top="187" left="108" width="681" height="18" font="0">will be implemented in order to filter future malicious traffic. An example can be seen in the </text>
<text top="213" left="108" width="143" height="18" font="0">following example: </text>
<text top="244" left="162" width="144" height="18" font="19"><b>‐ HoneyD’s log file: </b></text>
<text top="272" left="172" width="337" height="13" font="26">--MARK--,&#34;Thu Oct 13 11:14:03 EDT </text>
<text top="290" left="172" width="208" height="13" font="26">2011&#34;,&#34;webmin/HTTP&#34;,&#34;</text>
<text top="290" left="380" width="178" height="13" font="34"><b>192.168.230.130</b>&#34;,&#34;</text>
<text top="290" left="558" width="218" height="13" font="26">192.168.230.140&#34;,61176</text>
<text top="309" left="172" width="525" height="13" font="26">,80, &#34;GET /gp/seller/product-ds/registration.html?ld=</text>
<text top="309" left="697" width="89" height="13" font="35"><b>&lt;script&gt; </b></text>
<text top="327" left="172" width="327" height="13" font="35"><b>alert(document.cookie%)&lt;/script&gt; </b></text>
<text top="327" left="499" width="89" height="13" font="26">HTTP/1.1 </text>
<text top="351" left="216" width="188" height="13" font="26">               ... </text>
<text top="374" left="172" width="30" height="13" font="26">&#34;, </text>
<text top="397" left="172" width="119" height="13" font="26">--ENDMARK-- </text>
<text top="436" left="162" width="205" height="18" font="19"><b>‐ Snort signature template: </b></text>
<text top="464" left="172" width="535" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET 80 (msg:&#34;XSS </text>
<text top="482" left="172" width="525" height="13" font="26">attempt: script injection detected&#34;; flow:to_server, </text>
<text top="501" left="172" width="208" height="13" font="26">established;content:&#34;</text>
<text top="501" left="380" width="396" height="13" font="35"><b>&lt;script&gt;alert(document.cookie%)&lt;/script&gt;</b></text>
<text top="520" left="172" width="426" height="13" font="26">&#34;; classtype:attempted-admin;sid:1000001;) </text>
<text top="559" left="162" width="119" height="18" font="19"><b>‐ ACL template: </b></text>
<text top="584" left="172" width="30" height="13" font="26">170</text>
<text top="583" left="202" width="5" height="15" font="36"> </text>
<text top="584" left="202" width="148" height="13" font="26"> deny tcp host </text>
<text top="584" left="351" width="158" height="13" font="34"><b>192.168.230.130</b> </text>
<text top="584" left="509" width="40" height="13" font="26">any </text>
<text top="624" left="108" width="48" height="24" font="22">4.4.2</text>
<text top="625" left="156" width="7" height="22" font="23"> </text>
<text top="624" left="162" width="352" height="24" font="22">Programming language decision </text>
<text top="658" left="108" width="681" height="18" font="0">Nowadays,  many  programming  language  are  available  such  as  C/C++,  Perl,  Python,  Bash, </text>
<text top="683" left="108" width="681" height="18" font="0">JavaScript, etc. The generation of ACLs and Snort signatures involves a lot of interaction with </text>
<text top="708" left="108" width="681" height="18" font="0">the UNIX shell through specific commands. Therefore, the programming language required </text>
<text top="733" left="108" width="681" height="18" font="0">should  provide  an  easy  way  to  do  so.  This  specificity  narrows  the  research  down  to  two </text>
<text top="759" left="108" width="681" height="18" font="0">programming  languages:  Perl  and  Bash.  Perl  is a  very  powerful  language,  widely  used  and </text>
<text top="784" left="108" width="681" height="18" font="0">can be combined with many plugins. On the other hand, Bash is more limited but offers a </text>
<text top="809" left="108" width="681" height="18" font="0">great interaction with the shell and is easier to maintain. In comparison, Bash is  generally </text>
<text top="835" left="108" width="681" height="18" font="0">used for short scripts (under 100 lines) while Perl is used for bigger ones. The scripts that </text>
<text top="860" left="108" width="681" height="18" font="0">will  be  created  in  this  chapter  will  be  short  and  will  require  a  lot  of  system  command </text>
<text top="885" left="108" width="681" height="18" font="0">interaction. Based on these facts the choice is made to use the Bash language to code the </text>
<text top="910" left="108" width="123" height="18" font="0">required scripts. </text>
<text top="964" left="108" width="32" height="26" font="16">4.5</text>
<text top="965" left="140" width="7" height="24" font="17"> </text>
<text top="964" left="182" width="206" height="26" font="16">Experimentations </text>
<text top="1010" left="108" width="681" height="18" font="0">The two previous sections show the creation of XSS attacks, the detection of these attacks </text>
<text top="1036" left="108" width="681" height="18" font="0">and the generation of ACLs/Snort signatures. This section implements four experiments that </text>
<text top="1061" left="108" width="681" height="18" font="0">will  be  used  to  determine  if  the  prototype  is  working  properly  and  to  calculate  its </text>
<text top="1086" left="108" width="681" height="18" font="0">effectiveness in Lab environment and in a simulated real world environment. A summary of </text>
<text top="1111" left="108" width="394" height="18" font="0">these experiments has been realised in the Figure 18. </text>
</page>
<page number="50" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="382" width="133" height="18" font="0">Chapter 4  Design </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">50 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">In  these  experimentations  ACLs  are  not  implemented,  because  they  will  block  all  the </text>
<text top="137" left="108" width="348" height="18" font="0">network traffic coming from the attacker host.  </text>
<text top="542" left="446" width="4" height="18" font="0"> </text>
<text top="573" left="335" width="225" height="14" font="21"><b>Figure 18 – Experiments steps summary </b></text>
<text top="609" left="108" width="48" height="24" font="22">4.5.1</text>
<text top="610" left="156" width="7" height="22" font="23"> </text>
<text top="609" left="162" width="219" height="24" font="22">Scripts effectiveness </text>
<text top="642" left="108" width="681" height="18" font="0">The scripts experiment aims in testing the ability of the scripts to generate ACLs and Snort </text>
<text top="668" left="108" width="681" height="18" font="0">signatures.  To  do  so,  the  list  of  XSS  attacks  is  going  to  be  injected  on  the  honeypot  and </text>
<text top="693" left="108" width="681" height="18" font="0">should result in generating a number of ACLs/Snort signatures. During the injection phase, </text>
<text top="718" left="108" width="681" height="18" font="0">the  network  flow  is  going  to  be  recorded  using  Wireshark  and  saved  as </text>
<text top="743" left="108" width="681" height="18" font="0">“honeyd_attack.pcap”  file.  The  expected  results  should  show  that  the  Snort  signatures </text>
<text top="769" left="108" width="590" height="18" font="0">generated should correspond to the number of attacks containing a “script” tag. </text>
<text top="800" left="108" width="681" height="18" font="0">At the end of this test, the Snort signatures generated by the honeypot will be automatically </text>
<text top="825" left="108" width="231" height="18" font="0">sent and implemented in Snort </text>
<text top="870" left="108" width="48" height="24" font="22">4.5.2</text>
<text top="870" left="156" width="7" height="22" font="23"> </text>
<text top="870" left="162" width="330" height="24" font="22">NIDS within Lab environment </text>
<text top="903" left="108" width="681" height="18" font="0">The NIDS lab environment experiment aims in testing the Snort signature effectiveness in a </text>
<text top="928" left="108" width="681" height="18" font="0">controlled environment. Indeed, the snort signatures generated have been implemented in </text>
<text top="953" left="108" width="681" height="18" font="0">the NIDS and the network flow of the attack has been recorded in the “honeyd_attack.pcap” </text>
<text top="979" left="108" width="681" height="18" font="0">file.  This  experiment  needs  to  modify  the  end  points  of  the  network  flow </text>
<text top="1004" left="108" width="681" height="18" font="0">“honeyd_attack.pcap”  by  using  the  Tcpreplay  suite.  The  modification  will  change  the  IP </text>
<text top="1029" left="108" width="681" height="18" font="0">addresses  from  Attacker‐Honeypot,  to  Attacker‐Snort  and  save  the  modified  file  in </text>
<text top="1054" left="108" width="681" height="18" font="0">“snort_attack.pcap”.  This  file  will  be  sent  on  the  network  using  Tcpreplay.  The  expected </text>
<text top="1080" left="108" width="681" height="18" font="0">results should show that the number of alerts raised by Snort is identical to the number of </text>
<text top="1105" left="108" width="186" height="18" font="0">signatures implemented. </text>
</page>
<page number="51" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="382" width="133" height="18" font="0">Chapter 4  Design </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">51 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="48" height="24" font="22">4.5.3</text>
<text top="116" left="156" width="7" height="22" font="23"> </text>
<text top="116" left="162" width="339" height="24" font="22">NIDS in Real World simulation </text>
<text top="149" left="108" width="681" height="18" font="0">The NIDS real world simulation experiment aims in testing the prototype effectiveness with </text>
<text top="174" left="108" width="681" height="18" font="0">background  traffic.  Indeed,  a  real  world  implementation  would  involve  a  wide  mix  of </text>
<text top="199" left="108" width="681" height="18" font="0">genuine network traffic going through the NIDS. This background traffic will be generated by </text>
<text top="225" left="108" width="681" height="18" font="0">using  the  UNIX  tool  TCPreplay,  which  will  send  a  file  “snort_background.pcap”  containing </text>
<text top="250" left="108" width="681" height="18" font="0">network  packets  onto  the  network.  This  file  packet  is  free  of  attacks  and  comes  from  the </text>
<text top="275" left="108" width="681" height="18" font="0">Massachusetts Institute of Technology (MIT, 2011). The IP addresses of this file packet will </text>
<text top="300" left="108" width="571" height="18" font="0">be rewritten during the implementation to suit the needs of this experiment.  </text>
<text top="332" left="108" width="681" height="18" font="0">The  background  traffic  “snort_background.pcap”  and  the  previous  set  of  XSS  attacks </text>
<text top="357" left="108" width="681" height="18" font="0">“snort_attack.pcap”  will  be  mixed  together  and  sent  to  the  NIDS  (at  low  speed  10mbps). </text>
<text top="382" left="108" width="681" height="18" font="0">Hopefully,  the  expected  result  should  show  that  the  background  traffic  did  not  raise  any </text>
<text top="407" left="108" width="149" height="18" font="0">false positive alerts. </text>
<text top="452" left="108" width="48" height="24" font="22">4.5.4</text>
<text top="452" left="156" width="7" height="22" font="23"> </text>
<text top="452" left="162" width="387" height="24" font="22">Honeypot in Real World simulation </text>
<text top="485" left="108" width="681" height="18" font="0">This  last  experiment  aims  in  testing  the  effectiveness  of  the  Prototype  created.  This </text>
<text top="510" left="108" width="681" height="18" font="0">experiment  is  similar  to  the  previous  one  but  aims  in  testing  the  honeypot  effectiveness </text>
<text top="535" left="108" width="681" height="18" font="0">through  increasing  network  traffic.  The  Tcpreplay  suite  is  able  to  send  the  packets </text>
<text top="561" left="108" width="681" height="18" font="0">“honeyd_background.pcap”  at  a  predefined  speed  on  the  network.  XSS  attacks  will  be </text>
<text top="586" left="108" width="681" height="18" font="0">injected  in  parallel  with  the  background  traffic.  The  background  traffic  speed  will  be </text>
<text top="611" left="108" width="681" height="18" font="0">increased  from  0mbps  by  step  of  0.5mbps.  Two  measures  will  be  taken  according  to  the </text>
<text top="637" left="108" width="681" height="18" font="0">background traffic speed: The latency to send the 50 XSS attacks and the number of attack </text>
<text top="662" left="108" width="380" height="18" font="0">detected (equal to the number of signature raised). </text>
<text top="693" left="108" width="681" height="18" font="0">Expected  results  at  a  low  speed  should  indicate  the  same  number  of  alerts,  as  detected </text>
<text top="718" left="108" width="681" height="18" font="0">previously in the lab environment. However, at a higher speed, the expected results are that </text>
<text top="744" left="108" width="681" height="18" font="0">HoneyD  will  have  a  high  amount  of  traffic  to  analyse  and  it  will  probably  start  dropping </text>
<text top="769" left="108" width="681" height="18" font="0">packets, which involve missing out XSS attacks. The experiment will show the breaking point </text>
<text top="794" left="108" width="439" height="18" font="0">of the prototype under a certain amount of network traffic. </text>
<text top="848" left="108" width="32" height="26" font="16">4.6</text>
<text top="848" left="140" width="7" height="24" font="17"> </text>
<text top="848" left="182" width="134" height="26" font="16">Conclusion </text>
<text top="894" left="108" width="681" height="18" font="0">The  network  architecture  designed,  proposes  to  implement  the  honeypot  within  the </text>
<text top="920" left="108" width="681" height="18" font="0">production network. In that way, the honeypot is able to detect XSS attacks that bypassed </text>
<text top="945" left="108" width="681" height="18" font="0">security devices placed on the front end of the network, such as the NIDS and the router. </text>
<text top="970" left="108" width="681" height="18" font="0">The detection of an XSS attack by the honeypot generates an ACL, to block the IP address </text>
<text top="995" left="108" width="681" height="18" font="0">source of the attack, and a Snort signature to block future incoming packet using the same </text>
<text top="1021" left="108" width="681" height="18" font="0">attack  content.  The  ideal  network  architecture  put  forwards  in  this  chapter  would  be  to </text>
<text top="1046" left="108" width="661" height="18" font="0">install a boundary router followed by a NIDS to provide a double filter of incoming packet. </text>
<text top="1077" left="108" width="681" height="18" font="0">In  order  to  generate  ACLs  and  Snort  signatures,  the  design  proposes  to  create  two  Bash </text>
<text top="1102" left="108" width="681" height="18" font="0">scripts  (one  for  each  generation)  that  automatically  extract  relevant  information  from  the </text>
<text top="1128" left="108" width="681" height="18" font="0">honeypot log file and parse it into its template (ACL or Snort signature). This fulfils the gap </text>
</page>
<page number="52" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="382" width="133" height="18" font="0">Chapter 4  Design </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">52 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">found in the literature review, which states that there are no mechanisms that provide an </text>
<text top="137" left="108" width="382" height="18" font="0">automated way to generate ACLs/Snort signatures.  </text>
<text top="168" left="108" width="681" height="18" font="0">A set of four experiments are designed to test out the honeypot and the NIDS. However, a </text>
<text top="193" left="108" width="681" height="18" font="0">different network architecture design is created in order to ease the implementation of the </text>
<text top="219" left="108" width="681" height="18" font="0">experimentations.  In  addition,  the  experiments  do  not  implement  the  ACLs  created  into  a </text>
<text top="244" left="108" width="681" height="18" font="0">router. These ACLs have only been created to show the possibility to generate ACLs using a </text>
<text top="269" left="108" width="135" height="18" font="0">honeypot system. </text>
<text top="300" left="108" width="681" height="18" font="0">The  first  experiment  aimed  to  evaluating  the  effectiveness  of  the  Bash  scripts  created  in </text>
<text top="326" left="108" width="681" height="18" font="0">detecting XSS attacks and generating ACLS/Snort signatures. The Snort signatures generated </text>
<text top="351" left="108" width="681" height="18" font="0">are then implemented into the NIDS for the next two experiments. These experiments inject </text>
<text top="376" left="108" width="681" height="18" font="0">the same XSS attacks but into the NIDS. They evaluate firstly, if the NIDS is able to detect the </text>
<text top="401" left="108" width="681" height="18" font="0">XSS attacks by using the new set of signatures and secondly, by injecting background traffic </text>
<text top="427" left="108" width="681" height="18" font="0">to  evaluate  if  any  False  Positive  alarm  is  raised.  Finally,  the  last  experiment  consists  of </text>
<text top="452" left="108" width="681" height="18" font="0">injecting background traffic and XSS attacks into the honeypot to determine the ability and </text>
<text top="477" left="108" width="681" height="18" font="0">latency  to  detect  the  attacks  under  increasing  background  traffic.  This  experiment  put </text>
<text top="503" left="108" width="681" height="18" font="0">forward  a  breaking  point,  due  to  the  increasing  background  traffic,  after  which  the </text>
<text top="528" left="108" width="681" height="18" font="0">honeypot became unstable. This last experiment has fulfilled the second gap found in the </text>
<text top="553" left="108" width="681" height="18" font="0">literature review, which states that there are no experiments showing the breaking point of </text>
<text top="578" left="108" width="108" height="18" font="0">the honeypot. </text>
<text top="610" left="108" width="681" height="18" font="0">In the next chapter, the design of the scripts and experiments will be implemented within </text>
<text top="635" left="108" width="681" height="18" font="0">the cloud computing of Edinburgh Napier University. This implementation will fulfil the last </text>
<text top="660" left="108" width="681" height="18" font="0">gap  found  in  the  literature  review,  which  is  the  gap  about  cloud‐based  honeypot </text>
<text top="685" left="108" width="126" height="18" font="0">implementation. </text>
<text top="717" left="108" width="4" height="18" font="19"><b> </b></text>
<text top="757" left="108" width="4" height="18" font="19"><b> </b></text>
</page>
<page number="53" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">53 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="54" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">54 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="143" left="108" width="165" height="37" font="11">Chapter 5.</text>
<text top="143" left="273" width="10" height="33" font="6"> </text>
<text top="143" left="324" width="265" height="37" font="11">Implementation </text>
<text top="222" left="108" width="32" height="26" font="16">5.1</text>
<text top="222" left="140" width="7" height="24" font="17"> </text>
<text top="222" left="182" width="149" height="26" font="16">Introduction </text>
<text top="268" left="108" width="681" height="18" font="0">This  chapter  aims  to  create  scripts  and  implement  experiments  designed  in  the  previous </text>
<text top="293" left="108" width="681" height="18" font="0">chapter. The previous chapter has clarified the aims of each script and experiment needed </text>
<text top="318" left="108" width="117" height="18" font="0">for this project. </text>
<text top="349" left="108" width="681" height="18" font="0">In  the  previous  chapter,  the  scripts  required  to  generate  ACLs  and  Snort  signatures  have </text>
<text top="375" left="108" width="681" height="18" font="0">been designed. The design showed that specific information of the honeypot log file can be </text>
<text top="400" left="108" width="681" height="18" font="0">extracted  and  injected  into  appropriate  templates  to  create  ACLs  and  Snort  signatures.  In </text>
<text top="425" left="108" width="681" height="18" font="0">addition,  the  previous  chapter  presented  a  set  of  four  experiments,  which  tested  the </text>
<text top="451" left="108" width="681" height="18" font="0">effectiveness  of  the  honeypot  coupled  with  the  scripts  in  detecting  XSS  attacks.  These </text>
<text top="476" left="108" width="385" height="18" font="0">experiments are to be implemented in this chapter.  </text>
<text top="507" left="108" width="681" height="18" font="0">The network architecture of the implementation is composed of three instances, in order to </text>
<text top="532" left="108" width="681" height="18" font="0">simulate  a  honeypot,  a  NIDS  and  an  attacker.  The  configuration  of  these  instances  is </text>
<text top="558" left="108" width="681" height="18" font="0">described within the following chapter, however, background understanding of the features </text>
<text top="583" left="108" width="681" height="18" font="0">and  capabilities  offered  by  the  honeypot  “HoneyD”  and  the  NIDS  “Snort”  are  respectively </text>
<text top="608" left="108" width="653" height="18" font="0">proposed in Appendix A. and Appendix B.  which eases the understanding for the reader. </text>
<text top="662" left="108" width="32" height="26" font="16">5.2</text>
<text top="662" left="140" width="7" height="24" font="17"> </text>
<text top="662" left="182" width="387" height="26" font="16">Cloud configuration and Test bed </text>
<text top="708" left="108" width="681" height="18" font="0">The network architecture seen in the Design 4.2 requires the creation of a unique instance </text>
<text top="733" left="108" width="681" height="18" font="0">to simulate the honeypot (Fake Web Server). However, for this implementation, the design </text>
<text top="759" left="108" width="681" height="18" font="0">needs to be adapted in order to simulate also the instances of the NIDS and the Attacker. </text>
<text top="784" left="108" width="681" height="18" font="0">The cloud hypervisor available at the University is VMware ESXi with vCenter Lab manager. </text>
<text top="809" left="108" width="681" height="18" font="0">The requirements to create three instances can be quickly achieved through lab manager, </text>
<text top="835" left="108" width="681" height="18" font="0">within  a  couple  of  clicks.  The  portal  of  lab  manager  is  accessed  through  the  following </text>
<text top="860" left="108" width="681" height="18" font="0">address:  https://lm2003.napier.ac.uk/.  The  login  credentials  must  be  pre‐activated  by  Bill </text>
<text top="885" left="108" width="681" height="18" font="0">Buchanan to enable the connection onto the platform (Buchanan 2011). Once connected on </text>
<text top="910" left="108" width="681" height="18" font="0">the  platform,  three  instances  are  created  and  deployed,  all  under  the  operating  system </text>
<text top="936" left="108" width="681" height="18" font="0">BackTrack5,  as  seen  Figure  19.  The  choice  for the  operating  system  BackTrack5  instead  of </text>
<text top="961" left="108" width="681" height="18" font="0">Widows  or  other  UNIX  platform  is  done  because  BackTrack5  provides  a  large  panel  of </text>
<text top="986" left="108" width="681" height="18" font="0">security  tools  pre‐installed.  This  saves  a  lot  of  time,  because  it  is  generally  a  troublesome </text>
<text top="1012" left="108" width="380" height="18" font="0">task to install new software in a UNIX environment. </text>
</page>
<page number="55" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">55 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="302" left="785" width="4" height="18" font="0"> </text>
<text top="327" left="346" width="204" height="14" font="21"><b>Figure 19 ‐ Deployment of instances </b></text>
<text top="351" left="108" width="681" height="18" font="0">The instances have been deployed on the student network, which means that they are able </text>
<text top="376" left="108" width="681" height="18" font="0">to  communicate  together  within  the  same  subnet.  The  access  to  the  outside  (internet)  is </text>
<text top="401" left="108" width="681" height="18" font="0">enable, although not needed in the following experiments, but could be useful in order to </text>
<text top="426" left="108" width="681" height="18" font="0">retrieve  the  last  packages  needed  for  the  security  tools.  The  test  bed  of  the  network </text>
<text top="452" left="108" width="525" height="18" font="0">implementation of the three instances is represented below, Figure 20. </text>
<text top="777" left="193" width="2" height="9" font="33"> </text>
<text top="994" left="730" width="4" height="18" font="0"> </text>
<text top="1020" left="315" width="266" height="14" font="21"><b>Figure 20 ‐ Instances implementation overview </b></text>
</page>
<page number="56" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">56 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="32" height="26" font="16">5.3</text>
<text top="117" left="140" width="7" height="24" font="17"> </text>
<text top="116" left="182" width="270" height="26" font="16">Instances configuration </text>
<text top="162" left="108" width="681" height="18" font="0">The  configurations  of  the  three  instances  involve  setting  up  a  NIDS  “Snort”,  a  honeypot </text>
<text top="188" left="108" width="681" height="18" font="0">“HoneyD”  and  an  attacker  instance.  These  instances  are  running  the  Operating  System </text>
<text top="213" left="108" width="681" height="18" font="0">BackTrack 5. Even though the setup of these instances is not very hard to realise, there are a </text>
<text top="238" left="108" width="681" height="18" font="0">lot of command line options to choose from, and it is not always obvious which ones should </text>
<text top="263" left="108" width="681" height="18" font="0">be used and in which context. This section aims to make the implementation understanding </text>
<text top="289" left="108" width="190" height="18" font="0">easier for beginner users. </text>
<text top="333" left="108" width="48" height="24" font="22">5.3.1</text>
<text top="333" left="156" width="7" height="22" font="23"> </text>
<text top="333" left="162" width="96" height="24" font="22">HoneyD </text>
<text top="378" left="162" width="59" height="25" font="1">5.3.1.1</text>
<text top="383" left="221" width="6" height="19" font="7"> </text>
<text top="378" left="227" width="158" height="25" font="1">Basic	installation	</text>
<text top="409" left="108" width="681" height="18" font="0">The  honeypot  system  used  for  this  study  is  HoneyD.  A  review  of  HoneyD’s  features  and </text>
<text top="435" left="108" width="681" height="18" font="0">capabilities is provided in reviewed in Appendix A.  The installation of HoneyD under a UNIX </text>
<text top="460" left="108" width="681" height="18" font="0">system is done with the command “apt‐get install HoneyD”. Luckily, the prompt command </text>
<text top="485" left="108" width="681" height="18" font="0">informs that HoneyD is already installed in the system. This is because Backtrack 5 comes </text>
<text top="511" left="108" width="681" height="18" font="0">with pre‐installed security tools and apparently includes HoneyD.  However, the installation </text>
<text top="536" left="108" width="675" height="18" font="0">path of HoneyD is not indicated, so the “locate” command is typed in to find out where it is: </text>
<text top="570" left="108" width="287" height="13" font="26">honeypot@bt:~# locate honeyd </text>
<text top="593" left="108" width="267" height="13" font="26">   /usr/local/share/honeyd </text>
<text top="618" left="108" width="681" height="18" font="0">By default HoneyD does not has any service scripts implemented. These services scripts are </text>
<text top="643" left="108" width="681" height="18" font="0">used to simulate services as FTP server, Email server, Web server, etc. A package containing </text>
<text top="669" left="108" width="681" height="18" font="0">service scripts “service.tar” is retrieved from HoneyD’s website (Provos, 2007) and extracted </text>
<text top="694" left="108" width="225" height="18" font="0">using the following command: </text>
<text top="728" left="108" width="604" height="13" font="26">honeypot@bt:~# tar –zxvf honeyd.tar /usr/local/share/honeyd/ </text>
<text top="760" left="162" width="59" height="25" font="1">5.3.1.2</text>
<text top="765" left="221" width="6" height="19" font="7"> </text>
<text top="760" left="227" width="161" height="25" font="1">Configuration	file	</text>
<text top="792" left="108" width="681" height="18" font="0">HoneyD’s  configuration  file  is  used  to  create  some  virtual  devices.  This  is  done  by  first </text>
<text top="817" left="108" width="681" height="18" font="0">setting  up  a  template  named  “Webserver”  and  the  template  personality  named  &#34;Linux </text>
<text top="842" left="108" width="681" height="18" font="0">kernel 2.4.20&#34;. These options are used to deceive fingerprinting tools by making the system </text>
<text top="867" left="108" width="681" height="18" font="0">looks  like  genuine.  The  uptime,  which  defines  how  long  the  system  will  stay  on,  is </text>
<text top="893" left="108" width="681" height="18" font="0">configured  to  stay  awake  for  a  long  time.  The  “add”  command  defines  the  information </text>
<text top="918" left="108" width="681" height="18" font="0">related  to  a  service  script.  In  this  configuration,  the  service  script  webmin.sh  (used  to </text>
<text top="943" left="108" width="681" height="18" font="0">emulate  the  webserver)  is  configured  on  the  TCP  port  80.  Any  other  traffic  that  use  the </text>
<text top="968" left="108" width="681" height="18" font="0">protocols UDP or TCP will be reset. The name of the Ethernet card used in the configuration </text>
<text top="994" left="108" width="681" height="18" font="0">is  defined  by  “3com”.  Finally,  the  template  Webserver  is  “bind”  (associated)  with  the  IP </text>
<text top="1019" left="108" width="681" height="18" font="0">address 192.168.230.140 (which should be a non‐used IP address). Therefore, the IP address </text>
<text top="1044" left="108" width="586" height="18" font="0">of the Webserver is 192.168.230.140. The configuration file is presented below: </text>
<text top="1078" left="108" width="386" height="13" font="26">#HoneyD’s WebServer configuration file </text>
<text top="1101" left="108" width="168" height="13" font="26">create Webserver </text>
<text top="1124" left="108" width="475" height="13" font="26">set Webserver personality &#34;Linux kernel 2.4.20&#34; </text>
</page>
<page number="57" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">57 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="114" left="108" width="287" height="13" font="26">set Webserver uptime 9999999 </text>
<text top="137" left="108" width="584" height="13" font="26">add Webserver tcp port 80 &#34;sh ./scripts/suse7.0/webmin.sh” </text>
<text top="160" left="108" width="386" height="13" font="26">set Webserver default tcp action reset </text>
<text top="184" left="108" width="386" height="13" font="26">set Webserver default udp action reset </text>
<text top="207" left="108" width="297" height="13" font="26">set Webserver ethernet &#34;3Com&#34; </text>
<text top="230" left="108" width="307" height="13" font="26">bind 192.168.230.140 Webserver </text>
<text top="262" left="162" width="59" height="25" font="1">5.3.1.3</text>
<text top="267" left="221" width="6" height="19" font="7"> </text>
<text top="262" left="227" width="228" height="25" font="1">Service	script	adaptation	</text>
<text top="294" left="108" width="681" height="18" font="0">The  service  script  used  in  this  study  is  Webmin.sh.  It  was  created  by  Fabian  Bieker  to </text>
<text top="319" left="108" width="681" height="18" font="0">emulate a web page with an authentication form. The script is 407 lines long and provides </text>
<text top="345" left="108" width="681" height="18" font="0">multiple options that are not needed in our experimentations. However, two lines need to </text>
<text top="370" left="108" width="681" height="18" font="0">be  changed  in  the  Webmin.sh  file,  in  order  to  make  the  service  script  work.  The  first  line </text>
<text top="395" left="108" width="681" height="18" font="0">should  indicate  the  full  path  to  the  file  base.sh,  which  is  located  in  the  script  directory </text>
<text top="420" left="108" width="681" height="18" font="0">created earlier. The second line defines where the service script writes its log messages. This </text>
<text top="446" left="108" width="681" height="18" font="0">line  should  be  configured  to  save  log  message  in  the  file  honeyd/msg.log.  An  overview  of </text>
<text top="471" left="108" width="376" height="18" font="0">Webmin.sh and the modified lines is shown below: </text>
<text top="505" left="108" width="99" height="13" font="26">#!/bin/sh </text>
<text top="528" left="108" width="119" height="13" font="26"># Webmin.sh </text>
<text top="551" left="162" width="139" height="13" font="26">(... text...) </text>
<text top="574" left="108" width="426" height="13" font="26">. /usr/local/share/honeyd/scripts/base.sh  </text>
<text top="597" left="108" width="10" height="13" font="26"> </text>
<text top="597" left="162" width="148" height="13" font="26">(... text ...) </text>
<text top="621" left="108" width="427" height="13" font="26">LOG=&#34;/usr/local/share/honeyd/msg.log&#34;       </text>
<text top="653" left="162" width="59" height="25" font="1">5.3.1.4</text>
<text top="658" left="221" width="6" height="19" font="7"> </text>
<text top="653" left="227" width="153" height="25" font="1">Starting	HoneyD	</text>
<text top="685" left="108" width="681" height="18" font="0">Before getting HoneyD started, two last commands need to be typed in. The first commands </text>
<text top="710" left="108" width="681" height="18" font="0">change the attributes of the files “msg.log”, “webmin.sh” and “base.sh” in order to enable </text>
<text top="735" left="108" width="681" height="18" font="0">everybody to access them. This is required otherwise HoneyD cannot access these files and </text>
<text top="760" left="108" width="352" height="18" font="0">fail to start up, to start a service or to log alerts. </text>
<text top="794" left="108" width="564" height="13" font="26">honeypot@bt:/usr/local/share/honeyd# chmod 777 ./msg.log </text>
<text top="817" left="108" width="643" height="13" font="26">honeypot@bt:/usr/local/share/honeyd# chmod 777 ./scripts/base.sh </text>
<text top="841" left="108" width="465" height="13" font="26">honeypot@bt:/usr/local/share/honeyd# chmod 777 </text>
<text top="859" left="108" width="287" height="13" font="26">./scripts/suse7.0/webmin. sh </text>
<text top="898" left="108" width="681" height="18" font="0">HoneyD  is  now  configured  and  ready  to  start.  To  start  up,  the  last  command  consists  in </text>
<text top="923" left="108" width="681" height="18" font="0">indicating HoneyD the network interface chosen, the emplacement of the configuration file </text>
<text top="948" left="108" width="437" height="18" font="0">and the IP range attributed. The command is shown below: </text>
<text top="982" left="108" width="624" height="13" font="26">honeypot@bt:/usr/local/share/honeyd# sudo honeyd -d -i eth1 -f </text>
<text top="1001" left="108" width="297" height="13" font="26">myconfig.conf 192.168.230.140 </text>
<text top="1041" left="108" width="48" height="24" font="22">5.3.2</text>
<text top="1041" left="156" width="7" height="22" font="23"> </text>
<text top="1041" left="162" width="63" height="24" font="22">Snort </text>
<text top="1074" left="108" width="681" height="18" font="0">The  NIDS  Snort  is  provided  in  the  BackTrack  5  distribution.  However,  before  starting  the </text>
<text top="1099" left="108" width="581" height="18" font="0">program, the network interface and the configuration file need to be modified. </text>
</page>
<page number="58" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">58 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="108" left="162" width="59" height="25" font="1">5.3.2.1</text>
<text top="113" left="221" width="6" height="19" font="7"> </text>
<text top="108" left="227" width="172" height="25" font="1">Network	interface		</text>
<text top="140" left="108" width="681" height="18" font="0">First of all, an “ifconfig” command needs to be typed in, to determine the network interface </text>
<text top="165" left="108" width="223" height="18" font="0">that Snort will be listening on. </text>
<text top="199" left="108" width="208" height="13" font="26">snort@bt:~# ifconfig </text>
<text top="222" left="108" width="574" height="13" font="26">eth1      Link encap:Ethernet  HWaddr 00:0c:29:81:2c:81   </text>
<text top="245" left="108" width="594" height="13" font="26">          inet addr:192.168.233.128  Bcast:192.168.230.255  </text>
<text top="264" left="108" width="188" height="13" font="26">Mask:255.255.255.0 </text>
<text top="287" left="108" width="20" height="13" font="26">  </text>
<text top="287" left="162" width="10" height="13" font="26"> </text>
<text top="287" left="216" width="69" height="13" font="26">       </text>
<text top="287" left="324" width="10" height="13" font="26"> </text>
<text top="287" left="378" width="40" height="13" font="26">... </text>
<text top="310" left="108" width="376" height="13" font="26">lo        Link encap:Local Loopback   </text>
<text top="334" left="108" width="455" height="13" font="26">          inet addr:127.0.0.1  Mask:255.0.0.0 </text>
<text top="357" left="108" width="354" height="13" font="26">     ... </text>
<text top="380" left="108" width="681" height="18" font="0">The  “ifconfig”  command  shows  two  network  interfaces:  eth1  and  lo.  Eth1  is  the  network </text>
<text top="406" left="108" width="681" height="18" font="0">interface  connected  to  the  outside  (needed  for  this  experiment)  while  “lo”  is  a  loopback </text>
<text top="431" left="108" width="335" height="18" font="0">interface generally used for testing purposes. </text>
<text top="468" left="162" width="59" height="25" font="1">5.3.2.2</text>
<text top="473" left="221" width="6" height="19" font="7"> </text>
<text top="468" left="227" width="161" height="25" font="1">Configuration	file	</text>
<text top="499" left="108" width="681" height="18" font="0">Snort’s configuration file “snort.conf” is used at start up time. It contains six basic sections: </text>
<text top="525" left="108" width="681" height="18" font="0">“variable definitions”, “config parameters”, “pre‐processor configuration”, “output module </text>
<text top="550" left="108" width="681" height="18" font="0">configuration”, “new action types” and “rules configuration”. For this implementation only </text>
<text top="575" left="108" width="681" height="18" font="0">the last section “rule configuration” needs some modifications. In the default configuration, </text>
<text top="601" left="108" width="681" height="18" font="0">Snort includes paths to multiple rules files. These rules files have specific patterns that are </text>
<text top="626" left="108" width="681" height="18" font="0">used by Snort to detect an attack. In this project, these files are not needed, therefore they </text>
<text top="651" left="108" width="681" height="18" font="0">should  be  ignored.  However,  the  rules  file  “snort.rules”  that  contains  the  XSS  attacks </text>
<text top="676" left="108" width="681" height="18" font="0">signatures, created during the implementation, needs to be added in the configuration file. </text>
<text top="702" left="108" width="681" height="18" font="0">Therefore the path to this rules file is added, while other rules files are commented by using </text>
<text top="727" left="108" width="266" height="18" font="0">a # character, such as the following: </text>
<text top="761" left="108" width="376" height="13" font="26">snort@bt:/etc/snort# nano snort.conf  </text>
<text top="784" left="108" width="192" height="13" font="26">  ... </text>
<text top="784" left="256" width="54" height="13" font="26"> </text>
<text top="807" left="108" width="683" height="13" font="26">#################################################################### </text>
<text top="830" left="108" width="346" height="13" font="26"># Step #6: Customize your rule set </text>
<text top="853" left="108" width="182" height="13" font="26">#   ... </text>
<text top="877" left="108" width="683" height="13" font="26">#################################################################### </text>
<text top="900" left="108" width="10" height="13" font="26"> </text>
<text top="923" left="108" width="307" height="13" font="26">include $RULE_PATH/snort.rules </text>
<text top="946" left="108" width="317" height="13" font="26">#include $RULE_PATH/local.rules </text>
<text top="969" left="108" width="376" height="13" font="26">#include $RULE_PATH/bad-traffic.rules </text>
<text top="993" left="108" width="337" height="13" font="26">#include $RULE_PATH/exploit.rules </text>
<text top="1016" left="108" width="192" height="13" font="26">  ... </text>
<text top="1048" left="162" width="59" height="25" font="1">5.3.2.3</text>
<text top="1053" left="221" width="6" height="19" font="7"> </text>
<text top="1048" left="227" width="130" height="25" font="1">Starting	Snort	</text>
<text top="1080" left="108" width="681" height="18" font="0">Once the network interface is found out and the configuration file modified, the command </text>
<text top="1105" left="108" width="454" height="18" font="0">line used to start Snort can be typed in, such as the following: </text>
<text top="1139" left="108" width="683" height="13" font="26">snort@bt:/etc/snort# snort -A console -i eth1 -l ./log -c snort.conf </text>
</page>
<page number="59" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">59 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="114" left="108" width="366" height="13" font="26">        --== Initializing Snort ==-- </text>
<text top="137" left="108" width="246" height="13" font="26">   ... </text>
<text top="160" left="108" width="416" height="13" font="26">        --== Initialization Complete ==-- </text>
<text top="184" left="108" width="246" height="13" font="26">   ... </text>
<text top="209" left="108" width="681" height="18" font="0">This command line has four options: “‐A console“ specifies that alerts will be shown in the </text>
<text top="234" left="108" width="681" height="18" font="0">console, “‐i eth1” specifies the network interface used to capture traffic, “‐l ./log” specifies </text>
<text top="259" left="108" width="637" height="18" font="0">the logging directory for the alerts and “‐c snort.conf” specifies the configuration files.  </text>
<text top="291" left="108" width="681" height="18" font="0">Once the command is typed in, Snort starts initializing each plugin one by one and prints an </text>
<text top="316" left="108" width="591" height="18" font="0">“initialisation complete” message to confirm that the start‐up went successfully. </text>
<text top="360" left="108" width="48" height="24" font="22">5.3.3</text>
<text top="360" left="156" width="7" height="22" font="23"> </text>
<text top="360" left="162" width="97" height="24" font="22">Attacker </text>
<text top="393" left="108" width="681" height="18" font="0">The  configuration  of  the  attacker’s  instance  consists  is  split  into  two  sections:  Firstly,  the </text>
<text top="419" left="108" width="681" height="18" font="0">creation of a list of XSS attacks that will be injected in the lab and real world experiments, </text>
<text top="444" left="108" width="681" height="18" font="0">and secondly, the installation of the Tcpreplay suite needed to generate background traffic </text>
<text top="469" left="108" width="225" height="18" font="0">for the real world experiment. </text>
<text top="506" left="162" width="59" height="25" font="1">5.3.3.1</text>
<text top="511" left="221" width="6" height="19" font="7"> </text>
<text top="506" left="227" width="70" height="25" font="1">XSS	list	</text>
<text top="538" left="108" width="681" height="18" font="0">A list of 50 XSS is created based on recent XSS attacks found on the XSSed.com website. This </text>
<text top="563" left="108" width="681" height="18" font="0">list  is  composed  of  various  types  of  XSS  attacks  that  use  different  injection  methods. </text>
<text top="588" left="108" width="681" height="18" font="0">Therefore, some of these XSS do not use the traditional “script” tags but use different tags </text>
<text top="614" left="108" width="681" height="18" font="0">or  encryption  methods.  The  sources  of  these  attacks  come  from  multiple  websites  as </text>
<text top="639" left="108" width="681" height="18" font="0">Google,  EBay,  Amazon,  Yahoo  and  so  on.  However,  for  this  project  the  website  names </text>
<text top="664" left="108" width="681" height="18" font="0">(www.website.com) will be deleted in order to keep only the URL string without the website </text>
<text top="689" left="108" width="681" height="18" font="0">name.  The  full  XSS  list  is  provided  in  the  DVD‐ROM  enclosed  with  this  thesis,  but  the </text>
<text top="715" left="108" width="381" height="18" font="0">following gives three examples of what it looks like: </text>
<text top="748" left="108" width="574" height="13" font="26">/NEWS/?act=VIEW&amp;ano=958&amp;pst=-1&amp;startno=1121&amp;pageno=9&amp;FID= </text>
<text top="767" left="108" width="643" height="13" font="26">%22%3E%3Cscript%3Ealert%28%2Fwww.r3t.n3t.nl%2F%29%3C%2Fscript%3E </text>
<text top="804" left="108" width="624" height="13" font="26">/gp/change-password/-%22%3E%3Cscript%3Ealert%28document.cookie </text>
<text top="822" left="108" width="228" height="13" font="26">%29%3C/script%3E-.html </text>
<text top="859" left="108" width="673" height="13" font="26">/mailto?prop=movies&amp;locale=us&amp;url=&amp;title=irsdl&#34;STYLE=&#34;width:expressi</text>
<text top="878" left="108" width="564" height="13" font="26">on(alert(/Internet Explorer Only-Irsdl is here again/)); </text>
<text top="910" left="162" width="59" height="25" font="1">5.3.3.2</text>
<text top="915" left="221" width="6" height="19" font="7"> </text>
<text top="910" left="227" width="144" height="25" font="1">Tcpreplay	suite	</text>
<text top="942" left="108" width="681" height="18" font="0">The  Tcpreplay  suite  is  a  set  of  tools  that  can  inject  previously  captured  traffic  onto  the </text>
<text top="967" left="108" width="681" height="18" font="0">network. Additionally, Tcpreplay can rewrite the layer 2 and 3 header and replay the traffic </text>
<text top="992" left="108" width="681" height="18" font="0">at different speeds throughout the network. This tool is perfectly suitable for the real world </text>
<text top="1018" left="108" width="681" height="18" font="0">experiments.  The  installation  procedure  is  straight  forward  by  using  the  “apt‐get  install </text>
<text top="1043" left="108" width="681" height="18" font="0">tcpreplay”  command,  which  automatically  install  the  Tcpreplay  suite  composed  of </text>
<text top="1068" left="108" width="264" height="18" font="0">Tcpreplay, Tcprewrite and Tcpprep: </text>
<text top="1102" left="108" width="455" height="13" font="26">attacker@bt:~# sudo apt-get install tcpreplay </text>
<text top="1125" left="108" width="192" height="13" font="26">  ... </text>
</page>
<page number="60" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="37" size="11" family="Helvetica" color="#000000"/>
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">60 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="114" left="108" width="455" height="13" font="26">The following NEW packages will be installed: </text>
<text top="137" left="108" width="158" height="13" font="26">  tcpreplay ... </text>
<text top="185" left="108" width="32" height="26" font="16">5.4</text>
<text top="185" left="140" width="7" height="24" font="17"> </text>
<text top="185" left="182" width="296" height="26" font="16">Prototype scripts creation </text>
<text top="241" left="108" width="48" height="24" font="22">5.4.1</text>
<text top="242" left="156" width="7" height="22" font="23"> </text>
<text top="241" left="162" width="184" height="24" font="22">Scripts overview </text>
<text top="274" left="108" width="681" height="18" font="0">ACLs  generation  and  Snort  signatures  generation  require  different  operations  and </text>
<text top="300" left="108" width="681" height="18" font="0">methodology.  Therefore,  they  have  their  own  specific  script  written  in  Bash  language, </text>
<text top="325" left="108" width="681" height="18" font="0">previously  chosen  in  the  Design  4.4.2.  The  scripts  require  to  extract  specific  data  from </text>
<text top="350" left="108" width="681" height="18" font="0">HoneyD’s  log  and  to  inject  them  into  ACL  or  Snort  signature  templates.  This  needs  to  be </text>
<text top="375" left="108" width="681" height="18" font="0">done in an automated way to fulfil the gap found in the literature review. An overview of </text>
<text top="401" left="108" width="681" height="18" font="0">the  main  functions  required  by  these  two  scripts  has  been  realised  in  the  following </text>
<text top="426" left="108" width="261" height="18" font="0">flowcharts Figure 21 and Figure 22: </text>
<text top="1105" left="108" width="4" height="16" font="15"> </text>
<text top="1131" left="158" width="253" height="14" font="21"><b>Figure 21 ‐ Flow Chart Snort Script prototype </b></text>
<text top="508" left="502" width="134" height="12" font="37">1/ Select IPs source of </text>
<text top="524" left="502" width="61" height="12" font="37">each alert.</text>
<text top="540" left="502" width="125" height="12" font="37">2/ Remove duplicates</text>
<text top="659" left="507" width="125" height="12" font="37">Compare each IPs in </text>
<text top="674" left="507" width="124" height="12" font="37">IP_src.log to existing </text>
<text top="690" left="520" width="96" height="12" font="37">ACLs in ACL.log</text>
<text top="590" left="482" width="171" height="12" font="37">Copy IPs source in IP_src.log</text>
<text top="811" left="512" width="114" height="12" font="37">Creation of an ACL </text>
<text top="826" left="525" width="89" height="12" font="37">blocking the IP </text>
<text top="842" left="516" width="103" height="12" font="37">source in ACL.log</text>
<text top="759" left="513" width="109" height="12" font="37">No matching found</text>
<text top="789" left="683" width="26" height="12" font="37">Yes </text>
<text top="804" left="646" width="96" height="12" font="37">IP already exists</text>
<text top="820" left="687" width="18" height="12" font="37">Or </text>
<text top="836" left="654" width="80" height="12" font="37">End of the file</text>
<text top="921" left="532" width="74" height="12" font="37">Sleep for 30 </text>
<text top="937" left="540" width="56" height="12" font="37">secondes</text>
<text top="1001" left="474" width="4" height="16" font="15"> </text>
<text top="1027" left="508" width="246" height="14" font="21"><b> Figure 22 ‐ Flow Chart ACL script prototype </b></text>
</page>
<page number="61" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="38" size="14" family="Courier" color="#000000"/>
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">61 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="48" height="24" font="22">5.4.2</text>
<text top="116" left="156" width="7" height="22" font="23"> </text>
<text top="116" left="162" width="234" height="24" font="22">Snort signature script </text>
<text top="149" left="108" width="681" height="18" font="0">The  following  Snort  script  is  a  coded  representation  of  the  flow  chart  seen  above.  To </text>
<text top="174" left="108" width="681" height="18" font="0">resume, this script extracts the URL string that has been logged by HoneyD, analyse it to find </text>
<text top="199" left="108" width="681" height="18" font="0">“&lt;script&gt;&lt;/script&gt;”  tags  or  hex‐encoded  equivalent,  and  parse  the  result  into  a  Snort </text>
<text top="225" left="108" width="681" height="18" font="0">signature  template.  This  Snort  script  has  been  created  especially  for  this  study  and  the </text>
<text top="250" left="108" width="681" height="18" font="0">explanation  following  describes  its  main  operations.  In  addition,  another  explanation  is </text>
<text top="275" left="108" width="680" height="18" font="0">provided in the Appendix C.1, which gives a line by line description of each single operation.  </text>
<text top="307" left="108" width="178" height="13" font="38"><b>#Snort_script.sh  </b></text>
<text top="331" left="108" width="109" height="13" font="26">#!/bin/ksh </text>
<text top="354" left="108" width="139" height="13" font="26">count=1000000 </text>
<text top="377" left="108" width="20" height="13" font="26">( </text>
<text top="400" left="108" width="109" height="13" font="26">while true </text>
<text top="423" left="108" width="30" height="13" font="26">do </text>
<text top="446" left="108" width="673" height="13" font="26">nawk -F /^ '/GET/ {print $0}' msg.log | cut -d' ' -f2| sort | uniq  </text>
<text top="465" left="108" width="139" height="13" font="26">&gt; content.log </text>
<text top="488" left="108" width="584" height="13" font="26">grep 'script&gt;\|script%3E \|script%3e' content.log | sed -e </text>
<text top="507" left="108" width="426" height="13" font="26">&#34;s/.*&lt;script&gt;//;s/&lt;\/script&gt;.*//&#34; | sed -e </text>
<text top="526" left="108" width="505" height="13" font="26">&#34;s/.*%3Cscript%3E//;s/%3C\/script%3E.*//&#34; | sed -e </text>
<text top="544" left="108" width="633" height="13" font="26">&#34;s/.*%3Cscript%3E//;s/%3C%2Fscript%3E.*//&#34; &gt; content_script.log </text>
<text top="568" left="108" width="257" height="13" font="26">cat content_script.log |  </text>
<text top="591" left="108" width="20" height="13" font="26">( </text>
<text top="614" left="108" width="158" height="13" font="26">while read line </text>
<text top="637" left="108" width="30" height="13" font="26">do </text>
<text top="660" left="108" width="317" height="13" font="26">res=`grep -c $line snort.rules` </text>
<text top="684" left="108" width="10" height="13" font="26"> </text>
<text top="684" left="162" width="178" height="13" font="26">if [ $res == 0 ]; </text>
<text top="707" left="108" width="10" height="13" font="26"> </text>
<text top="707" left="162" width="10" height="13" font="26"> </text>
<text top="707" left="216" width="554" height="13" font="26">then echo 'alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any </text>
<text top="725" left="108" width="485" height="13" font="26">(msg:&#34; XSS attempt: script injection detected &#34;; </text>
<text top="744" left="108" width="594" height="13" font="26">flow:to_server,established; content:&#34;'$line'&#34;; nocase; sid: </text>
<text top="763" left="108" width="525" height="13" font="26">'$count';)'\'&gt;&gt; snort.rules count=`expr $count + 1 ` </text>
<text top="786" left="108" width="10" height="13" font="26"> </text>
<text top="786" left="162" width="10" height="13" font="26"> </text>
<text top="786" left="216" width="525" height="13" font="26">else echo 'Snort signature '$line' already existing' </text>
<text top="809" left="108" width="128" height="13" font="26"> fi </text>
<text top="832" left="108" width="49" height="13" font="26">done </text>
<text top="856" left="108" width="20" height="13" font="26">) </text>
<text top="879" left="108" width="99" height="13" font="26"> sleep 30 </text>
<text top="902" left="108" width="49" height="13" font="26">done </text>
<text top="925" left="108" width="20" height="13" font="26">) </text>
<text top="950" left="108" width="681" height="18" font="0">The Snort script begins with a “count” variable, which will be used later on to identify each </text>
<text top="976" left="108" width="681" height="18" font="0">signature with a unique number. A loop starts with the nawk option, which retrieves each </text>
<text top="1001" left="108" width="681" height="18" font="0">line  of  HoneyD’s  log  (msg.log)  starting  by  /GET.  These  lines  show  the  interaction  from  an </text>
<text top="1026" left="108" width="681" height="18" font="0">attacker onto the webpage (commands typed, URL strings, etc.). Results found are saved in </text>
<text top="1051" left="108" width="681" height="18" font="0">“content.log”.  Then,  each  line  is  examined  to  detect  any  tags  “&lt;script&gt;&lt;/script&gt;”  (or  hex </text>
<text top="1077" left="108" width="681" height="18" font="0">encoded  angle  bracket  equivalent),  which  are  widely  used  tags  in  XSS  attacks.  Positive </text>
<text top="1102" left="108" width="681" height="18" font="0">results are saved in “content_script.log”. Then, each line of this file is read and compared to </text>
<text top="1127" left="108" width="681" height="18" font="0">the existing Snort signatures file “snort.rule” (to avoid duplicated signatures). If a match is </text>
</page>
<page number="62" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">62 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">found, the  variable “res” is incremented and an echo is displayed. If no results are found, </text>
<text top="137" left="108" width="681" height="18" font="0">the  line  is  injected  into  a  Snort  signature  template  and  sent  in  “snort.rule”.  Finally,  the </text>
<text top="162" left="108" width="391" height="18" font="0">prototype script waits 30second before doing a loop. </text>
<text top="206" left="108" width="48" height="24" font="22">5.4.3</text>
<text top="207" left="156" width="7" height="22" font="23"> </text>
<text top="206" left="162" width="122" height="24" font="22">ACL script </text>
<text top="240" left="108" width="681" height="18" font="0">The  following  ACL  script  is  a  coded  representation  of  the  flow  chart  seen  in  Figure  22.  To </text>
<text top="265" left="108" width="681" height="18" font="0">resume, this script extracts the IP address source of every machine that interacts with the </text>
<text top="290" left="108" width="681" height="18" font="0">web page. As nobody should be interacting with the honeypot, any interaction is considered </text>
<text top="315" left="108" width="681" height="18" font="0">as  suspicious.  This  IP  address  is  then  injected  into  an  ACL  template.  This  script  has  been </text>
<text top="341" left="108" width="681" height="18" font="0">created especially for this study. An explanation is given after the script, but a more detailed </text>
<text top="366" left="108" width="568" height="18" font="0">explanation, with a line by line explanation can be found in the Appendix C.2. </text>
<text top="399" left="108" width="158" height="13" font="38"><b>#ACL_script.sh  </b></text>
<text top="423" left="108" width="109" height="13" font="26">#!/bin/ksh </text>
<text top="446" left="108" width="99" height="13" font="26">count=200 </text>
<text top="469" left="108" width="20" height="13" font="26">( </text>
<text top="492" left="108" width="109" height="13" font="26">while true </text>
<text top="516" left="108" width="30" height="13" font="26">do </text>
<text top="539" left="108" width="663" height="13" font="26">nawk -F&#34;[\&#34;,]&#34; '/MARK/ {print $9}' msg.log | cut -d' ' -f1| sort | </text>
<text top="558" left="108" width="317" height="13" font="26">uniq | grep -v '^$'&gt; IP_src.log </text>
<text top="581" left="108" width="10" height="13" font="26"> </text>
<text top="604" left="108" width="178" height="13" font="26">cat IP_src.log |  </text>
<text top="627" left="108" width="20" height="13" font="26">( </text>
<text top="650" left="108" width="158" height="13" font="26">while read line </text>
<text top="673" left="108" width="30" height="13" font="26">do </text>
<text top="697" left="108" width="287" height="13" font="26">res=`grep -c $line ACL.log`; </text>
<text top="720" left="108" width="178" height="13" font="26">if [ $res == 0 ]; </text>
<text top="743" left="108" width="10" height="13" font="26"> </text>
<text top="743" left="162" width="574" height="13" font="26">then echo ''$count' deny tcp host '$line' any'\&gt;&gt; ACL.log </text>
<text top="766" left="108" width="10" height="13" font="26"> </text>
<text top="766" left="162" width="257" height="13" font="26">count=`expr $count + 10 ` </text>
<text top="789" left="108" width="267" height="13" font="26">else echo 'IP match found' </text>
<text top="813" left="108" width="30" height="13" font="26">fi </text>
<text top="836" left="108" width="49" height="13" font="26">done </text>
<text top="859" left="108" width="20" height="13" font="26">) </text>
<text top="882" left="108" width="99" height="13" font="26"> sleep 30 </text>
<text top="905" left="108" width="49" height="13" font="26">done </text>
<text top="929" left="108" width="20" height="13" font="26">) </text>
<text top="954" left="108" width="681" height="18" font="0">The  ACL  prototype  script  begins  with  a  “count”  variable,  used  to  identify  each  ACL  with  a </text>
<text top="979" left="108" width="681" height="18" font="0">unique number. A loop starts with the nawk option, which retrieves each lines of HoneyD’s </text>
<text top="1004" left="108" width="681" height="18" font="0">log  (msg.log)  starting  by  /MARK/.  From  these  lines,  IP  addresses  source  are  extracted, </text>
<text top="1030" left="108" width="681" height="18" font="0">duplicate  addresses  are  removed  and  the  result  is  sent  to  “IP_src.log”.  Then,  each  line  of </text>
<text top="1055" left="108" width="681" height="18" font="0">this  file  is  read  and  compared  to  existing  ACL  file  “ACL.log”  (to  avoid  creating  duplicated </text>
<text top="1080" left="108" width="681" height="18" font="0">ACLs). If a match is found, the variable “res” is incremented and an echo is displayed. If no </text>
<text top="1105" left="108" width="681" height="18" font="0">results are found, the line is injected into an ACL template and sent in “ACL.log”. Finally, the </text>
<text top="1131" left="108" width="391" height="18" font="0">prototype script waits 30second before doing a loop. </text>
</page>
<page number="63" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">63 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="48" height="24" font="22">5.4.4</text>
<text top="116" left="156" width="7" height="22" font="23"> </text>
<text top="116" left="162" width="257" height="24" font="22">Snort signature transfer </text>
<text top="149" left="108" width="681" height="18" font="0">This  last  script  is  a  short  example  that  shows  the  possibility  to  automatically  transfer  the </text>
<text top="174" left="108" width="681" height="18" font="0">Snort signatures file “snort.rule”. This is done by starting a SSH connection and transferring </text>
<text top="199" left="108" width="681" height="18" font="0">the file using the “SCP” option command. In order to work, the SSH connection needs to be </text>
<text top="225" left="108" width="681" height="18" font="0">preconfigured  as  a  passwordless  connection.  The  steps  to  configure  a  passwordless </text>
<text top="250" left="108" width="681" height="18" font="0">connection  by  using  private/public  keys  pair  are  provided  in  Appendix  D.  The  following </text>
<text top="275" left="108" width="681" height="18" font="0">script establishes a SSH connection, transfer the file “snort.rule” from the honeypot to the </text>
<text top="300" left="108" width="400" height="18" font="0">NIDS Snort and wait 60 seconds before making a loop: </text>
<text top="334" left="108" width="148" height="13" font="38"><b>#SCP_script.sh </b></text>
<text top="357" left="108" width="109" height="13" font="26">#!/bin/ksh </text>
<text top="381" left="108" width="20" height="13" font="26">( </text>
<text top="404" left="108" width="109" height="13" font="26">while true </text>
<text top="427" left="108" width="30" height="13" font="26">do </text>
<text top="450" left="108" width="475" height="13" font="26">scp /(client_snort_signature_folder)/snort.rule </text>
<text top="469" left="108" width="673" height="13" font="26">ben@192.168.230.120:/(NIDS_directory_signatures_folder)/snort.rules </text>
<text top="492" left="108" width="89" height="13" font="26">sleep 60 </text>
<text top="515" left="108" width="49" height="13" font="26">done </text>
<text top="538" left="108" width="20" height="13" font="26">) </text>
<text top="588" left="108" width="32" height="26" font="16">5.5</text>
<text top="588" left="140" width="7" height="24" font="17"> </text>
<text top="588" left="182" width="206" height="26" font="16">Experimentations </text>
<text top="634" left="108" width="681" height="18" font="0">The  instances  have  been  configured  and  the  scripts  have  been  created  in  the  previous </text>
<text top="659" left="108" width="681" height="18" font="0">section  of  this  chapter.  The  following  section  presents  the  implementation  of  the  set  of </text>
<text top="684" left="108" width="681" height="18" font="0">experiments designed in the Design 4.5. In order to ease the understanding for the reader, a </text>
<text top="710" left="108" width="681" height="18" font="0">UML sequence has been created in following Figure 23. This UML sequence represents each </text>
<text top="735" left="108" width="318" height="18" font="0">interactions involved in each experiments.  </text>
</page>
<page number="64" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="39" size="12" family="Helvetica" color="#000000"/>
	<fontspec id="40" size="13" family="Helvetica" color="#c05046"/>
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">64 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="157" left="341" width="82" height="13" font="39">Snort (NIDS)</text>
<text top="155" left="496" width="141" height="13" font="39">Honeypot Web Server</text>
<text top="155" left="249" width="43" height="13" font="39">Router</text>
<text top="155" left="141" width="53" height="13" font="39">Attacker</text>
<text top="260" left="303" width="129" height="13" font="39">XSS attack   (1 - 50)</text>
<text top="349" left="624" width="139" height="13" font="39">Snort Signatures and </text>
<text top="367" left="627" width="132" height="13" font="39">ACLs are generated </text>
<text top="384" left="632" width="122" height="13" font="39">from HoneyD’s log </text>
<text top="401" left="680" width="22" height="13" font="39">file.</text>
<text top="297" left="626" width="127" height="13" font="39">Attacks recorded in </text>
<text top="314" left="634" width="107" height="13" font="39">HoneyD's log file</text>
<text top="462" left="411" width="142" height="13" font="39">New set of signatures </text>
<text top="479" left="439" width="82" height="13" font="39">implemented</text>
<text top="213" left="316" width="275" height="15" font="40"><b>Experiment 1 – Scripts effectiveness</b></text>
<text top="437" left="285" width="336" height="15" font="40"><b>Experiment 2 – NIDS within Lab environment</b></text>
<text top="587" left="282" width="343" height="15" font="40"><b>Experiment 3 – NIDS in Real World simulation</b></text>
<text top="611" left="231" width="112" height="13" font="39">XSS Tcpreplay + </text>
<text top="628" left="227" width="116" height="13" font="39">Background traffic</text>
<text top="666" left="440" width="109" height="13" font="39">Alerts generated </text>
<text top="236" left="204" width="100" height="13" font="39">Packet capture </text>
<text top="254" left="230" width="44" height="13" font="39">started</text>
<text top="306" left="216" width="154" height="13" font="39">Packet capture Stoped -</text>
<text top="323" left="224" width="138" height="13" font="39">XSS pcap file created</text>
<text top="488" left="178" width="194" height="13" font="39">XSS Tcpreplay packet capture</text>
<text top="546" left="439" width="105" height="13" font="39">Alerts generated</text>
<text top="739" left="316" width="132" height="13" font="39">XSS attacks (1 – 50)</text>
<text top="794" left="209" width="339" height="13" font="39">XSS attacks (1 – 50) + Background traffic at 0.5mbps</text>
<text top="904" left="215" width="310" height="13" font="39">Background traffic increases by 0.5mbps steps...</text>
<text top="763" left="618" width="109" height="13" font="39">Snort signatures </text>
<text top="781" left="638" width="69" height="13" font="39">generated </text>
<text top="820" left="626" width="109" height="13" font="39">Snort signatures </text>
<text top="837" left="609" width="140" height="13" font="39">generated at 0.5mbps</text>
<text top="873" left="626" width="109" height="13" font="39">Snort signatures </text>
<text top="890" left="615" width="128" height="13" font="39">generated at 1mbps</text>
<text top="709" left="263" width="380" height="15" font="40"><b>Experiment 4 – Honeypot in Real World Simulation</b></text>
<text top="849" left="218" width="327" height="13" font="39">XSS attacks (1 – 50) + Background traffic at 1mbps</text>
<text top="768" left="227" width="138" height="13" font="39">XSS latency retreived</text>
<text top="825" left="227" width="138" height="13" font="39">XSS latency retreived</text>
<text top="878" left="227" width="138" height="13" font="39">XSS latency retreived</text>
<text top="127" left="117" width="108" height="13" font="39">192.168.230.130</text>
<text top="127" left="323" width="108" height="13" font="39">192.168.230.120</text>
<text top="127" left="511" width="108" height="13" font="39">192.168.230.140</text>
<text top="940" left="784" width="4" height="18" font="0"> </text>
<text top="966" left="318" width="260" height="14" font="21"><b>Figure 23 ‐ UML Sequence Experiments model </b></text>
<text top="1002" left="108" width="48" height="24" font="22">5.5.1</text>
<text top="1003" left="156" width="7" height="22" font="23"> </text>
<text top="1002" left="162" width="219" height="24" font="22">Scripts effectiveness </text>
<text top="1036" left="108" width="681" height="18" font="0">The  scripts  effectiveness  experiment  involves  firstly,  to  record  the  network  flow  while </text>
<text top="1061" left="108" width="681" height="18" font="0">simulating XSS attacks towards the honeypot and secondly, to implement the list of Snort </text>
<text top="1086" left="108" width="362" height="18" font="0">signatures generated by these attacks into Snort. </text>
</page>
<page number="65" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">65 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">To record the network flow between the attacker and the honeypot, Wireshark is listening </text>
<text top="137" left="108" width="681" height="18" font="0">on  the  attacker’s  network  interface,  which  is  used  to  send  these  attacks.  The  Wireshark </text>
<text top="162" left="108" width="681" height="18" font="0">packet  capture  needs  to  be  started  before  the  first  experiment  and  stopped  when  all  the </text>
<text top="187" left="108" width="609" height="18" font="0">attacks have been sent. The packet capture will be saved in “honeyd_attack.pcap”. </text>
<text top="219" left="108" width="681" height="18" font="0">To start the honeypot, the following command explained in the section 5.3.1.4, is typed in </text>
<text top="244" left="108" width="170" height="18" font="0">the command prompt: </text>
<text top="278" left="108" width="624" height="13" font="26">honeypot@bt:/usr/local/share/honeyd# sudo honeyd -d -i eth1 -f </text>
<text top="296" left="108" width="297" height="13" font="26">myconfig.conf 192.168.230.140 </text>
<text top="321" left="108" width="681" height="18" font="0">The XSS attacks list injection is realised by using the “wget” command, which allows to send </text>
<text top="347" left="108" width="681" height="18" font="0">HTTP requests. The HTTP requests can be extracted from the file “XSS_attack.txt” using the </text>
<text top="372" left="108" width="83" height="18" font="0">‘‐I” option: </text>
<text top="406" left="108" width="475" height="13" font="26">attacker@bt:~# wget -i ~/Desktop/XSS_attack.txt </text>
<text top="431" left="108" width="598" height="18" font="0">The following HTTP request containing XSS attacks will be sent to the web server: </text>
<text top="465" left="108" width="505" height="13" font="26">http://192.168.230.140/NEWS/?act=VIEW&amp;ano=958&amp;pst=-</text>
<text top="483" left="108" width="287" height="13" font="26">1&amp;startno=1121&amp;pageno=9&amp;FID= </text>
<text top="502" left="108" width="643" height="13" font="26">%22%3E%3Cscript%3Ealert%28%2Fwww.r3t.n3t.nl%2F%29%3C%2Fscript%3E </text>
<text top="539" left="108" width="426" height="13" font="26">http://192.168.230.140/gp/change-password/-</text>
<text top="558" left="108" width="643" height="13" font="26">%22%3E%3Cscript%3Ealert%28document.cookie %29%3C/script%3E-.html </text>
<text top="594" left="108" width="673" height="13" font="26">http://192.168.230.140/mailto?prop=movies&amp;locale=us&amp;url=&amp;title=irsdl</text>
<text top="613" left="108" width="683" height="13" font="26">&#34;STYLE=&#34;width:expression(alert(/Internet Explorer Only-Irsdl is here </text>
<text top="632" left="108" width="495" height="13" font="26">again- BugReport.ir andSoorush.SecProject.com/)); </text>
<text top="655" left="162" width="40" height="13" font="26">... </text>
<text top="680" left="108" width="681" height="18" font="0">The  honeypot  will  analyse  these  URL  strings  and  generate  Snort  signatures/ACLs  when  a </text>
<text top="705" left="108" width="681" height="18" font="0">string is composed of “&lt;script&gt;&lt;/script&gt;” tags (or hex‐encoded equivalent). The result of this </text>
<text top="731" left="108" width="681" height="18" font="0">generation  will  be  displayed  in  the  file  snort.rules  and  ACL.log.  Once  all  the  attacks  have </text>
<text top="756" left="108" width="681" height="18" font="0">been sent, the packet capture “honeyd_attack.pcap” is stopped and saved, as seen Figure </text>
<text top="781" left="108" width="27" height="18" font="0">24. </text>
<text top="962" left="785" width="4" height="18" font="0"> </text>
<text top="987" left="305" width="286" height="14" font="21"><b>Figure 24 ‐ Wireshark capture honeyd_attack.pcap </b></text>
<text top="1024" left="108" width="48" height="24" font="22">5.5.2</text>
<text top="1024" left="156" width="7" height="22" font="23"> </text>
<text top="1024" left="162" width="328" height="24" font="22">Snort within Lab environment </text>
<text top="1057" left="108" width="681" height="18" font="0">The lab environment Snort experiment involves replaying the previous packet capture with </text>
<text top="1082" left="108" width="681" height="18" font="0">a different destination IP address (Snort). To do so, the Tcpreplay suite is required to modify </text>
<text top="1107" left="108" width="681" height="18" font="0">the “honeyd_attack.pcap” file. This suite is composed of 3 main tools, Tcpprep, Tcprewrite </text>
<text top="1133" left="108" width="104" height="18" font="0">and Tcpprep.  </text>
</page>
<page number="66" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">66 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">Firstly,  the Tcpprep  tool  is  used  to  create  a  cache  file  “attack.cache”.  This  cache  file  splits </text>
<text top="137" left="108" width="681" height="18" font="0">the  packet  capture  of  “honeyd_attack.pcap”  into  two  sides  (client/server).  This  is  done  to </text>
<text top="162" left="108" width="614" height="18" font="0">avoid Tcpreplay to do any calculation, which result into having a higher packet rate. </text>
<text top="196" left="108" width="643" height="13" font="26">attacker@bt:~# tcpprep --auto=bridge --pcap=honeyd_attack.pcap --</text>
<text top="215" left="108" width="228" height="13" font="26">cachefile=attack.cache </text>
<text top="240" left="108" width="681" height="18" font="0">Secondly, the Tcprewrite tool is used to modify the end points IP addresses. Indeed, in the </text>
<text top="265" left="108" width="681" height="18" font="0">first experiment the traffic was sent from the Attacker to the Honeypot. In this experiment </text>
<text top="290" left="108" width="681" height="18" font="0">the  traffic  will  be  sent  from  the  Attacker  to  the  NIDS.  Therefore  the  destination  address </text>
<text top="316" left="108" width="681" height="18" font="0">needs  to  be  modified  by  using  the  –endpoints  option.  Additionally,  the  cache  file </text>
<text top="341" left="108" width="681" height="18" font="0">“attack.cache” and input file “honeyd_attack.pcap” need to be provided. The modified file is </text>
<text top="366" left="108" width="502" height="18" font="0">saved using the –‐outfile option with the name “snort_attack.pcap”. </text>
<text top="400" left="108" width="544" height="13" font="26">attacker@bt:~# tcprewrite --endpoints=192.168.230.130: </text>
<text top="418" left="108" width="426" height="13" font="26">192.168.230.120 --cachefile= attack.cache  </text>
<text top="442" left="108" width="564" height="13" font="26">--infile=honeyd_attack.pcap --outfile=snort_attack.pcap  </text>
<text top="465" left="108" width="158" height="13" font="26">–-skipbroadcast </text>
<text top="490" left="108" width="681" height="18" font="0">Finally, the Tcpreplay tool is used to replay an entire communication saved into the newly </text>
<text top="515" left="108" width="681" height="18" font="0">created “snort_attack.pcap”. Additional options such as the network interface used ‐‐intf1 </text>
<text top="541" left="108" width="356" height="18" font="0">and a low output speed –mbps are also defined. </text>
<text top="574" left="108" width="653" height="13" font="26">attacker@bt:~# tcpreplay –-mbps=10 --intf1=eth1 snort_attack.pcap </text>
<text top="614" left="108" width="48" height="24" font="22">5.5.3</text>
<text top="614" left="156" width="7" height="22" font="23"> </text>
<text top="614" left="162" width="336" height="24" font="22">Snort in Real World simulation </text>
<text top="647" left="108" width="681" height="18" font="0">The  Snort  real  world  simulation  consists  in  adding  genuine  background  traffic  to  the </text>
<text top="673" left="108" width="681" height="18" font="0">previous  experiment.  To  simulate  this  background  traffic,  the  packet  capture </text>
<text top="698" left="108" width="681" height="18" font="0">“background.pcap” retrieved from the MIT needs to be modified with the Tcpreplay suite. </text>
<text top="723" left="108" width="681" height="18" font="0">This is similar to the previous experiment: A cache file is created for “background.pcap”, the </text>
<text top="748" left="108" width="681" height="18" font="0">endpoints  of  the  network  flow  are  modified  and  a  new  packet  capture </text>
<text top="774" left="108" width="276" height="18" font="0">“snort_background.pcap” is created.  </text>
<text top="807" left="108" width="614" height="13" font="26">attacker@bt:~# tcpprep --auto=bridge --pcap=background.pcap --</text>
<text top="826" left="108" width="267" height="13" font="26">cachefile=background.cache </text>
<text top="849" left="108" width="544" height="13" font="26">attacker@bt:~# tcprewrite --endpoints=192.168.230.130: </text>
<text top="868" left="108" width="475" height="13" font="26">192.168.230.120 --cachefile= background.cache --</text>
<text top="887" left="108" width="564" height="13" font="26">infile=background.pcap --outfile=snort_background.pcap –-</text>
<text top="905" left="108" width="139" height="13" font="26">skipbroadcast </text>
<text top="931" left="108" width="681" height="18" font="0">The background packet file is now configured and ready to be sent on the network. To mix </text>
<text top="956" left="108" width="681" height="18" font="0">up  both  packet  captures,  two  command  prompts  need  to  be  opened  on  the  attacker </text>
<text top="981" left="108" width="377" height="18" font="0">instance to type both commands at the same time. </text>
<text top="1015" left="108" width="168" height="13" font="26">#Command prompt1 </text>
<text top="1038" left="108" width="475" height="13" font="26">attacker@bt:~# tcpreplay –-mbps=10 --intf1=eth0 </text>
<text top="1057" left="108" width="218" height="13" font="26">snort_background.pcap </text>
<text top="1080" left="108" width="10" height="13" font="26"> </text>
<text top="1103" left="108" width="168" height="13" font="26">#Command prompt2 </text>
<text top="1126" left="108" width="653" height="13" font="26">attacker@bt:~# tcpreplay –-mbps=10 --intf1=eth0 snort_attack.pcap </text>
</page>
<page number="67" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">67 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="48" height="24" font="22">5.5.4</text>
<text top="116" left="156" width="7" height="22" font="23"> </text>
<text top="116" left="162" width="370" height="24" font="22">HoneyD in Real World simulation </text>
<text top="149" left="108" width="681" height="18" font="0">This last experiment is similar to the previous one but involves the honeypot effectiveness </text>
<text top="174" left="108" width="681" height="18" font="0">throughout multiple network speed. The background traffic is sent at different speed from </text>
<text top="199" left="108" width="681" height="18" font="0">0mbps  by  step  of  0.5mbps  to  the  honeypot.  In  parallel,  the  XSS  attacks  are  injected  in  a </text>
<text top="225" left="108" width="681" height="18" font="0">different  terminal.  The  background  packet  capture  is  modified  with  Tcprewrite  to  change </text>
<text top="250" left="108" width="483" height="18" font="0">the IP addresses with the one of the Attacker and the Webserver: </text>
<text top="284" left="108" width="544" height="13" font="26">attacker@bt:~# tcprewrite --endpoints=192.168.230.130: </text>
<text top="302" left="108" width="465" height="13" font="26">192.168.230.140 --cachefile= background.cache  </text>
<text top="326" left="108" width="584" height="13" font="26">--infile=background.pcap --outfile=honeyd_background.pcap  </text>
<text top="349" left="108" width="158" height="13" font="26">–-skipbroadcast </text>
<text top="374" left="108" width="681" height="18" font="0">Finally, two command prompts are started, one for the background traffic and one for the </text>
<text top="399" left="108" width="681" height="18" font="0">XSS injection. Experiments are repeated with background traffic sent at 0.5mbps steps, as </text>
<text top="424" left="108" width="96" height="18" font="0">seen below:  </text>
<text top="458" left="328" width="247" height="13" font="38"><b>0mbps background traffic </b></text>
<text top="481" left="108" width="168" height="13" font="26">#Command prompt1 </text>
<text top="505" left="108" width="653" height="13" font="26">attacker@bt:~# (0mbps background traffic = no background traffic) </text>
<text top="528" left="108" width="10" height="13" font="26"> </text>
<text top="551" left="108" width="168" height="13" font="26">#Command prompt2 </text>
<text top="574" left="108" width="475" height="13" font="26">attacker@bt:~# wget -i ~/Desktop/XSS_attack.txt </text>
<text top="597" left="108" width="138" height="13" font="26"> ... </text>
<text top="597" left="202" width="94" height="13" font="26">Done </text>
<text top="634" left="318" width="267" height="13" font="38"><b>0.5mbps background traffic </b></text>
<text top="657" left="108" width="168" height="13" font="26">#Command prompt1 </text>
<text top="680" left="108" width="584" height="13" font="26">attacker@bt:~# tcpreplay –-mbps=0.5 -–loop 20 --intf1=eth0 </text>
<text top="699" left="108" width="228" height="13" font="26">honeyd_background.pcap </text>
<text top="722" left="108" width="10" height="13" font="26"> </text>
<text top="745" left="108" width="168" height="13" font="26">#Command prompt2 </text>
<text top="769" left="108" width="475" height="13" font="26">attacker@bt:~# wget -i ~/Desktop/XSS_attack.txt </text>
<text top="792" left="108" width="138" height="13" font="26"> ... </text>
<text top="792" left="202" width="94" height="13" font="26">Done </text>
<text top="828" left="328" width="247" height="13" font="38"><b>1mbps background traffic </b></text>
<text top="852" left="108" width="168" height="13" font="26">#Command prompt1 </text>
<text top="875" left="108" width="564" height="13" font="26">attacker@bt:~# tcpreplay –-mbps=1 -–loop 20 --intf1=eth0 </text>
<text top="894" left="108" width="228" height="13" font="26">honeyd_background.pcap </text>
<text top="917" left="108" width="10" height="13" font="26"> </text>
<text top="940" left="108" width="168" height="13" font="26">#Command prompt2 </text>
<text top="963" left="108" width="475" height="13" font="26">attacker@bt:~# wget -i ~/Desktop/XSS_attack.txt </text>
<text top="986" left="108" width="138" height="13" font="26"> ... </text>
<text top="986" left="202" width="94" height="13" font="26">Done </text>
<text top="1010" left="108" width="40" height="13" font="26">... </text>
<text top="1035" left="108" width="681" height="18" font="0">The injection time of the 50 XSS attacks is recorded at each 0.5mbps steps. Moreover, the </text>
<text top="1060" left="108" width="681" height="18" font="0">number  of  signatures  generated  by Snort  signature  script  is  counted  and  then  deleted  for </text>
<text top="1085" left="108" width="81" height="18" font="0">each steps </text>
</page>
<page number="68" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="348" width="202" height="18" font="0">Chapter 5  Implementation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">68 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="116" left="108" width="32" height="26" font="16">5.6</text>
<text top="117" left="140" width="7" height="24" font="17"> </text>
<text top="116" left="182" width="134" height="26" font="16">Conclusion </text>
<text top="162" left="108" width="681" height="18" font="0">In  this  chapter,  two  Bash  scripts  have  been  created  and  implemented.  They  gave  the </text>
<text top="188" left="108" width="681" height="18" font="0">possibility to detect XSS attacks and generate ACLs/Snort signatures based on the log file of </text>
<text top="213" left="108" width="681" height="18" font="0">HoneyD. Additionally, a third Bash script was created to automatically send and implement </text>
<text top="238" left="108" width="681" height="18" font="0">the  Snort  signatures  generated  by  the  honeypot,  into  the  NIDS  “Snort”.  Therefore,  this </text>
<text top="263" left="108" width="681" height="18" font="0">chapter  demonstrates  that  the  generation  and  implementation  of  Snort  signatures  can  be </text>
<text top="289" left="108" width="336" height="18" font="0">fully automated with the help of Bash scripts. </text>
<text top="320" left="108" width="681" height="18" font="0">Three instances have been created on the Cloud Computing of Edinburgh Napier University </text>
<text top="345" left="108" width="681" height="18" font="0">to implement this project. This chapter has shown, step by step, the commands typed in the </text>
<text top="370" left="108" width="681" height="18" font="0">command  prompts  of  each  instance,  to  install  and  configure  the  packages  needed  for  the </text>
<text top="396" left="108" width="681" height="18" font="0">execution of the experiments. A set of 50 random XSS attacks have been collected from the </text>
<text top="421" left="108" width="681" height="18" font="0">XXSed.com website  and  used  during  the  experiments.  This  gives  a  large  panel  of  different </text>
<text top="446" left="108" width="499" height="18" font="0">XSS attacks that will hopefully be detected by the honeypot system. </text>
<text top="478" left="108" width="681" height="18" font="0">The  experiments  are  complete  and  the  results  have  been  collected.  The  next  chapter  will </text>
<text top="503" left="108" width="681" height="18" font="0">analyse the results and discuss the effectiveness of the Bash scripts in detecting XSS attacks </text>
<text top="528" left="108" width="681" height="18" font="0">through HoneyD’s log. Furthermore, the effectiveness of Snort and HoneyD to detect these </text>
<text top="553" left="108" width="485" height="18" font="0">XSS attacks will be tested through injection of Background traffic.  </text>
<text top="585" left="108" width="4" height="18" font="0"> </text>
<text top="616" left="108" width="4" height="18" font="0"> </text>
<text top="647" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="69" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">69 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="70" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="368" width="161" height="18" font="0">Chapter 6  Evaluation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">70 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="143" left="108" width="165" height="37" font="11">Chapter 6.</text>
<text top="143" left="273" width="10" height="33" font="6"> </text>
<text top="143" left="324" width="182" height="37" font="11">Evaluation </text>
<text top="222" left="108" width="32" height="26" font="16">6.1</text>
<text top="222" left="140" width="7" height="24" font="17"> </text>
<text top="222" left="182" width="149" height="26" font="16">Introduction </text>
<text top="268" left="108" width="681" height="18" font="0">The  results  collected  during  the  previous  experiments  are  going  to  be  analysed  in  this </text>
<text top="293" left="108" width="681" height="18" font="0">chapter. The results will be compared to assess the effectiveness of the prototype created. </text>
<text top="318" left="108" width="681" height="18" font="0">This  effectiveness  will  be  assessed  by  calculating  the  True  Positive  Ratio  and  the  False </text>
<text top="343" left="108" width="681" height="18" font="0">Positive Ratio of each experiment. In addition, the breaking point of the honeypot system </text>
<text top="369" left="108" width="681" height="18" font="0">will be determined by injecting background traffic at increasing speed. This breaking point </text>
<text top="394" left="108" width="681" height="18" font="0">will  indicate  the  moment  where  the  honeypot  becomes  unstable  and  stop  detecting  XSS </text>
<text top="419" left="108" width="681" height="18" font="0">attacks. Finally, all the results will be compared against the  expected results written in the </text>
<text top="445" left="108" width="681" height="18" font="0">chapter Design 4.5, to determine whether the behaviours of the HoneyD were as expected </text>
<text top="470" left="108" width="53" height="18" font="0">or not. </text>
<text top="524" left="108" width="32" height="26" font="16">6.2</text>
<text top="524" left="140" width="7" height="24" font="17"> </text>
<text top="524" left="182" width="233" height="26" font="16">Scripts effectiveness </text>
<text top="570" left="108" width="681" height="18" font="0">The script effectiveness experiment consists in sending XSS attacks towards the honeypots </text>
<text top="595" left="108" width="681" height="18" font="0">in order to detect them and generate Snort signatures by using the Snort script. In addition, </text>
<text top="620" left="108" width="681" height="18" font="0">this  experiment  records  the  network  flow  of  the  attack  in  order  to  replay  it  in  the  NIDS </text>
<text top="646" left="108" width="100" height="18" font="0">experiments. </text>
<text top="677" left="108" width="681" height="18" font="0">XSS attacks have been sent from the attacker to the honeypot Web server. To evaluate the </text>
<text top="702" left="108" width="681" height="18" font="0">number of  XSS attacks detected by the honeypot’s Bash  scripts, the number of signatures </text>
<text top="728" left="108" width="586" height="18" font="0">that have been automatically generated in the “snort.rule” file will be counted.  </text>
<text top="759" left="108" width="681" height="18" font="0">The  whole  XSS  injection  was  composed  of  50  random  XSS  attacks  and  out  of  them, </text>
<text top="784" left="108" width="681" height="18" font="0">“snort.rule” shows that 26 signatures have been generated. This means that 26 XSS attacks </text>
<text top="809" left="108" width="681" height="18" font="0">out  of  50  have  been  detected.  The  following  gives  a  quick  overview  of  these  Snort </text>
<text top="835" left="108" width="428" height="18" font="0">signatures but the whole list can be found in Appendix E. : </text>
<text top="868" left="108" width="643" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34; XSS attempt: </text>
<text top="887" left="108" width="564" height="13" font="26">script injection detected &#34;; flow:to_server,established; </text>
<text top="906" left="108" width="564" height="13" font="26">content:&#34;alert(document.cookie)&#34;; nocase; sid: 1000000;) </text>
<text top="929" left="108" width="10" height="13" font="26"> </text>
<text top="952" left="108" width="643" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34; XSS attempt: </text>
<text top="971" left="108" width="564" height="13" font="26">script injection detected &#34;; flow:to_server,established; </text>
<text top="990" left="108" width="673" height="13" font="26">content:&#34;a=eval;b=alert;a(b(/XSS/.source));%3C/script37%22%3%3Cmarqu</text>
<text top="1008" left="108" width="643" height="13" font="26">ee%3E%3Ch1%3EXSS%20by%20Xylitol%3C/h1%3E%3C/marquee%3E&#34;; nocase; </text>
<text top="1027" left="108" width="148" height="13" font="26">sid: 1000001;) </text>
<text top="1050" left="108" width="10" height="13" font="26"> </text>
<text top="1073" left="108" width="643" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34; XSS attempt: </text>
<text top="1092" left="108" width="564" height="13" font="26">script injection detected &#34;; flow:to_server,established; </text>
<text top="1111" left="108" width="495" height="13" font="26">content:&#34;alert(&#34;DaiMon&#34;)&#34;; nocase; sid: 1000002;) </text>
<text top="1134" left="108" width="10" height="13" font="26"> </text>
</page>
<page number="71" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="41" size="16" family="Courier" color="#ff0000"/>
<text top="57" left="368" width="161" height="18" font="0">Chapter 6  Evaluation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">71 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="114" left="108" width="643" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34; XSS attempt: </text>
<text top="133" left="108" width="564" height="13" font="26">script injection detected &#34;; flow:to_server,established; </text>
<text top="151" left="108" width="564" height="13" font="26">content:&#34;ipt&gt;alert('XSS');&lt;/scr&#34;; nocase; sid: 1000003;) </text>
<text top="175" left="108" width="10" height="13" font="26"> </text>
<text top="198" left="108" width="643" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34; XSS attempt: </text>
<text top="216" left="108" width="564" height="13" font="26">script injection detected &#34;; flow:to_server,established; </text>
<text top="235" left="108" width="604" height="13" font="26">content:&#34;alert%28%2FXSS+By+RedTuninG%2F%29%3B&#34;; nocase; sid: </text>
<text top="254" left="108" width="99" height="13" font="26">1000004;) </text>
<text top="279" left="108" width="681" height="18" font="0">In  addition  an  ACL  has  been  generated  to  block  the  traffic  coming  from  the  attacker  IP </text>
<text top="304" left="108" width="66" height="18" font="0">address: </text>
<text top="338" left="108" width="386" height="13" font="26">200 deny tcp host  any 192.168.230.130 </text>
<text top="363" left="108" width="681" height="18" font="0">To evaluate the effectiveness of the signatures prototype in the lab environment, the true </text>
<text top="389" left="108" width="639" height="18" font="0">positive ratio, explained in the chapter Technologies Review section 2.3.3, is calculated </text>
<text top="422" left="325" width="248" height="18" font="0">Lab Prototype True Positive Ratio </text>
<text top="461" left="361" width="32" height="21" font="0">TPR</text>
<text top="461" left="489" width="47" height="22" font="0">∗ 100 </text>
<text top="511" left="365" width="32" height="21" font="0">TPR</text>
<text top="497" left="441" width="20" height="21" font="0">26</text>
<text top="523" left="420" width="20" height="21" font="0">26</text>
<text top="523" left="462" width="20" height="21" font="0">24</text>
<text top="511" left="486" width="47" height="22" font="0">∗ 100 </text>
<text top="550" left="401" width="32" height="21" font="0">TPR</text>
<text top="550" left="456" width="40" height="22" font="0">52% </text>
<text top="586" left="108" width="681" height="18" font="0">The  True  Positive  ratio  is  a  way  of  saying  how  good  the  honeypot  is  at  alerting  on  real </text>
<text top="611" left="108" width="681" height="18" font="0">attacks.  The  chapter  Technologies  Review  section  2.3.3  states  that  an  acceptable  level  of </text>
<text top="636" left="108" width="681" height="18" font="0">True  Positive  alerts  should  be  at  least  60%.    In  this  experiment,  the  True  Positive  ratio  is </text>
<text top="662" left="108" width="446" height="18" font="0">equal to 52%, which makes it 8% under the acceptable level. </text>
<text top="716" left="108" width="32" height="26" font="16">6.3</text>
<text top="716" left="140" width="7" height="24" font="17"> </text>
<text top="716" left="182" width="348" height="26" font="16">Snort within Lab environment </text>
<text top="762" left="108" width="681" height="18" font="0">The Snort lab experiment implements the newly generated signatures into the NIDS Snort </text>
<text top="787" left="108" width="385" height="18" font="0">and replays the XSS attack packet towards the NIDS. </text>
<text top="818" left="108" width="681" height="18" font="0">During Snort initialization an error is printed. The error message specifies that punctuation </text>
<text top="844" left="108" width="681" height="18" font="0">errors  are  present  in  the  newly  generated  signature  file  “snort.rule”.  After  analysing </text>
<text top="869" left="108" width="681" height="18" font="0">“snort.rule”, errors are found to originate from additional semicolons within the “msg” and </text>
<text top="894" left="108" width="681" height="18" font="0">“content”  fields.  In  Snort  signatures,  semicolons  should  only  be  used  to  separate  options. </text>
<text top="919" left="108" width="681" height="18" font="0">However,  the  strings  used  in  the  XSS  attacks  were  directly  inserted  into  the  signatures </text>
<text top="945" left="108" width="681" height="18" font="0">template.  In  some  cases,  these  strings  were  composed  of  semicolons,  which  were </text>
<text top="970" left="108" width="681" height="18" font="0">misunderstood by Snort and were generating errors. To mitigate those errors, backslashes </text>
<text top="995" left="108" width="681" height="18" font="0">were  typed  before  these  specific  semicolons  in  order  to  make  them  become  some  no </text>
<text top="1021" left="108" width="408" height="18" font="0">special characters. The modifications are shown below: </text>
<text top="1054" left="108" width="643" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34; XSS attempt: </text>
<text top="1073" left="108" width="564" height="13" font="26">script injection detected &#34;; flow:to_server,established; </text>
<text top="1092" left="108" width="673" height="13" font="26">content:&#34;alert(String.fromCharCode(88,83,83,32,98,121,32,66,117,103,</text>
<text top="1110" left="108" width="673" height="13" font="26">66,117,115,116,101,114,32,45,32,76,101,105,97,32,98,117,103,98,117,1</text>
<text top="1130" left="108" width="396" height="13" font="26">15,116,101,114,46,99,111,109,46,98,114))</text>
<text top="1129" left="504" width="11" height="14" font="41"><b>\</b></text>
<text top="1130" left="515" width="267" height="13" font="26">;&#34;; nocase; sid: 1000013;) </text>
</page>
<page number="72" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="368" width="161" height="18" font="0">Chapter 6  Evaluation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">72 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="114" left="108" width="10" height="13" font="26"> </text>
<text top="137" left="108" width="624" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg XSS attempt: </text>
<text top="156" left="108" width="544" height="13" font="26">script injection detected&#34;;flow:to_server,established; </text>
<text top="175" left="108" width="148" height="13" font="26">content:&#34;a=eval</text>
<text top="174" left="257" width="11" height="14" font="41"><b>\</b></text>
<text top="175" left="267" width="79" height="13" font="26">;b=alert</text>
<text top="174" left="347" width="11" height="14" font="41"><b>\</b></text>
<text top="175" left="357" width="188" height="13" font="26">;a(b(/XSS/.source))</text>
<text top="174" left="545" width="11" height="14" font="41"><b>\</b></text>
<text top="175" left="556" width="228" height="13" font="26">;%3C/script37%22%3%3Cma</text>
<text top="195" left="108" width="673" height="13" font="26">rquee%3E%3Ch1%3EXSS%20by%20Xylitol%3C/h1%3E%3C/marquee%3E&#34;; nocase; </text>
<text top="214" left="108" width="148" height="13" font="26">sid: 1000014;) </text>
<text top="237" left="108" width="10" height="13" font="26"> </text>
<text top="260" left="108" width="643" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34; XSS attempt: </text>
<text top="279" left="108" width="554" height="13" font="26">script injection detected &#34;;flow:to_server,established; </text>
<text top="298" left="108" width="247" height="13" font="26">content:&#34;ipt&gt;alert('XSS')</text>
<text top="297" left="356" width="11" height="14" font="41"><b>\</b></text>
<text top="298" left="366" width="317" height="13" font="26">;&lt;/scr&#34;; nocase; sid: 1000015;) </text>
<text top="322" left="108" width="10" height="13" font="26"> </text>
<text top="345" left="108" width="643" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34; XSS attempt: </text>
<text top="364" left="108" width="554" height="13" font="26">script injection detected &#34;;flow:to_server,established; </text>
<text top="383" left="108" width="673" height="13" font="26">content:&#34;&amp;to=extarea%20cols=1000%20rows=1000%20style=%22position:%20</text>
<text top="402" left="108" width="79" height="13" font="26">absolute</text>
<text top="401" left="187" width="11" height="14" font="41"><b>\</b></text>
<text top="402" left="198" width="139" height="13" font="26">;%20top:%200px</text>
<text top="401" left="337" width="11" height="14" font="41"><b>\</b></text>
<text top="402" left="347" width="148" height="13" font="26">;%20left:%200px</text>
<text top="401" left="496" width="11" height="14" font="41"><b>\</b></text>
<text top="402" left="507" width="277" height="13" font="26">;%22%20onmouseover=%22alert%</text>
<text top="422" left="108" width="614" height="13" font="26">28%27Hacked%20By%20B34TR1B0X%20For%20LeaderHackers.ORG%27%2&#34;; </text>
<text top="441" left="108" width="228" height="13" font="26">nocase; sid: 1000016;) </text>
<text top="479" left="108" width="681" height="18" font="0">After modification of the previous signatures, Snort initializes correctly and the XSS packet </text>
<text top="505" left="108" width="681" height="18" font="0">capture is sent from the Attacker to the NIDS. Once the 678 packets that compose the XSS </text>
<text top="530" left="108" width="681" height="18" font="0">packet capture are sent, Snort displays that 36 alerts have been generated, as seen Figure </text>
<text top="555" left="108" width="27" height="18" font="0">25: </text>
<text top="736" left="585" width="4" height="18" font="0"> </text>
<text top="761" left="369" width="158" height="14" font="21"><b>Figure 25 ‐ Snort Lab results </b></text>
<text top="785" left="108" width="681" height="18" font="0">Surprisingly,  Snort  detected  36  XSS  attempt  while  the  honeypot  generated  signatures  for </text>
<text top="810" left="108" width="681" height="18" font="0">only 26 XSS attacks. This result is surprising because the same number of attack should have </text>
<text top="835" left="108" width="681" height="18" font="0">been found by the honeypot and by Snort. To understand what happened, the Snort’s log </text>
<text top="860" left="108" width="681" height="18" font="0">file is analysed using Wireshark. This log shows that four TCP out‐of‐order messages were </text>
<text top="886" left="108" width="681" height="18" font="0">generated in the XSS packet capture, which resulted in duplicating four of the XSS attacks, as </text>
<text top="911" left="108" width="115" height="18" font="0">seen Figure 26. </text>
<text top="1015" left="785" width="4" height="18" font="0"> </text>
<text top="1041" left="370" width="156" height="14" font="21"><b>Figure 26 ‐ Snort log file lab </b></text>
<text top="1064" left="108" width="681" height="18" font="0">These four duplicated messages were causing four additional alerts and consequently, they </text>
<text top="1089" left="108" width="306" height="18" font="0">should be removed from the total alerts.  </text>
<text top="1123" left="296" width="305" height="18" font="0">36 alerts – 4 duplicated alerts = 32 alerts. </text>
</page>
<page number="73" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="368" width="161" height="18" font="0">Chapter 6  Evaluation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">73 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">However, there are still a difference between the 26 signatures generated by the honeypot </text>
<text top="137" left="108" width="681" height="18" font="0">and  the  32  XSS  attempt  raised  by  Snort.  A  second  analyse  of  Snort’s  log  file  was  done, </text>
<text top="162" left="108" width="681" height="18" font="0">looking for other duplicated alerts, but none of them were found: each alert corresponds to </text>
<text top="187" left="108" width="681" height="18" font="0">a  unique  XSS  attack  string.  This  fact  leads  to  only  one  explanation:  some  Snort  signatures </text>
<text top="213" left="108" width="681" height="18" font="0">are detecting multiple attacks. This is a possibility because some XSS attacks could be using </text>
<text top="238" left="108" width="681" height="18" font="0">the  same  strings  between  the  script  tags  for  multiple  websites.  The  script  that  generates </text>
<text top="263" left="108" width="681" height="18" font="0">Snort  signature  is  built  in  a  way  to  not  duplicate  signatures  and  therefore,  one  signature </text>
<text top="288" left="108" width="681" height="18" font="0">could  lead  in  detecting  multiple  XSS  attacks.  Finally,  those  32  alerts  are  True  Positive  and </text>
<text top="314" left="108" width="640" height="18" font="0">correspond to unique XSS attacks. The TPR ratio of this experiment is calculated below: </text>
<text top="347" left="343" width="210" height="18" font="0">Lab NIDS True Positive Ratio </text>
<text top="386" left="361" width="32" height="21" font="0">TPR</text>
<text top="386" left="489" width="47" height="22" font="0">∗ 100 </text>
<text top="436" left="365" width="32" height="21" font="0">TPR</text>
<text top="422" left="441" width="20" height="21" font="0">32</text>
<text top="448" left="420" width="20" height="21" font="0">32</text>
<text top="448" left="462" width="20" height="21" font="0">18</text>
<text top="436" left="486" width="47" height="22" font="0">∗ 100 </text>
<text top="475" left="401" width="32" height="21" font="0">TPR</text>
<text top="475" left="456" width="40" height="22" font="0">64% </text>
<text top="511" left="108" width="681" height="18" font="0">The  chapter  Technologies  Review  section  2.3.3  states  that  an  acceptable  level  of  True </text>
<text top="536" left="108" width="681" height="18" font="0">Positive alerts should be at least 60%.  In this experiment, the True Positive ratio is equal to </text>
<text top="562" left="108" width="681" height="18" font="0">64%,  which  makes  it  4%  above  the  acceptable  level  and  12%  above  the  previous </text>
<text top="587" left="108" width="681" height="18" font="0">experiment.  However,  the  TPR  calculated  in  the  previous  experiment  is  wrong  because  it </text>
<text top="612" left="108" width="681" height="18" font="0">has been calculated on the number of signatures generated without taking in consideration </text>
<text top="637" left="108" width="681" height="18" font="0">that  one  signature  could  detect  multiple  XSS  attacks.  Based  on  that  fact,  the  Scripts </text>
<text top="663" left="108" width="537" height="18" font="0">effectiveness TPR result should be of 64%, equivalent to this experiment. </text>
<text top="717" left="108" width="32" height="26" font="16">6.4</text>
<text top="717" left="140" width="7" height="24" font="17"> </text>
<text top="717" left="182" width="357" height="26" font="16">Snort in Real World simulation </text>
<text top="763" left="108" width="681" height="18" font="0">The Snort Real world simulation consists in simulating a real world environment by injecting </text>
<text top="788" left="108" width="681" height="18" font="0">background  traffic  mixed  up  with  the  XSS  attack  packet.  The  aim  of  this  experiment  is  to </text>
<text top="813" left="108" width="536" height="18" font="0">determine if the background traffic generates False Positive alert results. </text>
<text top="845" left="108" width="681" height="18" font="0">During this experiment, the DARPA data set packet has been sent mixed up with the 50 XSS </text>
<text top="870" left="108" width="681" height="18" font="0">attack packets, which results in a total of 48562 packets. Both packets were sent at a speed </text>
<text top="895" left="108" width="681" height="18" font="0">of 10mbps. Over this large network traffic, 36 alerts have been generated by Snort, as seen </text>
<text top="920" left="108" width="77" height="18" font="0">Figure 27: </text>
<text top="1090" left="590" width="4" height="18" font="0"> </text>
<text top="1115" left="351" width="193" height="14" font="21"><b>Figure 27 ‐ Real world Snort alerts </b></text>
</page>
<page number="74" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="368" width="161" height="18" font="0">Chapter 6  Evaluation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">74 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">This  result  is  similar  to  the  one  found  previously  in  the  Lab  NIDS  experiment.  The  same </text>
<text top="137" left="108" width="681" height="18" font="0">number  of  XSS  attacks  has  been  sent,  which  means  that  results  of  both  experiments  are </text>
<text top="162" left="108" width="681" height="18" font="0">equivalent.  This  concludes  that  the  injection  of  background  traffic  did  not  raise  any  False </text>
<text top="187" left="108" width="681" height="18" font="0">Positive alerts. Therefore using the False Positive Ratio with FP = 0 (no False positive alerts) </text>
<text top="213" left="108" width="46" height="18" font="0">done: </text>
<text top="246" left="342" width="214" height="18" font="0">Lab NIDS False Positive Ratio </text>
<text top="285" left="362" width="31" height="21" font="0">FPR</text>
<text top="285" left="489" width="47" height="22" font="0">∗ 100 </text>
<text top="335" left="253" width="31" height="21" font="0">FPR</text>
<text top="347" left="399" width="4" height="21" font="0">	</text>
<text top="347" left="519" width="4" height="21" font="0">	</text>
<text top="335" left="597" width="47" height="22" font="0">∗ 100 </text>
<text top="389" left="322" width="31" height="21" font="0">FPR</text>
<text top="375" left="445" width="10" height="21" font="0">0</text>
<text top="401" left="377" width="10" height="21" font="0">0</text>
<text top="401" left="416" width="50" height="21" font="0">48562</text>
<text top="401" left="487" width="30" height="21" font="0">678</text>
<text top="389" left="528" width="47" height="22" font="0">∗ 100 </text>
<text top="442" left="355" width="31" height="21" font="0">FPR</text>
<text top="428" left="445" width="10" height="21" font="0">0</text>
<text top="454" left="410" width="10" height="21" font="0">0</text>
<text top="454" left="441" width="50" height="21" font="0">47884</text>
<text top="442" left="495" width="47" height="22" font="0">∗ 100 </text>
<text top="481" left="406" width="31" height="21" font="0">FPR</text>
<text top="481" left="461" width="30" height="22" font="0">0% </text>
<text top="517" left="108" width="681" height="18" font="0">The  False  Positive  Ratio  is  0%  because  this  experiment  did  not  raise  any  False  Positive </text>
<text top="542" left="108" width="649" height="18" font="0">results. This is a great result because the FPR should always be as close as 0% if possible. </text>
<text top="573" left="108" width="681" height="18" font="0">The  True  Positive  Ratio  is  equivalent  to  the  one  calculated  in  the  previous  experiment </text>
<text top="599" left="108" width="681" height="18" font="0">because  the  same  number  of  True  Positive  alerts  have  been  detected:  36alerts  –  4 </text>
<text top="624" left="108" width="681" height="18" font="0">duplicated = 32 TP alerts. Therefore the True Positive Ratio is still equal to 64%, meaning 4% </text>
<text top="649" left="108" width="204" height="18" font="0">above the acceptable level. </text>
<text top="703" left="108" width="32" height="26" font="16">6.5</text>
<text top="704" left="140" width="7" height="24" font="17"> </text>
<text top="703" left="182" width="393" height="26" font="16">HoneyD in Real World simulation </text>
<text top="749" left="108" width="681" height="18" font="0">The  HoneyD  in  real  world  simulation  consists  in  sending  background  traffic  at  different </text>
<text top="775" left="108" width="681" height="18" font="0">speeds  while  injecting  the  50  XSS  attacks  into  the  honeypot.  This  determines  the </text>
<text top="800" left="108" width="681" height="18" font="0">performances  in  detecting  the  attacks  and  generating  Snort  signatures  in  a  busy  network </text>
<text top="825" left="108" width="681" height="18" font="0">environment with background traffic. To do so, increasing background traffic speed is sent </text>
<text top="850" left="108" width="681" height="18" font="0">to  the  honeypot  and  two  results  are  collected:  the  latency  to  inject  the  50  XSS,  and  the </text>
<text top="876" left="108" width="681" height="18" font="0">number  of  signatures  generated.  Indeed,  the  latency  is  printed  on  the  attacker  terminal </text>
<text top="901" left="108" width="681" height="18" font="0">once  the  50XSS  are  successfully  injected  and  the  number  of  signatures  generated  can  be </text>
<text top="926" left="108" width="681" height="18" font="0">easily  found  in  the  file  “snort.rule”  on  the  honeypot.  The  background  traffic  increases  by </text>
<text top="952" left="108" width="681" height="18" font="0">0.5mbps  steps  and  latency/signatures  generated  are  collected  at  each  step.  The  following </text>
<text top="977" left="108" width="572" height="18" font="0">charts, Figure 28 and Figure 29, have been created with the results retrieved:  </text>
<text top="1008" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="75" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="42" size="18" family="Times" color="#000000"/>
	<fontspec id="43" size="18" family="Times" color="#000000"/>
	<fontspec id="44" size="22" family="Times" color="#000000"/>
	<fontspec id="45" size="16" family="Times" color="#ff0000"/>
<text top="57" left="368" width="161" height="18" font="0">Chapter 6  Evaluation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">75 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="475" left="758" width="4" height="18" font="0"> </text>
<text top="500" left="223" width="451" height="14" font="21"><b>Figure 28 ‐ Chart XSS injection latency according to the background traffic speed </b></text>
<text top="524" left="108" width="4" height="18" font="0"> </text>
<text top="918" left="758" width="4" height="18" font="0"> </text>
<text top="944" left="234" width="428" height="14" font="21"><b>Figure 29 ‐ Chart attacks detected according to the background traffic speed </b></text>
<text top="967" left="108" width="4" height="18" font="0"> </text>
<text top="998" left="108" width="681" height="18" font="0">The results show that when the background traffic speed increases, the injection time of the </text>
<text top="1023" left="108" width="681" height="18" font="0">50 XSS attacks increases but the number of attacks detected stay similar with 26 signatures </text>
<text top="1049" left="108" width="681" height="18" font="0">generated (equivalent to the first experiment). The increase in the latency shows that the </text>
<text top="1074" left="108" width="681" height="18" font="0">honeypot queue the network packets destined to the webserver. The repercussions of this </text>
<text top="1099" left="108" width="681" height="18" font="0">queuing  mechanism  during  high  loads  of  traffic  accrue  the  honeypot  struggle  to  reply  to </text>
<text top="1124" left="108" width="681" height="18" font="0">each single data packets. However, collected results shows that the honeypot never drops </text>
<text top="380" left="164" width="8" height="15" font="2">0</text>
<text top="357" left="157" width="15" height="15" font="2">10</text>
<text top="333" left="157" width="15" height="15" font="2">20</text>
<text top="309" left="157" width="15" height="15" font="2">30</text>
<text top="285" left="157" width="15" height="15" font="2">40</text>
<text top="261" left="157" width="15" height="15" font="2">50</text>
<text top="237" left="157" width="15" height="15" font="2">60</text>
<text top="214" left="157" width="15" height="15" font="2">70</text>
<text top="190" left="157" width="15" height="15" font="2">80</text>
<text top="400" left="182" width="8" height="15" font="2">0</text>
<text top="400" left="285" width="19" height="15" font="2">0.5</text>
<text top="400" left="400" width="8" height="15" font="2">1</text>
<text top="400" left="503" width="19" height="15" font="2">1.5</text>
<text top="400" left="617" width="8" height="15" font="2">2</text>
<text top="400" left="720" width="19" height="15" font="2">2.5</text>
<text top="422" left="145" width="0" height="21" font="42"><b>Time</b></text>
<text top="379" left="145" width="0" height="21" font="42"><b> to</b></text>
<text top="355" left="145" width="0" height="21" font="42"><b> inject</b></text>
<text top="302" left="145" width="0" height="21" font="42"><b> 50</b></text>
<text top="276" left="145" width="0" height="21" font="42"><b> XS</b></text>
<text top="250" left="145" width="0" height="21" font="42"><b>S  </b></text>
<text top="231" left="145" width="0" height="21" font="42"><b>(seconds)</b></text>
<text top="440" left="322" width="276" height="21" font="43"><b>Background traffic speed (mbps</b></text>
<text top="443" left="598" width="6" height="18" font="19"><b>)</b></text>
<text top="124" left="185" width="500" height="24" font="44"><b>XSS injection latency according to the background </b></text>
<text top="153" left="370" width="124" height="24" font="44"><b>traffic speed</b></text>
<text top="846" left="164" width="8" height="15" font="2">0</text>
<text top="810" left="164" width="8" height="15" font="2">5</text>
<text top="775" left="157" width="15" height="15" font="2">10</text>
<text top="739" left="157" width="15" height="15" font="2">15</text>
<text top="704" left="157" width="15" height="15" font="2">20</text>
<text top="668" left="157" width="15" height="15" font="2">25</text>
<text top="633" left="157" width="15" height="15" font="2">30</text>
<text top="865" left="182" width="8" height="15" font="2">0</text>
<text top="865" left="285" width="19" height="15" font="2">0.5</text>
<text top="865" left="400" width="8" height="15" font="2">1</text>
<text top="865" left="503" width="19" height="15" font="2">1.5</text>
<text top="865" left="617" width="8" height="15" font="2">2</text>
<text top="865" left="720" width="19" height="15" font="2">2.5</text>
<text top="822" left="147" width="0" height="21" font="42"><b>Signa</b></text>
<text top="776" left="147" width="0" height="21" font="42"><b>tur</b></text>
<text top="750" left="147" width="0" height="21" font="42"><b>es</b></text>
<text top="731" left="147" width="0" height="21" font="42"><b> ge</b></text>
<text top="706" left="147" width="0" height="21" font="42"><b>n</b></text>
<text top="695" left="147" width="0" height="21" font="42"><b>e</b></text>
<text top="685" left="147" width="0" height="21" font="42"><b>ra</b></text>
<text top="667" left="147" width="0" height="21" font="42"><b>te</b></text>
<text top="650" left="147" width="0" height="21" font="42"><b>d</b></text>
<text top="889" left="317" width="276" height="21" font="43"><b>Background traffic speed (mbps</b></text>
<text top="891" left="593" width="6" height="18" font="19"><b>)</b></text>
<text top="567" left="178" width="513" height="24" font="44"><b>Signatures generated by the honeypot according to </b></text>
<text top="597" left="289" width="286" height="24" font="44"><b>the background traffic speed</b></text>
<text top="301" left="509" width="129" height="18" font="20"><i>Unstable interval </i></text>
<text top="779" left="506" width="129" height="18" font="20"><i>Unstable interval </i></text>
<text top="207" left="577" width="111" height="18" font="45"><i>Breaking Point </i></text>
<text top="689" left="577" width="111" height="18" font="45"><i>Breaking Point </i></text>
</page>
<page number="76" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="368" width="161" height="18" font="0">Chapter 6  Evaluation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">76 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">packets  and  always  find  the  similar  number  of  XSS  attacks  than  in  the  first  experiment </text>
<text top="137" left="108" width="216" height="18" font="0">(before the breaking period). </text>
<text top="168" left="108" width="681" height="18" font="0">However, when the background traffic reaches a speed of 2mbps, the honeypot generates </text>
<text top="193" left="108" width="514" height="18" font="0">an error and stop itself after certain period of time, as seen Figure 30: </text>
<text top="351" left="747" width="4" height="18" font="0"> </text>
<text top="377" left="257" width="382" height="14" font="21"><b>Figure 30 ‐ Error message HoneyD with background traffic at 2mbps </b></text>
<text top="400" left="108" width="681" height="18" font="0">This error called “segmentation fault” is generated because the honeypot is trying to access </text>
<text top="426" left="108" width="681" height="18" font="0">memory that the CPU cannot physically address. In  other words, the honeypot is using all </text>
<text top="451" left="108" width="681" height="18" font="0">the available memory available to inspect every packet. The segmentation fault error results </text>
<text top="476" left="108" width="506" height="18" font="0">in sending a dump core signal that terminates the honeypot process. </text>
<text top="507" left="108" width="681" height="18" font="0">At  2mbps,  the  honeypot  had  the  time  to  detect  18  XSS  attacks  in  67seconds  before </text>
<text top="533" left="108" width="681" height="18" font="0">segmentation  fault  error.  At  2.5mbps,  the  honeypot  detected  7  XSS  attacks  in  43  seconds </text>
<text top="558" left="108" width="681" height="18" font="0">before segmentation fault error. These results are explained in the following way: The XSS </text>
<text top="583" left="108" width="681" height="18" font="0">injection in this experiment is realised using the command “wget”. This command connects </text>
<text top="608" left="108" width="681" height="18" font="0">and downloads every pages found in the file “XSS_attack.txt”, which is composed of 50 XSS </text>
<text top="634" left="108" width="681" height="18" font="0">attacks. This TCP connection involves a 3 way handshake to connect to the webserver and </text>
<text top="659" left="108" width="681" height="18" font="0">then, the download of the page (error page in this case). Therefore, quite a lot of interaction </text>
<text top="684" left="108" width="681" height="18" font="0">with the webserver is required when injecting XSS attacks. During high loads of background </text>
<text top="710" left="108" width="681" height="18" font="0">traffic,  this  interaction  takes  an  increasing  time,  because  the  queuing  mechanism  used  by </text>
<text top="735" left="108" width="681" height="18" font="0">the  webserver  can  receive  multiple  background  packets  between  each  step  of  the  3  ways </text>
<text top="760" left="108" width="681" height="18" font="0">handshake. Consequently, in high loads of traffic, the XSS struggle to be injected (increase </text>
<text top="785" left="108" width="681" height="18" font="0">the latency) and the honeypot struggle to inspect each packet. This result in a segmentation </text>
<text top="811" left="108" width="681" height="18" font="0">fault stops the honeypot after a certain period, which explains why the number of signature </text>
<text top="836" left="108" width="681" height="18" font="0">generation and latency decrease after the breaking point of 2mbps. From this experiment, </text>
<text top="861" left="108" width="486" height="18" font="0">an unstable interval is determined to be between 1.5 and 2mbps.  </text>
<text top="915" left="108" width="32" height="26" font="16">6.6</text>
<text top="915" left="140" width="7" height="24" font="17"> </text>
<text top="915" left="182" width="522" height="26" font="16">Results analysis compared to expected results </text>
<text top="961" left="108" width="681" height="18" font="0">This section analyse the evaluation results in comparison to the expected results that have </text>
<text top="987" left="108" width="307" height="18" font="0">been supposed in the chapter Design 4.5. </text>
<text top="1018" left="108" width="681" height="18" font="0">The  script  effectiveness  expected  results  should  have  generated  a  signature  for  every  XSS </text>
<text top="1043" left="108" width="681" height="18" font="0">attacks  containing  “&lt;script&gt;  <i>random_string</i>  &lt;/script&gt;”  tags  or  equivalent  tags  with  the </text>
<text top="1068" left="108" width="223" height="18" font="0">following hexenconded value: </text>
<text top="1102" left="108" width="346" height="13" font="26">“script&gt; <i>random_string</i> script%3E”  </text>
<text top="1125" left="108" width="426" height="13" font="26">”%3Cscript%3E <i>random_string</i> 3C/script%3E”  </text>
</page>
<page number="77" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="368" width="161" height="18" font="0">Chapter 6  Evaluation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">77 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="114" left="108" width="445" height="13" font="26">”%3Cscript%3E <i>random_string</i> %3C%2Fscript%3E” </text>
<text top="139" left="108" width="681" height="18" font="0">The Bash script implemented did a good job in detecting successfully all the values above. </text>
<text top="164" left="108" width="681" height="18" font="0">However,  different  “script”  tags  attack  went  undetected  such  as  the  following  attack  that </text>
<text top="190" left="108" width="523" height="18" font="0">inserts % character within the script tags to evade the filtering process: </text>
<text top="222" left="108" width="178" height="13" font="38"><b>Hexencoded value: </b></text>
<text top="245" left="108" width="416" height="13" font="26">%252529%25253B%25253C%25252Fscript%25253E </text>
<text top="268" left="108" width="178" height="13" font="38"><b>ASCII equivalent: </b></text>
<text top="292" left="108" width="218" height="13" font="26">%%)%%;%%&lt;%%/script%%&gt; </text>
<text top="317" left="108" width="681" height="18" font="0">Moreover, some of the XSS attacks were using different tags to inject some JavaScript, such </text>
<text top="342" left="108" width="354" height="18" font="0">as tags &lt;b&gt; or &lt;img&gt;, and went undetected too. </text>
<text top="373" left="108" width="681" height="18" font="0">The NIDS within Lab environment expected results should have shown that the number of </text>
<text top="399" left="108" width="681" height="18" font="0">alerts raised by Snort is identical to the number of signatures generated by the honeypot. </text>
<text top="424" left="108" width="681" height="18" font="0">However, during the result analysis, the NIDS detected more XSS attacks that the number of </text>
<text top="449" left="108" width="681" height="18" font="0">signatures implemented, which had been generated by the honeypot. This surprising result </text>
<text top="474" left="108" width="681" height="18" font="0">was  investigated  in  the  section  6.4.  The  investigation  shows  that  the  honeypot  signature </text>
<text top="500" left="108" width="681" height="18" font="0">generation  process  always  ensure  that  signatures  are  not  duplicated.  Therefore  if  two </text>
<text top="525" left="108" width="681" height="18" font="0">attacks  have  the  same  attack  pattern,  only  one  signature  will  be  generated.  This  process </text>
<text top="550" left="108" width="681" height="18" font="0">explains why during the NIDS experiment, Snort was able to detect more attacks than the </text>
<text top="575" left="108" width="681" height="18" font="0">honeypot  had  generated  signatures:  one  Snort  signatures  can  detect  multiple  XSS  attacks </text>
<text top="601" left="108" width="178" height="18" font="0">using the same pattern. </text>
<text top="632" left="108" width="681" height="18" font="0">The NIDS in Real World simulation expected results should have been the same that the Lab </text>
<text top="657" left="108" width="681" height="18" font="0">environment experiment. The result analysis proved that the same number of attacks was </text>
<text top="683" left="108" width="681" height="18" font="0">detected after the DARPA background traffic injection. This means that the patterns of the </text>
<text top="708" left="108" width="681" height="18" font="0">signatures  generated  were  specific  enough  not  to  raise  any  False  Positive  results  within </text>
<text top="733" left="108" width="210" height="18" font="0">background traffic injection. </text>
<text top="764" left="108" width="681" height="18" font="0">The  honeypot  in  Real  World  simulation  expected  results  were  that  HoneyD  should  have </text>
<text top="790" left="108" width="681" height="18" font="0">dropped XSS attacks within high load of background traffics. However, the results analysis </text>
<text top="815" left="108" width="681" height="18" font="0">showed  a  different  behaviour.  During  an  increasing  load  of  background  traffic,  HoneyD </text>
<text top="840" left="108" width="681" height="18" font="0">could detect the same number of XSS attack than previously but HoneyD was taking more </text>
<text top="865" left="108" width="681" height="18" font="0">and more time to reply to the XSS injection. However, when the background traffic speed </text>
<text top="891" left="108" width="681" height="18" font="0">reached  2mbps,  HoneyD  did  a  “segmentation  fault”  due  to  an  insufficiency  of  allocated </text>
<text top="916" left="108" width="648" height="18" font="0">RAM.  This error stopped HoneyD and induce that not all the XSS attacks were detected. </text>
<text top="970" left="108" width="32" height="26" font="16">6.7</text>
<text top="970" left="140" width="7" height="24" font="17"> </text>
<text top="970" left="182" width="134" height="26" font="16">Conclusion </text>
<text top="1016" left="108" width="681" height="18" font="0">The  results  analysed  during  the  evaluation  have  demonstrated  the  effectiveness  of  the </text>
<text top="1041" left="108" width="681" height="18" font="0">Snort  signatures  generation  mechanism  invented.  The  experiments  showed  that  in  a  Lab </text>
<text top="1067" left="108" width="681" height="18" font="0">and simulated Live environment, the Bash scripts created were able to successfully extract </text>
<text top="1092" left="108" width="681" height="18" font="0">specific  information  from  HoneyD’s  log  file  and  to  parse  it  into  an  ACL  or  Snort  template. </text>
</page>
<page number="78" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="368" width="161" height="18" font="0">Chapter 6  Evaluation </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">78 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">This fulfils a gap found in the literature review, which concerned automating the generation </text>
<text top="137" left="108" width="207" height="18" font="0">process of Snort signatures. </text>
<text top="168" left="108" width="681" height="18" font="0">The  injection  of  50  random  XSS  attacks  found  on  the  XXSed.com  website  showed  that  26 </text>
<text top="193" left="108" width="681" height="18" font="0">Snort  signatures  were  generated  by  the  honeypot.  During  the  NIDS  lab  experiment,  the </text>
<text top="219" left="108" width="681" height="18" font="0">signatures  were  successfully  implemented  into  Snort  and  were  able  to  detect  32  XSS </text>
<text top="244" left="108" width="681" height="18" font="0">attacks.  This  surprising  result  was  due  to  the  ability  of  some  signatures  to  detect  multiple </text>
<text top="269" left="108" width="681" height="18" font="0">attacks  that  used  the  same  pattern.  The  True  Positive  Ratio  calculation  showed  that  the </text>
<text top="294" left="108" width="681" height="18" font="0">overall  number  of  detected  attacks  was  64%,  which  is  4%  above  the  recommended  ratio </text>
<text top="320" left="108" width="681" height="18" font="0">seen in the chapter Technologies Review 2.3.3. This result did not change during the NIDS </text>
<text top="345" left="108" width="681" height="18" font="0">Live experiment and proved that the signatures created were specific enough not to trigger </text>
<text top="370" left="108" width="379" height="18" font="0">any False Positive alarms within background traffic. </text>
<text top="401" left="108" width="681" height="18" font="0">Finally,  the  Snort  signature  generation  was  tested  by  sending  XSS  attacks  and  increasing </text>
<text top="427" left="108" width="681" height="18" font="0">background  traffic  to  the  honeypot.  HoneyD  with  the  Bash  scripts  did  successfully  detect </text>
<text top="452" left="108" width="681" height="18" font="0">every  attack  for  a  background  traffic  speed  up  to  1.5mbps.  However,  at  2mbps  the </text>
<text top="477" left="108" width="681" height="18" font="0">honeypot  could  not  handle  the  huge  traffic  load  resulting  in  a  segmentation  error,  due  to </text>
<text top="503" left="108" width="681" height="18" font="0">insufficient RAM. Therefore, a breaking point is identified at 2mbps and an unstable interval </text>
<text top="528" left="108" width="291" height="18" font="0">is determined between 1.5 and 2mbps. </text>
<text top="559" left="108" width="681" height="18" font="0">The  next  chapter  will  use  these  conclusions  to  determine  whether  the  initial  aims  of  the </text>
<text top="584" left="108" width="681" height="18" font="0">project  have  been  carried  out  successfully  and  to  critically  evaluate  the  work  achieved  in </text>
<text top="610" left="108" width="91" height="18" font="0">this project. </text>
<text top="641" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="79" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">79 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="80" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="367" width="164" height="18" font="0">Chapter 7  Conclusion </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">80 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="143" left="108" width="165" height="37" font="11">Chapter 7.</text>
<text top="143" left="273" width="10" height="33" font="6"> </text>
<text top="143" left="324" width="190" height="37" font="11">Conclusion </text>
<text top="222" left="108" width="32" height="26" font="16">7.1</text>
<text top="222" left="140" width="7" height="24" font="17"> </text>
<text top="222" left="182" width="149" height="26" font="16">Introduction </text>
<text top="268" left="108" width="681" height="18" font="0">The previous chapter, the evaluation, has shown that it is possible to detect XSS attacks and </text>
<text top="293" left="108" width="681" height="18" font="0">generate  ACLs/Snort  signatures  by  using  HoneyD’s  log  file.  The  experiments,  based  in  a </text>
<text top="318" left="108" width="681" height="18" font="0">cloud  environment,  show  that  the  signatures  are  accurate  and,  when  implemented  in  the </text>
<text top="343" left="108" width="681" height="18" font="0">NIDS  Snort,  are  able  to  detect  XSS  attacks  without  False  Positive  results.  The  main  aim  of </text>
<text top="369" left="108" width="681" height="18" font="0">this  project  was  to  implement  a  cloud‐based  honeypot  and  use  it  to  automatically  detect </text>
<text top="394" left="108" width="681" height="18" font="0">XSS attacks and generate Snort signatures. Therefore, the main aim of this project has been </text>
<text top="419" left="108" width="164" height="18" font="0">successfully achieved. </text>
<text top="451" left="108" width="681" height="18" font="0">This  chapter  aims  in  giving  a  conclusion  of  the  work  that  has  been  carried  out  during  this </text>
<text top="476" left="108" width="681" height="18" font="0">project.  To  do  so,  the  initial  objectives  will  be  compared  to  the  objectives  achieved  and  a </text>
<text top="501" left="108" width="681" height="18" font="0">main conclusion will outline the findings. In addition, a critical analysis of the work achieved </text>
<text top="526" left="108" width="681" height="18" font="0">will assess the work carried out and future work in the same area will be proposed. A grant </text>
<text top="552" left="108" width="681" height="18" font="0">chart  illustrating  the  project  schedule  is  provided  Appendix  F.  and  the  initial  research </text>
<text top="577" left="108" width="183" height="18" font="0">proposal in Appendix G.  </text>
<text top="631" left="108" width="32" height="26" font="16">7.2</text>
<text top="631" left="140" width="7" height="24" font="17"> </text>
<text top="631" left="182" width="258" height="26" font="16">Meeting the objectives </text>
<text top="677" left="108" width="681" height="18" font="0">This  section  aims  to  compare  the  objectives  defined  in  the  introduction  chapter  and  the </text>
<text top="702" left="108" width="578" height="18" font="0">work that has been carried out. The initial three objectives were the following: </text>
<text top="733" left="140" width="14" height="18" font="0">1.</text>
<text top="734" left="153" width="5" height="17" font="18"> </text>
<text top="733" left="167" width="623" height="18" font="0">Review  and  investigate  the  existing  literature  about  security  issues  related  to  the </text>
<text top="759" left="167" width="623" height="18" font="0">cloud computing. In addition, critically evaluate the previous work in generating IDS </text>
<text top="784" left="167" width="623" height="18" font="0">signatures  and  compare  different  honeypot  systems.  Finally,  analyse  a  specific </text>
<text top="809" left="167" width="295" height="18" font="0">attacking method and ways to detect it. </text>
<text top="835" left="140" width="14" height="18" font="0">2.</text>
<text top="835" left="153" width="5" height="17" font="18"> </text>
<text top="835" left="167" width="623" height="18" font="0">Design  some  scripts  to  generate  IDS  signatures  every  time  that  an  attack  is </text>
<text top="860" left="167" width="623" height="18" font="0">detected. Design some cloud‐based experiments that will show the effectiveness of </text>
<text top="885" left="167" width="518" height="18" font="0">the scripts created in detecting attacks and generating IDS signatures.  </text>
<text top="910" left="139" width="14" height="18" font="0">3.</text>
<text top="911" left="153" width="5" height="17" font="18"> </text>
<text top="910" left="166" width="623" height="18" font="0">Conduct  the  final  evaluation  based  on  the  results  collected  from  the  experiments. </text>
<text top="936" left="167" width="605" height="18" font="0">This evaluation should present determine the effectiveness of the scripts created.  </text>
<text top="980" left="108" width="48" height="24" font="22">7.2.1</text>
<text top="980" left="156" width="7" height="22" font="23"> </text>
<text top="980" left="162" width="124" height="24" font="22">Objective 1 </text>
<text top="1013" left="108" width="681" height="18" font="0">The  first  objective  was  met  by  splitting  the  literature  investigation  in  two  chapters: </text>
<text top="1038" left="108" width="681" height="18" font="0">Technologies  Review  and  Literature  Review.  The  technologies  review  chapter  was  used  to </text>
<text top="1064" left="108" width="681" height="18" font="0">provide  background  knowledge  about  the  technologies  used  throughout  the  project. </text>
<text top="1089" left="108" width="681" height="18" font="0">Following  that,  the  literature  review  analysed  the  literature  and  compared,  in  depth,  the </text>
<text top="1114" left="108" width="681" height="18" font="0">technologies  and  the  work  carried  out  by  previous  researchers.  Investigations  about  the </text>
</page>
<page number="81" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="367" width="164" height="18" font="0">Chapter 7  Conclusion </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">81 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">cloud computing security issues, generating IDS signatures, honeypot systems and hacking </text>
<text top="137" left="108" width="681" height="18" font="0">techniques  were  undertaken.  Furthermore,  in  order  to  have  an  awareness  of  the  laws </text>
<text top="162" left="108" width="681" height="18" font="0">concerning  honeypot  implementation,  an  additional  section  was  created  concerning  legal </text>
<text top="187" left="108" width="681" height="18" font="0">issues. Finally, analysis of the features and capabilities of the honeypot “HoneyD” and the </text>
<text top="213" left="108" width="553" height="18" font="0">NIDS “Snort” were respectively carried out in Appendix A. and Appendix B.  </text>
<text top="244" left="108" width="681" height="18" font="0">By successfully carrying out the first objective, based on the literature investigation, a gap </text>
<text top="269" left="108" width="681" height="18" font="0">within  the  IDS  signature  generation  was  identified,  an  appropriate  honeypot  system  was </text>
<text top="294" left="108" width="681" height="18" font="0">chosen and detection methods of a hacking technique, known as Cross‐Site Scripting (XSS), </text>
<text top="320" left="108" width="125" height="18" font="0">were examined.  </text>
<text top="364" left="108" width="48" height="24" font="22">7.2.2</text>
<text top="364" left="156" width="7" height="22" font="23"> </text>
<text top="364" left="162" width="124" height="24" font="22">Objective 2 </text>
<text top="397" left="108" width="681" height="18" font="0">The  second  objective  has  been  met  by  creating  a  Bash  script  to  automatically  detect  XSS </text>
<text top="422" left="108" width="681" height="18" font="0">attacks  and  generate  Snort  signatures.  Additionally,  research  supervisor  Bill  Buchanan </text>
<text top="448" left="108" width="681" height="18" font="0">recommended creating another script to generate some ACLs to block the attacker (Saliou </text>
<text top="473" left="108" width="681" height="18" font="0">2005). This work was undertaken by creating a second Bash script. Finally, a third script was </text>
<text top="498" left="108" width="681" height="18" font="0">created  to  automatically  transfer  the  signatures  generated  by  the  honeypot  to  the  NIDS </text>
<text top="524" left="108" width="52" height="18" font="0">Snort.  </text>
<text top="555" left="108" width="681" height="18" font="0">An  experiment  was  designed  in  order  to  test  the  effectiveness  of  the  scripts  created  to </text>
<text top="580" left="108" width="681" height="18" font="0">generate Snort signatures/ACLs. In addition, a set of two experiments were designed to test </text>
<text top="605" left="108" width="681" height="18" font="0">the efficiency of the Snort signatures by implementing them in the NIDS within Lab and Live </text>
<text top="631" left="108" width="681" height="18" font="0">environment. Finally a last experiment was designed to test the efficiency of the honeypot </text>
<text top="656" left="108" width="681" height="18" font="0">HoneyD within increasing background traffic. All of these experiments were designed to be </text>
<text top="681" left="108" width="681" height="18" font="0">implemented within the cloud computing of Edinburgh Napier University. The data collected </text>
<text top="706" left="108" width="370" height="18" font="0">was kept for further analysis in the next objective. </text>
<text top="751" left="108" width="48" height="24" font="22">7.2.3</text>
<text top="751" left="156" width="7" height="22" font="23"> </text>
<text top="751" left="162" width="124" height="24" font="22">Objective 3 </text>
<text top="784" left="108" width="681" height="18" font="0">The third objective was met by conducting an evaluation to determine the effectiveness of </text>
<text top="809" left="108" width="681" height="18" font="0">the scripts created. This evaluation required the data collected during the implementation. </text>
<text top="834" left="108" width="681" height="18" font="0">Using this data, the effectiveness of the Snort script created has been evaluated in terms of </text>
<text top="860" left="108" width="681" height="18" font="0">True Positive Ratio. The results collected from the additional three experiments were also </text>
<text top="885" left="108" width="681" height="18" font="0">evaluated  with  a  True/False  Positive  Ratio.  Finally,  the  results  of  the  evaluation  were </text>
<text top="910" left="108" width="681" height="18" font="0">compared  with  the  results  expected  in  the  Design  chapter.  This  was  done  to  determine </text>
<text top="935" left="108" width="526" height="18" font="0">whether the behaviours of the scripts/HoneyD were predictable or not. </text>
<text top="989" left="108" width="32" height="26" font="16">7.3</text>
<text top="990" left="140" width="7" height="24" font="17"> </text>
<text top="989" left="182" width="145" height="26" font="16">Conclusions </text>
<text top="1036" left="108" width="681" height="18" font="0">This  project  has  succeeded  in  creating  some  Bash  scripts  able  to  detect  XSS  attacks  and </text>
<text top="1061" left="108" width="681" height="18" font="0">cause the generation of ACLs/Snort signatures. During the achievement of this project the </text>
<text top="1086" left="108" width="268" height="18" font="0">following findings have been made.  </text>
</page>
<page number="82" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="367" width="164" height="18" font="0">Chapter 7  Conclusion </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">82 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">A honeypot system is able to simulate network services and log any interaction with these </text>
<text top="137" left="108" width="681" height="18" font="0">services.  The  log  file  of  the  honeypot  is  useful  to  retrieve  a  number  of  important </text>
<text top="162" left="108" width="681" height="18" font="0">information  about  intruders,  such  as  IP  addresses,  ports,  timestamps,  services  and </text>
<text top="187" left="108" width="681" height="18" font="0">commands  typed  in.  HoneyD,  the  honeypot  studied  in  this  thesis,  does  not  provide  any </text>
<text top="213" left="108" width="681" height="18" font="0">features to filter the information written in the log file. This means that the log file is huge </text>
<text top="238" left="108" width="681" height="18" font="0">with a lot of information. In order to detect XSS attacks, a Bash script was created to filter </text>
<text top="263" left="108" width="681" height="18" font="0">specific  fields  found  in  the  honeypot  log  file  and  compare  them  with  well‐known  tags </text>
<text top="288" left="108" width="681" height="18" font="0">“&lt;script&gt;  <i>random_strings</i>  &lt;/script&gt;”  used  in  XSS  attacks.  When  a  match  was  found,  the </text>
<text top="314" left="108" width="681" height="18" font="0">random strings between the script tags was extracted and injected within a template of a </text>
<text top="339" left="108" width="681" height="18" font="0">Snort signature. In order to automatize the system a step further, a Bash script was created </text>
<text top="364" left="108" width="681" height="18" font="0">to  automatically  transfer  the  file  containing  all  the  generated  Snort  signatures  from  the </text>
<text top="389" left="108" width="182" height="18" font="0">Honeypot into the NIDS. </text>
<text top="421" left="108" width="681" height="18" font="0">Moreover, a third Bash script was created to automatically create Access Control Lists. This </text>
<text top="446" left="108" width="681" height="18" font="0">script extracted every source IP addresses from the honeypot log file and injected them into </text>
<text top="471" left="108" width="681" height="18" font="0">an ACL template. The honeypot was in the production network, therefore, any interaction </text>
<text top="497" left="108" width="681" height="18" font="0">with  it  was  classified  as  malicious  activity  and  an  ACL  was  created  to  block  the  attacker. </text>
<text top="522" left="108" width="681" height="18" font="0">However,  ACLs  were  not  implemented  into  the  boundary  router  and  were  created  just  to </text>
<text top="547" left="108" width="389" height="18" font="0">show the possibility to automatically generate them. </text>
<text top="578" left="108" width="681" height="18" font="0">The experiments undertaken in this project showed that the Snort signatures generated by </text>
<text top="604" left="108" width="681" height="18" font="0">the honeypot, once implemented in Snort, were able to detect 64% of a random set of XSS </text>
<text top="629" left="108" width="681" height="18" font="0">attacks. By adding background traffic retrieved from the DARPA website, the NIDS was still </text>
<text top="654" left="108" width="681" height="18" font="0">able  to  detect  successfully  the  same  percentage  of  XSS  attacks.  This  means  that  no  False </text>
<text top="679" left="108" width="681" height="18" font="0">Positive  Results  were  generated  by  the  background  traffic,  which  induce  that  the  Snort </text>
<text top="705" left="108" width="681" height="18" font="0">signatures  are  specifics  enough  to  only  detect  XSS  attacks.  Finally,  the  last  experiment </text>
<text top="730" left="108" width="681" height="18" font="0">consisted  in  estimating  the  honeypot  efficiency  by  injecting  XSS  attacks  and  increasing </text>
<text top="755" left="108" width="681" height="18" font="0">background  traffic.  Results  showed  that  the  latency  of  the  honeypot  was  increasing </text>
<text top="780" left="108" width="681" height="18" font="0">according to the background traffic speed. This did not have any effect on the Bash script in </text>
<text top="806" left="108" width="681" height="18" font="0">detecting  XSS  attacks  and  generating  Snort  signatures.  However,  a  breaking  point  was </text>
<text top="831" left="108" width="681" height="18" font="0">identified  when  the  background  traffic  reaches  2mbps,  the  honeypot  generated  an  error </text>
<text top="856" left="108" width="683" height="18" font="0">and stopped. Therefore, an unstable interval was determined between 1.5mbps and 2mbps.  </text>
<text top="910" left="108" width="32" height="26" font="16">7.4</text>
<text top="911" left="140" width="7" height="24" font="17"> </text>
<text top="910" left="182" width="187" height="26" font="16">Critical analysis </text>
<text top="956" left="108" width="681" height="18" font="0">Having shown that all objectives of this project have been met and conclusions have been </text>
<text top="982" left="108" width="681" height="18" font="0">done, this section provides a critical analysis by analysing the limitations of the work carried </text>
<text top="1007" left="108" width="681" height="18" font="0">out.    The  different  methodologies  discussed  in  the  literature  review  will  be  compared  for </text>
<text top="1032" left="108" width="99" height="18" font="0">this purpose. </text>
<text top="1063" left="108" width="681" height="18" font="0">It  must  be  acknowledged  that  there  are  few  limitations  to  the  scripts  realised.  The  first </text>
<text top="1089" left="108" width="681" height="18" font="0">limitation concerns the Bash script used to generate Snort signatures. This script was based </text>
<text top="1114" left="108" width="681" height="18" font="0">on  detecting  the  presence  of  the  scripts  tags,  which  seemed  to  be  well‐used  tags  in  XSS </text>
</page>
<page number="83" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="367" width="164" height="18" font="0">Chapter 7  Conclusion </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">83 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">attacks,  according  to  (Mookhey,  et  al.,  2010).  This  detection  limited  the  number  of  XSS </text>
<text top="137" left="108" width="681" height="18" font="0">discovered to the number of script tags found out in the honeypot log file. Despite the 64% </text>
<text top="162" left="108" width="681" height="18" font="0">of alerts generated based on a random set of XSS attacks, this result could have been higher </text>
<text top="187" left="108" width="681" height="18" font="0">if  other  tags  were  implemented  in  the  bash  script,  such  as  injection  through  image  field </text>
<text top="213" left="108" width="240" height="18" font="0">“&lt;img&gt; <i>Random_string </i>&lt;/img&gt;”. </text>
<text top="244" left="108" width="681" height="18" font="0">Another limitation is the set of XSS attacks collected from the XXSed.com website which is a </text>
<text top="269" left="108" width="681" height="18" font="0">database of recent XSS vulnerabilities (XSSed, 2011). This set of attack had a major factor in </text>
<text top="294" left="108" width="681" height="18" font="0">the experimental results, concerning the detection of scripts tags. However, no selection or </text>
<text top="320" left="108" width="681" height="18" font="0">filtering  was  realised  over  the  choice  of  these  XSS  attacks.  In  order  to  keep  a  realistic </text>
<text top="345" left="108" width="681" height="18" font="0">approach  the  first  50  XSS  attacks  were  used.  Therefore,  using  different  XSS  attacks  would </text>
<text top="370" left="108" width="211" height="18" font="0">have led to different results. </text>
<text top="401" left="108" width="681" height="18" font="0">However,  the  work  carried  out  in  this  project  contains  some  strength,  able  to  fulfil  gap </text>
<text top="427" left="108" width="681" height="18" font="0">found during the literature review. The first strength is to automatically generate ACLs and </text>
<text top="452" left="108" width="681" height="18" font="0">Snort  signature  based  on  the  attacks  detected,  which  is  not  found  in  the  existing </text>
<text top="477" left="108" width="681" height="18" font="0">methodology. Indeed, the Bash scripts created during this thesis reveal to be handy because </text>
<text top="503" left="108" width="264" height="18" font="0">they do not require any user input.  </text>
<text top="534" left="108" width="681" height="18" font="0">In addition, this automation is pushed a step further, with a second strength, by creating a </text>
<text top="559" left="108" width="681" height="18" font="0">Bash script that transfer the snort signatures automatically between the honeypot and the </text>
<text top="584" left="108" width="681" height="18" font="0">NIDS. This simple script has never been found or thought about in the existing literature and </text>
<text top="610" left="108" width="606" height="18" font="0">reveals to be really useful in automatically updating the NIDS with new signatures. </text>
<text top="664" left="108" width="32" height="26" font="16">7.5</text>
<text top="664" left="140" width="7" height="24" font="17"> </text>
<text top="664" left="182" width="152" height="26" font="16">Future Work </text>
<text top="710" left="108" width="681" height="18" font="0">The work presented in this project has achieved some requirements that fulfil gaps found in </text>
<text top="735" left="108" width="681" height="18" font="0">the  literature.  However,  further  work  in  the  enhancement  of  the  scripts  presented  and  in </text>
<text top="760" left="108" width="436" height="18" font="0">additional experiments could be the aim of future projects. </text>
<text top="791" left="108" width="681" height="18" font="0">Further work in the detection of attack and generation of Snort signatures could be carried </text>
<text top="817" left="108" width="681" height="18" font="0">out by using a different type of detection engine. Indeed, the work carried out in this project </text>
<text top="842" left="108" width="681" height="18" font="0">enables the detection of specific “script” tags. However, as reviewed in the previous section, </text>
<text top="867" left="108" width="681" height="18" font="0">there are many different type of tags used to inject XSS. Further work in this area could be </text>
<text top="893" left="108" width="676" height="18" font="0">carried out in order to create a universal detection mechanism able to detect multiple tags.  </text>
<text top="924" left="108" width="681" height="18" font="0">An  additional  feature  could  be  to  detect  different  kind  of  attacks.  The  investigation </text>
<text top="949" left="108" width="681" height="18" font="0">undertaken  during  the  literature  review  showed  that  the  most  used  hacking  technique  is </text>
<text top="974" left="108" width="681" height="18" font="0">SQL injection. By using a similar work scheme and simulating a database by the means of a </text>
<text top="1000" left="108" width="681" height="18" font="0">honeypot,  SQL  injection  could  be  detected.  Indeed,  by  modifying  the  detection  engine  of </text>
<text top="1025" left="108" width="681" height="18" font="0">the Bash Snort_script, in order to detect common SQL injection, could lead to be the subject </text>
<text top="1050" left="108" width="142" height="18" font="0">of a future project. </text>
<text top="1081" left="108" width="681" height="18" font="0">Another  feature  could  be  the  creation  of  a  script  able  to  implement  automatically  in  the </text>
<text top="1107" left="108" width="681" height="18" font="0">router the ACLs generated by the honeypot. This would require a similar methodology that </text>
<text top="1132" left="108" width="681" height="18" font="0">the one used to transfer the Snort signatures: a connexion between the honeypot and the </text>
</page>
<page number="84" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="367" width="164" height="18" font="0">Chapter 7  Conclusion </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">84 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">router can be automatically made by using a passwordless SSH connexion. However, there </text>
<text top="137" left="108" width="681" height="18" font="0">one  issue  that  needs  to  be  taken  in  consideration.  The  ACLs  should  expire  after  a  certain </text>
<text top="162" left="108" width="681" height="18" font="0">amount  of  time,  because  most  of  the  IPs  nowadays  are  attributed  automatically  and </text>
<text top="187" left="108" width="681" height="18" font="0">renewed  by  the  Internet  Service  Provider  (ISP)  every  time  the  router  is  shutdown. </text>
<text top="213" left="108" width="681" height="18" font="0">Therefore, attackers IPs will change and there is no point in blocking too many IPs or it will </text>
<text top="238" left="108" width="217" height="18" font="0">increase the router’s latency. </text>
<text top="269" left="108" width="681" height="18" font="0">An additional experiment could be to give an internet access to the honeypot and leave it </text>
<text top="294" left="108" width="681" height="18" font="0">for a couple of days/weeks to gather data. This type of experiment has not been realised in </text>
<text top="320" left="108" width="681" height="18" font="0">this  project  to  avoid  taking  any  security  risks.  However,  this  experiment  could  lead  in </text>
<text top="345" left="108" width="681" height="18" font="0">detecting  new  XSS  injection  methods  and  make  statistics  about  the  geographical  position </text>
<text top="370" left="108" width="265" height="18" font="0">where the attacks are coming from. </text>
<text top="401" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="85" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">85 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="86" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="313" width="271" height="18" font="0">Appendix A.  Understanding HoneyD </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">86 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="152" left="108" width="165" height="37" font="11">Chapter 8.</text>
<text top="152" left="273" width="10" height="33" font="6"> </text>
<text top="152" left="324" width="210" height="37" font="11">Works Cited </text>
<text top="202" left="108" width="4" height="18" font="0"> </text>
<text top="233" left="108" width="681" height="18" font="19"><b>Adam  Kiezun,  Philip  J.  Guo,  Karthick  Jayaraman,  Michael  D.  Ernst.  2011.</b>  <i>Automatic </i></text>
<text top="258" left="108" width="681" height="18" font="20"><i>Creation  of  SQL  Injection  and  Cross‐Site  Scripting  Attacks.  </i>Vancouver,  Canada :  ICSE’09, </text>
<text top="284" left="108" width="194" height="18" font="0">2011. 978‐1‐4244‐3452‐7. </text>
<text top="315" left="108" width="649" height="18" font="19"><b>Agastya, Harish. 2011.</b> <i>Security threats to evolving data centers. </i>s.l. : Trend Micro, 2011. </text>
<text top="346" left="108" width="619" height="18" font="19"><b>Allen, Julia. 2004.</b> <i>Intrusion detection: Implementation and operational issues. </i>2004. </text>
<text top="377" left="108" width="585" height="18" font="19"><b>Amazon. 2011.</b> Amazon Web Services. [Online] 2011. http://aws.amazon.com/. </text>
<text top="409" left="108" width="681" height="18" font="19"><b>Awad  Johny,  Derdemezis  Andreas.  2009.</b>  <i>Honeynets  and  honeypots:  Implementation  of  a </i></text>
<text top="434" left="108" width="246" height="18" font="20"><i>High Interaction Honeynet. </i>2009. </text>
<text top="465" left="108" width="681" height="18" font="19"><b>Bleikertz,  Sören,  Schunter,  Matthias  and  Probst,  Christian  W.  2011.</b>  <i>Security  Audits  of </i></text>
<text top="491" left="108" width="582" height="18" font="20"><i>Multi‐tier Virtual Infrastructures in Public Infrastructure Clouds. </i>s.l. : IBM, 2011. </text>
<text top="522" left="108" width="681" height="18" font="19"><b>Bogobowicz, Michael. 2011.</b> What are the main use cases for virtualization? <i>Quora. </i>[Online] </text>
<text top="547" left="108" width="677" height="18" font="0">01 01 2011. [Cited: 19 09 2011.] http://www.quora.com/What‐are‐the‐main‐use‐cases‐for‐</text>
<text top="572" left="108" width="104" height="18" font="0">virtualization. </text>
<text top="604" left="108" width="681" height="18" font="19"><b>Buchanan  W</b>, Graves J, Bose N, Macfarlane R, Davison B,  Ludwiniak R, 2011. Performance </text>
<text top="629" left="108" width="681" height="18" font="0">and  student  perception  evaluation  of  cloud‐based  virtualised  security  and  digital  forensics </text>
<text top="654" left="108" width="192" height="18" font="0">labs, HEA ICS Conference. </text>
<text top="685" left="108" width="681" height="18" font="19"><b>CERT.  2008.</b>  CERT®  Advisory  CA‐2000‐02  Malicious  HTML  Tags  Embedded  in  Client  Web </text>
<text top="711" left="108" width="75" height="18" font="0">Requests. </text>
<text top="711" left="216" width="45" height="18" font="20"><i>CERT. </i></text>
<text top="711" left="293" width="63" height="18" font="0">[Online] </text>
<text top="711" left="389" width="45" height="18" font="0">CERT, </text>
<text top="711" left="467" width="45" height="18" font="0">2008. </text>
<text top="711" left="544" width="53" height="18" font="0">[Cited: </text>
<text top="711" left="629" width="22" height="18" font="0">27 </text>
<text top="711" left="684" width="22" height="18" font="0">10 </text>
<text top="711" left="738" width="51" height="18" font="0">2011.] </text>
<text top="736" left="108" width="371" height="18" font="0">http://www.cert.org/advisories/CA‐2000‐02.html. </text>
<text top="767" left="108" width="681" height="18" font="19"><b>—.  2007.</b>  Denial  of  Service  Attacks.  <i>CERT.  </i>[Online]  2007.  [Cited:  20  10  2011.] </text>
<text top="793" left="108" width="408" height="18" font="0">http://www.cert.org/tech_tips/denial_of_service.html. </text>
<text top="824" left="108" width="681" height="18" font="19"><b>—. 2011.</b> Understanding Malicious Content Mitigation for Web Developers. <i>CERT. </i>[Online] </text>
<text top="849" left="108" width="669" height="18" font="0">2011. [Cited: 20 10 2011.] http://www.cert.org/tech_tips/malicious_code_mitigation.html. </text>
<text top="880" left="108" width="681" height="18" font="19"><b>Christian Kreibich, Jon Crowcroft. 2004.</b> <i>Honeycomb Creating Intrusion Detection Signatures </i></text>
<text top="906" left="108" width="681" height="18" font="20"><i>Using Honeypots. </i>JJ Thomson Avenue, Cambridge CB3 0FD, United Kingdom : University of </text>
<text top="931" left="108" width="295" height="18" font="0">Cambridge Computer Laboratory, 2004. </text>
<text top="962" left="108" width="681" height="18" font="19"><b>Christian  Seifert,  Ian  Welch,  Peter  Komisarczuk.  2006.</b>  <i>Taxonomy  of  Honeypots. </i></text>
<text top="987" left="108" width="455" height="18" font="0">WELLINGTON : VICTORIA UNIVERSITY OF WELLINGTON, 2006. </text>
<text top="1019" left="108" width="681" height="18" font="19"><b>Christodorescu,  Mihai,  et  al.  2009.</b>  <i>Cloud  Security  Is  Not  (Just)  Virtualization  Security. </i></text>
<text top="1044" left="108" width="448" height="18" font="0">Chicago, Illinois, USA : IBM, 2009. 978‐1‐60558‐784‐4/09/11. </text>
<text top="1075" left="108" width="644" height="18" font="19"><b>Gobel, Jan. 2007.</b> <i>Amun: A Python Honeypot. </i>Germany : University of Mannheim, 2007. </text>
<text top="1106" left="108" width="588" height="18" font="19"><b>Grønland, Vidar Ajaxon. 2006.</b> <i>Building IDS rules by means of a honeypot. </i>2006. </text>
</page>
<page number="87" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="313" width="271" height="18" font="0">Appendix A.  Understanding HoneyD </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">87 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="19"><b>Harmonyguy.  2011.</b>  Recent  Facebook  XSS  Attacks  Show  Increasing  Sophistication.  <i>Social </i></text>
<text top="137" left="108" width="67" height="18" font="20"><i>Hacking. </i></text>
<text top="137" left="215" width="63" height="18" font="0">[Online] </text>
<text top="137" left="317" width="22" height="18" font="0">21 </text>
<text top="137" left="378" width="22" height="18" font="0">04 </text>
<text top="137" left="440" width="45" height="18" font="0">2011. </text>
<text top="137" left="524" width="53" height="18" font="0">[Cited: </text>
<text top="137" left="616" width="22" height="18" font="0">27 </text>
<text top="137" left="677" width="22" height="18" font="0">10 </text>
<text top="137" left="739" width="51" height="18" font="0">2011.] </text>
<text top="162" left="108" width="638" height="18" font="0">http://theharmonyguy.com/2011/04/21/recent‐facebook‐xss‐attacks‐show‐increasing‐</text>
<text top="187" left="108" width="118" height="18" font="0">sophistication/. </text>
<text top="219" left="108" width="681" height="18" font="19"><b>Honeynet. 2011.</b> About the Honeynet Project. <i>The Honeynet project. </i>[Online] 2011. [Cited: </text>
<text top="244" left="108" width="345" height="18" font="0">17 11 2011.] http://www.honeynet.org/about. </text>
<text top="275" left="108" width="681" height="18" font="19"><b>honeywall.  2008.</b>  Honeywall  project.  <i>The  honeynet  project.  </i>[Online]  24  04  2008.  [Cited: </text>
<text top="300" left="108" width="405" height="18" font="0">2011 09 27.] https://projects.honeynet.org/honeywall. </text>
<text top="332" left="108" width="681" height="18" font="19"><b>Hyang‐Ah  Kim,  Brad  Karp.  2004.</b>  <i>Autograph:  Toward  Automated,  DistributedWorm </i></text>
<text top="357" left="108" width="438" height="18" font="20"><i>Signature Detection. </i>s.l. : Carnegie Mellon University, 2004. </text>
<text top="388" left="108" width="681" height="18" font="19"><b>J.  Levine,  R.  La  Bella,  H.  Owen.  2003.</b>  <i>The  use  of  honeynets  to  detect  exploited  systems </i></text>
<text top="413" left="108" width="613" height="18" font="20"><i>across large enterprise networks. </i>s.l. : IEEE Information Assurance Workshop, 2003. </text>
<text top="445" left="108" width="681" height="18" font="19"><b>James  Newsome,  Brad  Karp,  Dawn  Song.  2005.</b>  <i>Polygraph:  Automatically  Generating </i></text>
<text top="470" left="108" width="681" height="18" font="20"><i>Signatures  for  Polymorphic  Worms.  </i>Carnegie  Mellon  Univ.,  Pittsburgh,  PA,  USA   :  Security </text>
<text top="495" left="108" width="424" height="18" font="0">and Privacy, 2005 IEEE Symposium on , 2005. 1081‐6011 . </text>
<text top="526" left="108" width="677" height="18" font="19"><b>Jarabek,  Christopher.  2009.</b>  <i>A  Review  Of  Cloud  Computing  Security:  Virtualization,  Side‐</i></text>
<text top="552" left="108" width="601" height="18" font="20"><i>Channel Attacks, And Management. </i>Alberta, Canada : University of Calgary, 2009. </text>
<text top="583" left="108" width="681" height="18" font="19"><b>Jim, Trevor, Swamy, Nikhil and Hicks, Michael. 2007.</b> <i>Defeating Script Injection Attacks with </i></text>
<text top="608" left="108" width="641" height="18" font="20"><i>Browser‐Enforced Embedded Policies. </i>Alberta, Canada. : ACM, 2007. 978‐1‐59593‐654‐. </text>
<text top="640" left="108" width="511" height="18" font="19"><b>Joho, Dieter. 2004.</b> <i>Active Honeypots. </i>Zurich, Switzerland : s.n., 2004. </text>
<text top="671" left="108" width="681" height="18" font="19"><b>Koot,  Matthijs.  2007.</b>  <i>Intrusion  Detection  System  ‐  Lesson  #4:  Honey{pots,nets,walls}. </i></text>
<text top="696" left="108" width="178" height="18" font="0">Amsterdam : s.n., 2007. </text>
<text top="727" left="108" width="641" height="18" font="19"><b>Koziol, Jack. 2003.</b> <i>Intrusion Detection with Snort. </i>s.l. : Sams, 2003. 978‐1‐57870‐281‐7. </text>
<text top="759" left="108" width="681" height="18" font="19"><b>Liston, Tom. 2003.</b> Tom Liston talks about LaBrea. <i>Labrea sourceforge. </i>[Online] 2003. [Cited: </text>
<text top="784" left="108" width="460" height="18" font="0">17 11 2011.] http://labrea.sourceforge.net/Intro‐History.html. </text>
<text top="815" left="108" width="681" height="18" font="19"><b>McDonald, Kevin. 2011.</b> Tackle your client’s security issues with cloud computing in 10 steps </text>
<text top="841" left="108" width="9" height="18" font="0">. </text>
<text top="841" left="138" width="53" height="18" font="20"><i>Search </i></text>
<text top="841" left="212" width="62" height="18" font="20"><i>Security </i></text>
<text top="841" left="295" width="68" height="18" font="20"><i>Channel. </i></text>
<text top="841" left="384" width="63" height="18" font="0">[Online] </text>
<text top="841" left="468" width="22" height="18" font="0">06 </text>
<text top="841" left="512" width="45" height="18" font="0">2011. </text>
<text top="841" left="578" width="53" height="18" font="0">[Cited: </text>
<text top="841" left="652" width="22" height="18" font="0">23 </text>
<text top="841" left="695" width="22" height="18" font="0">09 </text>
<text top="841" left="738" width="51" height="18" font="0">2011.] </text>
<text top="866" left="108" width="657" height="18" font="0">http://searchsecuritychannel.techtarget.com/tip/Tackle‐your‐clients‐security‐issues‐with‐</text>
<text top="891" left="108" width="220" height="18" font="0">cloud‐computing‐in‐10‐steps. </text>
<text top="922" left="108" width="681" height="18" font="19"><b>McMillan, Robert. 2009.</b> Cloud computing a 'security nightmare,' says Cisco CEO. <i>Computer </i></text>
<text top="948" left="108" width="53" height="18" font="20"><i>World. </i></text>
<text top="948" left="202" width="63" height="18" font="0">[Online] </text>
<text top="948" left="306" width="22" height="18" font="0">22 </text>
<text top="948" left="369" width="22" height="18" font="0">04 </text>
<text top="948" left="433" width="45" height="18" font="0">2009. </text>
<text top="948" left="519" width="53" height="18" font="0">[Cited: </text>
<text top="948" left="612" width="22" height="18" font="0">23 </text>
<text top="948" left="675" width="22" height="18" font="0">09 </text>
<text top="948" left="738" width="51" height="18" font="0">2011.] </text>
<text top="973" left="108" width="677" height="18" font="0">http://www.computerworld.com/s/article/9131998/Cloud_computing_a_security_nightmar</text>
<text top="998" left="108" width="143" height="18" font="0">e_says_Cisco_CEO. </text>
<text top="1029" left="108" width="681" height="18" font="19"><b>Mishra,  Dhanada  K.  2004.</b>  <i>International  Conference  on  Controls,  Automation  &amp; </i></text>
<text top="1055" left="108" width="625" height="18" font="20"><i>Communication Systems. </i>s.l. : Allied Publisher Pvt limited, 2004. ISBN 81‐7764‐726‐1. </text>
<text top="1086" left="108" width="681" height="18" font="19"><b>MIT.  2011.</b>  Massachusetts  Institute  of  Technology.  <i>DARPA  Intrusion  Detection  Evaluation. </i></text>
<text top="1111" left="108" width="63" height="18" font="0">[Online] </text>
<text top="1111" left="256" width="45" height="18" font="0">2011. </text>
<text top="1111" left="386" width="53" height="18" font="0">[Cited: </text>
<text top="1111" left="524" width="22" height="18" font="0">26 </text>
<text top="1111" left="631" width="22" height="18" font="0">10 </text>
<text top="1111" left="738" width="51" height="18" font="0">2011.] </text>
</page>
<page number="88" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="313" width="271" height="18" font="0">Appendix A.  Understanding HoneyD </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">88 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="676" height="18" font="0">http://www.ll.mit.edu/mission/communications/ist/corpora/ideval/data/1999/training/wee</text>
<text top="137" left="108" width="111" height="18" font="0">k1/index.html. </text>
<text top="168" left="108" width="681" height="18" font="19"><b>Mohammed, M.M.Z.E., et al. 2010.</b> <i>Accurate signature generation for polymorphic worms </i></text>
<text top="193" left="108" width="681" height="18" font="20"><i>using principal component analysis . </i>Rondebosch, South Africa  : Univ. of Cape Town, 2010. </text>
<text top="219" left="108" width="153" height="18" font="0">978‐1‐4244‐8863‐6 . </text>
<text top="250" left="108" width="681" height="18" font="19"><b>Mookhey, K. and Burghate, Nilesh. 2010.</b> Detection of SQL Injection and Cross‐site Scripting </text>
<text top="275" left="108" width="681" height="18" font="0">Attack.  <i>Symantec.  </i>[Online]  Symantec,  02  11  2010.  [Cited:  27  10  2011.] </text>
<text top="300" left="108" width="610" height="18" font="0">http://www.symantec.com/connect/articles/detection‐sql‐injection‐and‐cross‐site‐</text>
<text top="326" left="108" width="129" height="18" font="0">scripting‐attacks. </text>
<text top="357" left="108" width="681" height="18" font="19"><b>Niels  Provos,  Thorsten  Holz.  2007.</b>  <i>Virtual  Honeypots:  From  Botnet  Tracking  to  Intrusion </i></text>
<text top="382" left="108" width="376" height="18" font="20"><i>Detection. </i>s.l. : Addison Wesley Professional, 2007. </text>
<text top="413" left="108" width="681" height="18" font="19"><b>OWASP.  2011.</b>  XSS  (Cross  Site  Scripting)  Prevention  Cheat  Sheet.  <i>OWASP  The  Open  Web </i></text>
<text top="439" left="108" width="87" height="18" font="20"><i>Application </i></text>
<text top="439" left="222" width="62" height="18" font="20"><i>Security </i></text>
<text top="439" left="311" width="60" height="18" font="20"><i>Project. </i></text>
<text top="439" left="398" width="63" height="18" font="0">[Online] </text>
<text top="439" left="488" width="45" height="18" font="0">2011. </text>
<text top="439" left="560" width="53" height="18" font="0">[Cited: </text>
<text top="439" left="640" width="22" height="18" font="0">28 </text>
<text top="439" left="689" width="22" height="18" font="0">10 </text>
<text top="439" left="738" width="51" height="18" font="0">2011.] </text>
<text top="464" left="108" width="676" height="18" font="0">https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sh</text>
<text top="489" left="108" width="33" height="18" font="0">eet. </text>
<text top="521" left="108" width="681" height="18" font="19"><b>Paul  Baecher,  Markus  Koetter,ThorstenHolz,  Maximillian  Dornseif.  2006.</b>  <i>The  Nepenthes </i></text>
<text top="546" left="108" width="553" height="18" font="20"><i>Platform: An Eﬃcient Approach to Collect Malware. </i>Mannheim : s.n., 2006. </text>
<text top="577" left="108" width="681" height="18" font="19"><b>Perilli,  Wendy.  2009.</b>  The  Benefits  of  Virtualization  and  Cloud  Computing.  <i>Virtualization </i></text>
<text top="602" left="108" width="677" height="18" font="20"><i>Journal.  </i>[Online]  10  03  2009.  [Cited:  19  09  2011.]  http://virtualization.sys‐</text>
<text top="628" left="108" width="177" height="18" font="0">con.com/node/870217. </text>
<text top="659" left="108" width="681" height="18" font="19"><b>Peter Mell, Timothy Grance. 2011.</b> <i>The NIST Definition of Cloud computing. </i>Gaithersburg : </text>
<text top="684" left="108" width="148" height="18" font="0">s.n., 2011. 800‐145. </text>
<text top="715" left="108" width="536" height="18" font="19"><b>Provos, Neil. 2007.</b> <i>Developments of the Honeyd Virtual Honeypot. </i>2007. </text>
<text top="747" left="108" width="681" height="18" font="19"><b>Provos,  Niels  and  Holz,  Thorsten.  2007.</b>  <i>Virtual  Honeypots:  From  Botnet  Tracking  to </i></text>
<text top="772" left="108" width="562" height="18" font="20"><i>Intrusion Detection. </i>s.l. : Addison Wesley Professional, 2007. 0‐321‐33632‐1. </text>
<text top="803" left="108" width="681" height="18" font="19"><b>Provos,  Niels.  2007.</b>  Service  Scripts.  <i>HoneyD.  </i>[Online]  2007.  [Cited:  02  11  2011.] </text>
<text top="828" left="108" width="278" height="18" font="0">http://www.honeyd.org/contrib.php. </text>
<text top="860" left="108" width="681" height="18" font="19"><b>R.  Perdisci,  Dagon  D.,  Wenke  Lee,  Fogla  P.,  Sharif  M.  2006  .</b>  <i>Misleading  worm  signature </i></text>
<text top="885" left="108" width="681" height="18" font="20"><i>generators  using  deliberate  noise  injection.  </i>Berkeley/Oakland,  CA   :  Security  and  Privacy, </text>
<text top="910" left="108" width="309" height="18" font="0">2006 IEEE Symposium, 2006 . 1081‐6011 . </text>
<text top="942" left="108" width="681" height="18" font="19"><b>Radcliffe,  Jerome.  2007.</b>  <i>CyberLaw  101:  A  primer  on  US  laws  related  to  honeypot </i></text>
<text top="967" left="108" width="286" height="18" font="20"><i>deployment. </i>s.l. : SANS Institute, 2007. </text>
<text top="998" left="108" width="681" height="18" font="19"><b>Ried,  Stefan  and  Kisker,  Holger.  April  2011.</b>  <i>Sizing  The  Cloud  ‐  Understanding  And </i></text>
<text top="1023" left="108" width="586" height="18" font="20"><i>Quantifying The Future Of Cloud Computing . </i>s.l. : Forester research, April 2011. </text>
<text top="1055" left="108" width="681" height="18" font="19"><b>Ristenpart,  Thomas,  et  al.  2009.</b>  <i>Hey,  You,  Get  Off  of  My  Cloud:  Exploring  Information </i></text>
<text top="1080" left="108" width="677" height="18" font="20"><i>Leakage in Third‐Party Compute Clouds. </i>Chicago, Illinois, USA : CCS’09, 2009. 978‐1‐60558‐</text>
<text top="1105" left="108" width="101" height="18" font="0">352‐5/09/11. </text>
</page>
<page number="89" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="313" width="271" height="18" font="0">Appendix A.  Understanding HoneyD </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">89 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="19"><b>Saliou  L</b>,  Buchanan  W,  Graves  J,  Munoz  J.  2005.  Novel  framework  for  automated  security </text>
<text top="137" left="108" width="556" height="18" font="0">abstraction, modelling, implementation and verification, ECIW, pp 303‐312. </text>
<text top="168" left="108" width="681" height="18" font="19"><b>Scsami.  2011.</b>  Hypervisor.  <i>Wikipedia.  </i>[Online]  07  2011.  [Cited:  16  11  2011.] </text>
<text top="193" left="108" width="302" height="18" font="0">http://en.wikipedia.org/wiki/Hypervisor. </text>
<text top="225" left="108" width="681" height="18" font="19"><b>Singh,  Amit.  2004.</b>  An  Introduction  to  Virtualization.  <i>Kernelthread.  </i>[Online]  January  2004. </text>
<text top="250" left="108" width="586" height="18" font="0">[Cited: 19 09 2011.] http://www.kernelthread.com/publications/virtualization/. </text>
<text top="281" left="108" width="407" height="18" font="19"><b>Snort. 2011.</b> <i>Snort User Manual 2.9.1. </i>s.l. : Snort, 2011. </text>
<text top="312" left="108" width="600" height="18" font="19"><b>Spitzner, L. 2002.</b> <i>Honeypots: Tracking Hackers. </i>s.l. : Pearson Education Inc, 2002. </text>
<text top="344" left="108" width="681" height="18" font="19"><b>Spitzner, Lance. 2010.</b> Honeypot Farms. <i>Symantec. </i>[Online] 02 11 2010. [Cited: 17 11 2011.] </text>
<text top="369" left="108" width="458" height="18" font="0">http://www.symantec.com/connect/articles/honeypot‐farms. </text>
<text top="400" left="108" width="681" height="18" font="19"><b>—. 2010.</b> Honeypots: Are They Illegal? <i>Symantec. </i>[Online] 02 11 2010. [Cited: 26 09 2011.] </text>
<text top="425" left="108" width="533" height="18" font="0">http://www.symantec.com/connect/articles/honeypots‐are‐they‐illegal. </text>
<text top="457" left="108" width="681" height="18" font="19"><b>Sumeet  Singh,  Cristian  Estan,  George  Varghese,  Stefan  Savage.  2004.</b>  <i>Automated  Worm </i></text>
<text top="482" left="108" width="418" height="18" font="20"><i>Fingerprinting. </i>San Diego : University of California, 2004. </text>
<text top="513" left="108" width="681" height="18" font="19"><b>Sun, Changhua, et al. 2009.</b> <i>A More Accurate Scheme to Detect SYN Flood Attacks. </i>Rio de </text>
<text top="539" left="108" width="299" height="18" font="0">Janeiro : IEEE, 2009. 978‐1‐4244‐3968‐3. </text>
<text top="570" left="108" width="681" height="18" font="19"><b>Tang,  Xinyu.  2011.</b>  <i>The  Generation  of  Attack  Signatures  Based  on  Virtual  Honeypots. </i></text>
<text top="595" left="108" width="396" height="18" font="0">Wuhan, Hubei China  : s.n., 2011. 978‐0‐7695‐4287‐4. </text>
<text top="626" left="108" width="681" height="18" font="19"><b>Timm,  Kevin.  2010.</b>  Strategies  to  Reduce  False  Positives  and  False  Negatives  in  NIDS. </text>
<text top="652" left="108" width="80" height="18" font="20"><i>Symantec. </i></text>
<text top="652" left="225" width="63" height="18" font="0">[Online] </text>
<text top="652" left="326" width="22" height="18" font="0">03 </text>
<text top="652" left="386" width="22" height="18" font="0">11 </text>
<text top="652" left="446" width="45" height="18" font="0">2010. </text>
<text top="652" left="528" width="53" height="18" font="0">[Cited: </text>
<text top="652" left="619" width="22" height="18" font="0">15 </text>
<text top="652" left="678" width="22" height="18" font="0">09 </text>
<text top="652" left="738" width="51" height="18" font="0">2011.] </text>
<text top="677" left="108" width="647" height="18" font="0">http://www.symantec.com/connect/articles/strategies‐reduce‐false‐positives‐and‐false‐</text>
<text top="702" left="108" width="114" height="18" font="0">negatives‐nids. </text>
<text top="733" left="108" width="681" height="18" font="19"><b>Vanover,  Rick.  2009.</b>  Type  1  and  Type  2  Hypervisors  Explained.  <i>Virtualization  Review. </i></text>
<text top="759" left="108" width="677" height="18" font="0">[Online]  24  06  2009.  [Cited:  19  09  2011.]  http://virtualizationreview.com/blogs/everyday‐</text>
<text top="784" left="108" width="517" height="18" font="0">virtualization/2009/06/type‐1‐and‐type‐2‐hypervisors‐explained.aspx. </text>
<text top="815" left="108" width="681" height="18" font="19"><b>Venezia, Paul. 2008.</b> VMware ESX Server 3.5. <i>Techworld. </i>[Online] 11 02 2008. [Cited: 16 11 </text>
<text top="841" left="108" width="587" height="18" font="0">2011.] http://review.techworld.com/virtualisation/599/vmware‐esx‐server‐35/. </text>
<text top="872" left="108" width="681" height="18" font="19"><b>Vinod  Yegneswaran,  Jonathon  T.  Gifﬁn,  Paul  Barford,  Somesh  Jha.  2005.</b>  <i>An  Architecture </i></text>
<text top="897" left="108" width="629" height="18" font="20"><i>for Generating Semantics‐Aware Signatures. </i>Madison : University of Wisconsin, 2005. </text>
<text top="928" left="108" width="681" height="18" font="19"><b>VMware. 2011.</b> VMware vSphere Hypervisor™ (ESXi). <i>VMware. </i>[Online] VMware Inc., 2011. </text>
<text top="954" left="108" width="677" height="18" font="0">[Cited: 29 09 2011.] http://www.vmware.com/products/vsphere‐hypervisor/overview.html. </text>
<text top="985" left="108" width="681" height="18" font="19"><b>WHID.  2011.</b>  Web‐Hacking‐Incident‐Database  .  <i>WHID.  </i>[Online]  2011.  [Cited:  20  10  2011.] </text>
<text top="1010" left="108" width="619" height="18" font="0">http://projects.webappsec.org/w/page/13246995/Web‐Hacking‐Incident‐Database. </text>
<text top="1041" left="108" width="681" height="18" font="19"><b>William  G.J.  Halfond,  Jeremy  Viegas,  and  Alessandro  Orso.  2006.</b>  <i>A  Classiﬁcation  of  SQL </i></text>
<text top="1067" left="108" width="621" height="18" font="20"><i>Injection Attacks and Countermeasures. </i>Georgia Institute of Technology : IEEE, 2006. </text>
</page>
<page number="90" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="46" size="31" family="Times" color="#3f3f3f"/>
	<fontspec id="47" size="31" family="Helvetica" color="#3f3f3f"/>
	<fontspec id="48" size="31" family="Times" color="#3f3f3f"/>
	<fontspec id="49" size="22" family="Times" color="#3f3f3f"/>
	<fontspec id="50" size="22" family="Helvetica" color="#3f3f3f"/>
	<fontspec id="51" size="25" family="Times" color="#3f3f3f"/>
<text top="57" left="313" width="271" height="18" font="0">Appendix A.  Understanding HoneyD </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">90 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="19"><b>Wolf. 2010.</b> Security Issues and Solutions in Cloud Computing. <i>Wolf Halton's Opensource &amp; </i></text>
<text top="137" left="108" width="66" height="18" font="20"><i>Security. </i></text>
<text top="137" left="214" width="63" height="18" font="0">[Online] </text>
<text top="137" left="316" width="22" height="18" font="0">25 </text>
<text top="137" left="378" width="22" height="18" font="0">06 </text>
<text top="137" left="439" width="45" height="18" font="0">2010. </text>
<text top="137" left="524" width="53" height="18" font="0">[Cited: </text>
<text top="137" left="615" width="22" height="18" font="0">23 </text>
<text top="137" left="677" width="22" height="18" font="0">09 </text>
<text top="137" left="738" width="51" height="18" font="0">2011.] </text>
<text top="162" left="108" width="639" height="18" font="0">http://wolfhalton.info/2010/06/25/security‐issues‐and‐solutions‐in‐cloud‐computing/. </text>
<text top="193" left="108" width="681" height="18" font="19"><b>XSSed.  2011.</b>  XSS  archive.  <i>XSS  attacks  information.  </i>[Online]  2011.  [Cited:  17  11  2011.] </text>
<text top="219" left="108" width="185" height="18" font="0">http://www.xssed.com/. </text>
<text top="250" left="108" width="4" height="18" font="0"> </text>
<text top="299" left="108" width="198" height="34" font="46">Appendix A. </text>
<text top="300" left="306" width="9" height="31" font="47"> </text>
<text top="299" left="324" width="334" height="34" font="48"><i>Understanding HoneyD </i></text>
<text top="364" left="108" width="681" height="18" font="0">HoneyD  is  a  low  interaction  honeypot  created  by  Neil  Provos  (Provos,  2007)  and  released </text>
<text top="389" left="108" width="681" height="18" font="0">under GNU Public license (GPL). It is a small daemon able to simulate a networking stack of </text>
<text top="414" left="108" width="681" height="18" font="0">virtual hosts. Virtual hosts have specifics preconfigured personalities, which mean that they </text>
<text top="440" left="108" width="681" height="18" font="0">are  associated  with  unallocated  IP  addresses  and  configured  to  run  arbitrary  services. </text>
<text top="465" left="108" width="681" height="18" font="0">Services are generally scripted in Perl, Shell or Python and a couple of them can be found on </text>
<text top="490" left="108" width="681" height="18" font="0">the  author’s  website.  They  can  simulate  different  TCP/IP  services  like  HTTP,  FTP,  Telnet, </text>
<text top="515" left="108" width="232" height="18" font="0">SMTP, SSH, IIS and many more. </text>
<text top="555" left="113" width="38" height="28" font="49">A.1.</text>
<text top="560" left="151" width="7" height="22" font="50"> </text>
<text top="552" left="162" width="107" height="32" font="51">Features	</text>
<text top="592" left="108" width="681" height="18" font="0">HoneyD supports many features and is very flexible for simulating networks infrastructures. </text>
<text top="617" left="108" width="681" height="18" font="0">The following gives a brief overview of the main features supported by HoneyD and come </text>
<text top="643" left="108" width="463" height="18" font="0">from a book written by HoneyD’s creator (Provos, et al., 2007): </text>
<text top="674" left="135" width="6" height="18" font="0">‐</text>
<text top="674" left="140" width="5" height="17" font="18"> </text>
<text top="674" left="162" width="627" height="18" font="0">Simulate small to large network topologies: Neil Provos stated that HoneyD is able to </text>
<text top="699" left="162" width="627" height="18" font="0">simulate  up  to  65536  virtual  hosts  with  different  personalities.  Each  virtual  host  is </text>
<text top="724" left="162" width="627" height="18" font="0">allocated with an un‐used IP address, so it is possible to interact with thousands of </text>
<text top="750" left="162" width="176" height="18" font="0">hosts at the same time. </text>
<text top="775" left="135" width="6" height="18" font="0">‐</text>
<text top="776" left="140" width="5" height="17" font="18"> </text>
<text top="775" left="162" width="627" height="18" font="0">Configuration of personalities: Virtual hosts can be associated with multiple services </text>
<text top="800" left="162" width="627" height="18" font="0">(HTTP,  SMTP,  FTP,  etc.),  which  aimed  to  interact  with  an  adversary.  Additional </text>
<text top="825" left="162" width="627" height="18" font="0">HoneyD features include proxy connections to other machines, passive fingerprinting </text>
<text top="851" left="162" width="467" height="18" font="0">to identify remote hosts and random sampling for load scaling.  </text>
<text top="876" left="135" width="6" height="18" font="0">‐</text>
<text top="877" left="140" width="5" height="17" font="18"> </text>
<text top="876" left="162" width="627" height="18" font="0">Simulate  operating  systems  at  TCP/IP  stack  level:  HoneyD  is  able  to  deceive </text>
<text top="901" left="162" width="627" height="18" font="0">fingerprinting  tools  like  Nmap  or  Xprobe  and  make  them  believe  that  the  virtual </text>
<text top="927" left="162" width="627" height="18" font="0">honeypot is running specifics operating systems and services. Moreover, policies as </text>
<text top="952" left="162" width="627" height="18" font="0">fragment  reassembly  policy  and  FIN‐scan  policy  can  be  adjustable  in  order  to </text>
<text top="977" left="162" width="259" height="18" font="0">increase the realism of the system. </text>
<text top="1002" left="135" width="6" height="18" font="0">‐</text>
<text top="1003" left="140" width="5" height="17" font="18"> </text>
<text top="1002" left="162" width="627" height="18" font="0">Configurable network characteristics: The routing topologies can be configured with </text>
<text top="1028" left="162" width="627" height="18" font="0">specifics  latency,  packet  loss  and  bandwidth  characteristics.  In  addition,  HoneyD  is </text>
<text top="1053" left="162" width="627" height="18" font="0">able  to  integrate  of  physical  machines  within  the  virtual  environment  and  to </text>
<text top="1078" left="162" width="478" height="18" font="0">distribute operations of its network topology via GRE tunnelling.  </text>
</page>
<page number="91" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="313" width="271" height="18" font="0">Appendix A.  Understanding HoneyD </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">91 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="135" width="6" height="18" font="0">‐</text>
<text top="112" left="140" width="5" height="17" font="18"> </text>
<text top="112" left="162" width="627" height="18" font="0">Subsystem  virtualization:  With  subsystem  virtualization,  HoneyD  can  run  real  UNIX </text>
<text top="137" left="162" width="627" height="18" font="0">applications  (web/mail/FTP  servers,  etc.)  under  a  virtual  IP  address  controlled  by </text>
<text top="162" left="162" width="67" height="18" font="0">HoneyD. </text>
<text top="202" left="113" width="38" height="28" font="49">A.2.</text>
<text top="207" left="151" width="7" height="22" font="50"> </text>
<text top="199" left="162" width="270" height="32" font="51">	Architecture	overview	</text>
<text top="239" left="108" width="681" height="18" font="0">HoneyD’s  architecture  is  build  using  five  components:  a  configuration  database,  a  packet </text>
<text top="264" left="108" width="681" height="18" font="0">dispatcher,  protocol  handlers,  a  personality  engines  and  optional  routing  components,  as </text>
<text top="289" left="108" width="138" height="18" font="0">seen on Figure 31. </text>
<text top="320" left="108" width="681" height="18" font="0">Incoming  packets  entering  the  network  are  routed  to  the  packet  dispatcher.  The  packet </text>
<text top="346" left="108" width="681" height="18" font="0">dispatcher  inspects  the  checksum  of  each  packet,  to  detect  accidental  errors  and  then </text>
<text top="371" left="108" width="681" height="18" font="0">inspects the protocol handler. HoneyD supports only ICMP, TCP and UDP, which results in </text>
<text top="396" left="108" width="681" height="18" font="0">dropping  packets  for  any  other  protocols.  Once  the  inspection  is  done,  the  packet </text>
<text top="422" left="108" width="681" height="18" font="0">dispatcher  query  the  configuration  database  to  see  if  the  packet’s  destination  IP  address </text>
<text top="447" left="108" width="681" height="18" font="0">corresponds  to  a  specific  template  (virtual  host).  When  there  is  no  template  that </text>
<text top="472" left="108" width="681" height="18" font="0">corresponds to an IP address, a <i>default</i> template is used. Then, the packet is dispatched to </text>
<text top="497" left="108" width="681" height="18" font="0">its specific handler ICMP, TCP or UDP. By default, ICMP request are replied by a <i>destination </i></text>
<text top="523" left="108" width="681" height="18" font="20"><i>unreachable</i> message, unless specified in the personality database. TCP and UDP protocols </text>
<text top="548" left="108" width="681" height="18" font="0">establish  connection  to  arbitrary  services.  For  a  TCP  datagram,  the  framework  checks  the </text>
<text top="573" left="108" width="681" height="18" font="0">three way handshakes to see if a packet is part of an established connection. If the packet </text>
<text top="598" left="108" width="681" height="18" font="0">encloses  a  connection  request,  the  framework  creates  a  new  process  to  emulate  the </text>
<text top="624" left="108" width="681" height="18" font="0">required service. If the packet is part of a previous connection, the framework forwards it to </text>
<text top="649" left="108" width="681" height="18" font="0">its existing service. For a UDP datagram, there is no possibility to know if a packet is from a </text>
<text top="674" left="108" width="681" height="18" font="0">previous connection because UDP does not ensure handshaking dialogs. Therefore, the UDP </text>
<text top="700" left="108" width="681" height="18" font="0">datagram is directly sent to the appropriate service. Finally, before leaving the framework, </text>
<text top="725" left="108" width="681" height="18" font="0">packets  are  routed  to  the  personality  engine.  The  personality  engine  modify  the  packet’s </text>
<text top="750" left="108" width="681" height="18" font="0">content  in  order  to  change  the  IP  source,  to  make  it  appears  to  come  from  the  network </text>
<text top="775" left="108" width="191" height="18" font="0">stack of the configure OS. </text>
<text top="807" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="92" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="313" width="271" height="18" font="0">Appendix A.  Understanding HoneyD </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">92 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="463" left="684" width="4" height="18" font="0"> </text>
<text top="489" left="316" width="264" height="14" font="21"><b>Figure 31 ‐ HoneyD architecture (Provos, 2007) </b></text>
<text top="508" left="108" width="4" height="18" font="0"> </text>
<text top="512" left="324" width="3" height="14" font="21"><b> </b></text>
</page>
<page number="93" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="313" width="271" height="18" font="0">Appendix A.  Understanding HoneyD </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">93 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="111" left="113" width="38" height="28" font="49">A.3.</text>
<text top="116" left="151" width="7" height="22" font="50"> </text>
<text top="108" left="162" width="207" height="32" font="51">Configuration	file	</text>
<text top="148" left="108" width="681" height="18" font="0">HoneyD’s  configuration  file  is  used  to  define  templates.  A  template  is  associated  with:  a </text>
<text top="173" left="108" width="681" height="18" font="0">name,  a  service(s)  associated,  open  port(s)  and  IP  address(es).  The  configuration  file  is  by </text>
<text top="198" left="108" width="523" height="18" font="0">default <i>honeyd.conf</i> and a simple example of it looks like the following: </text>
<text top="232" left="108" width="148" height="13" font="26">create windows </text>
<text top="255" left="108" width="564" height="13" font="26">set windows personality &#34;Windows NT 4.0 Server SP5-SP6&#34;  </text>
<text top="279" left="108" width="475" height="13" font="26">add windows tcp port 80 &#34;./scripts/iisemul8.pl&#34; </text>
<text top="302" left="108" width="366" height="13" font="26">set windows default tcp action reset </text>
<text top="325" left="108" width="257" height="13" font="26">bind 192.168.0.10 windows </text>
<text top="350" left="108" width="681" height="18" font="0">This configuration is used to create a template named ‘<i>windows’</i>. The template personality </text>
<text top="375" left="108" width="681" height="18" font="0">‘<i>Windows  NT  4.0  Server  SP5‐SP6’</i>  is  used  to  deceive  fingerprinting  tools  by  making  the </text>
<text top="401" left="108" width="681" height="18" font="0">system looks like genuine. Open ports are configured using ‘<i>add windows tcp port 80’</i> open </text>
<text top="426" left="108" width="681" height="18" font="0">the tcp port 80 and associate a script to emulate a Windows Web Sever IIS by using the perl </text>
<text top="451" left="108" width="681" height="18" font="0">script ‘<i>iisemul8.pl’</i>. Any other TCP query that are not for the port 80 will be reset ‘<i>default tcp </i></text>
<text top="477" left="108" width="681" height="18" font="20"><i>action reset</i>’. Finally, to associate this template to an IP address, the keyword ‘<i>bind’</i> is used, </text>
<text top="502" left="108" width="390" height="18" font="0">followed be the IP address and the template’s name. </text>
<text top="533" left="108" width="681" height="18" font="0">This configuration file is a simple example of simulating one host with one service. However, </text>
<text top="558" left="108" width="681" height="18" font="0">HoneyD  is  much  more  flexible  and  can  emulate  up  to  65536  host  with  multiple  services. </text>
<text top="584" left="108" width="681" height="18" font="0">Additionally,  other  hosts  like  routers  can  be  emulated  and  the  routing  topology  (latency, </text>
<text top="609" left="108" width="681" height="18" font="0">loss  and  bandwidth)  can  be  configured  in  honeyd’s  configuration  file.  Therefore,  a  big </text>
<text top="634" left="108" width="666" height="18" font="0">network with multiple hosts and services can become extremely complicated to configure. </text>
<text top="674" left="113" width="38" height="28" font="49">A.4.</text>
<text top="679" left="151" width="7" height="22" font="50"> </text>
<text top="671" left="162" width="216" height="32" font="51">Logging	capability	</text>
<text top="711" left="108" width="681" height="18" font="0">HoneyD  has  capability  to  provide  two  different  logging  modes:  packet  level  and  service </text>
<text top="736" left="108" width="43" height="18" font="0">level. </text>
<text top="767" left="108" width="681" height="18" font="0">The packet level logging mode is enable by using the –l flag. This logging mode contains the </text>
<text top="793" left="108" width="681" height="18" font="0">timestamp  of  the  packet,  the  protocol  used,  the  source/destination  IP  addresses  and  the </text>
<text top="818" left="108" width="681" height="18" font="0">source/destination ports. Additionally, the letters S (start connection), E (end connection) or </text>
<text top="843" left="108" width="681" height="18" font="0">– (neither S nor E) display if the connection start, end or part of a previous connection. The </text>
<text top="868" left="108" width="681" height="18" font="0">last field displays how many bytes have been transmitted by the honeypot and which type </text>
<text top="894" left="108" width="643" height="18" font="0">of OS was identified. The following output is an example of the packet level logging file: </text>
<text top="927" left="108" width="683" height="13" font="26">2011-10-07-04:09:30.9342 tcp(6) S 192.168.230.1 3337 192.168.230.132 </text>
<text top="946" left="108" width="257" height="13" font="26">80 [Windows 2000 RFC1323] </text>
<text top="969" left="108" width="683" height="13" font="26">2011-10-07-04:09:31.3346 tcp(6) - 192.168.230.1 3336 192.168.230.132 </text>
<text top="988" left="108" width="327" height="13" font="26">280: 52 S [Windows 2000 RFC1323] </text>
<text top="1011" left="108" width="683" height="13" font="26">2011-10-07-04:09:31.9319 tcp(6) - 192.168.230.1 3336 192.168.230.132 </text>
<text top="1030" left="108" width="267" height="13" font="26">280: 48 S [Windows XP SP1] </text>
<text top="1053" left="108" width="683" height="13" font="26">2011-10-07-04:09:32.0325 tcp(6) E 192.168.230.1 3337 192.168.230.132 </text>
<text top="1072" left="108" width="139" height="13" font="26">80: 315 6149  </text>
<text top="1111" left="108" width="681" height="18" font="0">The service level logging mode is enable by using the –s flag. This mode contains the logging </text>
<text top="1136" left="108" width="681" height="18" font="0">outputs  of  the  emulated  services  (HTTP,  FTP,  telnet,  etc.).  It  gives  detailed  information </text>
</page>
<page number="94" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="52" size="25" family="Times" color="#000000"/>
<text top="57" left="313" width="271" height="18" font="0">Appendix A.  Understanding HoneyD </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">94 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="108" width="681" height="18" font="0">about  the  interaction  of  an  attacker  with  the  honeypot.  The  log  file  organise  each </text>
<text top="137" left="108" width="681" height="18" font="0">connection  attempt  between  –MARK‐  and  ‐ENDMARK‐  tags.  The  following  output  is  an </text>
<text top="162" left="108" width="677" height="18" font="0">example of the service level logging file. In that example, the honeypot had the service wu‐</text>
<text top="187" left="108" width="681" height="18" font="0">ftpd.pl installed with an open port 21. The log file shows that an attacker interacted with the </text>
<text top="213" left="108" width="681" height="18" font="0">virtual  FTP  server  at  a  specific  time  using  the  user  anonymous  and  password </text>
<text top="238" left="108" width="681" height="18" font="0">neesus@nessus.org.  Actually,  that  was  not  an  attacker  but  a  vulnerability  scanner  named </text>
<text top="263" left="108" width="681" height="18" font="0">Nessus.  It  was  used  to  check  if  the  honeypot  was  logging  information  correctly.  Once </text>
<text top="288" left="108" width="681" height="18" font="0">connected, the vulnerability scanner sent a DELE (delete) command. This is just an example </text>
<text top="314" left="108" width="608" height="18" font="0">to show that every commands typed by an intruder are recorded by the honeypot. </text>
<text top="347" left="108" width="535" height="13" font="26">--MARK--,&#34;Wed Oct 7 04:36:51 EDT 2011&#34;,&#34;wu-ftpd/FTP&#34;, </text>
<text top="366" left="108" width="445" height="13" font="26">&#34;192.168.230.1&#34;, &#34;192.168.230.132&#34;, 6119,21, </text>
<text top="389" left="108" width="198" height="13" font="26">&#34;USER anonymous     </text>
<text top="413" left="108" width="267" height="13" font="26">PASS nessus@nessus.org     </text>
<text top="436" left="108" width="69" height="13" font="26">DELE / </text>
<text top="459" left="108" width="30" height="13" font="26">&#34;, </text>
<text top="482" left="108" width="109" height="13" font="26">--ENDMARK— </text>
<text top="509" left="108" width="6" height="27" font="52"><b> </b></text>
</page>
<page number="95" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="323" width="252" height="18" font="0">Appendix B.  Understanding Snort </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">95 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="121" left="113" width="192" height="34" font="46">Appendix B. </text>
<text top="121" left="305" width="9" height="31" font="47"> </text>
<text top="121" left="324" width="295" height="34" font="48"><i>Understanding Snort </i></text>
<text top="185" left="108" width="681" height="18" font="0">Snort is a widely use network IDS/IPS (intrusion detection/prevention system) that can take </text>
<text top="211" left="108" width="681" height="18" font="0">action against specific packets going across a network. Snort is one of the most successful </text>
<text top="236" left="108" width="681" height="18" font="0">IDS  on  the  market  because  it  is  a  fast,  flexible,  lightweight  and  open‐source  IDS.  Snort’s </text>
<text top="261" left="108" width="677" height="18" font="0">approaches to inspect the traffic combine the benefits of signature, protocol and anomaly‐</text>
<text top="286" left="108" width="621" height="18" font="0">based packets inspection. Additionally, Snort can be used with four different modes: </text>
<text top="318" left="135" width="6" height="18" font="0">‐</text>
<text top="318" left="140" width="5" height="17" font="18"> </text>
<text top="318" left="162" width="579" height="18" font="0">Sniffer mode: Snort listens to the network traffic and prints it on to the screen. </text>
<text top="343" left="135" width="6" height="18" font="0">‐</text>
<text top="343" left="140" width="5" height="17" font="18"> </text>
<text top="343" left="162" width="505" height="18" font="0">Packet logger: Snort record the network traffic and save it into a file. </text>
<text top="368" left="135" width="6" height="18" font="0">‐</text>
<text top="369" left="140" width="5" height="17" font="18"> </text>
<text top="368" left="162" width="627" height="18" font="0">IDS mode: Snort record only the network traffic matching specifics rules. Rules have </text>
<text top="393" left="162" width="362" height="18" font="0">been previously configured by the administrator. </text>
<text top="419" left="135" width="6" height="18" font="0">‐</text>
<text top="419" left="140" width="5" height="17" font="18"> </text>
<text top="419" left="162" width="627" height="18" font="0">IPS mode: Snort takes action against specific network traffic matching the rule file. </text>
<text top="444" left="162" width="456" height="18" font="0">This network traffic can be logged, dropped or raised an alert. </text>
<text top="483" left="113" width="38" height="28" font="49">B.1.</text>
<text top="489" left="151" width="7" height="22" font="50"> </text>
<text top="481" left="162" width="217" height="32" font="51">Snort	components	</text>
<text top="521" left="108" width="681" height="18" font="0">Snort  relies  into  the  following  four  major  components  that  are  each  critical  to  intrusion </text>
<text top="546" left="108" width="373" height="18" font="0">detection system (Koziol, 2003), as seen Figure 32. </text>
<text top="856" left="675" width="4" height="18" font="0"> </text>
<text top="875" left="272" width="352" height="14" font="21"><b>Figure 32 ‐ Snort components overview based on (Snort, 2011) </b></text>
<text top="898" left="108" width="681" height="18" font="0">Snort has no native packet capture facility yet, so in order to collect packets Snort needs an </text>
<text top="924" left="108" width="681" height="18" font="0">external  library  named  <i>Libpcap</i>.  This  component  is  used  to  sniff  packets  directly  from  the </text>
<text top="949" left="108" width="681" height="18" font="0">network  interface  card  and  pass  them  into  the  second  component:  <i>packet  decoder</i>.  The<i> </i></text>
<text top="974" left="108" width="681" height="18" font="0">Packet  decoder<i>  </i>component  translates  specific  protocol  elements  into  an  internal  data </text>
<text top="999" left="108" width="677" height="18" font="0">structure. Once the packets are translated, they are forwarded to the third component: <i>pre‐</i></text>
<text top="1025" left="108" width="681" height="18" font="20"><i>processors</i>. The Pre‐processors plugins can be used either to examine packets for suspicious </text>
<text top="1050" left="108" width="681" height="18" font="0">activity  or  to  normalize  traffic  so  that  the  next  component  can  interpret  them.  The </text>
<text top="1075" left="108" width="681" height="18" font="20"><i>Detection Engine</i> compares the packets to its rule files, in order to builds attack signatures. </text>
<text top="1101" left="108" width="681" height="18" font="0">The  alerts  raised  are  sent  to  the  <i>Output  plugins</i>  that  is  used  to  dump  alerting  data  to </text>
<text top="1126" left="108" width="503" height="18" font="0">another resource (database, pop‐up alert, SNMP center, etc.) or file. </text>
</page>
<page number="96" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="53" size="18" family="Times" color="#3f3f3f"/>
	<fontspec id="54" size="18" family="Helvetica" color="#3f3f3f"/>
<text top="57" left="323" width="252" height="18" font="0">Appendix B.  Understanding Snort </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">96 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="111" left="113" width="38" height="28" font="49">B.2.</text>
<text top="116" left="151" width="7" height="22" font="50"> </text>
<text top="108" left="162" width="273" height="32" font="51">Snort	configuration	file	</text>
<text top="148" left="108" width="681" height="18" font="0">At start up, Snort reads its configuration file <i>snort.conf</i> to determine, among other, the rule </text>
<text top="173" left="108" width="681" height="18" font="0">files’ paths. These rules are text‐based files generally categorized into different groups; for </text>
<text top="198" left="108" width="681" height="18" font="0">example, the file <i>ftp.rules </i>contains a selection of rules to detect ftp attacks and exploits. The </text>
<text top="224" left="108" width="620" height="18" font="0">following configuration file can be customized by adding or deleting rule files’ paths. </text>
<text top="257" left="108" width="515" height="13" font="26">################################################### </text>
<text top="281" left="108" width="515" height="13" font="26"># Step #9: Customize your Shared Object Snort Rules </text>
<text top="304" left="108" width="79" height="13" font="26">  . . . </text>
<text top="327" left="108" width="10" height="13" font="26"> </text>
<text top="350" left="108" width="416" height="13" font="26"># include $SO_RULE_PATH/bad-traffic.rules </text>
<text top="373" left="108" width="346" height="13" font="26"># include $SO_RULE_PATH/chat.rules </text>
<text top="397" left="108" width="337" height="13" font="26"># include $SO_RULE_PATH/dos.rules </text>
<text top="420" left="108" width="346" height="13" font="26"># include $SO_RULE_PATH/icmp.rules </text>
<text top="443" left="108" width="337" height="13" font="26"># include $SO_RULE_PATH/ftp.rules </text>
<text top="478" left="113" width="38" height="28" font="49">B.3.</text>
<text top="484" left="151" width="7" height="22" font="50"> </text>
<text top="475" left="162" width="143" height="32" font="51">Rule	format	</text>
<text top="515" left="108" width="681" height="18" font="0">Each  rule  has  two  logical  parts:  rule  header  and  rule  options.  The  rule  header  contains </text>
<text top="540" left="108" width="681" height="18" font="0">criteria  for  matching  a  rule  against  data  packets  and  specifies  what  action  the  rule </text>
<text top="566" left="108" width="681" height="18" font="0">undertakes.  The  rule  options  contain  a  customisable  message  and  additional  criteria  for </text>
<text top="591" left="108" width="681" height="18" font="0">matching a rule against data packet. The following rule comes from the file <i>ftp.rules</i> and rise </text>
<text top="616" left="108" width="681" height="18" font="0">an alert with the message “FTP DELE attempt” every time the host receives a packet with </text>
<text top="641" left="108" width="533" height="18" font="0">the content “DELE” from an established connection and on the FTP port. </text>
<text top="675" left="108" width="683" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET 21 (msg:&#34;FTP DELE attempt&#34;; </text>
<text top="694" left="108" width="633" height="13" font="26">flow:to_server,established; content:&#34;DELE&#34;; classtype:attempted-</text>
<text top="713" left="108" width="247" height="13" font="26">admin; sid:1975; rev:8;) </text>
<text top="745" left="155" width="47" height="25" font="53"><i>B.3.1.</i></text>
<text top="750" left="203" width="6" height="19" font="54"><i> </i></text>
<text top="745" left="216" width="109" height="25" font="53"><i>Rule	header	</i></text>
<text top="777" left="108" width="681" height="18" font="0">The rule header is the first section of the rule. It shows which action will be taken on which </text>
<text top="802" left="108" width="124" height="18" font="0">type of packets.  </text>
<text top="836" left="108" width="436" height="13" font="26">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET 21 </text>
<text top="861" left="108" width="493" height="18" font="0">The following section is a quick overview of the syntax used above: </text>
<text top="892" left="135" width="6" height="18" font="0">‐</text>
<text top="893" left="140" width="5" height="17" font="18"> </text>
<text top="892" left="162" width="627" height="18" font="19"><b>Alert</b>:  Action  to  undertake  when  the  packet  matches  the  rule.  Other  options  are </text>
<text top="917" left="162" width="309" height="18" font="0">available: log, pass, dynamic and activate. </text>
<text top="943" left="135" width="6" height="18" font="0">‐</text>
<text top="943" left="140" width="5" height="17" font="18"> </text>
<text top="943" left="162" width="508" height="18" font="19"><b>ICMP</b>: protocol being used. Other options available: UDP, IP and TCP. </text>
<text top="968" left="135" width="6" height="18" font="0">‐</text>
<text top="969" left="140" width="5" height="17" font="18"> </text>
<text top="968" left="162" width="399" height="18" font="19"><b>$EXTERNAL_NET</b>: keyword for any outside IP address. </text>
<text top="993" left="135" width="6" height="18" font="0">‐</text>
<text top="994" left="140" width="5" height="17" font="18"> </text>
<text top="993" left="162" width="131" height="18" font="19"><b>Any</b>: source port. </text>
<text top="1018" left="135" width="6" height="18" font="0">‐</text>
<text top="1019" left="140" width="5" height="17" font="18"> </text>
<text top="1018" left="162" width="623" height="18" font="19"><b>‐&gt;</b>  indicates  the  direction  of  the  conversation.  Other  option  available  for  a  bi‐</text>
<text top="1044" left="162" width="150" height="18" font="0">communication: &lt;&gt;. </text>
<text top="1069" left="135" width="6" height="18" font="0">‐</text>
<text top="1070" left="140" width="5" height="17" font="18"> </text>
<text top="1069" left="162" width="334" height="18" font="19"><b>$HOME_NET</b>: keyword for the local network. </text>
<text top="1094" left="135" width="6" height="18" font="0">‐</text>
<text top="1095" left="140" width="5" height="17" font="18"> </text>
<text top="1094" left="162" width="195" height="18" font="19"><b>21</b>: destination port (FTP). </text>
<text top="1126" left="135" width="4" height="18" font="0"> </text>
</page>
<page number="97" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="323" width="252" height="18" font="0">Appendix B.  Understanding Snort </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">97 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="108" left="155" width="47" height="25" font="53"><i>B.3.2.</i></text>
<text top="113" left="203" width="6" height="19" font="54"><i> </i></text>
<text top="108" left="216" width="113" height="25" font="53"><i>Rule	options	</i></text>
<text top="140" left="108" width="681" height="18" font="0">Rule options follow the rule header and are enclosed by a pair of parentheses. There can be </text>
<text top="165" left="108" width="681" height="18" font="0">multiple options inside the parentheses, so to differentiate each one of them, options are </text>
<text top="190" left="108" width="681" height="18" font="0">separated by a semicolon. An option is composed of a keyword and an argument; they are </text>
<text top="216" left="108" width="161" height="18" font="0">separated by a colon. </text>
<text top="249" left="108" width="614" height="13" font="26">(msg:&#34;FTP DELE overflow attempt&#34;; flow:to_server,established; </text>
<text top="268" left="108" width="604" height="13" font="26">content:&#34;DELE&#34;; classtype:attempted-admin; sid:1975; rev:8;) </text>
<text top="293" left="108" width="443" height="18" font="0">The following is an overview of the rule options seen above: </text>
<text top="325" left="135" width="6" height="18" font="0">‐</text>
<text top="325" left="140" width="5" height="17" font="18"> </text>
<text top="325" left="162" width="492" height="18" font="19"><b>Msg</b>:&#34;FTP DELE overflow attempt&#34;: message displayed by the alert.<b> </b></text>
<text top="350" left="135" width="6" height="18" font="0">‐</text>
<text top="350" left="140" width="5" height="17" font="18"> </text>
<text top="350" left="162" width="627" height="18" font="19"><b>Flow:</b> to_server,established: Detection plugin that check if the packets is part of an </text>
<text top="375" left="162" width="122" height="18" font="0">existing session.<b> </b></text>
<text top="400" left="135" width="6" height="18" font="0">‐</text>
<text top="401" left="140" width="5" height="17" font="18"> </text>
<text top="400" left="162" width="627" height="18" font="19"><b>Content</b>:”DELE”: Snort tries to match this content against packets received on port </text>
<text top="426" left="162" width="27" height="18" font="0">21.<b> </b></text>
<text top="451" left="135" width="6" height="18" font="0">‐</text>
<text top="451" left="140" width="5" height="17" font="18"> </text>
<text top="451" left="162" width="627" height="18" font="19"><b>Class‐type</b>:attempted‐admin: alerts are categorized in multiple class‐type. Categories </text>
<text top="476" left="162" width="441" height="18" font="0">have different priorities in order to ease the user’s reading. <b> </b></text>
<text top="501" left="135" width="6" height="18" font="0">‐</text>
<text top="502" left="140" width="5" height="17" font="18"> </text>
<text top="501" left="162" width="627" height="18" font="19"><b>Sid</b>: Snort rule unique identifier. This number is unique for each rule. By convention, </text>
<text top="527" left="162" width="627" height="18" font="0">local rules (self‐made) should be above 1000000. The previous rule is an official rule </text>
<text top="552" left="162" width="440" height="18" font="0">from the Snort website, therefore the sid is under 1000000.<b> </b></text>
<text top="577" left="135" width="6" height="18" font="0">‐</text>
<text top="578" left="140" width="5" height="17" font="18"> </text>
<text top="577" left="162" width="249" height="18" font="19"><b>Rev</b>: Revision number of the rule.<b> </b></text>
<text top="617" left="113" width="38" height="28" font="49">B.4.</text>
<text top="622" left="151" width="7" height="22" font="50"> </text>
<text top="614" left="162" width="394" height="32" font="51">Standard	output	alert	and	logging	</text>
<text top="654" left="108" width="368" height="18" font="0">Snort output alerts can be raised in diverse ways:  </text>
<text top="685" left="135" width="6" height="18" font="0">‐</text>
<text top="686" left="140" width="5" height="17" font="18"> </text>
<text top="685" left="162" width="408" height="18" font="20"><i>Alert_ fast</i> generates alerts sequently in a one‐line file.  </text>
<text top="710" left="135" width="6" height="18" font="0">‐</text>
<text top="711" left="140" width="5" height="17" font="18"> </text>
<text top="710" left="162" width="586" height="18" font="20"><i>Alert_full</i> creates a directory for each IP and fills it with decoded packets traces. </text>
<text top="736" left="135" width="6" height="18" font="0">‐</text>
<text top="736" left="140" width="5" height="17" font="18"> </text>
<text top="736" left="162" width="444" height="18" font="20"><i>Log_tcpdump</i> logs packets that can be opened by TCPdump. </text>
<text top="761" left="135" width="6" height="18" font="0">‐</text>
<text top="762" left="140" width="5" height="17" font="18"> </text>
<text top="761" left="162" width="491" height="18" font="20"><i>CSV</i> logs packet into CSV files that can be imported into databases. </text>
<text top="786" left="135" width="6" height="18" font="0">‐</text>
<text top="787" left="140" width="5" height="17" font="18"> </text>
<text top="786" left="162" width="346" height="18" font="20"><i>XML</i> logs alerts that can be read as a webpage. </text>
<text top="812" left="135" width="6" height="18" font="0">‐</text>
<text top="812" left="140" width="5" height="17" font="18"> </text>
<text top="812" left="162" width="299" height="18" font="20"><i>Alert_syslog</i> logs alert for syslog servers. </text>
<text top="843" left="108" width="681" height="18" font="0">By  repeating  the  previous  example,  Snort  configured  in  <i>Alert_fast</i>  will  generate  the </text>
<text top="868" left="108" width="182" height="18" font="0">following alert message: </text>
<text top="902" left="108" width="485" height="13" font="26">[**] [116:1975:8] FTP DELE overflow attempt [**] </text>
<text top="927" left="108" width="681" height="18" font="0">This alert is composed of [**], three numbers and a message. The [**] is only there to ease </text>
<text top="952" left="108" width="681" height="18" font="0">the  readability  by  an  user.  The  three  numbers  correspond  in  order  to  the  Generator  ID </text>
<text top="978" left="108" width="681" height="18" font="0">(<i>GID</i>), Signature ID(<i>sid</i>) and Revision ID(<i>rev</i>). The <i>sid</i> and <i>rev</i> have been seen in the previous </text>
<text top="1003" left="108" width="681" height="18" font="0">section  and  are  used  to  identify  a  rule.  The  GID  is  used  to  tell  the  user  which  Snort’s </text>
<text top="1028" left="108" width="681" height="18" font="0">component generated this alert. Finally, the message corresponds to the one entered in the </text>
<text top="1053" left="108" width="277" height="18" font="20"><i>msg:””</i> field option, seen last section. </text>
<text top="1085" left="108" width="4" height="18" font="0"> </text>
<text top="1085" left="324" width="4" height="18" font="0"> </text>
</page>
<page number="98" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="55" size="13" family="Courier" color="#000000"/>
	<fontspec id="56" size="13" family="Courier" color="#000000"/>
	<fontspec id="57" size="13" family="Courier" color="#948a54"/>
<text top="57" left="347" width="203" height="18" font="0">Appendix C.  Script analysis </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">98 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="121" left="113" width="195" height="34" font="46">Appendix C. </text>
<text top="121" left="308" width="9" height="31" font="47"> </text>
<text top="121" left="324" width="206" height="34" font="48"><i>Script analysis </i></text>
<text top="185" left="108" width="681" height="18" font="0">The  following  provides  a  line  by  line  analysis  of  the  two  main  scripts  created  during  this </text>
<text top="211" left="108" width="51" height="18" font="0">thesis. </text>
<text top="250" left="113" width="37" height="28" font="49">C.1.</text>
<text top="256" left="150" width="7" height="22" font="50"> </text>
<text top="247" left="162" width="141" height="32" font="51">Snort	script	</text>
<text top="289" left="108" width="406" height="12" font="55"><b>#SNORT SCRIPT with a line by line analysis </b></text>
<text top="312" left="108" width="104" height="12" font="56">#!/bin/ksh </text>
<text top="334" left="108" width="132" height="12" font="56">count=1000000 </text>
<text top="356" left="108" width="19" height="12" font="56">( </text>
<text top="379" left="108" width="104" height="12" font="56">while true </text>
<text top="401" left="108" width="28" height="12" font="56">do </text>
<text top="424" left="108" width="661" height="12" font="57">#The nawk option is used to look into msg.log (honeypot log file) and </text>
<text top="441" left="108" width="680" height="12" font="57">retreive the lines that start with “GET”. Then the cut option, copy the </text>
<text top="459" left="108" width="652" height="12" font="57">second argument of this line. The sort and uniq options classify the </text>
<text top="477" left="108" width="576" height="12" font="57">lines retreived and delete duplicates. The output is sent in </text>
<text top="495" left="108" width="142" height="12" font="57">“content.log”. </text>
<text top="517" left="108" width="661" height="12" font="56">nawk -F /^ '/GET/ {print $0}' msg.log | cut -d' ' -f2| sort | uniq  &gt; </text>
<text top="535" left="108" width="113" height="12" font="56">content.log </text>
<text top="557" left="108" width="652" height="12" font="57">#The grep option is used to copy, from content.log, every lines that </text>
<text top="575" left="108" width="633" height="12" font="57">has a “script&gt;” or “script%3E” keyword in it. These lines are then </text>
<text top="593" left="108" width="633" height="12" font="57">handled by the sed options, which are used to retreive the content </text>
<text top="611" left="108" width="624" height="12" font="57">between the “script” tags (or their hex-encoded equivalents). The </text>
<text top="629" left="108" width="378" height="12" font="57">output is sent in “content_script.log”. </text>
<text top="651" left="108" width="557" height="12" font="56">grep 'script&gt;\|script%3E \|script%3e' content.log | sed -e </text>
<text top="669" left="108" width="406" height="12" font="56">&#34;s/.*&lt;script&gt;//;s/&lt;\/script&gt;.*//&#34; | sed -e </text>
<text top="687" left="108" width="482" height="12" font="56">&#34;s/.*%3Cscript%3E//;s/%3C\/script%3E.*//&#34; | sed -e </text>
<text top="705" left="108" width="605" height="12" font="56">&#34;s/.*%3Cscript%3E//;s/%3C%2Fscript%3E.*//&#34; &gt; content_script.log </text>
<text top="727" left="108" width="624" height="12" font="57">#The cat option is used to print the file content_script.log. The </text>
<text top="745" left="108" width="680" height="12" font="57">pipeline is used to associate the cat command with the read comman. The </text>
<text top="763" left="108" width="680" height="12" font="57">read command allows that each line will be read one by one and inserted </text>
<text top="781" left="108" width="227" height="12" font="57">in the variable “$line”.</text>
<text top="781" left="335" width="9" height="12" font="56"> </text>
<text top="803" left="108" width="246" height="12" font="56">cat content_script.log |  </text>
<text top="825" left="108" width="19" height="12" font="56">( </text>
<text top="848" left="108" width="151" height="12" font="56">while read line </text>
<text top="870" left="108" width="28" height="12" font="56">do </text>
<text top="892" left="108" width="576" height="12" font="57">#Each line of the content_script.log is compared to the file </text>
<text top="910" left="108" width="633" height="12" font="57">snort.rules, which contains previous signatures created. If a line </text>
<text top="928" left="108" width="633" height="12" font="57">match a signature, it means that the signature for this attack has </text>
<text top="946" left="108" width="642" height="12" font="57">already been created. In that case an echo 'Snort signature '$line' </text>
<text top="964" left="108" width="265" height="12" font="57">already existing' is done.  </text>
<text top="986" left="108" width="302" height="12" font="56">res=`grep -c $line snort.rules` </text>
<text top="1008" left="108" width="652" height="12" font="57">#If no match are found, the variable line is inserted within a Snort </text>
<text top="1026" left="108" width="180" height="12" font="57">signature template.</text>
<text top="1026" left="288" width="9" height="12" font="56"> </text>
<text top="1048" left="108" width="9" height="12" font="56"> </text>
<text top="1048" left="162" width="170" height="12" font="56">if [ $res == 0 ]; </text>
<text top="1071" left="108" width="9" height="12" font="56"> </text>
<text top="1071" left="162" width="9" height="12" font="56"> </text>
<text top="1071" left="216" width="529" height="12" font="56">then echo 'alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any </text>
<text top="1089" left="108" width="463" height="12" font="56">(msg:&#34; XSS attempt: script injection detected &#34;; </text>
<text top="1106" left="108" width="567" height="12" font="56">flow:to_server,established; content:&#34;'$line'&#34;; nocase; sid: </text>
<text top="1124" left="108" width="501" height="12" font="56">'$count';)'\'&gt;&gt; snort.rules count=`expr $count + 1 ` </text>
</page>
<page number="99" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="347" width="203" height="18" font="0">Appendix C.  Script analysis </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="767" width="22" height="18" font="0">99 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="114" left="108" width="633" height="12" font="57">#If a line match a signature, it means that the signature for this </text>
<text top="132" left="108" width="671" height="12" font="57">attack has already been created. In that case an echo 'Snort signature </text>
<text top="149" left="108" width="321" height="12" font="57">'$line' already existing' is done.</text>
<text top="149" left="429" width="9" height="12" font="56"> </text>
<text top="172" left="108" width="9" height="12" font="56"> </text>
<text top="172" left="162" width="9" height="12" font="56"> </text>
<text top="172" left="216" width="501" height="12" font="56">else echo 'Snort signature '$line' already existing' </text>
<text top="194" left="108" width="127" height="12" font="56"> fi </text>
<text top="217" left="108" width="47" height="12" font="56">done </text>
<text top="239" left="108" width="19" height="12" font="56">) </text>
<text top="261" left="108" width="520" height="12" font="57">#The script wait 30seconds before starting a new loop. </text>
<text top="284" left="108" width="94" height="12" font="56"> sleep 30 </text>
<text top="306" left="108" width="47" height="12" font="56">done </text>
<text top="328" left="108" width="20" height="13" font="26">) </text>
<text top="363" left="113" width="37" height="28" font="49">C.2.</text>
<text top="369" left="150" width="7" height="22" font="50"> </text>
<text top="361" left="162" width="127" height="32" font="51">ACL	Script	</text>
<text top="402" left="108" width="151" height="12" font="55"><b>#ACL_script.sh  </b></text>
<text top="425" left="108" width="104" height="12" font="56">#!/bin/ksh </text>
<text top="448" left="108" width="94" height="12" font="56">count=200 </text>
<text top="470" left="108" width="19" height="12" font="56">( </text>
<text top="492" left="108" width="104" height="12" font="56">while true </text>
<text top="515" left="108" width="28" height="12" font="56">do </text>
<text top="537" left="108" width="680" height="12" font="56">nawk -F&#34;[\&#34;,]&#34; '/MARK/ {print $9}' msg.log | cut -d' ' -f1| sort | uniq </text>
<text top="555" left="108" width="255" height="12" font="56">| grep -v '^$'&gt; IP_src.log </text>
<text top="577" left="108" width="661" height="12" font="57">#The nawk option is used to look into msg.log (honeypot log file) and </text>
<text top="595" left="108" width="652" height="12" font="57">retreive the lines that start with “MARK”. Then the cut option, copy </text>
<text top="613" left="108" width="680" height="12" font="57">the first argument of this line. The sort and uniq options classify the </text>
<text top="631" left="108" width="576" height="12" font="57">lines retreived and delete duplicates. The output is sent in </text>
<text top="648" left="108" width="652" height="12" font="57">“IP_src.log”. This command exctract the IP source addresses from the </text>
<text top="666" left="108" width="482" height="12" font="57">honeypot log file and paster it into “IP_src.log”. </text>
<text top="689" left="108" width="170" height="12" font="56">cat IP_src.log |  </text>
<text top="711" left="108" width="19" height="12" font="56">( </text>
<text top="733" left="108" width="151" height="12" font="56">while read line </text>
<text top="756" left="108" width="28" height="12" font="56">do </text>
<text top="778" left="108" width="274" height="12" font="56">res=`grep -c $line ACL.log`; </text>
<text top="800" left="108" width="170" height="12" font="56">if [ $res == 0 ]; </text>
<text top="823" left="108" width="661" height="12" font="57">#IPs in “IP_sc.log” and “ACL;log” are compared. If there is no match, </text>
<text top="841" left="108" width="605" height="12" font="57">the IP is injected into the ACL template below and printed into </text>
<text top="858" left="108" width="85" height="12" font="57">“ACL.log”</text>
<text top="858" left="193" width="9" height="12" font="56"> </text>
<text top="881" left="108" width="9" height="12" font="56"> </text>
<text top="881" left="162" width="548" height="12" font="56">then echo ''$count' deny tcp host '$line' any'\&gt;&gt; ACL.log </text>
<text top="903" left="108" width="9" height="12" font="56"> </text>
<text top="903" left="162" width="246" height="12" font="56">count=`expr $count + 10 ` </text>
<text top="925" left="108" width="520" height="12" font="57">#If the IPs already exists, the following echo is done.</text>
<text top="925" left="628" width="9" height="12" font="56"> </text>
<text top="948" left="108" width="255" height="12" font="56">else echo 'IP match found' </text>
<text top="970" left="108" width="28" height="12" font="56">fi </text>
<text top="992" left="108" width="47" height="12" font="56">done </text>
<text top="1015" left="108" width="19" height="12" font="56">) </text>
<text top="1037" left="108" width="387" height="12" font="57">#The script wait 30seconds and do a loop.</text>
<text top="1037" left="495" width="9" height="12" font="56"> </text>
<text top="1059" left="108" width="94" height="12" font="56"> sleep 30 </text>
<text top="1082" left="108" width="47" height="12" font="56">done </text>
<text top="1104" left="108" width="19" height="12" font="56">) </text>
</page>
<page number="100" position="absolute" top="0" left="0" height="1263" width="892">
	<fontspec id="58" size="16" family="Times" color="#3f3f3f"/>
	<fontspec id="59" size="14" family="Courier" color="#0000ff"/>
<text top="57" left="221" width="456" height="18" font="0">Appendix D.  Configuration of a password less SSH connection </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="758" width="31" height="18" font="0">100 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="121" left="113" width="198" height="34" font="46">Appendix D. </text>
<text top="121" left="310" width="9" height="31" font="47"> </text>
<text top="121" left="324" width="469" height="34" font="48"><i>Configuration  of  a  password  less </i></text>
<text top="172" left="140" width="223" height="34" font="48"><i>SSH connection </i></text>
<text top="236" left="108" width="681" height="18" font="0">The  following  is  a  guide  to  set‐up  a  SSH  Client  for  password‐less  login  to  a  Server  using </text>
<text top="262" left="108" width="224" height="18" font="0">public‐private key certificates. </text>
<text top="286" left="113" width="39" height="28" font="49">D.1.</text>
<text top="292" left="152" width="7" height="22" font="50"> </text>
<text top="283" left="162" width="271" height="32" font="51">Server	side	(honeypot)	</text>
<text top="323" left="162" width="27" height="18" font="0">1.1.</text>
<text top="320" left="189" width="278" height="21" font="58"><i>	Generate	public/private	dsa	key	pair</i></text>
<text top="323" left="468" width="4" height="18" font="0"> </text>
<text top="351" left="108" width="148" height="13" font="26">#sshd-generate </text>
<text top="390" left="162" width="31" height="18" font="0">1.2. </text>
<text top="386" left="193" width="149" height="21" font="58"><i>Start	the	ssh	service</i></text>
<text top="390" left="342" width="4" height="18" font="0"> </text>
<text top="418" left="108" width="228" height="13" font="26">#/etc/init.d/ssh start </text>
<text top="456" left="162" width="31" height="18" font="0">1.3. </text>
<text top="453" left="193" width="160" height="21" font="58"><i>Edit	the	following	file</i></text>
<text top="456" left="353" width="4" height="18" font="0"> </text>
<text top="484" left="108" width="317" height="13" font="26">#sudo nano /etc/ssh/sshd_config </text>
<text top="509" left="108" width="418" height="18" font="0">Make sure these lines are available and not commented: </text>
<text top="537" left="108" width="287" height="13" font="26">    PubkeyAuthentication yes </text>
<text top="560" left="108" width="465" height="13" font="26">    AuthorizedKeysFile %h/.ssh/authorized_keys </text>
<text top="595" left="113" width="39" height="28" font="49">D.2.</text>
<text top="601" left="152" width="7" height="22" font="50"> </text>
<text top="592" left="162" width="216" height="32" font="51">Client	side	(Snort)	</text>
<text top="632" left="162" width="31" height="18" font="0">2.1. </text>
<text top="629" left="193" width="160" height="21" font="58"><i>Edit	the	following	file</i></text>
<text top="632" left="353" width="4" height="18" font="0"> </text>
<text top="660" left="108" width="346" height="13" font="26">    #sudo nano /etc/ssh/ssh_config </text>
<text top="683" left="108" width="544" height="13" font="26">Make sure these lines are available and not commented: </text>
<text top="706" left="108" width="327" height="13" font="26">    IdentityFile ~/.ssh/identity </text>
<text top="730" left="108" width="307" height="13" font="26">    IdentityFile ~/.ssh/id_rsa </text>
<text top="753" left="108" width="307" height="13" font="26">    IdentityFile ~/.ssh/id_dsa </text>
<text top="792" left="162" width="31" height="18" font="0">2.2. </text>
<text top="788" left="193" width="160" height="21" font="58"><i>Login	into	SSH	server</i></text>
<text top="792" left="353" width="4" height="18" font="0"> </text>
<text top="819" left="162" width="198" height="13" font="26">ssh 192.168.230.140 </text>
<text top="844" left="108" width="224" height="18" font="0">Issue the following command: </text>
<text top="872" left="162" width="178" height="13" font="26">ssh-keygen -t dsa </text>
<text top="911" left="162" width="31" height="18" font="0">2.3. </text>
<text top="907" left="193" width="312" height="21" font="58"><i>Copy	the	public	key	into	target	SSH	server</i></text>
<text top="911" left="505" width="4" height="18" font="0"> </text>
<text top="939" left="162" width="574" height="13" font="26">sudo ssh-copy-id -i ~/.ssh/id_dsa.pub ben@192.168.230.140 </text>
<text top="962" left="162" width="228" height="13" font="26">Choose username as ben </text>
<text top="987" left="108" width="207" height="18" font="0">A SSH address is generated: </text>
<text top="1015" left="162" width="198" height="13" font="26">ben@192.168.230.140 </text>
<text top="1054" left="162" width="27" height="18" font="0">2.4.</text>
<text top="1050" left="189" width="250" height="21" font="58"><i>	Passwordless	connection	created</i></text>
<text top="1054" left="439" width="4" height="18" font="0"> </text>
<text top="1079" left="108" width="681" height="18" font="0">Now that the keys have been exchanged, a SSH passwordless connection is possible using </text>
<text top="1104" left="108" width="182" height="18" font="0">the following command: </text>
<text top="1132" left="162" width="40" height="13" font="26">ssh </text>
<text top="1132" left="202" width="188" height="13" font="59">ben@192.168.230.140</text>
<text top="1132" left="390" width="10" height="13" font="26"> </text>
</page>
<page number="101" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="308" width="281" height="18" font="0">Appendix E.  Snort Signatures Created </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="758" width="31" height="18" font="0">101 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="121" left="113" width="192" height="34" font="46">Appendix E. </text>
<text top="121" left="305" width="9" height="31" font="47"> </text>
<text top="121" left="324" width="347" height="34" font="48"><i>Snort Signatures Created </i></text>
<text top="185" left="108" width="681" height="18" font="0">The  following  shows  the  Snort  signatures  created  by  the  Bash  script  “snort.sh”  after  the </text>
<text top="211" left="108" width="634" height="18" font="0">injection of 50 XSS attacks. The 50 XSS are provided in the DVD attached to this thesis. </text>
<text top="244" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="262" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="280" left="108" width="539" height="12" font="56">content:&#34;alert(document.cookie)&#34;; nocase; sid: 1000000;) </text>
<text top="302" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="320" left="108" width="671" height="12" font="56">detected&#34;; flow:to_server,established; content:&#34;alert(%27test%27)%3B&#34;; </text>
<text top="338" left="108" width="217" height="12" font="56">nocase; sid: 1000001;) </text>
<text top="360" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="378" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="396" left="108" width="671" height="12" font="56">content:&#34;alert(%22BlackHacker[dot]Coder[at]Gmail[dot]com%22)&#34;; nocase; </text>
<text top="414" left="108" width="142" height="12" font="56">sid: 1000002;) </text>
<text top="436" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="454" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="472" left="108" width="624" height="12" font="56">content:&#34;alert%28%2Fwww.r3t.n3t.nl%2F%29&#34;; nocase; sid: 1000003;) </text>
<text top="494" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="512" left="108" width="671" height="12" font="56">detected&#34;; flow:to_server,established; content:&#34;alert(/This-XSS-doesnt-</text>
<text top="530" left="108" width="425" height="12" font="56">work-all-the-time/)&#34;; nocase; sid: 1000004;) </text>
<text top="552" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="570" left="108" width="661" height="12" font="56">detected&#34;; flow:to_server,established; content:&#34;alert('BugReport.ir&#34;; </text>
<text top="588" left="108" width="217" height="12" font="56">nocase; sid: 1000005;) </text>
<text top="610" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="628" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="646" left="108" width="539" height="12" font="56">content:&#34;alert(%27HacKSever%27)&#34;; nocase; sid: 1000006;) </text>
<text top="668" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="686" left="108" width="671" height="12" font="56">detected&#34;; flow:to_server,established; content:&#34;alert(/xss/)&#34;; nocase; </text>
<text top="704" left="108" width="142" height="12" font="56">sid: 1000007;) </text>
<text top="726" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="744" left="108" width="652" height="12" font="56">detected&#34;; flow:to_server,established; content:&#34;alert(&#34;I'm%20Back%20-</text>
<text top="762" left="108" width="624" height="12" font="56">%20rstcenter.com%20-%20hackersblog.org&#34;)&#34;; nocase; sid: 1000008;) </text>
<text top="784" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="802" left="108" width="661" height="12" font="56">detected&#34;; flow:to_server,established; content:&#34;alert(1337)&#34;; nocase; </text>
<text top="820" left="108" width="142" height="12" font="56">sid: 1000009;) </text>
<text top="842" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="860" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="878" left="108" width="586" height="12" font="56">content:&#34;alert(/XSS%20by%20Fugitif/)&#34;; nocase; sid: 1000010;) </text>
<text top="900" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="918" left="108" width="680" height="12" font="56">detected&#34;; flow:to_server,established; content:&#34;alert(1)&#34;; nocase; sid: </text>
<text top="936" left="108" width="94" height="12" font="56">1000011;) </text>
<text top="958" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="976" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="994" left="108" width="586" height="12" font="56">content:&#34;alert('AGD_SCORP')&lt;/Script&gt;&#34;; nocase; sid: 1000012;) </text>
<text top="1016" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="1034" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="1052" left="108" width="671" height="12" font="56">content:&#34;alert(String.fromCharCode(88,83,83,32,98,121,32,66,117,103,66,</text>
<text top="1070" left="108" width="671" height="12" font="56">117,115,116,101,114,32,45,32,76,101,105,97,32,98,117,103,98,117,115,116</text>
<text top="1088" left="108" width="576" height="12" font="56">,101,114,46,99,111,109,46,98,114));&#34;; nocase; sid: 1000013;) </text>
</page>
<page number="102" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="308" width="281" height="18" font="0">Appendix E.  Snort Signatures Created </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="758" width="31" height="18" font="0">102 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="114" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="132" left="108" width="652" height="12" font="56">detected&#34;; flow:to_server,established; content:&#34;alert('Agd_Scorp')&#34;; </text>
<text top="149" left="108" width="217" height="12" font="56">nocase; sid: 1000014;) </text>
<text top="172" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="190" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="208" left="108" width="576" height="12" font="56">content:&#34;alert%28document.cookie%29&#34;; nocase; sid: 1000015;) </text>
<text top="230" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="248" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="266" left="108" width="671" height="12" font="56">content:&#34;/hk/presspass/chinese/result.aspx?fm=01/01/2006T12/14/2006%22%</text>
<text top="283" left="108" width="671" height="12" font="56">3e%3c/script%3e%3c&amp;to=extarea%20cols=1000%20rows=1000%20style=%22positi</text>
<text top="301" left="108" width="671" height="12" font="56">on:%20absolute;%20top:%200px;%20left:%200px;%22%20onmouseover=%22alert%</text>
<text top="319" left="108" width="661" height="12" font="56">28%27Hacked%20By%20B34TR1B0X%20For%20LeaderHackers.ORG%27%2&#34;; nocase; </text>
<text top="337" left="108" width="142" height="12" font="56">sid: 1000016;) </text>
<text top="359" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="377" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="395" left="108" width="548" height="12" font="56">content:&#34;alert(/www.r3t.n3t.nl/)&#34;; nocase; sid: 1000017;) </text>
<text top="417" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="435" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="453" left="108" width="614" height="12" font="56">content:&#34;alert(%22AGD_SCORP%20xD%22)%3C/Script%3E&#34;; nocase; sid: </text>
<text top="471" left="108" width="94" height="12" font="56">1000018;) </text>
<text top="493" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="511" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="529" left="108" width="671" height="12" font="56">content:&#34;a=eval;b=alert;a(b(/XSS/.source));%3C/script37%22%3%3Cmarquee%</text>
<text top="547" left="108" width="633" height="12" font="56">3E%3Ch1%3EXSS%20by%20Xylitol%3C/h1%3E%3C/marquee%3E&#34;; nocase; sid: </text>
<text top="565" left="108" width="94" height="12" font="56">1000019;) </text>
<text top="587" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="605" left="108" width="624" height="12" font="56">detected&#34;; flow:to_server,established; content:&#34;alert(&#34;DaiMon&#34;)&#34;; </text>
<text top="623" left="108" width="217" height="12" font="56">nocase; sid: 1000020;) </text>
<text top="645" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="663" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="681" left="108" width="671" height="12" font="56">content:&#34;alert(%22BlackHacker[dot]Coder[at]Gmail[dot]com%22)&#34;; nocase; </text>
<text top="698" left="108" width="142" height="12" font="56">sid: 1000021;) </text>
<text top="721" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="739" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="756" left="108" width="539" height="12" font="56">content:&#34;ipt&gt;alert('XSS');&lt;/scr&#34;; nocase; sid: 1000022;) </text>
<text top="779" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="797" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="814" left="108" width="671" height="12" font="56">content:&#34;alert%28%2FXSS+By+RedTuninG%2F%29%3B&#34;; nocase; sid: 1000023;) </text>
<text top="837" left="108" width="595" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#34;XSS attempt </text>
<text top="855" left="108" width="368" height="12" font="56">detected&#34;; flow:to_server,established; </text>
<text top="873" left="108" width="671" height="12" font="56">content:&#34;eval%28String.fromCharCode%2897%2C108%2C101%2C114%2C116%2C40%2</text>
<text top="890" left="108" width="671" height="12" font="56">C34%2C88%2C83%2C83%2C32%2C102%2C111%2C117%2C110%2C100%2C32%2C98%2C121%2</text>
<text top="908" left="108" width="671" height="12" font="56">C32%2C83%2C109%2C111%2C107%2C101%2C121%2C32%2C79%2C102%2C32%2C68%2C97%2</text>
<text top="926" left="108" width="671" height="12" font="56">C114%2C107%2C99%2C48%2C100%2C101%2C32%2C72%2C97%2C99%2C107%2C99%2C105%2</text>
<text top="944" left="108" width="671" height="12" font="56">C110%2C103%2C32%2C67%2C114%2C101%2C119%2C34%2C41%2C59%29%29—&#34;; nocase; </text>
<text top="962" left="108" width="142" height="12" font="56">sid: 1000024;) </text>
<text top="984" left="108" width="680" height="12" font="56">alert tcp $EXTERNAL_NET any -&gt; $HOMEET any (msg:&#34;XSS attempt detected&#34;; </text>
<text top="1002" left="108" width="265" height="12" font="56">flow:to_server,established; </text>
<text top="1020" left="108" width="614" height="12" font="56">content:&#34;alert%28document.cookie%29%3C%2fscript%3E&amp;sa=N&amp;tab=wb&#34;; </text>
<text top="1038" left="108" width="217" height="12" font="56">nocase; sid: 1000025;) </text>
<text top="1062" left="108" width="4" height="18" font="0"> </text>
</page>
<page number="103" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="357" width="184" height="18" font="0">Appendix F.  Gantt Chart </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="758" width="31" height="18" font="0">103 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="121" left="113" width="190" height="34" font="46">Appendix F. </text>
<text top="121" left="303" width="9" height="31" font="47"> </text>
<text top="121" left="324" width="172" height="34" font="48"><i>Gantt Chart </i></text>
<text top="185" left="108" width="681" height="18" font="0">This  Gantt  Chart  has  been  made  at  the  beginning  of  the  project  to  organise  the  work </text>
<text top="211" left="108" width="681" height="18" font="0">schedule of each chapter. In addition, an extra week was planned at the end of the project </text>
<text top="236" left="108" width="681" height="18" font="0">for proof reading and printing. During the project, this schedule has been followed and extra </text>
<text top="261" left="108" width="681" height="18" font="0">work  was  done  over  weekends  and  evenings  when  it  was  required.  But  this  has  been </text>
<text top="286" left="108" width="681" height="18" font="0">efficient  and  the  writing  of  this  thesis  was  finished  two  weeks  before  the  hand  in  date, </text>
<text top="312" left="108" width="681" height="18" font="0">which gave more than enough time to show it to Professor Bill Buchanan, do minor updates, </text>
<text top="337" left="108" width="176" height="18" font="0">proof read and print it.  </text>
<text top="699" left="881" width="4" height="18" font="0"> </text>
<text top="743" left="108" width="197" height="34" font="46">Appendix G. </text>
<text top="744" left="305" width="9" height="31" font="47"> </text>
<text top="743" left="324" width="250" height="34" font="48"><i>Research Proposal </i></text>
<text top="807" left="113" width="38" height="28" font="49">G.1.</text>
<text top="813" left="151" width="7" height="22" font="50"> </text>
<text top="804" left="162" width="593" height="32" font="51">Brief	description	of	the	research	area	‐	background	</text>
<text top="845" left="106" width="693" height="18" font="0">At the beginning of the academic year 2010/2011, Napier University has started a migration </text>
<text top="870" left="106" width="693" height="18" font="0">to  the  cloud  computing  using  the  platform  VMware  ESXi.  The  actual  success  of  the  cloud </text>
<text top="896" left="106" width="693" height="18" font="0">computing  is  due  to  the  cost  saving  of  this  technology  which  reduce  the  hardware </text>
<text top="921" left="106" width="693" height="18" font="0">investment, save space and save power consumption (Georgieva, 2009).The cloud computing </text>
<text top="946" left="106" width="693" height="18" font="0">uses  virtualisation  and  clustering  in  order  to  optimise  the  server  utilisation.  The  platform </text>
<text top="971" left="106" width="693" height="18" font="0">VMware  ESXi  is  installed  directly  on  a  physical  stack  (server)  and  gives  the  possibility  to </text>
<text top="997" left="106" width="693" height="18" font="0">create/manage  multiples  Virtual  Machines  (V.M)  which  share  the  physical  resources  of  the </text>
<text top="1022" left="106" width="693" height="18" font="0">server. Instead of using expensive physical machine when a high‐end hardware is needed, it is </text>
<text top="1047" left="106" width="693" height="18" font="0">now possible to create the same VM within seconds and give it more resources on the fly if </text>
<text top="1072" left="106" width="693" height="18" font="0">necessary. The benefit from the students’ perspective of Napier University is an opportunity </text>
<text top="1098" left="106" width="693" height="18" font="0">to manage their own virtual environment through any web browser, giving them the ability to </text>
<text top="1123" left="106" width="521" height="18" font="0">complete practical lessons from any computer, anywhere in the world. </text>
</page>
<page number="104" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="331" width="236" height="18" font="0">Appendix G.  Research Proposal </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="758" width="31" height="18" font="0">104 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="106" width="693" height="18" font="0">According  to  Daniel  Petri,  using  virtualisation  in  cloud  computing  brings  some  new  security </text>
<text top="138" left="106" width="693" height="18" font="0">issues,  as  virtualisation  does  not  provide  any  more  security  and  a  Virtual  Machine  (V.M.) </text>
<text top="163" left="106" width="693" height="18" font="0">could be even less secure than a phisical machine (Petri, 2009). The addition of VMs is so fast </text>
<text top="188" left="106" width="693" height="18" font="0">and  easily  done  that  administrator  sometimes  forget  to  add  them  to  the  patch  distribution </text>
<text top="213" left="106" width="693" height="18" font="0">system. These unpatched VM become quickly targeted by worms/intruders and result in using </text>
<text top="239" left="106" width="693" height="18" font="0">more  network  bandwidth  and  resources  that  usually  needed.  Moreover,  Daniel  Petri  states </text>
<text top="264" left="106" width="693" height="18" font="0">multiple  security  issues  in  virtualisation  as  a  VM  infected  by  a  virus  could  potentially  infect </text>
<text top="289" left="106" width="693" height="18" font="0">another  VM  or  even  infect  the  hypervisor  layer,  which  could  result  as  a  complete  failure  of </text>
<text top="314" left="106" width="107" height="18" font="0">the VM cloud. </text>
<text top="346" left="106" width="693" height="18" font="0">Traditional  networks  use  IDS  (Intrusion  Detection  System)  to  detect  malicious  data  packets. </text>
<text top="371" left="106" width="693" height="18" font="0">There are two types of IDS: anomaly‐based and signature‐based. This thesis covers signature </text>
<text top="396" left="106" width="693" height="18" font="0">based  IDS.  It  means  that  the  IDS  detects  an  attack  using  a  set  of  signatures  which  are </text>
<text top="421" left="106" width="693" height="18" font="0">periodically updated. However, signature‐based IDSs lack to discover new attacks that are not </text>
<text top="447" left="106" width="293" height="18" font="0">included within the signature database. </text>
<text top="478" left="106" width="693" height="18" font="0">In order to detect potential new attacks, this thesis is based on the implementation of a trap </text>
<text top="503" left="106" width="693" height="18" font="0">known as “honeypot”. Honeypots are not defensive security systems as IDS and Firewalls as </text>
<text top="529" left="106" width="693" height="18" font="0">they do not tend to protect the network but lean towards attracting the intruder. According </text>
<text top="554" left="106" width="693" height="18" font="0">to L. Spitzner a honeypot is <i>an information system resource whose value lies in unauthorized </i></text>
<text top="579" left="106" width="693" height="18" font="20"><i>of illicit use of that resource</i> (Spitzner, 2003). Honeypots are fake information servers able to </text>
<text top="604" left="106" width="693" height="18" font="0">run  multiple  of  services  (FTP,  SQL,  SSH…)  that  are  configured  using  weak  security </text>
<text top="630" left="106" width="693" height="18" font="0">mechanisms, making them highly interesting for an intruder in search for a target. These traps </text>
<text top="655" left="106" width="693" height="18" font="0">are  loaded  with  monitoring  and  tracking  tools  which  make  them  able  to  log  any  activity </text>
<text top="680" left="106" width="224" height="18" font="0">resulting from an illicit access. </text>
<text top="711" left="106" width="693" height="18" font="0">The aim of this project is to use the honeypot in order to create a new set of signatures for </text>
<text top="737" left="106" width="395" height="18" font="0">the IDS and compare the efficiency with the old ones. </text>
<text top="783" left="113" width="38" height="28" font="49">G.2.</text>
<text top="789" left="151" width="7" height="22" font="50"> </text>
<text top="780" left="162" width="629" height="32" font="51">Project	 outline	 for	 the	 work	 that	 you	 propose	 to	</text>
<text top="817" left="140" width="112" height="32" font="51">complete	</text>
<text top="857" left="106" width="284" height="18" font="19"><b>The idea for this research arose from: </b></text>
<text top="889" left="106" width="695" height="18" font="0">A  personal  interest  developed  during  the  Honours  project  dissertation  “Network‐  and  Host </text>
<text top="914" left="106" width="695" height="18" font="0">Detection  System  of  Botnets”  where  my  researches  aimed  to  the  development, </text>
<text top="939" left="106" width="695" height="18" font="0">implementation  and  detection  of  own‐made  Botnet  within  virtual  environment.  During  that </text>
<text top="964" left="106" width="695" height="18" font="0">project,  I  went  through  some  white  paper  about  the  detection  of  Botnets  using  Honeypots </text>
<text top="990" left="106" width="545" height="18" font="0">systems. It seemed fascinating and made me want to know more about it. </text>
<text top="1021" left="106" width="695" height="18" font="0">Last year during the Honours degree, the cloud computing has been introduced to me in the </text>
<text top="1046" left="106" width="695" height="18" font="0">Advanced  Security  and  Network  Forensics  module.  It  really  caught  my  interest  and  I  was </text>
<text top="1071" left="106" width="695" height="18" font="0">amazed  about  the  aspect  of  virtualisation  and  clustering.  Moreover,  a  conference  in  Napier </text>
<text top="1097" left="106" width="285" height="18" font="0">University by Tabassum Sharif on the 9</text>
<text top="1093" left="392" width="10" height="12" font="25">th</text>
<text top="1097" left="402" width="399" height="18" font="0"> March 2011 about the future of the Cloud computing </text>
<text top="1122" left="106" width="695" height="18" font="0">made me realise that it will play an important role in the future and therefore that I should </text>
</page>
<page number="105" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="331" width="236" height="18" font="0">Appendix G.  Research Proposal </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="758" width="31" height="18" font="0">105 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="106" width="153" height="18" font="0">study more about it. </text>
<text top="144" left="106" width="695" height="18" font="0">I had my two ideas, network security and cloud computing, so I decided to mix them together </text>
<text top="169" left="106" width="695" height="18" font="0">and  to  work  on  my  Master  dissertation  about  the  network  security  within  the  cloud </text>
<text top="194" left="106" width="414" height="18" font="0">computing based on the implementation of a honeypot. </text>
<text top="225" left="106" width="293" height="18" font="19"><b>The aims of the project are as follows:  </b></text>
<text top="257" left="106" width="334" height="18" font="0">Review and investigate the existing literature </text>
<text top="288" left="133" width="6" height="18" font="0">‐</text>
<text top="288" left="139" width="5" height="17" font="18"> </text>
<text top="288" left="160" width="641" height="18" font="0">The literature review covers the VMware ESXi platform, Intrusion Detection Systems, </text>
<text top="313" left="160" width="400" height="18" font="0">Honeypot systems and Security/Vulnerability scanner. </text>
<text top="338" left="133" width="6" height="18" font="0">‐</text>
<text top="339" left="139" width="5" height="17" font="18"> </text>
<text top="338" left="160" width="312" height="18" font="0">Design and implement a honeypot system </text>
<text top="364" left="133" width="6" height="18" font="0">‐</text>
<text top="364" left="139" width="5" height="17" font="18"> </text>
<text top="364" left="160" width="641" height="18" font="0">The honeypot implementation aims to create a virtual network topology. This topology </text>
<text top="389" left="160" width="526" height="18" font="0">includes virtual routers and virtual hosts with different OS and services. </text>
<text top="414" left="133" width="6" height="18" font="0">‐</text>
<text top="415" left="139" width="5" height="17" font="18"> </text>
<text top="414" left="160" width="269" height="18" font="0">Generate new signatures for the IDS </text>
<text top="439" left="133" width="6" height="18" font="0">‐</text>
<text top="440" left="139" width="5" height="17" font="18"> </text>
<text top="439" left="160" width="641" height="18" font="0">A  security  scanner  is  going  to  attack  the  honeypot  and  try  to  exploit  the  different </text>
<text top="465" left="160" width="641" height="18" font="0">vulnerabilities  previously  configured.  The  honeypot  is  going  to  log  those  attacks  and </text>
<text top="490" left="160" width="268" height="18" font="0">generate new signature for the IDS.  </text>
<text top="515" left="133" width="6" height="18" font="0">‐</text>
<text top="516" left="139" width="5" height="17" font="18"> </text>
<text top="515" left="160" width="214" height="18" font="0">Compare the new signatures </text>
<text top="541" left="133" width="6" height="18" font="0">‐</text>
<text top="541" left="139" width="5" height="17" font="18"> </text>
<text top="541" left="160" width="641" height="18" font="0">The new signatures are going to be compared with the Snort basic ones to determine </text>
<text top="566" left="160" width="417" height="18" font="0">if they are more efficient in terms of True/False positive. </text>
<text top="597" left="106" width="484" height="18" font="19"><b>The main research questions that this work will address include: </b></text>
<text top="628" left="133" width="6" height="18" font="0">‐</text>
<text top="629" left="139" width="5" height="17" font="18"> </text>
<text top="628" left="160" width="609" height="18" font="0">Which type of honeypot interaction is more adapted for a secure implementation? </text>
<text top="654" left="133" width="6" height="18" font="0">‐</text>
<text top="654" left="139" width="5" height="17" font="18"> </text>
<text top="654" left="160" width="545" height="18" font="0">How to translate packets captured by the honeypot into an IDS signature? </text>
<text top="679" left="133" width="6" height="18" font="0">‐</text>
<text top="679" left="139" width="5" height="17" font="18"> </text>
<text top="679" left="160" width="490" height="18" font="0">Are the signatures generated more efficient than traditional ones? </text>
<text top="710" left="106" width="590" height="18" font="0">The software development/design work/other deliverable of the project will be: </text>
<text top="741" left="106" width="475" height="18" font="0">Honeypot implementation within the cloud of Napier University. </text>
<text top="773" left="106" width="658" height="18" font="19"><b>The project will involve the following research/field work/experimentation/evaluation: </b></text>
<text top="804" left="133" width="6" height="18" font="0">‐</text>
<text top="805" left="139" width="5" height="17" font="18"> </text>
<text top="804" left="160" width="213" height="18" font="0">Literature search and review </text>
<text top="835" left="106" width="695" height="18" font="0">The literature research will be done through the search Engine of Napier University NUIN‐link </text>
<text top="860" left="106" width="695" height="18" font="0">which is really helpful to have a look in multiple databases at the same time. Deeper research </text>
<text top="886" left="106" width="695" height="18" font="0">will be done on the databases “Science Direct” and “IEEE” which are some of the best one for </text>
<text top="911" left="106" width="195" height="18" font="0">networking white papers.  </text>
<text top="942" left="133" width="6" height="18" font="0">‐</text>
<text top="943" left="139" width="5" height="17" font="18"> </text>
<text top="942" left="160" width="133" height="18" font="0">Experimentations </text>
<text top="974" left="106" width="695" height="18" font="0">Verify that the honeypot and monitoring tools are correctly working. Using Penetration tools, </text>
<text top="999" left="106" width="695" height="18" font="0">I  will  try  to  access  the  services  offered  by  the  honeypot  (e.g.  FTP  or  SSH  servers).  If  the </text>
<text top="1024" left="106" width="675" height="18" font="0">monitoring tools are working as they should, the honeypot should log the different attacks.  </text>
<text top="1055" left="106" width="470" height="18" font="0">Generate new IDS signatures using the log file of the honeypot.  </text>
<text top="1087" left="133" width="6" height="18" font="0">‐</text>
<text top="1087" left="139" width="5" height="17" font="18"> </text>
<text top="1087" left="160" width="81" height="18" font="0">Evaluation </text>
<text top="1118" left="106" width="695" height="18" font="0">The evaluation consists in comparing the IDS signatures against the signatures created by the </text>
</page>
<page number="106" position="absolute" top="0" left="0" height="1263" width="892">
<text top="57" left="331" width="236" height="18" font="0">Appendix G.  Research Proposal </text>
<text top="1169" left="108" width="97" height="18" font="0">Benoit Jacob </text>
<text top="1169" left="446" width="4" height="18" font="0"> </text>
<text top="1169" left="758" width="31" height="18" font="0">106 </text>
<text top="1191" left="108" width="4" height="18" font="0"> </text>
<text top="112" left="106" width="83" height="18" font="0">honeypot.  </text>
<text top="144" left="106" width="393" height="18" font="19"><b>This work will require the use of specialist software: </b></text>
<text top="175" left="106" width="330" height="18" font="0"> All the software needed will be open source </text>
<text top="206" left="106" width="414" height="18" font="0">This work will require the use of specialist hardware: No </text>
<text top="237" left="106" width="606" height="18" font="0">The project is being undertaken in collaboration with: Edinburgh Napier University </text>
<text top="339" left="113" width="38" height="28" font="49">G.3.</text>
<text top="345" left="151" width="7" height="22" font="50"> </text>
<text top="336" left="162" width="242" height="32" font="51">Proposal	References	</text>
<text top="377" left="106" width="693" height="18" font="19"><b>Davis, David. 2009.</b> Best Practices for Securing VMware ESX Server. <i>Petri IT Knowledgebase. </i></text>
<text top="402" left="106" width="662" height="18" font="0">[Online] 2009. [Cited: 31 03 2011.] http://www.petri.co.il/secure‐vmware‐esx‐server.htm. </text>
<text top="434" left="106" width="693" height="18" font="19"><b>Georgieva, Tsveti. 2009.</b> Advantages of Virtualization. <i>suite101. </i>[Online] 17 Nov 2009. [Cited: </text>
<text top="459" left="106" width="653" height="18" font="0">25 Mar 2011.] http://www.suite101.com/content/advantages‐of‐virtualization‐a170746. </text>
<text top="490" left="106" width="693" height="18" font="19"><b>Jackson,  Peter.  2005.</b>  <i>Detection  of  Netowrk  Threats  Using  Honeypots.  </i>Edinburgh :  Napier </text>
<text top="515" left="106" width="130" height="18" font="0">UNiversity, 2005. </text>
<text top="547" left="106" width="693" height="18" font="19"><b>Petri,  Daniel.  2009.</b>  What  You  Need  to  Know  About  Securing  Your  Virtual  Network.  <i>Petri  IT </i></text>
<text top="572" left="106" width="689" height="18" font="20"><i>knowledge. </i>[Online] 08 01 2009. [Cited: 24 03 2011.] http://www.petri.co.il/what‐you‐need‐</text>
<text top="597" left="106" width="382" height="18" font="0">to‐know‐about‐vmware‐virtualization‐security.htm. </text>
<text top="628" left="106" width="693" height="18" font="19"><b>Spitzner, L. 2003.</b> Definitions and Value of Honeypots. <i>tacking‐hackers. </i>[Online] 2003. [Cited: </text>
<text top="654" left="106" width="533" height="18" font="0">25 03 2011.] http://www.tracking‐hackers.com/papers/honeypots.html. </text>
<text top="686" left="108" width="4" height="18" font="0"> </text>
</page>
</pdf2xml>
