<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="989" width="644">
	<fontspec id="0" size="10" family="Times" color="#000000"/>
	<fontspec id="1" size="19" family="Times" color="#000000"/>
	<fontspec id="2" size="12" family="Times" color="#000000"/>
	<fontspec id="3" size="7" family="Times" color="#000000"/>
	<fontspec id="4" size="11" family="Times" color="#000000"/>
	<fontspec id="5" size="11" family="Times" color="#000000"/>
	<fontspec id="6" size="16" family="Times" color="#000000"/>
<text top="924" left="63" width="435" height="11" font="0">C. Liu, J. Chang, and A. Yang (Eds.): ICICA 2011, Part II, CCIS 244, pp. 621<a href="pdfxml.html#8">–628,</a> 2011. </text>
<text top="939" left="63" width="209" height="11" font="0">© Springer-Verlag Berlin Heidelberg 2011 </text>
<text top="100" left="83" width="485" height="19" font="1"><b>ELF-Based Computer Virus Prevention Technologies </b></text>
<text top="167" left="243" width="66" height="14" font="2">Yinbing Li</text>
<text top="163" left="309" width="5" height="9" font="3">1</text>
<text top="167" left="314" width="83" height="14" font="2"> and Jing Yan</text>
<text top="163" left="397" width="5" height="9" font="3">2</text>
<text top="167" left="402" width="4" height="14" font="2"> </text>
<text top="198" left="90" width="7" height="8" font="3">1 </text>
<text top="201" left="97" width="462" height="12" font="4">Computer Science and Technology Department Tangshan College, TangShan, China </text>
<text top="214" left="63" width="7" height="8" font="3">2 </text>
<text top="217" left="70" width="515" height="12" font="4">Computer Science and Technology Department Tangshan Teachers’ College, TangShan, China </text>
<text top="232" left="181" width="292" height="11" font="4">tsxylyb@163.com, tstc9@yahoo.com.cn </text>
<text top="292" left="106" width="441" height="12" font="5"><b>Abstract.  </b>Computer virus has become the important threat to information </text>
<text top="309" left="106" width="438" height="12" font="4">security. Once attacked by virus, user will suffer from great loss and potential </text>
<text top="325" left="106" width="437" height="12" font="4">threat. Construct a safe and healthy network environment, it is tireless pursuit of </text>
<text top="342" left="106" width="437" height="12" font="4">anti-virus expert, and also the wishes of all Internet users. In this article, we will </text>
<text top="358" left="106" width="437" height="12" font="4">analyze deeply the internal mechanism, algorithm and related technology of ELF </text>
<text top="375" left="106" width="441" height="12" font="4">virus in Linux system and give related prevention measures. Through the </text>
<text top="391" left="106" width="438" height="12" font="4">analysis of the code, we can detect the new virus and variations of the existing </text>
<text top="408" left="106" width="437" height="12" font="4">virus. This article accords with request of the current anti-virus technology's </text>
<text top="424" left="106" width="76" height="12" font="4">development. </text>
<text top="461" left="106" width="257" height="12" font="5"><b>Keywords:</b> ELF file, Linux, Virus, Algorithm.<b> </b></text>
<text top="510" left="63" width="9" height="16" font="6"><b>1</b></text>
<text top="510" left="72" width="5" height="17" font="6"><b> </b></text>
<text top="510" left="106" width="113" height="16" font="6"><b>Introduction  </b></text>
<text top="550" left="63" width="526" height="14" font="2">Computer viruses are the most commonly used measure during large number of </text>
<text top="568" left="63" width="524" height="14" font="2">electronic destruction technologies and refer to some dangerous malware. They can </text>
<text top="586" left="63" width="527" height="14" font="2">copy and spread themselves anywhere and anytime. Not just PC and Windows </text>
<text top="604" left="63" width="525" height="14" font="2">platform, all equipment that can be programmed and have basic characteristics of </text>
<text top="622" left="63" width="526" height="14" font="2">computer can be infected by computer virus. No operating system can withstand </text>
<text top="640" left="63" width="522" height="14" font="2">computer virus. Virus code can be made in Windows, Linux, Mac OS, DOS or Amiga. </text>
<text top="658" left="80" width="506" height="14" font="2">At the beginning, because Linux programs come from source code and do not use </text>
<text top="676" left="63" width="523" height="14" font="2">binary format, people thought that Linux can be free from virus attack. However, with </text>
<text top="694" left="63" width="522" height="14" font="2">the development of virus technology, its attack target has expanded to Linux system. In </text>
<text top="712" left="63" width="528" height="14" font="2">February 1997, the first virus attacking Linux system, Bliss, appeared in Linux system.   </text>
<text top="730" left="80" width="514" height="14" font="2">Binary file viruses with ELF (Executable and Linkable Format) format are known  </text>
<text top="748" left="63" width="531" height="14" font="2">as the standard mode of computer viruses. They are written with assembly language  </text>
<text top="766" left="63" width="524" height="14" font="2">and infect other equipment through executable programs. Viruses in Linux usually use </text>
<text top="784" left="63" width="71" height="14" font="2">this format. </text>
<text top="827" left="63" width="9" height="16" font="6"><b>2</b></text>
<text top="827" left="72" width="5" height="17" font="6"><b> </b></text>
<text top="827" left="106" width="202" height="16" font="6"><b>Introduction to ELF Files </b></text>
<text top="864" left="63" width="525" height="14" font="2">Executable and Linkable Format (ELF) was originally developed and published by </text>
<text top="882" left="63" width="523" height="14" font="2">UNIX lab as part of Application Binary Interface (ABI). The Tool Interface Standards </text>
</page>
<page number="2" position="absolute" top="0" left="0" height="989" width="644">
	<fontspec id="7" size="12" family="Times" color="#000000"/>
<text top="46" left="63" width="140" height="12" font="4">622        Y. Li and J. Yan </text>
<text top="87" left="63" width="523" height="14" font="2">(TIS) committee has selected ELF standard as a portable object file format that works </text>
<text top="105" left="63" width="468" height="14" font="2">on 64-bit Intel Architecture environments for a variety of operating systems.   </text>
<text top="123" left="80" width="507" height="14" font="2">The ELF standard is intended to supply software developers with a set of binary </text>
<text top="141" left="63" width="525" height="14" font="2">interface definitions that extend across multiple operating environments, thereby to </text>
<text top="159" left="63" width="524" height="14" font="2">reduce the need for recoding and program recompiling. Content of interface include </text>
<text top="177" left="63" width="526" height="14" font="2">object module format, executable file format and debug logging information and </text>
<text top="195" left="63" width="73" height="14" font="2">format, etc. </text>
<text top="242" left="63" width="9" height="16" font="6"><b>3</b></text>
<text top="242" left="72" width="5" height="17" font="6"><b> </b></text>
<text top="242" left="106" width="136" height="16" font="6"><b>ELF File Format </b></text>
<text top="281" left="63" width="19" height="14" font="7"><b>3.1</b></text>
<text top="281" left="82" width="4" height="14" font="7"><b> </b></text>
<text top="281" left="106" width="85" height="14" font="7"><b>Introduction </b></text>
<text top="314" left="63" width="262" height="14" font="2">There are three types for ELF object files:   </text>
<text top="332" left="80" width="507" height="14" font="2">Relocatable File: An object file that holds code and data suitable for linking with </text>
<text top="350" left="63" width="378" height="14" font="2">other object files to create an executable or shared object file.   </text>
<text top="368" left="80" width="505" height="14" font="2">Executable File: An object file that holds a program suitable for execution. This file </text>
<text top="386" left="63" width="341" height="14" font="2">specifies how exec() creates a program’s process image. </text>
<text top="404" left="80" width="505" height="14" font="2">Shared Object File: This file holds code and data suitable for linking in two contexts. </text>
<text top="422" left="63" width="524" height="14" font="2">Firstly, the link editor may process it with other relocatable and shared object file to </text>
<text top="440" left="63" width="522" height="14" font="2">create another object file. Secondly, dynamic linker combines it with an executable file </text>
<text top="458" left="63" width="313" height="14" font="2">and other shared objects to create a process image.   </text>
<text top="476" left="80" width="505" height="14" font="2">All object files are binary representation of programs intended to execute directly on </text>
<text top="494" left="63" width="81" height="14" font="2">a processor.   </text>
<text top="542" left="63" width="19" height="14" font="7"><b>3.2</b></text>
<text top="541" left="82" width="4" height="14" font="7"><b> </b></text>
<text top="542" left="106" width="91" height="14" font="7"><b>ELF Header   </b></text>
<text top="574" left="63" width="524" height="14" font="2">Just as bmp and exe file, ELF header contains the control structure of the entire file. </text>
<text top="592" left="63" width="382" height="14" font="2">ELF header is defined in elf.h file with the following structure: </text>
<text top="623" left="63" width="162" height="12" font="2">   typedef struct </text>
<text top="641" left="63" width="45" height="12" font="2">   { </text>
<text top="659" left="63" width="333" height="12" font="2">    unsigned char e_ident[EI_NIDENT];</text>
<text top="658" left="396" width="174" height="14" font="2">  /* Magic number and other </text>
<text top="676" left="63" width="44" height="14" font="2">info */ </text>
<text top="695" left="63" width="256" height="12" font="2">    Elf32_Half e_type;   /*</text>
<text top="694" left="319" width="126" height="14" font="2"> Object file type */ </text>
<text top="713" left="63" width="247" height="12" font="2">    Elf32_Half e_machine;   </text>
<text top="712" left="319" width="115" height="14" font="2">/* Architecture */ </text>
<text top="731" left="63" width="247" height="12" font="2">    Elf32_Word e_version;   </text>
<text top="730" left="319" width="152" height="14" font="2">/* Object file version */ </text>
<text top="749" left="63" width="208" height="12" font="2">    Elf32_Addr e_entry;</text>
<text top="748" left="271" width="196" height="14" font="2">/*Entry point virtual address */ </text>
<text top="767" left="63" width="126" height="12" font="2">    Elf32_Off </text>
<text top="767" left="182" width="81" height="12" font="2">e_phoff; </text>
<text top="766" left="267" width="221" height="14" font="2">/*Program header table file offset */ </text>
<text top="785" left="63" width="126" height="12" font="2">    Elf32_Off </text>
<text top="785" left="182" width="81" height="12" font="2">e_shoff; </text>
<text top="784" left="267" width="218" height="14" font="2">/* Section header table file offset */ </text>
<text top="803" left="63" width="217" height="12" font="2">    Elf32_Word e_flags; </text>
<text top="802" left="284" width="183" height="14" font="2">/* Processor-specific flags */ </text>
<text top="821" left="63" width="226" height="12" font="2">    Elf32_Half e_ehsize; </text>
<text top="820" left="284" width="188" height="14" font="2">/* ELF header size in bytes */ </text>
<text top="839" left="63" width="253" height="12" font="2">    Elf32_Half e_phentsize; </text>
<text top="838" left="319" width="224" height="14" font="2">/* Program header table entry size */ </text>
<text top="857" left="63" width="217" height="12" font="2">    Elf32_Half e_phnum; </text>
<text top="856" left="284" width="235" height="14" font="2">/* Program header table entry count */ </text>
<text top="875" left="63" width="253" height="12" font="2">    Elf32_Half e_shentsize; </text>
<text top="874" left="319" width="214" height="14" font="2">/*Section header table entry size */ </text>
</page>
<page number="3" position="absolute" top="0" left="0" height="989" width="644">
<text top="46" left="215" width="3" height="12" font="4"> </text>
<text top="46" left="247" width="294" height="12" font="4">ELF-Based Computer Virus Prevention Technologies </text>
<text top="46" left="562" width="24" height="12" font="4">623 </text>
<text top="88" left="63" width="217" height="12" font="2">    Elf32_Half e_shnum; </text>
<text top="87" left="284" width="228" height="14" font="2">/* Section header table entry count */ </text>
<text top="106" left="63" width="235" height="12" font="2">    Elf32_Half e_shstrndx;</text>
<text top="105" left="298" width="235" height="14" font="2"> /* Section header string table index */ </text>
<text top="124" left="63" width="144" height="12" font="2"> }  Elf32_Ehdr; </text>
<text top="152" left="80" width="236" height="14" font="2">Elf file type is EXEC (Executable file) </text>
<text top="168" left="80" width="142" height="14" font="2">Entry point 0x8049cd0 </text>
<text top="185" left="80" width="300" height="14" font="2">There are 7 program headers, starting at offset 52 </text>
<text top="232" left="63" width="19" height="14" font="7"><b>3.3</b></text>
<text top="232" left="82" width="4" height="14" font="7"><b> </b></text>
<text top="232" left="106" width="110" height="14" font="7"><b>ELF File Layout </b></text>
<text top="265" left="63" width="316" height="14" font="2">Following is a complete executable ELF file layout: </text>
<text top="296" left="63" width="135" height="12" font="2">    ELF Header </text>
<text top="314" left="63" width="261" height="12" font="2">        Program header table </text>
<text top="332" left="63" width="162" height="12" font="2">        Segment 1 </text>
<text top="350" left="63" width="162" height="12" font="2">        Segnent 2 </text>
<text top="368" left="63" width="261" height="12" font="2">        Section header gable </text>
<text top="386" left="63" width="162" height="12" font="2">        Section 1 </text>
<text top="404" left="63" width="90" height="12" font="2">        … </text>
<text top="422" left="63" width="126" height="12" font="2">    Section n </text>
<text top="451" left="63" width="524" height="14" font="2">An ELF header resides at the beginning and holds a road map describing the file’s </text>
<text top="469" left="63" width="524" height="14" font="2">organization. Sections hold the bulk of link information, symbol table and relocation </text>
<text top="487" left="63" width="523" height="14" font="2">information and so on. A program header table, if present, will tell the system how to </text>
<text top="505" left="63" width="523" height="14" font="2">create a process image. Executable files must have a program header table; relocatable </text>
<text top="523" left="63" width="524" height="14" font="2">files do not need one. Section header table contains information describing the file’s </text>
<text top="541" left="63" width="527" height="14" font="2">sections organization. Every section has an entry in the table; each entry gives </text>
<text top="559" left="63" width="523" height="14" font="2">information such as section name, the section size, etc. Files used during linking must </text>
<text top="577" left="63" width="434" height="14" font="2">have a section header table; other object files may or may not have one. </text>
<text top="595" left="80" width="509" height="14" font="2">All executable files in Linux are organized in ELF format, here we will give </text>
<text top="613" left="63" width="373" height="14" font="2">introduction taking the output of readelf -e a.out as example.   </text>
<text top="644" left="108" width="483" height="12" font="2">Magic:7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </text>
<text top="672" left="93" width="437" height="14" font="2">/*Magic is fixed logo, the first four bytes of    string form is&#34;\177ELF&#34;*/ </text>
<text top="702" left="108" width="71" height="12" font="2">Class: </text>
<text top="702" left="171" width="107" height="12" font="2">   ELF32 </text>
<text top="720" left="63" width="457" height="12" font="2">     Data:           2's complement, little endian </text>
<text top="738" left="63" width="278" height="12" font="2">     Version:      1 (current) </text>
<text top="756" left="63" width="351" height="12" font="2">     OS/ABI:           UNIX - System V </text>
<text top="774" left="63" width="188" height="12" font="2">     ABI Version:  0 </text>
<text top="792" left="63" width="378" height="12" font="2">     Type:        EXEC (Executable file)   </text>
<text top="810" left="92" width="351" height="14" font="2">/* Type can only for the following three: the target file, */ </text>
<text top="828" left="92" width="222" height="14" font="2">/*dynamic library, executable file */ </text>
<text top="846" left="108" width="81" height="12" font="2">Machine: </text>
<text top="846" left="182" width="96" height="12" font="2">  Intel </text>
<text top="846" left="270" width="62" height="12" font="2">80386 </text>
<text top="846" left="324" width="17" height="12" font="2"> </text>
<text top="845" left="333" width="226" height="14" font="2">/* Machine refers to the CPU type*/ </text>
<text top="864" left="63" width="243" height="12" font="2">     Version:          0x1 </text>
<text top="882" left="63" width="342" height="12" font="2">     Entry point address:   0x8049cd0 </text>
</page>
<page number="4" position="absolute" top="0" left="0" height="989" width="644">
<text top="46" left="63" width="140" height="12" font="4">624        Y. Li and J. Yan </text>
<text top="88" left="63" width="27" height="12" font="2">   </text>
<text top="87" left="90" width="456" height="14" font="2">  /*It is routine entry address, this is very important for the virus program.*/ </text>
<text top="106" left="63" width="495" height="12" font="2">    Start of program headers:     52 (bytes into file) </text>
<text top="124" left="63" width="27" height="12" font="2">   </text>
<text top="123" left="90" width="393" height="14" font="2">  /*It is header table of Segment and the offset is 52 in the file.*/ </text>
<text top="142" left="63" width="528" height="12" font="2">    Start of section headers:       195760 (bytes into file) </text>
<text top="160" left="63" width="36" height="12" font="2">    </text>
<text top="159" left="99" width="416" height="14" font="2">/*It is header table of Section and the offset is 195760 in the file.*/   </text>
<text top="178" left="63" width="243" height="12" font="2">    Flags:             0x0 </text>
<text top="196" left="63" width="320" height="12" font="2">    Size of this header: 52 (bytes) </text>
<text top="214" left="63" width="36" height="12" font="2">    </text>
<text top="213" left="99" width="168" height="14" font="2">/*the size of ELF header*/ </text>
<text top="232" left="63" width="450" height="12" font="2">    Size of program headers:           32 (bytes) </text>
<text top="250" left="63" width="36" height="12" font="2">    </text>
<text top="249" left="99" width="229" height="14" font="2">/*the size of the segment’s headers */ </text>
<text top="268" left="63" width="369" height="12" font="2">    Number of program headers:         7 </text>
<text top="285" left="92" width="464" height="14" font="2">/*Segment’s header table have seven segment header (A Segment is actually </text>
<text top="303" left="114" width="216" height="14" font="2">consists of one or more sections.)*/ </text>
<text top="322" left="63" width="450" height="12" font="2">    Size of section headers:           40 (bytes) </text>
<text top="339" left="92" width="221" height="14" font="2">/* the size of the section’s headers*/ </text>
<text top="358" left="63" width="378" height="12" font="2">    Number of section headers:         36 </text>
<text top="375" left="92" width="350" height="14" font="2">/* Section’s header table have thirty-six section header*/   </text>
<text top="394" left="63" width="360" height="12" font="2">  Section header string table index: 33 </text>
<text top="437" left="63" width="9" height="16" font="6"><b>4</b></text>
<text top="437" left="72" width="5" height="17" font="6"><b> </b></text>
<text top="437" left="106" width="333" height="16" font="6"><b>Principle and Algorithm of Virus Infection </b></text>
<text top="479" left="63" width="19" height="14" font="7"><b>4.1</b></text>
<text top="479" left="82" width="4" height="14" font="7"><b> </b></text>
<text top="479" left="106" width="179" height="14" font="7"><b>Principle of Virus Infection </b></text>
<text top="512" left="63" width="406" height="14" font="2">Following is the ELF file layout being inserted with parasitic code: </text>
<text top="543" left="108" width="99" height="12" font="2">ELF Header </text>
<text top="561" left="108" width="225" height="12" font="2">    Program header table </text>
<text top="579" left="108" width="423" height="12" font="2">    Segment 1    // text segment(subject code) </text>
<text top="597" left="108" width="153" height="12" font="2">  Parasitic code </text>
<text top="615" left="108" width="126" height="12" font="2">    Segment 2 </text>
<text top="633" left="108" width="225" height="12" font="2">    Section header gable </text>
<text top="651" left="108" width="126" height="12" font="2">    Section 1 </text>
<text top="669" left="108" width="54" height="12" font="2">    … </text>
<text top="687" left="108" width="90" height="12" font="2">Section n </text>
<text top="716" left="63" width="523" height="14" font="2">Parasitic code must be physically inserted into the ELF file and text segment must be </text>
<text top="734" left="63" width="524" height="14" font="2">extended to include the new code. E_entry in header file holds the virtual address of </text>
<text top="752" left="63" width="522" height="14" font="2">program entry point. E_phoff means the file offset of “program header table”. In order </text>
<text top="770" left="63" width="524" height="14" font="2">to read “program header table”, we need to call lseek() to locate this table. E_shoff </text>
<text top="788" left="63" width="524" height="14" font="2">means the file offset of “section header table”. This table resides at the end of files. </text>
<text top="806" left="63" width="525" height="14" font="2">After inserting parasitic code to the end of text segment, the program will update </text>
<text top="824" left="63" width="213" height="14" font="2">e_shoff to point to the new offset.   </text>
<text top="855" left="108" width="279" height="12" font="2">/* Program segment header. */  </text>
<text top="873" left="108" width="135" height="12" font="2">typedef struct </text>
</page>
<page number="5" position="absolute" top="0" left="0" height="989" width="644">
<text top="46" left="215" width="3" height="12" font="4"> </text>
<text top="46" left="247" width="294" height="12" font="4">ELF-Based Computer Virus Prevention Technologies </text>
<text top="46" left="562" width="24" height="12" font="4">625 </text>
<text top="88" left="108" width="243" height="12" font="2">{ Elf32_Word   p_type;     </text>
<text top="87" left="351" width="122" height="14" font="2">/* Segment type */ </text>
<text top="106" left="108" width="252" height="12" font="2">  Elf32_Off    p_offset;    </text>
<text top="105" left="353" width="154" height="14" font="2">/* Segment file offset */ </text>
<text top="124" left="108" width="243" height="12" font="2">  Elf32_Addr   p_vaddr;    </text>
<text top="123" left="353" width="179" height="14" font="2">/* Segment virtual address */ </text>
<text top="142" left="108" width="225" height="12" font="2">Elf32_Addr   p_paddr;    </text>
<text top="141" left="335" width="189" height="14" font="2">/* Segment physical address */ </text>
<text top="160" left="108" width="243" height="12" font="2">  Elf32_Word    p_filesz;  </text>
<text top="159" left="353" width="159" height="14" font="2">/* Segment size in file */ </text>
<text top="178" left="108" width="243" height="12" font="2">Elf32_Word    p_memsz;     </text>
<text top="177" left="351" width="183" height="14" font="2">/* Segment size in memory */ </text>
<text top="196" left="108" width="234" height="12" font="2">Elf32_Word    p_flags;    </text>
<text top="195" left="342" width="131" height="14" font="2">  /* Segment flags */ </text>
<text top="214" left="108" width="243" height="12" font="2">Elf32_Word    p_align;     </text>
<text top="213" left="351" width="151" height="14" font="2">/* Segment alignment */ </text>
<text top="232" left="108" width="126" height="12" font="2">} Elf32_Phdr; </text>
<text top="261" left="63" width="525" height="14" font="2">The loadable nature of loadable segment (text segment/data segment) in &#34;program </text>
<text top="279" left="63" width="522" height="14" font="2">header&#34; is identified by the member variable p_type and its value is PT_LOAD (1). Just </text>
<text top="297" left="63" width="525" height="14" font="2">as e_shoff in &#34;ELF header&#34;, member p_offset here must be updated after inserting </text>
<text top="315" left="63" width="251" height="14" font="2">parasitic code to point to the new offset.   </text>
<text top="333" left="80" width="507" height="14" font="2">P_vaddr specifies the segment’s staring virtual address. Recalculate e_entry with </text>
<text top="351" left="63" width="525" height="14" font="2">p_vaddr as base address, then we can specify where program stream starts from. </text>
<text top="369" left="63" width="527" height="14" font="2">P_vaddr can be used to specify where program steam starts from. P_filesz and </text>
<text top="387" left="63" width="524" height="14" font="2">p_memsz corresponds respectively to the file size and memory size occupied by this </text>
<text top="405" left="63" width="66" height="14" font="2">segment.  </text>
<text top="423" left="80" width="506" height="14" font="2">.bss section corresponds to uninitialized data section in data segment. Uninitialized </text>
<text top="441" left="63" width="524" height="14" font="2">data is not allowed to occupy file space, but process image must be sure that it can </text>
<text top="459" left="63" width="522" height="14" font="2">allocate sufficient memory space. .bss section resides at the end of data segment and all </text>
<text top="477" left="63" width="388" height="14" font="2">locations that exceed file size are assumed to be in this section.   </text>
<text top="525" left="63" width="19" height="14" font="7"><b>4.2</b></text>
<text top="525" left="82" width="4" height="14" font="7"><b> </b></text>
<text top="525" left="106" width="240" height="14" font="7"><b>Algorithm of Virus Infection Process </b></text>
<text top="558" left="63" width="451" height="14" font="2">Check whether a file is executable file with ELF format, if not then return. </text>
<text top="576" left="80" width="505" height="14" font="2">Put a patch for setting real address on an offset location of virus program (This offset </text>
<text top="594" left="63" width="526" height="14" font="2">location is got through: memory address of this location through disassembly – </text>
<text top="612" left="63" width="246" height="14" font="2">memory starting location of virus code). </text>
<text top="630" left="80" width="506" height="14" font="2">Find whether there is sufficient space at the end of the Text Segment of this file to </text>
<text top="648" left="63" width="223" height="14" font="2">put the virus code, if not then return. </text>
<text top="666" left="80" width="219" height="14" font="2">Fill the virus length to PAGE_SIZE </text>
<text top="684" left="80" width="506" height="14" font="2">Change p_filesz and p_memsz of this Text Segment and the actual length of virus </text>
<text top="702" left="63" width="211" height="14" font="2">code (not to fill it to PAGE_SIZE) </text>
<text top="720" left="80" width="506" height="14" font="2">Change program entry to point to entry of virus program (p_vaddr + above updated </text>
<text top="738" left="63" width="56" height="14" font="2">p_filesz) </text>
<text top="756" left="80" width="507" height="14" font="2">Add PAGE_SIZE for p_offset of all Segments, whose addresses reside behind of </text>
<text top="774" left="63" width="70" height="14" font="2">virus code. </text>
<text top="792" left="80" width="505" height="14" font="2">Find Section who points to the end of Text Segment and add the length of virus code </text>
<text top="810" left="63" width="191" height="14" font="2">for the sh_size of this Section.   </text>
<text top="828" left="80" width="507" height="14" font="2">Add PAGE_SIZE for p_offset of all Segments, whose addresses reside behind of </text>
<text top="846" left="63" width="70" height="14" font="2">virus code. </text>
<text top="864" left="80" width="308" height="14" font="2">Change e_shoff and PAGE_SIZE in elf header file </text>
</page>
<page number="6" position="absolute" top="0" left="0" height="989" width="644">
<text top="46" left="63" width="140" height="12" font="4">626        Y. Li and J. Yan </text>
<text top="87" left="80" width="505" height="14" font="2">Create a temporary file to copy above changed structure and original data, and insert </text>
<text top="105" left="63" width="241" height="14" font="2">virus code at the end of Text Segment.   </text>
<text top="122" left="78" width="507" height="14" font="2">Use chown and chmod to change the owner property and permission property of this </text>
<text top="138" left="63" width="522" height="14" font="2">temporary file to the property consistent with that of this file and use rename to replace </text>
<text top="155" left="63" width="53" height="14" font="2">this file. </text>
<text top="197" left="63" width="9" height="16" font="6"><b>5</b></text>
<text top="197" left="72" width="5" height="17" font="6"><b> </b></text>
<text top="197" left="106" width="315" height="16" font="6"><b>Virus Infection Methods and Prevention </b></text>
<text top="237" left="63" width="523" height="14" font="2">Simply speaking, ELF file virus is to insert binary instructions into an executable file </text>
<text top="255" left="63" width="523" height="14" font="2">and change the entry address of this executable file to point to the entry of virus code, </text>
<text top="273" left="63" width="426" height="14" font="2">and then return to the real address when virus code has been executed. </text>
<text top="316" left="63" width="19" height="14" font="7"><b>5.1</b></text>
<text top="315" left="82" width="4" height="14" font="7"><b> </b></text>
<text top="316" left="106" width="117" height="14" font="7"><b>Overlay Infection </b></text>
<text top="348" left="63" width="522" height="14" font="2">Virus of this kind is to overlay host simply and its infection process can be described as </text>
<text top="366" left="63" width="169" height="14" font="2">followings by pseudo code: </text>
<text top="397" left="108" width="180" height="12" font="2">infect ( filename ) </text>
<text top="415" left="108" width="423" height="12" font="2">    {        if ( is_executeable( filename ) ) </text>
<text top="433" left="108" width="90" height="12" font="2">        { </text>
<text top="451" left="108" width="351" height="12" font="2">            copy( argv[0], filename ); </text>
<text top="469" left="108" width="135" height="12" font="2">        }    } </text>
<text top="498" left="63" width="523" height="14" font="2">Error will appear in the host program infected by this virus in next run. If the infected </text>
<text top="516" left="63" width="524" height="14" font="2">host program is a system file, the entire system will be crash. Therefore, this virus is </text>
<text top="534" left="63" width="112" height="14" font="2">easy to be found.   </text>
<text top="552" left="80" width="509" height="14" font="2">Because the virus’s ELF header resides at the file beginning, it specifies the </text>
<text top="570" left="63" width="522" height="14" font="2">interrelations of the other part in the executable file just as a road map. ELF header and </text>
<text top="588" left="63" width="524" height="14" font="2">secondary header jointly determine what the essential part of the binary file is. Here </text>
<text top="606" left="63" width="527" height="14" font="2">there is only description of virus but not description of follow-up original host </text>
<text top="624" left="63" width="523" height="14" font="2">information. Thus, strip operation deletes the follow-up original host information that </text>
<text top="642" left="63" width="525" height="14" font="2">they thought as non-essential. Thereby, virus can be found through the file length </text>
<text top="660" left="63" width="240" height="14" font="2">change before and after strip operation. </text>
<text top="704" left="63" width="19" height="14" font="7"><b>5.2</b></text>
<text top="703" left="82" width="4" height="14" font="7"><b> </b></text>
<text top="704" left="106" width="124" height="14" font="7"><b>Fill-Type Infection </b></text>
<text top="743" left="63" width="350" height="14" font="7"><b>5.2.1      Infect through Fill Areas of Section Alignment </b></text>
<text top="760" left="63" width="524" height="14" font="2">In a binary static file with ELF format, it is necessary to make some section headers </text>
<text top="778" left="63" width="524" height="14" font="2">align; thereby related sections may be extended (e.g. the previous section), fill area </text>
<text top="796" left="63" width="523" height="14" font="2">included. Usually, .rodata and .bss section header is aligned at 32 byte boundary. .bss </text>
<text top="814" left="63" width="523" height="14" font="2">section can not be used because it does not occupy actually the image space of binary </text>
<text top="832" left="63" width="526" height="14" font="2">static file with ELF format. Data corresponding to .bss are all zero and can be </text>
<text top="850" left="63" width="525" height="14" font="2">dynamically created when loading. .rodata section occupies file space. .fini section </text>
<text top="868" left="63" width="523" height="14" font="2">resides in front of .rodata section. When view .fini section size and file offset, you will </text>
<text top="886" left="63" width="523" height="14" font="2">find that .rodata section header is larger than .fini section end, and the difference is the </text>
</page>
<page number="7" position="absolute" top="0" left="0" height="989" width="644">
<text top="46" left="215" width="3" height="12" font="4"> </text>
<text top="46" left="247" width="294" height="12" font="4">ELF-Based Computer Virus Prevention Technologies </text>
<text top="46" left="562" width="24" height="12" font="4">627 </text>
<text top="87" left="63" width="523" height="14" font="2">fill area after alignment and can be used by virus. This alignment fill is usually small, </text>
<text top="105" left="63" width="525" height="14" font="2">16 bytes in length at average. However, some small function can be put, e.g. time </text>
<text top="123" left="63" width="42" height="14" font="2">bomb. </text>
<text top="159" left="63" width="361" height="14" font="7"><b>5.2.2      Infect through Fill Areas of Function Alignment </b></text>
<text top="177" left="63" width="522" height="14" font="2">In much architecture, function header should also be aligned, especially when gcc uses </text>
<text top="195" left="63" width="523" height="14" font="2">-O2 and higher optimization switch. Thereby some fill area in front of function header </text>
<text top="213" left="63" width="83" height="14" font="2">can be used.   </text>
<text top="231" left="80" width="511" height="14" font="2">Compression technology / Decompression technology can also be considered. </text>
<text top="249" left="63" width="523" height="14" font="2">Compress host image and implant virus or parasite into the extra space. If the size is still </text>
<text top="267" left="63" width="522" height="14" font="2">smaller than the original size, the extra space should be filled to maintain the original size. </text>
<text top="285" left="63" width="523" height="14" font="2">A secret of this technology is to make sure that size of code segment and data segment </text>
<text top="303" left="63" width="523" height="14" font="2">should have the consistent size at least with that in the original host, this is because that </text>
<text top="321" left="63" width="522" height="14" font="2">the host must reside at its original loading address after being decompressed. Please note, </text>
<text top="339" left="63" width="387" height="14" font="2">host at this time will be non-relocatable or position-independent.   </text>
<text top="375" left="63" width="246" height="14" font="7"><b>5.2.3      Implant Virus Using Fill Area </b></text>
<text top="393" left="63" width="522" height="14" font="2">Implant virus into the fill area at the end of code segment or between code segment and </text>
<text top="411" left="63" width="522" height="14" font="2">data segment. In ELF format, data segment does not always start from a new page and </text>
<text top="429" left="63" width="522" height="14" font="2">code segment may not end at page border. When process virus with ELF format, filling </text>
<text top="447" left="63" width="522" height="14" font="2">must be used accompanied to make the insert part to be an integral multiple of page size </text>
<text top="465" left="63" width="451" height="14" font="2">if the virus size is not the integral multiple of page size when insert virus.   </text>
<text top="508" left="63" width="19" height="14" font="7"><b>5.3</b></text>
<text top="508" left="82" width="4" height="14" font="7"><b> </b></text>
<text top="508" left="106" width="235" height="14" font="7"><b>Code Segment Infection Technology </b></text>
<text top="541" left="63" width="522" height="14" font="2">This method is intended to implant virus in the front section of code segment so that the </text>
<text top="559" left="63" width="524" height="14" font="2">changed program entry point resides still in the code segment but not data segment. </text>
<text top="577" left="63" width="522" height="14" font="2">Nothing will be affected even if data segment is not allowed to be executable by kernel. </text>
<text top="595" left="63" width="523" height="14" font="2">Kernel is possible to provide system call to change the properties of memory areas, at </text>
<text top="613" left="63" width="522" height="14" font="2">this time code of small paragraph can be put in the code segment to complete the setting </text>
<text top="631" left="63" width="504" height="14" font="2">of executable data segment. Code of large paragraph can be stored in data segment. </text>
<text top="649" left="80" width="507" height="14" font="2">Code segment infection can not be used for a.out format because it does not hold </text>
<text top="667" left="63" width="522" height="14" font="2">p_offset and p_vaddr member like ELF format. If virus is inserted into the front section </text>
<text top="685" left="63" width="524" height="14" font="2">of code segment, the absolute address reference in the original code segment will go </text>
<text top="703" left="63" width="54" height="14" font="2">wrong.  </text>
<text top="746" left="63" width="19" height="14" font="7"><b>5.4</b></text>
<text top="746" left="82" width="4" height="14" font="7"><b> </b></text>
<text top="746" left="106" width="155" height="14" font="7"><b>Data Segment Infection </b></text>
<text top="779" left="63" width="523" height="14" font="2">Another ELF infection method is to extend data segment. Virus will parasitize at the </text>
<text top="797" left="63" width="522" height="14" font="2">extended space and infect files through being included in the inserted parasitic code by </text>
<text top="815" left="63" width="92" height="14" font="2">data segment.   </text>
<text top="833" left="80" width="507" height="14" font="2">The application scope of this method is relatively narrow and it is easy to detect </text>
<text top="851" left="63" width="523" height="14" font="2">virus. When detect virus, we only need to execute strip command or view whether the </text>
<text top="869" left="63" width="523" height="14" font="2">entry point in ELF header has normal pointing, i.e. whether the entry point is pointing </text>
<text top="887" left="63" width="190" height="14" font="2">to the content in text segment.   </text>
</page>
<page number="8" position="absolute" top="0" left="0" height="989" width="644">
	<fontspec id="8" size="11" family="Times" color="#000000"/>
<text top="46" left="63" width="140" height="12" font="4">628        Y. Li and J. Yan </text>
<text top="89" left="63" width="9" height="16" font="6"><b>6</b></text>
<text top="89" left="72" width="5" height="17" font="6"><b> </b></text>
<text top="89" left="106" width="277" height="16" font="6"><b>Conclusions and Recommendations </b></text>
<text top="125" left="63" width="523" height="14" font="2">In the age of network, computer viruses are everywhere and it is impossible to guard </text>
<text top="142" left="63" width="524" height="14" font="2">against them. Viruses can use vulnerabilities in computer operating system to spread </text>
<text top="159" left="63" width="526" height="14" font="2">themselves, thereby improve the system security is an important aspect of virus </text>
<text top="176" left="63" width="523" height="14" font="2">prevention. However, perfect system does not exist in this world. For safety reasons, </text>
<text top="194" left="63" width="522" height="14" font="2">individual users should regularly update the virus database of newly installed anti-virus </text>
<text top="211" left="63" width="523" height="14" font="2">software. In addition to the self-inspection function of software, users should run the </text>
<text top="228" left="63" width="522" height="14" font="2">anti-virus software non-regularly to inspect and kill viruses. For unit user, the meaning </text>
<text top="245" left="63" width="524" height="14" font="2">of virus prevention is not just limited to viruses’ inspection and killing. In large and </text>
<text top="263" left="63" width="522" height="14" font="2">medium network having certain conditions, software and hardware should both be used </text>
<text top="280" left="63" width="525" height="14" font="2">to form dimensional prevention from viruses. In addition to install outside network </text>
<text top="297" left="63" width="522" height="14" font="2">firewall, anti-virus gateway and router at the access of Internet, application server in the </text>
<text top="314" left="63" width="529" height="14" font="2">service area should also be provided with virus server and intranet firewall. </text>
<text top="332" left="63" width="479" height="14" font="2">Furthermore, anti-software should be installed for every user to shut virus out.   </text>
<text top="376" left="63" width="88" height="16" font="6"><b>References </b></text>
<text top="412" left="70" width="517" height="12" font="4">1.  Kim, E.Y., Lee, C.H., Oh, H.G., Lee, J.S.: The System Modeling for Detections of New </text>
<text top="428" left="89" width="497" height="12" font="4">Malicious Codes. In: Dongarra, J., Madsen, K., Waśniewski, J. (eds.) PARA 2004. LNCS, </text>
<text top="445" left="89" width="288" height="12" font="4">vol. 3732, pp. 992–999. Springer, Heidelberg (2006) </text>
<text top="461" left="70" width="521" height="12" font="4">2.  Tool Interface Standards (TIS) Committee, Executable and Linking Format (ELF) </text>
<text top="478" left="89" width="212" height="12" font="4">Specification, Version 1.2 (May 1995) </text>
<text top="494" left="70" width="515" height="12" font="4">3.  Kim, S.-S., Choi, C., Choi, J., Kim, P.-K., Kim, H.: A Method for Efficient Malicious Code </text>
<text top="511" left="89" width="498" height="12" font="4">Detection Based on Conceptual Similarity. In: Gavrilova, M.L., Gervasi, O., Kumar, V., </text>
<text top="527" left="89" width="500" height="12" font="4">Tan, C.J.K., Taniar, D., Laganá, A., Mun, Y., Choo, H. (eds.) ICCSA 2006. LNCS, </text>
<text top="544" left="89" width="288" height="12" font="4">vol. 3983, pp. 567–576. Springer, Heidelberg (2006) </text>
<text top="560" left="70" width="499" height="12" font="4">4.  AT&amp;T, The Santa Cruz Operation, Inc. System V Application Binary Interface, Intel386</text>
<text top="558" left="569" width="14" height="8" font="3">TM</text>
<text top="560" left="582" width="3" height="12" font="4"> </text>
<text top="577" left="89" width="234" height="12" font="4">Architecture Processor Supplement. 4 edn. </text>
<text top="593" left="70" width="516" height="12" font="4">5.  Schultz, M.G., Eskin, E., Zadok, E., Stolfo, S.: Data mining for detection of new malicious </text>
<text top="610" left="89" width="498" height="12" font="4">executables. In: Proc. of the 2001 IEEE Symposium on Security and Privacy, pp. 38–49. </text>
<text top="626" left="89" width="183" height="12" font="4">IEEE press, Los Alamitos (2001) </text>
<text top="643" left="70" width="516" height="12" font="4">6.  Tian, H.T., Huang, L.S., Zhou, Z., et al.: Arm up Administrators: Automated Vulnerability </text>
<text top="659" left="89" width="497" height="12" font="4">Management. In: Proceedings of the 7th International Symposiumon Parallel Architectures, </text>
<text top="676" left="89" width="360" height="12" font="4">Algorithms and Networks, Hongkong, China, pp. 587–593 (2004) </text>
<text top="692" left="70" width="516" height="12" font="4">7.  Hughes, L.A., DeLone, G.J.: Viruses, worms, and Trojan horses-Serious crimes, nuisance, </text>
<text top="709" left="89" width="345" height="12" font="4">or both? Social Science Computer Review 25(1), 78–98 (2007) </text>
<text top="725" left="70" width="522" height="12" font="4">8.  Wang, S.J.: Measures of retaining digital evidence to prosecute computer based </text>
<text top="742" left="89" width="383" height="12" font="4">cybercrimes. Computer Standards &amp; Interfaces 29(2), 216–223 (2007) </text>
<text top="758" left="70" width="515" height="12" font="4">9.  Moffie, M., Cheng, W., Kaeli, D.: Hunting Trojan Horses. In: Proc. of the 1st Workshop on </text>
<text top="775" left="89" width="499" height="12" font="4">Architectural and System Support for Improving Software Dependability (ASID 2006), </text>
<text top="791" left="89" width="205" height="12" font="4">California, pp. 12–17 (October 2006) </text>
<text top="808" left="63" width="523" height="12" font="4">10.  Reddy, D.K.S., Dash, S.K., Pujari, A.K.: New Malicious Code Detection Using Variable </text>
<text top="824" left="89" width="500" height="12" font="4">Length  <i>n</i>-grams. In: Bagchi, A., Atluri, V. (eds.) ICISS 2006. LNCS, vol. 4332, pp. </text>
<text top="841" left="89" width="210" height="12" font="4">276–288. Springer, Heidelberg (2006) </text>
</page>
</pdf2xml>
