<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="0" size="16" family="Times" color="#000000"/>
<text top="112" left="474" width="5" height="16" font="0"> </text>
<text top="132" left="474" width="5" height="16" font="0"> </text>
<text top="153" left="474" width="5" height="16" font="0"> </text>
<text top="174" left="474" width="5" height="16" font="0"> </text>
<text top="195" left="474" width="5" height="16" font="0"> </text>
<text top="215" left="196" width="561" height="16" font="0">ACCELERATION OF A LOCALLY TUNED SINE NON LINEAR VIDEO </text>
<text top="236" left="474" width="5" height="16" font="0"> </text>
<text top="257" left="302" width="348" height="16" font="0">ENHANCEMENT ALGORITHM ON GPGPU </text>
<text top="278" left="474" width="5" height="16" font="0"> </text>
<text top="298" left="474" width="5" height="16" font="0"> </text>
<text top="319" left="474" width="5" height="16" font="0"> </text>
<text top="340" left="450" width="52" height="16" font="0">Thesis </text>
<text top="360" left="474" width="5" height="16" font="0"> </text>
<text top="381" left="428" width="97" height="16" font="0">Submitted to </text>
<text top="402" left="474" width="5" height="16" font="0"> </text>
<text top="422" left="353" width="245" height="16" font="0">The School of Engineering of the </text>
<text top="443" left="474" width="5" height="16" font="0"> </text>
<text top="464" left="366" width="221" height="16" font="0">UNIVERSITY OF DAYTON </text>
<text top="485" left="474" width="5" height="16" font="0"> </text>
<text top="505" left="474" width="5" height="16" font="0"> </text>
<text top="526" left="474" width="5" height="16" font="0"> </text>
<text top="547" left="310" width="333" height="16" font="0">In Partial Fulfillment of the Requirements for </text>
<text top="567" left="474" width="5" height="16" font="0"> </text>
<text top="588" left="422" width="109" height="16" font="0">The Degree of </text>
<text top="609" left="474" width="5" height="16" font="0"> </text>
<text top="629" left="317" width="319" height="16" font="0">Master of Science in Electrical Engineering </text>
<text top="650" left="474" width="5" height="16" font="0"> </text>
<text top="671" left="474" width="5" height="16" font="0"> </text>
<text top="692" left="474" width="5" height="16" font="0"> </text>
<text top="712" left="463" width="25" height="16" font="0">By </text>
<text top="733" left="474" width="5" height="16" font="0"> </text>
<text top="754" left="407" width="138" height="16" font="0">Julian Daniel John </text>
<text top="775" left="474" width="5" height="16" font="0"> </text>
<text top="795" left="427" width="98" height="16" font="0">Dayton Ohio </text>
<text top="816" left="474" width="5" height="16" font="0"> </text>
<text top="836" left="414" width="123" height="16" font="0">December, 2011 </text>
<text top="857" left="474" width="5" height="16" font="0"> </text>
<text top="1006" left="537" width="5" height="16" font="0"> </text>
<text top="1040" left="162" width="5" height="16" font="0"> </text>
<text top="1079" left="162" width="5" height="16" font="0"> </text>
<text top="1118" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="1" size="14" family="Times" color="#000000"/>
<text top="1180" left="470" width="11" height="17" font="1">ii </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="0"> </text>
<text top="132" left="474" width="5" height="16" font="0"> </text>
<text top="153" left="474" width="5" height="16" font="0"> </text>
<text top="174" left="474" width="5" height="16" font="0"> </text>
<text top="195" left="474" width="5" height="16" font="0"> </text>
<text top="215" left="196" width="561" height="16" font="0">ACCELERATION OF A LOCALLY TUNED SINE NON LINEAR VIDEO </text>
<text top="236" left="474" width="5" height="16" font="0"> </text>
<text top="257" left="302" width="348" height="16" font="0">ENHANCEMENT ALGORITHM ON GPGPU </text>
<text top="278" left="162" width="5" height="16" font="0"> </text>
<text top="298" left="162" width="5" height="16" font="0"> </text>
<text top="319" left="162" width="195" height="16" font="0">Name: John, Julian Daniel </text>
<text top="340" left="162" width="5" height="16" font="0"> </text>
<text top="360" left="162" width="134" height="16" font="0">APPROVED BY: </text>
<text top="381" left="162" width="5" height="16" font="0"> </text>
<text top="402" left="162" width="5" height="16" font="0"> </text>
<text top="422" left="162" width="5" height="16" font="0"> </text>
<text top="443" left="162" width="5" height="16" font="0"> </text>
<text top="464" left="162" width="475" height="16" font="0">Tarek Taha, Ph.D.                                             Eric Balster, Ph.D. </text>
<text top="485" left="162" width="485" height="16" font="0">Advisory Committee Chairman                        Committee Member </text>
<text top="505" left="162" width="479" height="16" font="0">Associate Professor                                           Assistant Professor </text>
<text top="526" left="162" width="609" height="16" font="0">Electrical and Computer Engineering               Electrical and Computer Engineering </text>
<text top="547" left="162" width="5" height="16" font="0"> </text>
<text top="567" left="162" width="5" height="16" font="0"> </text>
<text top="588" left="162" width="5" height="16" font="0"> </text>
<text top="609" left="162" width="5" height="16" font="0"> </text>
<text top="629" left="162" width="5" height="16" font="0"> </text>
<text top="650" left="162" width="5" height="16" font="0"> </text>
<text top="671" left="162" width="5" height="16" font="0"> </text>
<text top="692" left="162" width="344" height="16" font="0">                                          Vijayan Asari, Ph.D. </text>
<text top="712" left="162" width="339" height="16" font="0">                                          Committee Member </text>
<text top="733" left="162" width="435" height="16" font="0">                                          Ohio Research Scholar and Chair </text>
<text top="754" left="162" width="462" height="16" font="0">                                          Electrical and Computer Engineering </text>
<text top="775" left="162" width="5" height="16" font="0"> </text>
<text top="795" left="162" width="5" height="16" font="0"> </text>
<text top="816" left="162" width="5" height="16" font="0"> </text>
<text top="836" left="162" width="5" height="16" font="0"> </text>
<text top="857" left="162" width="5" height="16" font="0"> </text>
<text top="878" left="162" width="5" height="16" font="0"> </text>
<text top="899" left="162" width="5" height="16" font="0"> </text>
<text top="919" left="162" width="5" height="16" font="0"> </text>
<text top="940" left="162" width="5" height="16" font="0"> </text>
<text top="961" left="162" width="514" height="16" font="0">John G Weber, Ph.D.                                             Tony E Saliba, Ph.D. </text>
<text top="982" left="162" width="569" height="16" font="0">Associate Dean                                                      Dean, School of Engineering </text>
<text top="1002" left="162" width="690" height="16" font="0">School of Engineering                                           &amp; Wilke Distinguished Professor                     </text>
<text top="1023" left="162" width="5" height="16" font="0"> </text>
<text top="1044" left="162" width="5" height="16" font="0"> </text>
<text top="1064" left="162" width="5" height="16" font="0"> </text>
<text top="1085" left="162" width="5" height="16" font="0"> </text>
<text top="1106" left="162" width="5" height="16" font="0"> </text>
<text top="1126" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="2" size="16" family="Times" color="#000000"/>
<text top="1180" left="468" width="15" height="17" font="1">iii </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="132" left="162" width="5" height="16" font="0"> </text>
<text top="153" left="162" width="5" height="16" font="0"> </text>
<text top="174" left="162" width="5" height="16" font="0"> </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="215" left="162" width="5" height="16" font="0"> </text>
<text top="236" left="162" width="5" height="16" font="0"> </text>
<text top="257" left="162" width="5" height="16" font="0"> </text>
<text top="278" left="162" width="5" height="16" font="0"> </text>
<text top="298" left="162" width="5" height="16" font="0"> </text>
<text top="319" left="162" width="5" height="16" font="0"> </text>
<text top="340" left="162" width="5" height="16" font="0"> </text>
<text top="360" left="162" width="5" height="16" font="0"> </text>
<text top="381" left="162" width="5" height="16" font="0"> </text>
<text top="402" left="474" width="5" height="16" font="0"> </text>
<text top="422" left="474" width="5" height="16" font="0"> </text>
<text top="443" left="474" width="5" height="16" font="0"> </text>
<text top="464" left="474" width="5" height="16" font="0"> </text>
<text top="485" left="474" width="5" height="16" font="0"> </text>
<text top="505" left="474" width="5" height="16" font="0"> </text>
<text top="526" left="474" width="5" height="16" font="0"> </text>
<text top="547" left="474" width="5" height="16" font="0"> </text>
<text top="567" left="474" width="5" height="16" font="0"> </text>
<text top="588" left="474" width="5" height="16" font="0"> </text>
<text top="609" left="474" width="5" height="16" font="0"> </text>
<text top="629" left="474" width="5" height="16" font="0"> </text>
<text top="650" left="417" width="118" height="16" font="0">© Copyright by </text>
<text top="671" left="474" width="5" height="16" font="0"> </text>
<text top="692" left="407" width="138" height="16" font="0">Julian Daniel John </text>
<text top="712" left="474" width="5" height="16" font="0"> </text>
<text top="733" left="407" width="138" height="16" font="0">All rights reserved </text>
<text top="754" left="474" width="5" height="16" font="0"> </text>
<text top="775" left="456" width="41" height="16" font="0">2011 </text>
<text top="795" left="162" width="5" height="16" font="0"> </text>
<text top="816" left="162" width="5" height="16" font="0"> </text>
<text top="836" left="162" width="5" height="16" font="0"> </text>
<text top="857" left="162" width="5" height="16" font="0"> </text>
<text top="878" left="162" width="5" height="16" font="0"> </text>
<text top="899" left="162" width="5" height="16" font="0"> </text>
<text top="919" left="162" width="5" height="16" font="0"> </text>
<text top="958" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1000" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1042" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1070" left="162" width="4" height="17" font="1"> </text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="3" size="16" family="Times" color="#000000"/>
<text top="1180" left="468" width="15" height="17" font="1">iv </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="154" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="196" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="238" left="425" width="102" height="16" font="2"><b>ABSTRACT </b></text>
<text top="266" left="162" width="5" height="16" font="0"> </text>
<text top="286" left="162" width="5" height="16" font="0"> </text>
<text top="307" left="162" width="5" height="16" font="0"> </text>
<text top="328" left="196" width="561" height="16" font="0">ACCELERATION OF A LOCALLY TUNED SINE NON LINEAR VIDEO </text>
<text top="349" left="474" width="5" height="16" font="0"> </text>
<text top="369" left="302" width="348" height="16" font="0">ENHANCEMENT ALGORITHM ON GPGPU </text>
<text top="390" left="162" width="5" height="16" font="0"> </text>
<text top="410" left="162" width="5" height="16" font="0"> </text>
<text top="431" left="162" width="195" height="16" font="0">Name: John, Julian Daniel </text>
<text top="452" left="162" width="158" height="16" font="0">University of Dayton </text>
<text top="473" left="162" width="5" height="16" font="0"> </text>
<text top="493" left="162" width="182" height="16" font="0">Advisor: Dr. Tarek Taha </text>
<text top="514" left="162" width="5" height="16" font="0"> </text>
<text top="535" left="162" width="5" height="16" font="0"> </text>
<text top="556" left="162" width="628" height="16" font="0">            Computer Vision based applications support various domains such as medical, </text>
<text top="597" left="162" width="627" height="16" font="0">manufacturing, military intelligence and surveillance systems. These applications can </text>
<text top="638" left="162" width="627" height="16" font="0">be  divided  into:  image  acquisition,  pre-processing,  feature  extraction,  detection  or </text>
<text top="680" left="162" width="628" height="16" font="0">segmentation, and high-level processing. However these tasks are time intensive due </text>
<text top="721" left="162" width="335" height="16" font="0">to the compute bound nature of the algorithm. </text>
<text top="763" left="162" width="5" height="16" font="0"> </text>
<text top="804" left="162" width="627" height="16" font="0">            In this thesis, an algorithm, based on an image dependent nonlinear function, </text>
<text top="845" left="162" width="628" height="16" font="0">the  Locally  Tuned  Sine  Nonlinearity  (LTSN),  is  accelerated  using  NVIDIA’s </text>
<text top="887" left="162" width="628" height="16" font="0">Computer Unified Device  Architecture (CUDA) and the CPU.  The  main core of the </text>
<text top="928" left="162" width="628" height="16" font="0">algorithm is a nonlinear sine transfer function which is very flexible in enhancing the </text>
<text top="970" left="162" width="628" height="16" font="0">dark  regions  and  compressing  overexposed  regions  of  an  image.  The  video </text>
<text top="1011" left="162" width="627" height="16" font="0">enhancement algorithm gave 21 frames per second compared to 9 frames per second </text>
<text top="1053" left="162" width="627" height="16" font="0">for a 480p video. It is envisaged that the new technique would be useful for improving </text>
<text top="1094" left="162" width="618" height="16" font="0">the visibility of scenes of night time driving and night security situations in real time. </text>
<text top="1135" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="470" width="11" height="17" font="1">v </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="132" left="162" width="5" height="16" font="0"> </text>
<text top="153" left="162" width="5" height="16" font="0"> </text>
<text top="174" left="162" width="5" height="16" font="0"> </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="215" left="162" width="5" height="16" font="0"> </text>
<text top="236" left="162" width="5" height="16" font="0"> </text>
<text top="257" left="162" width="5" height="16" font="0"> </text>
<text top="278" left="162" width="5" height="16" font="0"> </text>
<text top="298" left="162" width="5" height="16" font="0"> </text>
<text top="319" left="162" width="5" height="16" font="0"> </text>
<text top="340" left="162" width="5" height="16" font="0"> </text>
<text top="360" left="162" width="5" height="16" font="0"> </text>
<text top="381" left="162" width="5" height="16" font="0"> </text>
<text top="402" left="162" width="5" height="16" font="0"> </text>
<text top="422" left="162" width="5" height="16" font="0"> </text>
<text top="443" left="162" width="5" height="16" font="0"> </text>
<text top="464" left="162" width="5" height="16" font="0"> </text>
<text top="485" left="162" width="5" height="16" font="0"> </text>
<text top="505" left="162" width="5" height="16" font="0"> </text>
<text top="526" left="353" width="247" height="16" font="0">Dedicated to my wife and parents </text>
<text top="547" left="162" width="5" height="16" font="0"> </text>
<text top="567" left="162" width="5" height="16" font="0"> </text>
<text top="588" left="162" width="5" height="16" font="0"> </text>
<text top="609" left="162" width="5" height="16" font="0"> </text>
<text top="629" left="162" width="5" height="16" font="0"> </text>
<text top="650" left="162" width="5" height="16" font="0"> </text>
<text top="671" left="162" width="5" height="16" font="0"> </text>
<text top="692" left="162" width="5" height="16" font="0"> </text>
<text top="712" left="162" width="5" height="16" font="0"> </text>
<text top="733" left="162" width="5" height="16" font="0"> </text>
<text top="754" left="162" width="5" height="16" font="0"> </text>
<text top="775" left="162" width="5" height="16" font="0"> </text>
<text top="795" left="162" width="5" height="16" font="0"> </text>
<text top="816" left="162" width="5" height="16" font="0"> </text>
<text top="836" left="162" width="5" height="16" font="0"> </text>
<text top="857" left="162" width="5" height="16" font="0"> </text>
<text top="878" left="162" width="5" height="16" font="0"> </text>
<text top="899" left="162" width="5" height="16" font="0"> </text>
<text top="919" left="162" width="5" height="16" font="0"> </text>
<text top="940" left="162" width="5" height="16" font="0"> </text>
<text top="961" left="162" width="5" height="16" font="0"> </text>
<text top="982" left="162" width="5" height="16" font="0"> </text>
<text top="1002" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="468" width="15" height="17" font="1">vi </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="154" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="196" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="238" left="368" width="217" height="16" font="2"><b>ACKNOWLEDGEMENTS </b></text>
<text top="266" left="162" width="5" height="16" font="0"> </text>
<text top="286" left="162" width="5" height="16" font="0"> </text>
<text top="307" left="162" width="5" height="16" font="0"> </text>
<text top="328" left="162" width="627" height="16" font="0">            This  research  would  not  have  been  possible  without  the  support,  advice  and </text>
<text top="369" left="162" width="627" height="16" font="0">encouragement  of  my  thesis  committee.  I  would  like  to  express  my  gratitude  to  my </text>
<text top="410" left="162" width="628" height="16" font="0">advisor Dr.  Tarek Taha, and the other  members  of the committee Dr. Vijayan  Asari </text>
<text top="452" left="162" width="505" height="16" font="0">and Dr. Eric Balster who were the driving force behind this research.  </text>
<text top="493" left="162" width="63" height="16" font="0">              </text>
<text top="535" left="162" width="627" height="16" font="0">              For  the  pioneering  work  in  Computer  Vision  and  Image  processing  I  am </text>
<text top="576" left="162" width="627" height="16" font="0">grateful to the members of the Vision Lab who helped me tackle issues related to the </text>
<text top="618" left="162" width="627" height="16" font="0">processing of images. I wish to thank the High Performance Lab in helping me tackle </text>
<text top="659" left="162" width="389" height="16" font="0">performance and optimization issues I had in CUDA. </text>
<text top="700" left="162" width="5" height="16" font="0"> </text>
<text top="742" left="162" width="628" height="16" font="0">           Lastly  I  would  like  to thank  Marilyn  Knisley  of  the  Electrical  and  Computer </text>
<text top="783" left="162" width="628" height="16" font="0">Engineering  department  and  Linda  Wallace  of  Graduate  School  in  helping  me  with </text>
<text top="825" left="162" width="285" height="16" font="0">the technicalities of the thesis process.  </text>
<text top="866" left="162" width="5" height="16" font="0"> </text>
<text top="887" left="162" width="5" height="16" font="0"> </text>
<text top="907" left="162" width="5" height="16" font="0"> </text>
<text top="928" left="162" width="5" height="16" font="0"> </text>
<text top="949" left="162" width="5" height="16" font="0"> </text>
<text top="970" left="162" width="5" height="16" font="0"> </text>
<text top="990" left="162" width="5" height="16" font="0"> </text>
<text top="1011" left="162" width="5" height="16" font="0"> </text>
<text top="1032" left="162" width="5" height="16" font="0"> </text>
<text top="1053" left="162" width="5" height="16" font="0"> </text>
<text top="1073" left="162" width="5" height="16" font="0"> </text>
<text top="1094" left="162" width="5" height="16" font="0"> </text>
<text top="1114" left="162" width="5" height="16" font="0"> </text>
<text top="1135" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="4" size="14" family="Times" color="#000000"/>
<text top="1180" left="466" width="19" height="17" font="1">vii </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="132" left="162" width="5" height="16" font="0"> </text>
<text top="153" left="162" width="5" height="16" font="0"> </text>
<text top="174" left="162" width="5" height="16" font="0"> </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="233" left="377" width="199" height="16" font="2"><b>TABLE OF CONTENTS </b></text>
<text top="261" left="162" width="4" height="17" font="1"> </text>
<text top="300" left="162" width="622" height="16" font="0"><a href="pdfxml.html#4">ABSTRACT ............................................................................................................. iv</a></text>
<text top="301" left="785" width="4" height="15" font="4"><a href="pdfxml.html#4"> </a></text>
<text top="338" left="162" width="623" height="16" font="0"><a href="pdfxml.html#6">ACKNOWLEDGEMENTS ...................................................................................... vi</a></text>
<text top="339" left="785" width="4" height="15" font="4"><a href="pdfxml.html#6"> </a></text>
<text top="377" left="162" width="623" height="16" font="0"><a href="pdfxml.html#7">TABLE OF CONTENTS ......................................................................................... vii</a></text>
<text top="378" left="785" width="4" height="15" font="4"><a href="pdfxml.html#7"> </a></text>
<text top="416" left="162" width="622" height="16" font="0"><a href="pdfxml.html#9">LIST OF FIGURES .................................................................................................. ix</a></text>
<text top="417" left="785" width="4" height="15" font="4"><a href="pdfxml.html#9"> </a></text>
<text top="455" left="162" width="623" height="16" font="0"><a href="pdfxml.html#11">LIST OF TABLES ................................................................................................... xi</a></text>
<text top="456" left="785" width="4" height="15" font="4"><a href="pdfxml.html#11"> </a></text>
<text top="494" left="162" width="623" height="16" font="0">1.<a href="pdfxml.html#12"> INTRODUCTION ................................................................................................. 1</a></text>
<text top="495" left="785" width="4" height="15" font="4"><a href="pdfxml.html#12"> </a></text>
<text top="532" left="179" width="610" height="15" font="4"><a href="pdfxml.html#12">1.1 Motivation................................................................................................................... 1 </a></text>
<text top="569" left="179" width="610" height="15" font="4"><a href="pdfxml.html#14">1.2 Algorithm.................................................................................................................... 3 </a></text>
<text top="606" left="179" width="610" height="15" font="4"><a href="pdfxml.html#15">1.3 Platform and Acceleration Results ............................................................................... 4 </a></text>
<text top="643" left="179" width="610" height="15" font="4"><a href="pdfxml.html#15">1.4 Thesis Outline ............................................................................................................. 4 </a></text>
<text top="680" left="162" width="623" height="16" font="0">2.<a href="pdfxml.html#17"> RELATED WORK AND CONTRIBUTIONS ....................................................... 6</a></text>
<text top="681" left="785" width="4" height="15" font="4"><a href="pdfxml.html#17"> </a></text>
<text top="719" left="179" width="527" height="15" font="4"><a href="pdfxml.html#17">2.1 Adaptive and Integrated Neighborhood-Dependent Approach for Nonlinear </a></text>
<text top="740" left="179" width="610" height="15" font="4"><a href="pdfxml.html#17">Enhancement (AINDANE) Algorithm ............................................................................... 6 </a></text>
<text top="777" left="179" width="610" height="15" font="4"><a href="pdfxml.html#20">2.2 An Illuminance-Reflectance Model for Nonlinear Enhancement (IRME) Algorithm .... 9 </a></text>
<text top="814" left="179" width="610" height="15" font="4"><a href="pdfxml.html#24">2.3 Multiple Windowed Inverse Sigmoid Function (MWIS) ............................................ 13 </a></text>
<text top="851" left="179" width="610" height="15" font="4"><a href="pdfxml.html#27">2.4 Summary ................................................................................................................... 16 </a></text>
<text top="888" left="162" width="623" height="16" font="0">3.<a href="pdfxml.html#29"> LOCALLY TUNED SINE NON LINEAR ENHANCEMENT ALGORITHM .... 18</a></text>
<text top="889" left="785" width="4" height="15" font="4"><a href="pdfxml.html#29"> </a></text>
<text top="926" left="179" width="610" height="15" font="4"><a href="pdfxml.html#29">3.1 Adaptive Intensity Enhancement ............................................................................... 18 </a></text>
<text top="963" left="195" width="594" height="15" font="4"><a href="pdfxml.html#29">3.1.1 Intensity Computation......................................................................................... 18 </a></text>
<text top="1000" left="195" width="594" height="15" font="4"><a href="pdfxml.html#30">3.1.2 Enhancement of Dark and Compression of Bright Pixels ..................................... 19 </a></text>
<text top="1037" left="195" width="594" height="15" font="4"><a href="pdfxml.html#33">3.1.3 Calculation of Mean Image ................................................................................. 22 </a></text>
<text top="1074" left="195" width="594" height="15" font="4"><a href="pdfxml.html#34">3.1.4 High Frequency Boosting ................................................................................... 23 </a></text>
<text top="1111" left="179" width="610" height="15" font="4"><a href="pdfxml.html#36">3.2 Contrast Enhancement ............................................................................................... 25 </a></text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="5" size="14" family="Times" color="#000000"/>
<text top="1180" left="464" width="22" height="17" font="1">viii </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="111" left="195" width="594" height="15" font="4"><a href="pdfxml.html#36">3.2.1 Acquiring the Intensity Information of Surrounding Pixels .................................. 25 </a></text>
<text top="148" left="195" width="594" height="15" font="4"><a href="pdfxml.html#38">3.2.2 Intensity Transformation Process ........................................................................ 27 </a></text>
<text top="185" left="195" width="594" height="15" font="4"><a href="pdfxml.html#38">3.2.3 Contrast Enhancement with Multi-level Convolution Results .............................. 27 </a></text>
<text top="222" left="195" width="594" height="15" font="4"><a href="pdfxml.html#39">3.2.4 Auto Levels ........................................................................................................ 28 </a></text>
<text top="259" left="179" width="610" height="15" font="4"><a href="pdfxml.html#40">3.3 Color Restoration ...................................................................................................... 29 </a></text>
<text top="295" left="179" width="610" height="15" font="4"><a href="pdfxml.html#41">3.4 Summary ................................................................................................................... 30 </a></text>
<text top="333" left="162" width="623" height="16" font="0">4.<a href="pdfxml.html#42"> GPGPU PLATFORM .......................................................................................... 31</a></text>
<text top="334" left="785" width="4" height="15" font="4"><a href="pdfxml.html#42"> </a></text>
<text top="371" left="179" width="610" height="15" font="4"><a href="pdfxml.html#43">4.1 GPU Hardware Architecture ...................................................................................... 32 </a></text>
<text top="408" left="195" width="594" height="15" font="4"><a href="pdfxml.html#44">4.1.1 Third Generation Streaming Multiprocessor ........................................................ 33 </a></text>
<text top="445" left="195" width="594" height="15" font="4"><a href="pdfxml.html#46">4.1.2 Fermi Dual Scheduler ......................................................................................... 35 </a></text>
<text top="482" left="179" width="610" height="15" font="4"><a href="pdfxml.html#47">4.2 GPU Software Model ................................................................................................ 36 </a></text>
<text top="519" left="195" width="594" height="15" font="4"><a href="pdfxml.html#48">4.2.1 Hardware Execution ........................................................................................... 37 </a></text>
<text top="556" left="162" width="623" height="16" font="0">5.<a href="pdfxml.html#49"> CUDA IMPLEMENTATION .............................................................................. 38</a></text>
<text top="557" left="785" width="4" height="15" font="4"><a href="pdfxml.html#49"> </a></text>
<text top="594" left="179" width="610" height="15" font="4"><a href="pdfxml.html#50">5.1 Image Processing with CUDA ................................................................................... 39 </a></text>
<text top="631" left="179" width="610" height="15" font="4"><a href="pdfxml.html#52">5.2 GPU Kernel Processes ............................................................................................... 41 </a></text>
<text top="668" left="162" width="623" height="16" font="0">6.<a href="pdfxml.html#56"> EXPERIMENTAL SETUP AND RESULTS ....................................................... 45</a></text>
<text top="669" left="785" width="4" height="15" font="4"><a href="pdfxml.html#56"> </a></text>
<text top="707" left="179" width="610" height="15" font="4"><a href="pdfxml.html#56">6.1 Profiling .................................................................................................................... 45 </a></text>
<text top="743" left="179" width="610" height="15" font="4"><a href="pdfxml.html#59">6.2 Sine Non Linear Function Performance ..................................................................... 48 </a></text>
<text top="781" left="179" width="610" height="15" font="4"><a href="pdfxml.html#61">6.3 Gaussian Smoothening and Averaging Kernel Performance ....................................... 50 </a></text>
<text top="817" left="179" width="610" height="15" font="4"><a href="pdfxml.html#63">6.4 Color Restoration Kernel Performance ...................................................................... 52 </a></text>
<text top="854" left="179" width="610" height="15" font="4"><a href="pdfxml.html#66">6.5 Overall Algorithm Analysis ....................................................................................... 55 </a></text>
<text top="891" left="162" width="623" height="16" font="0">7.<a href="pdfxml.html#74"> CONCLUSION AND FUTURE WORK ............................................................. 63</a></text>
<text top="892" left="785" width="4" height="15" font="4"><a href="pdfxml.html#74"> </a></text>
<text top="930" left="162" width="623" height="16" font="0"><a href="pdfxml.html#75">REFERENCES ........................................................................................................ 64</a></text>
<text top="931" left="785" width="4" height="15" font="4"><a href="pdfxml.html#75"> </a></text>
<text top="969" left="474" width="4" height="17" font="5"><b> </b></text>
<text top="1007" left="474" width="4" height="17" font="5"><b> </b></text>
<text top="1045" left="474" width="4" height="17" font="5"><b> </b></text>
<text top="1083" left="474" width="4" height="17" font="5"><b> </b></text>
<text top="1121" left="474" width="4" height="17" font="5"><b> </b></text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="468" width="15" height="17" font="1">ix </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="111" left="474" width="4" height="17" font="5"><b> </b></text>
<text top="150" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="189" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="228" left="396" width="160" height="16" font="2"><b>LIST OF FIGURES </b></text>
<text top="252" left="162" width="4" height="17" font="1"> </text>
<text top="288" left="162" width="97" height="16" font="0">Figure           </text>
<text top="288" left="687" width="103" height="16" font="0">Page Number </text>
<text top="326" left="162" width="627" height="16" font="0">    3.1 Flow chart of the Sine Nonlinear Algorithm ................................................... 20 </text>
<text top="365" left="179" width="611" height="16" font="0">3.2 Various curves of Nonlinear Transfer function ............................................... 21 </text>
<text top="404" left="179" width="611" height="16" font="0">4.1 CPU v/s GPU comparison of floating point operations per second .................. 31 </text>
<text top="443" left="179" width="611" height="16" font="0">4.2 Transistor allocations for CPU and GPU ........................................................ 32 </text>
<text top="481" left="179" width="611" height="16" font="0">4.3 Fermi architecture .......................................................................................... 33 </text>
<text top="520" left="179" width="611" height="16" font="0">4.4 Fermi Streaming Multiprocessor .................................................................... 34 </text>
<text top="559" left="179" width="611" height="16" font="0">4.5 The Dual Warp Scheduler  ............................................................................. 35 </text>
<text top="598" left="179" width="611" height="16" font="0">4.6 CUDA Hierarchy of threads, blocks, and grids ............................................... 36 </text>
<text top="637" left="179" width="611" height="16" font="0">5.1 2D hierarchy of blocks and threads for a 48 x 32 pixel image ......................... 40 </text>
<text top="675" left="179" width="611" height="16" font="0">5.2 GPU kernels flow diagram ............................................................................. 43 </text>
<text top="714" left="179" width="611" height="16" font="0">6.1 Complexity profiling of the building blocks of the proposed LTSN algorithm 46 </text>
<text top="753" left="179" width="611" height="16" font="0">6.2 Performance analysis of Sine Nonlinear function............................................ 48 </text>
<text top="792" left="179" width="611" height="16" font="0">6.3 Speedup gained by the Sine Nonlinear function for various image sizes ......... 50 </text>
<text top="831" left="179" width="611" height="16" font="0">6.4 Performance analysis of Gaussian smoothening and averaging ....................... 51 </text>
<text top="870" left="179" width="611" height="16" font="0">6.5 Speedup gained by Gaussian smoothening and averaging ............................... 52 </text>
<text top="908" left="179" width="611" height="16" font="0">6.6 Performance analysis of Color Restoration ..................................................... 53 </text>
<text top="947" left="179" width="611" height="16" font="0">6.7 Speedup gained by Color Restoration ............................................................. 54 </text>
<text top="986" left="179" width="611" height="16" font="0">6.8 Performance analysis of overall CPU+GPU enhanced LTSN algorithm.......... 55 </text>
<text top="1025" left="179" width="604" height="16" font="0">6.9 Speedup achieved by the GPU accelerated LTSN video enhancement algorithm </text>
<text top="1049" left="179" width="611" height="16" font="0">for a frame ........................................................................................................... 57 </text>
<text top="1087" left="179" width="611" height="16" font="0">6.10 Original image and enhanced image ............................................................. 57 </text>
<text top="1126" left="179" width="611" height="16" font="0">6.11 Original image and enhanced image ............................................................. 57 </text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="470" width="11" height="17" font="1">x </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="179" width="611" height="16" font="0">6.12 Original image and enhanced image ............................................................. 58 </text>
<text top="150" left="179" width="611" height="16" font="0">6.13 Original image and enhanced image ............................................................. 58 </text>
<text top="189" left="179" width="611" height="16" font="0">6.14 Original image and enhanced image ............................................................. 59 </text>
<text top="228" left="179" width="611" height="16" font="0">6.15 Original image and enhanced image ............................................................. 59 </text>
<text top="267" left="179" width="611" height="16" font="0">6.16 Original image and enhanced image ............................................................. 60 </text>
<text top="306" left="179" width="611" height="16" font="0">6.17 Original image and enhanced image ............................................................. 60 </text>
<text top="345" left="179" width="611" height="16" font="0">6.18 FPS of the LTSN video enhancement for video resolutions .......................... 61 </text>
<text top="384" left="179" width="534" height="16" font="0">6.19 GPU speed up for the LTSN video enhancement algorithm for video </text>
<text top="407" left="179" width="611" height="16" font="0">resolutions............................................................................................................ 61 </text>
<text top="446" left="162" width="4" height="17" font="1"> </text>
<text top="484" left="162" width="4" height="17" font="1"> </text>
<text top="522" left="162" width="4" height="17" font="1"> </text>
<text top="560" left="162" width="4" height="17" font="1"> </text>
<text top="598" left="162" width="4" height="17" font="1"> </text>
<text top="636" left="162" width="4" height="17" font="1"> </text>
<text top="675" left="162" width="4" height="17" font="1"> </text>
<text top="713" left="162" width="4" height="17" font="1"> </text>
<text top="751" left="162" width="4" height="17" font="1"> </text>
<text top="789" left="162" width="4" height="17" font="1"> </text>
<text top="827" left="162" width="4" height="17" font="1"> </text>
<text top="866" left="162" width="4" height="17" font="1"> </text>
<text top="904" left="162" width="4" height="17" font="1"> </text>
<text top="942" left="162" width="4" height="17" font="1"> </text>
<text top="980" left="162" width="4" height="17" font="1"> </text>
<text top="1019" left="162" width="4" height="17" font="1"> </text>
<text top="1057" left="162" width="4" height="17" font="1"> </text>
<text top="1095" left="162" width="4" height="17" font="1"> </text>
<text top="1133" left="162" width="4" height="17" font="1"> </text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="468" width="15" height="17" font="1">xi </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="111" left="162" width="4" height="17" font="1"> </text>
<text top="171" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="209" left="401" width="151" height="16" font="2"><b>LIST OF TABLES </b></text>
<text top="234" left="162" width="4" height="18" font="3"> </text>
<text top="271" left="162" width="91" height="16" font="0">Table           </text>
<text top="271" left="687" width="103" height="16" font="0">Page Number </text>
<text top="310" left="162" width="627" height="16" font="0">6.1 GPU memory copy time .................................................................................... 47 </text>
<text top="349" left="162" width="627" height="16" font="0">6.2 Execution times and speed up of Sine Nonlinear function  ................................. 49 </text>
<text top="387" left="162" width="627" height="16" font="0">6.3 Execution times and speed up of Gaussian smoothening algorithm .................... 52 </text>
<text top="426" left="162" width="627" height="16" font="0">6.4 Color Restoration GPU kernel timing for 640X480 pixel image ......................... 53 </text>
<text top="465" left="162" width="627" height="16" font="0">6.5 Execution times and speed up of Color Restoration function .............................. 54 </text>
<text top="504" left="162" width="627" height="16" font="0">6.6 Execution times and speed up of LTSN algorithm.............................................. 56 </text>
<text top="543" left="162" width="627" height="16" font="0">6.7 Execution times and speedup of LTSN video algorithm ..................................... 61 </text>
<text top="581" left="162" width="4" height="17" font="1"> </text>
<text top="619" left="162" width="4" height="17" font="1"> </text>
<text top="657" left="162" width="4" height="17" font="1"> </text>
<text top="696" left="162" width="4" height="17" font="1"> </text>
<text top="734" left="162" width="4" height="17" font="1"> </text>
<text top="772" left="162" width="4" height="17" font="1"> </text>
<text top="810" left="162" width="4" height="17" font="1"> </text>
<text top="848" left="162" width="4" height="17" font="1"> </text>
<text top="886" left="162" width="4" height="17" font="1"> </text>
<text top="925" left="162" width="4" height="17" font="1"> </text>
<text top="963" left="162" width="4" height="17" font="1"> </text>
<text top="1001" left="162" width="4" height="17" font="1"> </text>
<text top="1039" left="162" width="4" height="17" font="1"> </text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="6" size="16" family="Times" color="#000000"/>
<text top="1180" left="470" width="12" height="17" font="1">1 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="111" left="162" width="4" height="17" font="1"> </text>
<text top="150" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="192" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="233" left="423" width="106" height="16" font="2"><b>CHAPTER 1 </b></text>
<text top="293" left="402" width="149" height="16" font="2"><b>INTRODUCTION </b></text>
<text top="338" left="162" width="5" height="16" font="0"> </text>
<text top="359" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="380" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="400" left="162" width="627" height="16" font="0">            This  paper  emphasizes  on  the  acceleration  and  efficient  implementation  of  a </text>
<text top="442" left="162" width="628" height="16" font="0">locally  tuned  sine  nonlinear  video  enhancement  algorithm  (LTSN)  [1]  on  Graphics </text>
<text top="483" left="162" width="627" height="16" font="0">Processing  Units  (GPUs).  These  algorithms  are  crucial  components  of  computer </text>
<text top="525" left="162" width="627" height="16" font="0">vision based enhancement algorithms that deal with Signal to Noise ratio (SNR), edge </text>
<text top="566" left="162" width="627" height="16" font="0">sharpness and color accuracy. A real world scene would always have extremely high </text>
<text top="607" left="162" width="627" height="16" font="0">illumination  that  underexposes  the  dark  regions  and  makes  the  low  contrast  regions </text>
<text top="649" left="162" width="627" height="16" font="0">less visible to the human eye. Computer vision experts have strived to enhance such </text>
<text top="690" left="162" width="627" height="16" font="0">real  world  scenes  to  extract  information  from  them  in  applications  such  as  visual </text>
<text top="732" left="162" width="628" height="16" font="0">surveillance, organizing information, modeling objects or environments, navigation of </text>
<text top="773" left="162" width="628" height="16" font="0">robotic systems. The vision of image enhancement and computer vision algorithms is </text>
<text top="814" left="162" width="628" height="16" font="0">to extract images from the real world and interpret them in real time. This thesis deals </text>
<text top="856" left="162" width="627" height="16" font="0">with realizing that dream to make the computer vision based algorithms suited for real </text>
<text top="897" left="162" width="120" height="16" font="0">time operations. </text>
<text top="939" left="162" width="5" height="16" font="0"> </text>
<text top="998" left="162" width="110" height="16" font="6"><i>1.1 Motivation </i></text>
<text top="1044" left="162" width="627" height="16" font="0">           CPU  processor  advances  such  as  the  Intel’s  MMX/SSE  instructions  were </text>
<text top="1085" left="162" width="627" height="16" font="0">introduced  into  their  designs  to  improve  the  performance  significantly  throughout </text>
<text top="1127" left="162" width="627" height="16" font="0">multimedia  applications.  But  CPU  is  usually  heavily  loaded,  due  to  which  it  cannot </text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="470" width="12" height="17" font="1">2 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="628" height="16" font="0">meet the processing power requirements.  Video  enhancement algorithms such as the </text>
<text top="153" left="162" width="627" height="16" font="0">locally  tuned  sine  nonlinear  algorithms  (LTSN)  cannot  be  processed  for  real  time </text>
<text top="195" left="162" width="627" height="16" font="0">applications  even  with  high  computing  power  in  the  present  generation  CPUs.  With </text>
<text top="236" left="162" width="627" height="16" font="0">the  development  of  silicon  technologies,  inexpensive  yet  powerful  graphical </text>
<text top="278" left="162" width="627" height="16" font="0">processing  units  (GPUs)  are  used  today  for  higher  processing  speeds.  The </text>
<text top="319" left="162" width="535" height="16" font="0">computationally intensive part of the algorithm is offloaded to the GPUs.  </text>
<text top="360" left="162" width="5" height="16" font="0"> </text>
<text top="402" left="162" width="627" height="16" font="0">            The GPU  is a  massively parallel device which  is capable of processing  large </text>
<text top="443" left="162" width="627" height="16" font="0">amounts of data to perform various compute and memory bound operations with great </text>
<text top="485" left="162" width="628" height="16" font="0">speed and efficiency without affecting the accuracy of the data. The NVIDIA Fermi </text>
<text top="526" left="162" width="627" height="16" font="0">architecture  chipset  contains  3.0  billion  transistors  which  is  more  than  the  Intel </text>
<text top="567" left="162" width="627" height="16" font="0">Pentium processor. The  internal pipelined processing  fashion  makes  it  more suitable </text>
<text top="609" left="162" width="628" height="16" font="0">for streams processing. The GPU speed grows faster than the famous Moore’s law for </text>
<text top="650" left="162" width="493" height="16" font="0">CPUs, which is 2.4 times a year compared to 2 times in 18 months.  </text>
<text top="692" left="162" width="5" height="16" font="0"> </text>
<text top="733" left="162" width="627" height="16" font="0">            Unlike  previous  generations  of  GPUs  that  partitioned  computing  resources </text>
<text top="775" left="162" width="628" height="16" font="0">into  vertex  and  pixel  shaders,  the  Computer  Unified  Device  Architecture  (CUDA) </text>
<text top="816" left="162" width="627" height="16" font="0">included a uniform shader pipeline, allowing every arithmetic logic unit (ALU) on the </text>
<text top="857" left="162" width="628" height="16" font="0">chip  to  assemble  by  a  program  intending  to  perform  general-purpose  computations. </text>
<text top="899" left="162" width="627" height="16" font="0">NVIDIA intended the CUDA architecture to be used for general purpose computing, </text>
<text top="940" left="162" width="627" height="16" font="0">these  ALUs  were  built  to  comply  with  the  IEEE  requirements  for  single  precision </text>
<text top="982" left="162" width="627" height="16" font="0">floating point arithmetic and were tailored to use an instruction set tailored for general </text>
<text top="1023" left="162" width="627" height="16" font="0">purpose  computation  rather  than  specifically  for  graphics.    The  CUDA  architecture </text>
<text top="1064" left="162" width="627" height="16" font="0">was  added  in  order  to  create  a  GPU  that  would  excel  at  computation  in  addition  to </text>
<text top="1106" left="162" width="332" height="16" font="0">performing well at traditional graphics tasks.  </text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="7" size="16" family="Times" color="#000000"/>
<text top="1180" left="470" width="12" height="17" font="1">3 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="153" left="162" width="627" height="16" font="0">            This  feature of NVIDIA GPUs triggered  a  lot of  interest  in the area of High </text>
<text top="195" left="162" width="628" height="16" font="0">Performance  Computing  (HPC)  due  to  its  powerfulness,  SIMD  operation  and </text>
<text top="236" left="162" width="627" height="16" font="0">programmability. The success achieved for non-graphics oriented applications such as </text>
<text top="278" left="162" width="628" height="16" font="0">numerical computations like basic linear algebra [11] and image processing [5-10] has </text>
<text top="319" left="162" width="628" height="16" font="0">been a driving force for the research on the acceleration of LTSN video enhancement </text>
<text top="360" left="162" width="627" height="16" font="0">algorithms. In [5] the authors presented a technique to multiply large matrices quickly </text>
<text top="402" left="162" width="417" height="16" font="0">using  graphics  hardware.  Strzodka  and  Rumpf </text>
<text top="402" left="596" width="193" height="16" font="0">have  solved  parabolic </text>
<text top="443" left="162" width="628" height="16" font="0">differentialequations fully in graphics hardware using complicated numerical schemes </text>
<text top="485" left="162" width="628" height="16" font="0">[6]. High computation bound operation like FFT on GPU were reported by Doggett <i>et </i></text>
<text top="526" left="162" width="67" height="16" font="6"><i>al</i> in [9]. </text>
<text top="567" left="162" width="5" height="16" font="0"> </text>
<text top="609" left="162" width="628" height="16" font="7"><i><b>            </b></i>In  this  thesis  the  issue  of  the  rendering  time  taken  by  the  enhancement </text>
<text top="650" left="162" width="628" height="16" font="0">algorithm  for  each  frame  was  analyzed  and  studied.  The  processing  time  on  a  CPU </text>
<text top="692" left="162" width="627" height="16" font="0">does not suit the algorithm for real time operations. Achieving high processing speeds </text>
<text top="733" left="162" width="484" height="16" font="0">are essential for various real time applications in computer vision.  </text>
<text top="775" left="162" width="5" height="16" font="0"> </text>
<text top="834" left="162" width="105" height="16" font="6"><i>1.2 Algorithm </i></text>
<text top="880" left="162" width="628" height="16" font="0">            A  Locally  Tuned  Sine  Nonlinearity  (LTSN)  is  proposed  for  enhancing </text>
<text top="921" left="162" width="627" height="16" font="0">extremely high contrast images. The algorithm is a new nonlinear image enhancement </text>
<text top="962" left="162" width="627" height="16" font="0">algorithm,  based  on  an  image  dependent  nonlinear  function.  The  control  parameters </text>
<text top="1004" left="162" width="628" height="16" font="0">are  based  on  image  statistics  and  they  are  determined  adaptively.  The  proposed </text>
<text top="1045" left="162" width="627" height="16" font="0">algorithm  is  capable  of  compressing  bright  regions  and  at  the  same  time  enhancing </text>
<text top="1087" left="162" width="628" height="16" font="0">dark  regions  by  preserving  the  main  structure  of  the  illuminance  -  reflectance </text>
<text top="1128" left="162" width="627" height="16" font="0">characteristics.  The  main  core  of  the  algorithm  is  a  new  nonlinear  sine  transfer </text>
</page>
<page number="15" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="470" width="12" height="17" font="1">4 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">function  that  is  very  flexible  in  enhancing  the  dark  regions  and  compressing </text>
<text top="153" left="162" width="627" height="16" font="0">overexposed  regions  in  an  image.  A  neighborhood  dependent  approach  is  employed </text>
<text top="195" left="162" width="628" height="16" font="0">for  contrast  enhancement.  The  Laplacian  filtered  image  (reflectance)  preserves  the </text>
<text top="236" left="162" width="627" height="16" font="0">finer  details  of  the  enhanced  image.  The  quality  of  the  enhanced  image  is  further </text>
<text top="278" left="162" width="627" height="16" font="0">improved  by  applying  a  contrast  stretch  process.  A  basic  linear  color  restoration </text>
<text top="319" left="162" width="627" height="16" font="0">process  based  on  the  chromatic  information  of  the  original  image  is  employed  to </text>
<text top="360" left="162" width="441" height="16" font="0">convert the enhanced intensity image back to a color image.  </text>
<text top="402" left="162" width="5" height="16" font="0"> </text>
<text top="461" left="162" width="280" height="16" font="6"><i>1.3 Platform and Acceleration Results </i></text>
<text top="507" left="162" width="628" height="16" font="0">            The  rendering  is  done  for  each  pixel  in  a  frame;  the  algorithm  is  a  potential </text>
<text top="548" left="162" width="628" height="16" font="0">candidate for GPU acceleration as it comprises of SIMD instructions. Although SIMD </text>
<text top="590" left="162" width="627" height="16" font="0">instructions  run  well  on  the  GPU,  there  are  certain  functions  that  are  not  too </text>
<text top="631" left="162" width="627" height="16" font="0">computationally  bound  that  processes  faster  on  the  CPU.  Thus  a  benchmarking  and </text>
<text top="673" left="162" width="627" height="16" font="0">profiling operation was done to divide the algorithm into time slices to determine the </text>
<text top="714" left="162" width="627" height="16" font="0">instructions  that  take  the  majority  of  the  processing  time.  The  instructions  that  run </text>
<text top="755" left="162" width="627" height="16" font="0">slower  on  the  CPU  are  more  likely  to  get  a  high  speed  up  when  processed  on  the </text>
<text top="797" left="162" width="628" height="16" font="0">GPU. Therefore a CPU+GPU execution was the best approach to accelerate the LTSN </text>
<text top="838" left="162" width="192" height="16" font="0">algorithm in this research. </text>
<text top="880" left="162" width="5" height="16" font="0"> </text>
<text top="939" left="162" width="136" height="16" font="6"><i>1.4 Thesis Outline </i></text>
<text top="985" left="162" width="627" height="16" font="0">           The rest of the thesis is organized in the following manner. Chapter 2 provides </text>
<text top="1027" left="162" width="627" height="16" font="0">the reader with the background information necessary to understand the research area </text>
<text top="1068" left="162" width="628" height="16" font="0">to  understand  the  implementation  explained  in  the  later  chapters.  The  related  work </text>
<text top="1109" left="162" width="628" height="16" font="0">and  the  contributions  in  the  image  enhancement  field  are  mentioned.  Chapter  3 </text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="470" width="12" height="17" font="1">5 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">describes  the  supporting  work  for  the  algorithms  that  enabled  to  come  up  with  the </text>
<text top="153" left="162" width="627" height="16" font="0">LTSN  algorithm.  Additionally  the  differences  between  the  previous  and  the  current </text>
<text top="195" left="162" width="628" height="16" font="0">algorithm  have  been  mentioned.  Chapter  5  gives  the  CUDA  implementation  of  the </text>
<text top="236" left="162" width="627" height="16" font="0">LTSN  algorithm.  The  details  of  the  GPU  processing  are  mentioned  along  with  their </text>
<text top="278" left="162" width="628" height="16" font="0">mapping into CUDA. Chapter 6 explains the experimental setup, the approaches taken </text>
<text top="319" left="162" width="628" height="16" font="0">to  get  the  final  optimized  code  for  higher  performance  and  the  results  obtained  for </text>
<text top="360" left="162" width="628" height="16" font="0">each  function.  The  speedup  attained  for  the  instructions  processed  on  the  GPU  is </text>
<text top="402" left="162" width="628" height="16" font="0">found by comparing it to the processing time taken for those instructions on the CPU. </text>
<text top="443" left="162" width="628" height="16" font="0">An overall algorithm performance study was done for various frame sizes. Chapter 7 </text>
<text top="485" left="162" width="459" height="16" font="0">details possible extensions for future work and the conclusion.  </text>
<text top="526" left="162" width="5" height="16" font="0"> </text>
<text top="567" left="162" width="5" height="16" font="0"> </text>
<text top="599" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="630" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="661" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="692" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="723" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="754" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="785" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="816" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="847" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="878" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="910" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="941" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="982" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1023" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1065" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1106" left="474" width="5" height="16" font="2"><b> </b></text>
</page>
<page number="17" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="8" size="14" family="Times" color="#000000"/>
<text top="1180" left="470" width="12" height="17" font="1">6 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="154" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="195" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="237" left="423" width="106" height="16" font="2"><b>CHAPTER 2 </b></text>
<text top="296" left="298" width="356" height="16" font="2"><b>RELATED WORK AND CONTRIBUTIONS </b></text>
<text top="321" left="162" width="5" height="16" font="0"> </text>
<text top="341" left="162" width="5" height="16" font="0"> </text>
<text top="362" left="162" width="5" height="16" font="0"> </text>
<text top="383" left="162" width="628" height="16" font="0">             In  this  section  we  review  the  inspirations  behind  the  development  of  the </text>
<text top="424" left="162" width="627" height="16" font="0">LTSN  algorithm.  The  algorithms  that  helped  develop  the  proposed  algorithm  are </text>
<text top="466" left="162" width="299" height="16" font="0">AINDANE, IRME and MWIS methods.  </text>
<text top="507" left="162" width="5" height="16" font="0"> </text>
<text top="566" left="162" width="577" height="16" font="6"><i>2.1 Adaptive and Integrated Neighborhood-Dependent Approach for Nonlinear </i></text>
<text top="608" left="162" width="272" height="16" font="6"><i>Enhancement (AINDANE) Algorithm </i></text>
<text top="655" left="162" width="45" height="15" font="8"><i>        </i>   </text>
<text top="654" left="207" width="582" height="16" font="0">The  AINDANE[11]  algorithm  is  an  adaptive  version  of  the  INDANE </text>
<text top="695" left="162" width="627" height="16" font="0">algorithm.  Similar  to  INDANE,  AINDANE  algorithm  consists  of  two  main  parts: </text>
<text top="737" left="162" width="627" height="16" font="0">Adaptive  luminance  enhancement  and  adaptive  contrast  enhancement.  Adaptive </text>
<text top="778" left="162" width="628" height="16" font="0">luminance enhancement is a nonlinear intensity transformation which is self-tuned by </text>
<text top="820" left="162" width="627" height="16" font="0">the  histogram  statistics  of  the  input  image.  During  intensity  transformation,  the </text>
<text top="861" left="162" width="627" height="16" font="0">luminance  of  the  dark  pixels  is  increased  and  the  dynamic  range  of  the  image  is </text>
<text top="902" left="162" width="628" height="16" font="0">compressed  at  the  same  time.  Adaptive  contrast  enhancement,  which  is  adaptively </text>
<text top="944" left="162" width="627" height="16" font="0">controlled by the global statistics of the image, tunes the intensity of each pixel based </text>
<text top="985" left="162" width="464" height="16" font="0">on its relative magnitude with respect to the neighboring pixels. </text>
<text top="1027" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="470" width="12" height="17" font="1">7 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="628" height="16" font="0">           In AINDANE, the color images are converted to intensity (gray-scale) images, </text>
<text top="153" left="162" width="627" height="16" font="0">using  the  specification  in  the  NTSC  (National  Television  System  Committee) </text>
<text top="195" left="162" width="128" height="16" font="0">standard method. </text>
<text top="236" left="162" width="5" height="16" font="0"> </text>
<text top="302" left="639" width="5" height="16" font="0"> </text>
<text top="339" left="749" width="41" height="16" font="0">(2-1) </text>
<text top="380" left="162" width="623" height="16" font="0">where  R,  G,  and  B  are  the  values  of  the  red,  green  and  blue  color  bands  of  the  tri-</text>
<text top="422" left="162" width="462" height="16" font="0">color images respectively. The image intensity is normalized as </text>
<text top="463" left="162" width="5" height="16" font="0"> </text>
<text top="530" left="541" width="5" height="16" font="0"> </text>
<text top="567" left="749" width="41" height="16" font="0">(2-2) </text>
<text top="608" left="162" width="5" height="16" font="0"> </text>
<text top="650" left="162" width="627" height="16" font="0">            After the image intensity is normalized between 0 and 1, the intensity images </text>
<text top="691" left="162" width="627" height="16" font="0">are treated by a nonlinear transfer function that enhances the dark region of the image </text>
<text top="732" left="162" width="520" height="16" font="0">and compresses the dynamic range. This transfer function is defined as  </text>
<text top="774" left="162" width="5" height="16" font="0"> </text>
<text top="843" left="728" width="5" height="16" font="0"> </text>
<text top="880" left="749" width="41" height="16" font="0">(2-3) </text>
<text top="921" left="162" width="628" height="16" font="0">where <i>z  </i>is a parameter that provides the curve of the transfer function.  <i>z  </i>is related to </text>
<text top="962" left="162" width="311" height="16" font="0">the image histogram and can be defined as </text>
<text top="1004" left="162" width="5" height="16" font="0"> </text>
<text top="1045" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="19" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="470" width="12" height="17" font="1">8 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="178" left="590" width="5" height="16" font="0"> </text>
<text top="215" left="749" width="41" height="16" font="0">(2-4) </text>
<text top="256" left="785" width="5" height="16" font="0"> </text>
<text top="298" left="162" width="627" height="16" font="0">where L is the intensity level corresponding to where cumulative distribution function </text>
<text top="339" left="162" width="627" height="16" font="0">(CDF) = 1. Here, L is used as an indication to determine how dark the 10% of pixels </text>
<text top="381" left="162" width="627" height="16" font="0">in an image are. If these pixels are very dark, (L &lt; 50), they will enhance the most. If </text>
<text top="422" left="162" width="628" height="16" font="0">they are sufficiently bright, (L &gt; 150), no pixel will be enhanced. If they are dark, (50 </text>
<text top="463" left="162" width="627" height="16" font="0">&gt;L&gt;150),  they  will  be  less  enhanced.  In  Figure  2.10,  the  transfer  functions  with </text>
<text top="505" left="162" width="237" height="16" font="0">different z values are illustrated. </text>
<text top="546" left="162" width="5" height="16" font="0"> </text>
<text top="588" left="162" width="623" height="16" font="0">           After  adaptive  luminance  enhancement,  the  contrast  of  the  luminance-</text>
<text top="629" left="162" width="627" height="16" font="0">enhanced  images  is  degraded,  so  contrast  enhancement  is  applied.  The  AINDANE </text>
<text top="670" left="162" width="627" height="16" font="0">algorithm  uses  almost  the  same  contrast  enhancement  method  as  INDANE.  But, </text>
<text top="712" left="162" width="627" height="16" font="0">unlike  the  INDANE  algorithm,  the  AINDANE  algorithm  uses  adaptive  contrast </text>
<text top="753" left="162" width="627" height="16" font="0">enhancement by using a parameter P, related to the global  standard deviation, of the </text>
<text top="794" left="162" width="627" height="16" font="0">input  intensity  image  I  (x,  y).  P  is  used  as  a  power  function  of  the  ratio  of  the </text>
<text top="836" left="162" width="565" height="16" font="0">surrounding intensity information over input image and it can be expressed as </text>
<text top="877" left="162" width="5" height="16" font="0"> </text>
<text top="947" left="560" width="5" height="16" font="0"> </text>
<text top="984" left="162" width="5" height="16" font="0"> </text>
<text top="1026" left="749" width="41" height="16" font="0">(2-5) </text>
<text top="1067" left="785" width="5" height="16" font="0"> </text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="470" width="12" height="17" font="1">9 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">In  Equation  (2-5)  <i>P</i>  is  an  image  dependent  parameter,  which  is  used  to  tune  the </text>
<text top="153" left="162" width="627" height="16" font="0">contrast  enhancement  process.  <i>P</i>  is  an  adaptive  parameter  related  to  the  global </text>
<text top="195" left="162" width="574" height="16" font="0">standard deviation of the input intensity image <i>I(x, y)</i> and can be determined as </text>
<text top="236" left="162" width="5" height="16" font="0"> </text>
<text top="342" left="587" width="5" height="16" font="0"> </text>
<text top="379" left="749" width="41" height="16" font="0">(2-6) </text>
<text top="421" left="162" width="627" height="16" font="0">where    is  the  indication  of  the  contrast  level  of  the  original  intensity  image.  If  the </text>
<text top="463" left="162" width="627" height="16" font="0">standard deviation is less than 3, it means the image has poor contrast and P will be 3, </text>
<text top="504" left="162" width="627" height="16" font="0">and  it  will  further  increase  contrast  enhancement.  If  the  standard  deviation  is  much </text>
<text top="545" left="162" width="627" height="16" font="0">more than 10, it means the image has sufficient contrast and P will be 1, and it does </text>
<text top="587" left="162" width="627" height="16" font="0">not increase contrast enhancement. Otherwise, there is a linear relationship between P </text>
<text top="629" left="162" width="51" height="16" font="0">and  . </text>
<text top="688" left="162" width="625" height="16" font="6"><i>2.2 An Illuminance-Reflectance Model for Nonlinear Enhancement (IRME) Algorithm </i></text>
<text top="735" left="162" width="628" height="16" font="6"><i>            </i>IRME[12] algorithm is an algorithm that is based on a physical description of </text>
<text top="776" left="162" width="627" height="16" font="0">the creation of a radiance map of the real world scene. It divides the object radiance </text>
<text top="817" left="162" width="627" height="16" font="0">into two parts: illumination and reflectance. We can describe illumination as the light </text>
<text top="855" left="162" width="628" height="20" font="3">intensity  incident  on  an  object’s  surface  and  reflectance  as  the  light  refection </text>
<text top="896" left="162" width="627" height="20" font="3">properties  of  the  object’s  surface.  This  separation  provides  a  method  to  process </text>
<text top="942" left="162" width="602" height="16" font="0">images for the purpose of obtaining an improved visual perception of those scenes. </text>
<text top="983" left="162" width="5" height="16" font="0"> </text>
<text top="1024" left="162" width="627" height="16" font="0">            The  algorithm  consists  of  four  parts:  (a)  illumination  estimation  and </text>
<text top="1066" left="162" width="627" height="16" font="0">reflectance  extraction;  (b)  adaptive  dynamic  range  compression  of  illuminance;  (c) </text>
<text top="1107" left="162" width="567" height="16" font="0">adaptive mid-tone frequency components enhancement; (d) image restoration. </text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">10 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="153" left="162" width="627" height="16" font="0">            The first step of the first part of the algorithm is to obtain the intensity image, </text>
<text top="195" left="162" width="210" height="16" font="0">this step can be expressed as </text>
<text top="236" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="283" left="622" width="5" height="16" font="6"><i> </i></text>
<text top="320" left="749" width="41" height="16" font="0">(2-7) </text>
<text top="361" left="162" width="627" height="16" font="0">where R, G, and B are the values of the red, green and blue color bands of pixels (for </text>
<text top="403" left="162" width="627" height="16" font="0">8-bit  images) respectively. This step  is the definition of the  value (V) component  in </text>
<text top="444" left="162" width="131" height="16" font="0">HSV color space. </text>
<text top="485" left="162" width="5" height="16" font="0"> </text>
<text top="527" left="162" width="355" height="16" font="0">The image intensity can be simply formulated as </text>
<text top="568" left="162" width="5" height="16" font="0"> </text>
<text top="615" left="563" width="5" height="16" font="0"> </text>
<text top="652" left="749" width="41" height="16" font="0">(2-8) </text>
<text top="693" left="162" width="628" height="16" font="0">where  <i>L(x,  y)  </i>is  the  illumination  of  the  image  and  <i>R(x,  y)  </i>is  the  reflectance  of  the </text>
<text top="735" left="162" width="53" height="16" font="0">image. </text>
<text top="776" left="162" width="5" height="16" font="0"> </text>
<text top="817" left="162" width="628" height="16" font="0">           In this algorithm, it is assumed that the illumination <i>L</i>(<i>x</i>, <i>y</i>) is contained in the </text>
<text top="859" left="162" width="628" height="16" font="0">low frequency components of the image and the reflectance <i>R</i>(<i>x</i>, <i>y</i>) is contained in the </text>
<text top="900" left="162" width="628" height="16" font="0">high frequency components of the image. In the real world, the dynamic range of the </text>
<text top="942" left="162" width="627" height="16" font="0">illumination  variation  can  be  several  orders  larger  than  the  dynamic  range  of  the </text>
<text top="983" left="162" width="220" height="16" font="0">reflectance. Therefore, in this </text>
<text top="984" left="384" width="406" height="15" font="4">algorithm,  while the  dynamic range  of the  illumination part </text>
<text top="1024" left="162" width="627" height="15" font="4">of  the  image  compresses,  the  dynamic  range  of  the  reflectance  part  of  the  image  does  not </text>
<text top="1062" left="162" width="71" height="15" font="4">compress. </text>
<text top="1100" left="162" width="4" height="15" font="4"> </text>
</page>
<page number="22" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">11 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="113" left="162" width="45" height="15" font="4">           </text>
<text top="112" left="207" width="582" height="16" font="0">The last step of the first part of the algorithm is to normalize the illumination by </text>
<text top="153" left="162" width="628" height="16" font="0">dividing  with  255  for  8-bit  images.  After  the  illumination  <i>L  </i>is  obtained  using </text>
<text top="195" left="162" width="628" height="16" font="0">Equation (2-9), the reflectance <i>R </i>is computed using Equation (2-8) to use further steps </text>
<text top="236" left="162" width="116" height="16" font="0">of the algorithm</text>
<text top="237" left="278" width="4" height="15" font="4">.</text>
<text top="236" left="282" width="5" height="16" font="0"> </text>
<text top="322" left="653" width="5" height="16" font="0"> </text>
<text top="359" left="749" width="41" height="16" font="0">(2-9) </text>
<text top="400" left="162" width="627" height="16" font="0">The  second  part  of  the  algorithm  is  adaptive  dynamic  range  compression  of </text>
<text top="442" left="162" width="627" height="16" font="0">illuminance  using  the  windowed-inverse  sigmoid  (WIS)  function.  The  sigmoid </text>
<text top="483" left="162" width="159" height="16" font="0">function is defined as </text>
<text top="549" left="538" width="5" height="16" font="0"> </text>
<text top="586" left="740" width="50" height="16" font="0">(2-10) </text>
<text top="627" left="162" width="623" height="16" font="0">The  inverse  sigmoid  function  can  be  used  to  pull  down  the  intensity  of  the  over-</text>
<text top="669" left="162" width="628" height="16" font="0">lighted  pixels  and  at  the  same  time  pull  up  the  low  intensity  of  dark  pixels.  This </text>
<text top="710" left="162" width="627" height="16" font="0">function  is used as the  intensity transfer  function for dynamic range compression  by </text>
<text top="751" left="162" width="512" height="16" font="0">performing the following steps described in Equations (2-10) – (2-13). </text>
<text top="798" left="626" width="5" height="16" font="0"> </text>
<text top="835" left="740" width="50" height="16" font="0">(2-11) </text>
<text top="904" left="547" width="5" height="16" font="0"> </text>
<text top="941" left="740" width="50" height="16" font="0">(2-12) </text>
<text top="982" left="785" width="5" height="16" font="0"> </text>
<text top="1053" left="559" width="5" height="16" font="0"> </text>
<text top="1090" left="740" width="50" height="16" font="0">(2-13) </text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="9" size="9" family="Times" color="#000000"/>
<text top="1180" left="465" width="20" height="17" font="1">12 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="628" height="16" font="0">where  Equation  (2-11)  linearly  maps  the  input  range  [0  1]  of  the  normalized </text>
<text top="153" left="162" width="104" height="16" font="0">illuminance  <i>L</i></text>
<text top="160" left="266" width="6" height="11" font="9"><i>n</i></text>
<text top="153" left="272" width="184" height="16" font="6"><i>  </i>to  the  input  range  [<i>f(v</i></text>
<text top="160" left="457" width="18" height="11" font="9"><i>min</i></text>
<text top="153" left="475" width="34" height="16" font="6"><i>)  f(v</i></text>
<text top="160" left="509" width="20" height="11" font="9"><i>max</i></text>
<text top="153" left="529" width="261" height="16" font="6"><i>)</i>]  for  windowed-inverse  sigmoid. </text>
<text top="195" left="162" width="628" height="16" font="0">Equation  (2-13)  is  the  inverse  sigmoid  function.  Equation  (2-13)  is  applied  to </text>
<text top="236" left="162" width="453" height="16" font="0">normalize the output illuminance to range [0 1]. Parameters  <i>v</i></text>
<text top="243" left="615" width="20" height="11" font="9"><i>max</i></text>
<text top="236" left="636" width="45" height="16" font="6"><i> </i>and <i>v</i></text>
<text top="243" left="681" width="18" height="11" font="9"><i>min</i></text>
<text top="236" left="699" width="91" height="16" font="6"><i> </i>are used to </text>
<text top="278" left="162" width="331" height="16" font="0">tune the curve shape of the transfer function.  </text>
<text top="319" left="162" width="5" height="16" font="0"> </text>
<text top="360" left="162" width="628" height="16" font="0">            The  third  part  of  the  IRME  is  adaptive  mid-tone  frequency  component </text>
<text top="402" left="162" width="627" height="16" font="0">enhancement.  This  process  is  very  similar  to  the  contrast  enhancement  part  of </text>
<text top="443" left="162" width="312" height="16" font="0">AINDANE. The equations for this part are </text>
<text top="485" left="162" width="5" height="16" font="0"> </text>
<text top="534" left="567" width="5" height="16" font="0"> </text>
<text top="570" left="686" width="5" height="16" font="0"> </text>
<text top="570" left="740" width="50" height="16" font="0">(2-14) </text>
<text top="612" left="162" width="48" height="16" font="0">where </text>
<text top="686" left="614" width="5" height="16" font="0"> </text>
<text top="723" left="740" width="50" height="16" font="0">(2-15) </text>
<text top="765" left="162" width="48" height="16" font="0">where </text>
<text top="806" left="162" width="5" height="16" font="0"> </text>
<text top="892" left="593" width="5" height="16" font="0"> </text>
<text top="929" left="740" width="50" height="16" font="0">(2-16) </text>
<text top="971" left="162" width="534" height="16" font="0">Finally, the enhanced  image  is obtained  by  multiplying the  illumination </text>
<text top="971" left="785" width="5" height="16" font="0"> </text>
<text top="1015" left="162" width="176" height="16" font="0">and reflectance <i>R(x, y).  </i></text>
<text top="1056" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="1098" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="24" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="10" size="9" family="Times" color="#000000"/>
<text top="1180" left="465" width="20" height="17" font="1">13 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="118" left="586" width="5" height="16" font="0"> </text>
<text top="155" left="740" width="50" height="16" font="0">(2-17) </text>
<text top="197" left="162" width="627" height="16" font="0">To  convert  the  enhanced  intensity  image  to  RGB  color  image,  a  linear  color </text>
<text top="238" left="162" width="359" height="16" font="0">restoration process is applied. The RGB values ( r</text>
<text top="231" left="522" width="4" height="13" font="10">’</text>
<text top="234" left="526" width="42" height="20" font="3">, g’, b</text>
<text top="231" left="568" width="4" height="13" font="10">’</text>
<text top="238" left="572" width="161" height="16" font="0">) can be expressed as  </text>
<text top="279" left="162" width="5" height="16" font="0"> </text>
<text top="321" left="162" width="5" height="16" font="0"> </text>
<text top="388" left="624" width="5" height="16" font="0"> </text>
<text top="424" left="740" width="50" height="16" font="0">(2-18) </text>
<text top="466" left="162" width="627" height="16" font="0">To  enhance  the  dark  and  bright  regions  of  an  image,  a  windowed  inverse  sigmoid </text>
<text top="507" left="162" width="178" height="16" font="0">function is utilized [13]. </text>
<text top="549" left="162" width="5" height="16" font="0"> </text>
<text top="588" left="162" width="425" height="16" font="6"><i>2.3 Multiple Windowed Inverse Sigmoid Function (MWIS) </i></text>
<text top="633" left="162" width="627" height="16" font="6"><i>         </i>  MWIS[13]  is  composed  of  three  main  parts:  adaptive  intensity  enhancement, </text>
<text top="675" left="162" width="627" height="16" font="0">contrast  enhancement  and  color  restoration.  The  first  step  of  adaptive  intensity </text>
<text top="716" left="162" width="628" height="16" font="0">enhancement  is  to  obtain  the  intensity  image,  <i>I(x,  y)</i>,  using  NTSC  color  space.  The </text>
<text top="758" left="162" width="627" height="16" font="0">first assumption to estimate the illumination is that an image may be characterized by </text>
<text top="799" left="162" width="628" height="16" font="0">two components [18]: illumination and reflectance components denoted by <i>L(x,y)</i> and </text>
<text top="840" left="162" width="628" height="16" font="6"><i>R(x,y)</i>, respectively. The two functions combine as a product to form an image as in </text>
<text top="882" left="162" width="627" height="16" font="0">equation (2-8).In such a combination, it is possible to control the illumination and the </text>
<text top="923" left="162" width="627" height="16" font="0">reflectance  components  independently.  Thus,  it  is  possible  to  modify  the  dynamic </text>
<text top="965" left="162" width="627" height="16" font="0">range  of  the  illumination  without  any  modification  in  the  details.  The  second </text>
<text top="1006" left="162" width="627" height="16" font="0">assumption is the illumination included in the low frequency components of the image </text>
<text top="1047" left="162" width="627" height="16" font="0">and  the  reflectance  illustrates  the  high  frequency  components  of  the  image.  The </text>
<text top="1089" left="162" width="627" height="16" font="0">reflectance  generally  varies  much  faster  than  illumination  in  most  regions  of  the </text>
<text top="1130" left="162" width="627" height="16" font="0">image except for a sudden change of illumination. In the algorithm, as the estimation </text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">14 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">of  the  illumination,  the  Gaussian  low-pass  filtered  result  of  the  intensity  image  is </text>
<text top="153" left="162" width="47" height="16" font="0">used.  </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="236" left="162" width="627" height="16" font="0">         The  estimated  illumination  is  based  on  the  fact  that  the  illumination  changes </text>
<text top="278" left="162" width="627" height="16" font="0">quite smoothly in the parts of the image illuminated from the same luminous source, </text>
<text top="319" left="162" width="627" height="16" font="0">but  however,  it  can  also  present  abrupt  variation  when  the  scene  is  illuminated  by </text>
<text top="360" left="162" width="627" height="16" font="0">different  light  sources  in  the  case  of  background  lights.  To  reduce  the  influence  of </text>
<text top="402" left="162" width="627" height="16" font="0">neighborhood areas in which  luminance  produces a high  contrast, which  would  lead </text>
<text top="443" left="162" width="627" height="16" font="0">to artifacts, a weighted averaging method is used for bright pixels. So the illumination </text>
<text top="485" left="162" width="628" height="16" font="0">estimate  values  for  less  than  80%  of  the  highest  gray-scale  value  (i.e.  255  for  8-bit </text>
<text top="526" left="162" width="54" height="16" font="0">image).</text>
<text top="527" left="216" width="4" height="15" font="4"> </text>
<text top="526" left="222" width="567" height="16" font="0">For the other gray-scale  values,  it  is a  weighted average of  illumination and </text>
<text top="567" left="162" width="627" height="16" font="0">intensity  values,  which  decreases  the  contribution  of  the  illumination  linearly  as  the </text>
<text top="609" left="162" width="627" height="16" font="0">value of the gray scale increases. This averaging can be mathematically expressed for </text>
<text top="650" left="162" width="111" height="16" font="0">8-bit image as: </text>
<text top="692" left="162" width="5" height="16" font="0"> </text>
<text top="765" left="711" width="5" height="16" font="0"> </text>
<text top="802" left="740" width="50" height="16" font="0">(2-19) </text>
<text top="844" left="785" width="5" height="16" font="0"> </text>
<text top="885" left="162" width="627" height="16" font="0">          After obtaining the new illumination estimation, the reflectance estimation can </text>
<text top="926" left="162" width="627" height="16" font="0">be obtained by Equation (2-8). Before being treated by the enhancement process, the </text>
<text top="969" left="162" width="180" height="16" font="0">new illumination values </text>
<text top="969" left="400" width="385" height="16" font="0">is normalized to the range [0-10] using Equation (2-</text>
<text top="1011" left="162" width="33" height="16" font="0">20)  </text>
<text top="1053" left="162" width="5" height="16" font="0"> </text>
<text top="1094" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="26" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">15 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="137" left="546" width="5" height="16" font="0"> </text>
<text top="174" left="740" width="50" height="16" font="0">(2-20) </text>
<text top="216" left="162" width="123" height="16" font="0">for 8 bit images. </text>
<text top="257" left="162" width="5" height="16" font="0"> </text>
<text top="298" left="162" width="627" height="16" font="0">           The  normalized  illumination  values  are  treated  by  an  enhancement  and </text>
<text top="340" left="162" width="628" height="16" font="0">compression  process  to  increase  the  illumination  values  of  low-illumination  (dark) </text>
<text top="381" left="162" width="628" height="16" font="0">pixels, and also to reduce the illumination values of high-illumination (bright) pixels </text>
<text top="423" left="162" width="628" height="16" font="0">using  a specifically designed  nonlinear  multiple  windowed-inverse  sigmoid (MWIS) </text>
<text top="464" left="162" width="623" height="16" font="0">transfer function. This process also normalizes the illumination values to the range [0-</text>
<text top="506" left="162" width="436" height="16" font="0">1] at the same time. This transfer function can be defined as </text>
<text top="547" left="162" width="5" height="16" font="0"> </text>
<text top="615" left="633" width="5" height="16" font="0"> </text>
<text top="652" left="740" width="50" height="16" font="0">(2-21) </text>
<text top="693" left="162" width="628" height="16" font="0">where   is parameter to adjust the curve for dark pixels and   is a parameter to adjust </text>
<text top="735" left="162" width="627" height="16" font="0">the curve  for  bright pixels. This transfer  function  is the sum of two inverse  sigmoid </text>
<text top="777" left="162" width="533" height="16" font="0">functions  and  a  constant  0.5  is  used  to  shift  down  the  transfer  function.</text>
<text top="778" left="695" width="4" height="15" font="4"> </text>
<text top="777" left="702" width="88" height="16" font="0">The  MWIS </text>
<text top="818" left="162" width="627" height="16" font="0">transfer function is used to pull up the illumination of dark pixels and to pull down the </text>
<text top="860" left="162" width="627" height="16" font="0">illumination of bright pixels; meanwhile all pixels are normalized to the range [0 1]. </text>
<text top="901" left="162" width="508" height="16" font="0">Therefore, dynamic range compression of the illumination is realized. </text>
<text top="942" left="162" width="5" height="16" font="0"> </text>
<text top="984" left="162" width="627" height="16" font="0">       After  obtaining  illumination  enhancement,  the  enhanced  intensity  image  can  be </text>
<text top="1025" left="162" width="100" height="16" font="0">expressed as  </text>
<text top="1066" left="162" width="4" height="15" font="4"> </text>
<text top="1104" left="162" width="4" height="15" font="4"> </text>
</page>
<page number="27" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">16 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="117" left="588" width="5" height="16" font="0"> </text>
<text top="154" left="740" width="50" height="16" font="0">(2-22) </text>
<text top="196" left="785" width="5" height="16" font="0"> </text>
<text top="237" left="162" width="627" height="16" font="0">           During this process, a few number of bright pixels that are surrounded by dark </text>
<text top="278" left="162" width="623" height="16" font="0">pixels  are  out  of  the  range  [0  1].  They  are  simply  clipped.  A  surrounding  pixel-</text>
<text top="320" left="162" width="627" height="16" font="0">dependent  contrast  enhancement  technique  might  supply  sufficient  contrast,  even </text>
<text top="361" left="162" width="627" height="16" font="0">higher  than  that  of  the  original  image,  while  maintaining  the  dynamic  range </text>
<text top="403" left="162" width="627" height="16" font="0">compression that was set in the previous step. This adaptive process must be based on </text>
<text top="444" left="162" width="627" height="16" font="0">the  intensity  information  of  the  processed  (center)  pixel  and  its  surrounding  pixels. </text>
<text top="485" left="162" width="627" height="16" font="0">The  contrast  enhancement  process,  which  was  used  in  AINDANE  and  IRME,  is </text>
<text top="527" left="162" width="628" height="16" font="0">implemented due to its high quality contrast process and control in the dynamic range </text>
<text top="568" left="162" width="82" height="16" font="0">expansion. </text>
<text top="610" left="162" width="5" height="16" font="0"> </text>
<text top="651" left="162" width="627" height="16" font="0">           In the MWIS algorithm, among the  basic  linear and  nonlinear approaches  for </text>
<text top="692" left="162" width="627" height="16" font="0">color  consistency,  a  basic  linear  color  restoration  process  based  on  the  chromatic </text>
<text top="734" left="162" width="545" height="16" font="0">information of the input image is applied. This process can be expressed as </text>
<text top="775" left="162" width="5" height="16" font="0"> </text>
<text top="845" left="568" width="5" height="16" font="0"> </text>
<text top="882" left="740" width="50" height="16" font="0">(2-23) </text>
<text top="924" left="162" width="383" height="16" font="0">where j represents the red, green, blue spectral band. </text>
<text top="965" left="162" width="5" height="16" font="0"> </text>
<text top="1024" left="162" width="100" height="16" font="6"><i>2.4 Summary </i></text>
<text top="1071" left="162" width="628" height="16" font="0">           In this chapter, the theory and principles of  the advanced  image enhancement </text>
<text top="1112" left="162" width="628" height="16" font="0">techniques  in  the  spatial  domain  were  investigated.  These  techniques  inspired  the </text>
</page>
<page number="28" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">17 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">development  of  the  LTSN  algorithm.  Advanced  techniques  such  as  AINDANE, </text>
<text top="153" left="162" width="627" height="16" font="0">IRME, and MWIS are good at dynamic range compression, improving local contrast </text>
<text top="195" left="162" width="212" height="16" font="0">to achieve high visual quality</text>
<text top="196" left="373" width="9" height="15" font="4">. </text>
<text top="236" left="162" width="4" height="15" font="4"> </text>
<text top="265" left="162" width="4" height="15" font="4"> </text>
<text top="293" left="162" width="4" height="15" font="4"> </text>
<text top="322" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="363" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="405" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="446" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="488" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="529" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="570" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="612" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="653" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="695" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="736" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="777" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="819" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="860" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="902" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="943" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="984" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1026" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1067" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1109" left="474" width="5" height="16" font="2"><b> </b></text>
</page>
<page number="29" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">18 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="154" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="195" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="237" left="423" width="106" height="16" font="2"><b>CHAPTER 3 </b></text>
<text top="296" left="178" width="596" height="16" font="2"><b>LOCALLY TUNED SINE NON LINEAR ENHANCEMENT ALGORITHM </b></text>
<text top="320" left="162" width="4" height="15" font="4"> </text>
<text top="339" left="162" width="4" height="15" font="4"> </text>
<text top="358" left="162" width="4" height="15" font="4"> </text>
<text top="378" left="162" width="627" height="16" font="0">             A single curve is not enough to enhance an image consisting of poor lighting, </text>
<text top="419" left="162" width="627" height="16" font="0">sunlight,  shadows,  and  an  overexposed  lighting  region.  There  is  a  need  for  various </text>
<text top="461" left="162" width="627" height="16" font="0">curves  for  enhancing  different  regions  in  an  image.  A  locally  adaptive  nonlinear </text>
<text top="502" left="162" width="627" height="16" font="0">function, which is capable of providing the desired curves, is required to perform the </text>
<text top="543" left="162" width="217" height="16" font="0">enhancement of such images. </text>
<text top="585" left="162" width="5" height="16" font="0"> </text>
<text top="626" left="162" width="627" height="16" font="0">             The  LTSN  algorithm  consists  of  three  important  stages  that  lead  to  good </text>
<text top="668" left="162" width="627" height="16" font="0">enhancement  results,  (a)  adaptive  intensity  enhancement,  (b)  contrast  enhancement, </text>
<text top="709" left="162" width="182" height="16" font="0">and (c) color restoration. </text>
<text top="750" left="162" width="9" height="16" font="0">  </text>
<text top="810" left="162" width="265" height="16" font="6"><i>3.1 Adaptive Intensity Enhancement </i></text>
<text top="856" left="162" width="627" height="16" font="6"><i>             </i> The algorithm uses a sine nonlinear transfer function to adaptively compress </text>
<text top="897" left="162" width="574" height="16" font="0">the dynamic range of the intensity image while maintaining important features. </text>
<text top="938" left="162" width="4" height="15" font="4"> </text>
<text top="995" left="162" width="205" height="16" font="6"><i>3.1.1 Intensity Computation </i></text>
<text top="1041" left="162" width="53" height="15" font="8"><i>           </i>  </text>
<text top="1040" left="215" width="575" height="16" font="0">The intensity of the RGB image is found using Equation (3-1) where <i>IR(x, y)</i>, </text>
<text top="1082" left="162" width="627" height="16" font="6"><i>IG(x, y)</i>, and <i>IB(x, y) </i>represents the R, G, and B values respectively for each pixel at </text>
<text top="1123" left="162" width="110" height="16" font="0">location (x, y). </text>
</page>
<page number="30" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="11" size="18" family="Times" color="#000000"/>
<text top="1180" left="465" width="20" height="17" font="1">19 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="161" left="705" width="52" height="19" font="11">          </text>
<text top="213" left="744" width="5" height="19" font="11"> </text>
<text top="215" left="749" width="36" height="16" font="0">(3-1)</text>
<text top="213" left="785" width="26" height="19" font="11">     </text>
<text top="215" left="811" width="5" height="16" font="0"> </text>
<text top="256" left="162" width="627" height="16" font="0">Before  being  treating  by  the  enhancement  process,  the  new  illumination  values  are </text>
<text top="297" left="162" width="354" height="16" font="0">normalized to the range [0 1] using Equation 3.2.</text>
<text top="298" left="516" width="4" height="15" font="8"><i> </i></text>
<text top="339" left="162" width="5" height="16" font="0"> </text>
<text top="406" left="535" width="4" height="15" font="8"><i> </i></text>
<text top="440" left="191" width="570" height="15" font="8"><i>                                                                                                                                 </i>(3-2) </text>
<text top="497" left="162" width="451" height="16" font="6"><i>3.1.2 Enhancement of Dark and Compression of Bright Pixels </i></text>
<text top="543" left="162" width="627" height="16" font="6"><i>           </i>An  enhancement  and  compression  process  is  applied  to  the  normalized </text>
<text top="584" left="162" width="628" height="16" font="0">intensity  values.  This  improves  the  illumination  values  of  low-illumination  (dark) </text>
<text top="625" left="162" width="628" height="16" font="0">pixels, while reducing the  illumination values of  high-illumination (bright) pixels  by </text>
<text top="667" left="162" width="627" height="16" font="0">using a specifically designed sine nonlinear transfer function. This process normalizes </text>
<text top="708" left="162" width="628" height="16" font="0">the  illumination  values to the range [0-1] at the  same time. This  transfer  function  is </text>
<text top="750" left="162" width="78" height="16" font="0">defined as </text>
<text top="791" left="162" width="5" height="16" font="0"> </text>
<text top="839" left="602" width="4" height="15" font="4"> </text>
<text top="872" left="474" width="4" height="15" font="8"><i> </i></text>
<text top="911" left="740" width="72" height="16" font="0">  (3-3)      </text>
<text top="952" left="474" width="4" height="15" font="8"><i> </i></text>
<text top="990" left="474" width="4" height="15" font="8"><i> </i></text>
<text top="1028" left="474" width="4" height="15" font="8"><i> </i></text>
<text top="1066" left="474" width="4" height="15" font="8"><i> </i></text>
<text top="1104" left="474" width="4" height="15" font="8"><i> </i></text>
</page>
<page number="31" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="12" size="13" family="Times" color="#000000"/>
	<fontspec id="13" size="13" family="Times" color="#000000"/>
<text top="1180" left="465" width="20" height="17" font="1">20 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="153" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="195" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="236" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="278" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="319" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="360" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="402" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="443" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="485" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="526" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="567" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="609" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="650" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="692" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="732" left="162" width="333" height="14" font="12"><i>Figure 3.1 Flow chart of the Sine Nonlinear Algorithm </i></text>
<text top="768" left="474" width="5" height="16" font="0"> </text>
<text top="809" left="162" width="627" height="16" font="0">          The  transfer  function  has  been  used  for  white  board  scanning  at  q=0.75  [40]. </text>
<text top="851" left="162" width="627" height="16" font="0">From Equation (3-3) we observe that the sine nonlinear transfer function is dependent </text>
<text top="892" left="162" width="628" height="16" font="0">on the parameter q. An adaptive technique is used to find the value of q and it’s found </text>
<text top="933" left="162" width="599" height="16" font="0">by using a tangent function with a normalized mean of the pixel as its input value.  </text>
<text top="975" left="474" width="189" height="16" font="0">                                          </text>
<text top="1048" left="581" width="5" height="16" font="0"> </text>
<text top="1085" left="163" width="625" height="16" font="0">                                                                                                                                  (3-4) </text>
<text top="125" left="423" width="95" height="14" font="13">Original Image </text>
<text top="198" left="422" width="97" height="14" font="13">Intensity Image </text>
<text top="344" left="183" width="138" height="14" font="13">Gaussian Mean Image </text>
<text top="688" left="416" width="104" height="14" font="13">Enhanced Image </text>
<text top="485" left="604" width="151" height="14" font="13">Laplacian filtered Image </text>
<text top="621" left="412" width="111" height="14" font="13">Color Restoration </text>
<text top="657" left="393" width="4" height="17" font="1"> </text>
<text top="549" left="400" width="140" height="14" font="13">Contrast Enhancement </text>
<text top="313" left="428" width="85" height="14" font="13">Enhancement </text>
<text top="332" left="435" width="72" height="14" font="13">of dark and </text>
<text top="353" left="423" width="96" height="14" font="13">compression of </text>
<text top="372" left="431" width="79" height="14" font="13">bright pixels </text>
</page>
<page number="32" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="14" size="9" family="Times" color="#000000"/>
	<fontspec id="15" size="16" family="Helvetica" color="#000000"/>
<text top="1180" left="465" width="20" height="17" font="1">21 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="136" height="16" font="0">In Equation (3-4) <i>I</i></text>
<text top="118" left="298" width="22" height="11" font="9"><i>Mn  </i></text>
<text top="112" left="321" width="458" height="16" font="0">(<i>x,y</i>) is the normalized mean of the pixel intensity at (x,y) and c</text>
<text top="118" left="779" width="9" height="11" font="14">1 </text>
<text top="153" left="162" width="38" height="16" font="0">and c</text>
<text top="160" left="200" width="9" height="11" font="14">2 </text>
<text top="153" left="210" width="580" height="16" font="0">are determined empirically determined based on several experiments conducted </text>
<text top="195" left="162" width="168" height="16" font="0">on typical images. As c</text>
<text top="201" left="330" width="6" height="11" font="14">1</text>
<text top="195" left="336" width="377" height="16" font="0"> approaches 2, q becomes infinite. This means that c</text>
<text top="201" left="713" width="6" height="11" font="14">1</text>
<text top="195" left="719" width="71" height="16" font="0"> closer to </text>
<text top="236" left="162" width="628" height="16" font="0">2;  the  over-exposed  (white)  areas  become  black  because  of  the  high  values  of  q.  c1 </text>
<text top="278" left="162" width="572" height="16" font="0">should  be  greater  than  2.  To  compute  the  bounds,  c1  is  plotted  vs.  q,  for  I</text>
<text top="284" left="734" width="22" height="11" font="14">Mn1</text>
<text top="278" left="756" width="34" height="16" font="0">    in </text>
<text top="319" left="162" width="457" height="16" font="0">Figure  ,the range of c1 for various q values is 2.1 to 2.4. As c</text>
<text top="325" left="620" width="6" height="11" font="14">1</text>
<text top="319" left="626" width="164" height="16" font="0"> increases from 2.1 to </text>
<text top="360" left="162" width="628" height="16" font="0">2.4  the  amount  of  pull  down  intensity  will  decrease  for  brighter  pixels.  For  better </text>
<text top="402" left="162" width="67" height="16" font="0">results,  c</text>
<text top="408" left="229" width="9" height="11" font="14">1 </text>
<text top="402" left="241" width="548" height="16" font="0">(by  experiment)  is  set  to  2.25.  On  the  contrary,  for  q  values,  which  are </text>
<text top="443" left="162" width="627" height="16" font="0">closer to 0, the noise in the extreme dark regions will also be enhanced. Hence the q </text>
<text top="481" left="162" width="628" height="20" font="3">value’s  corresponding  to the  mean  value  below  0.2  are  considered  as  extreme  dark </text>
<text top="526" left="162" width="373" height="16" font="0">regions, and q for those pixels can be calculated by </text>
<text top="567" left="162" width="5" height="16" font="0"> </text>
<text top="646" left="575" width="5" height="16" font="0"> </text>
<text top="682" left="162" width="625" height="16" font="2"><b>                                                                                                                                  </b>(3-5) </text>
<text top="724" left="162" width="5" height="16" font="0"> </text>
<text top="998" left="785" width="5" height="16" font="0"> </text>
<text top="1035" left="266" width="20" height="16" font="0">(a)</text>
<text top="1034" left="286" width="5" height="17" font="15"> </text>
<text top="1035" left="293" width="416" height="16" font="0">Dark Pixels                                              (b) Bright Pixels </text>
<text top="1075" left="162" width="353" height="14" font="12"><i>Figure 3.2 Various curves of Nonlinear Transfer function. </i></text>
<text top="1111" left="162" width="5" height="16" font="2"><b> </b></text>
</page>
<page number="33" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">22 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="113" left="162" width="120" height="16" font="0">The parameter c</text>
<text top="119" left="282" width="9" height="11" font="14">2 </text>
<text top="113" left="293" width="360" height="16" font="0">in Equation (3-4) can  be calculated equating the </text>
<text top="113" left="680" width="110" height="16" font="0">(x,y)  = 0.2  in </text>
<text top="156" left="162" width="627" height="16" font="0">Equation  (3-4)  to  Equation  (3-5)  to  maintain  continuity.  The  extreme  bright  pixels </text>
<text top="198" left="162" width="627" height="16" font="0">that has a mean closer to 1 will be processed by a curve with a specific q value.The </text>
<text top="239" left="162" width="628" height="16" font="0">transfer function in Equation (3-3) is a squared sine function. It can be observed from </text>
<text top="280" left="162" width="627" height="16" font="0">the  curves  in  Figure  3.2  that  this  transformation  greatly  boosts  the  luminance  of </text>
<text top="322" left="162" width="627" height="16" font="0">darker  pixels(regions)  and  simultaneously  decreases  the  luminance  of  brighter </text>
<text top="363" left="162" width="122" height="16" font="0">pixels(regions).  </text>
<text top="405" left="162" width="5" height="16" font="0"> </text>
<text top="444" left="162" width="244" height="16" font="6"><i>3.1.3 Calculation of Mean Image </i></text>
<text top="489" left="162" width="627" height="16" font="6"><i>    </i>        The  mean  information  of  neighborhood  pixels  is  found  using  2D  discrete </text>
<text top="531" left="162" width="627" height="16" font="0">spatial convolution with a Gaussian kernel. Gaussian kernel  is very close to the way </text>
<text top="572" left="162" width="627" height="16" font="0">in  which  the  human  visual  system  works.  For  a  M×N  intensity  image,  2D  discrete </text>
<text top="614" left="162" width="288" height="16" font="0">spatial convolution can be expressed as </text>
<text top="655" left="162" width="5" height="16" font="0"> </text>
<text top="767" left="660" width="5" height="16" font="0"> </text>
<text top="804" left="162" width="625" height="16" font="0">                                                                                                                                  (3-6) </text>
<text top="845" left="162" width="347" height="16" font="0">where the Gaussian function can be obtained as </text>
<text top="887" left="162" width="5" height="16" font="0"> </text>
<text top="948" left="565" width="5" height="16" font="0"> </text>
<text top="985" left="749" width="41" height="16" font="0">(3-7) </text>
<text top="1027" left="351" width="438" height="16" font="0">  and  c  is  the  Gaussian  surround  space  constant  which </text>
<text top="1069" left="162" width="627" height="16" font="0">determines  the  extent  of  the  neighborhood.  With  a  single  scale  Gaussian  mean  with </text>
<text top="1111" left="162" width="627" height="16" font="0">smaller  c  values,  the  details  in  the  image  are  clearly  visible  but  they  suffer  halo </text>
</page>
<page number="34" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">23 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">artifacts  and  poor  global  impression.  For  larger  c  values,  global  impression  is </text>
<text top="153" left="162" width="627" height="16" font="0">maintained  but  the  details  are  not  clear.  In  order  to  have  a  better  balance  between </text>
<text top="195" left="162" width="628" height="16" font="0">global  impressions,  visibility  details,  and  to  minimize  the  halo  artifacts,  multi-scale </text>
<text top="236" left="162" width="627" height="16" font="0">Gaussian  mean  is  considered  for  the  calculation  of  q.  It  has  been  observed  that  for </text>
<text top="278" left="162" width="627" height="16" font="0">three  scales  the  proposed  algorithm  produces  better  results.  The  filtering  of  the </text>
<text top="319" left="162" width="627" height="16" font="0">original intensity image I(x, y) of size M?N is performed by discrete 2D convolution </text>
<text top="360" left="162" width="288" height="16" font="0">with a multi-scale Gaussian function as </text>
<text top="402" left="162" width="5" height="16" font="0"> </text>
<text top="488" left="641" width="5" height="16" font="0"> </text>
<text top="525" left="695" width="5" height="16" font="2"><b> </b></text>
<text top="525" left="749" width="41" height="16" font="0">(3-8) </text>
<text top="566" left="162" width="627" height="16" font="0">where <i>Gi</i> is the weighted sum of i Gaussian functions with different scales (i=3 in this </text>
<text top="607" left="162" width="628" height="16" font="0">case).  The  image  is  normalized  to  make  the  range  between  0  and  1  and, </text>
<text top="650" left="162" width="46" height="16" font="0">hence,</text>
<text top="650" left="279" width="510" height="16" font="0"> can be obtained. Multi-level convolution results will be discussed in </text>
<text top="693" left="162" width="90" height="16" font="0">Section 3.3. </text>
<text top="735" left="162" width="5" height="16" font="0"> </text>
<text top="773" left="162" width="231" height="16" font="6"><i>3.1.4 High Frequency Boosting </i></text>
<text top="820" left="162" width="53" height="15" font="4">             </text>
<text top="819" left="215" width="574" height="16" font="0">In  the  intensity  enhancement  process, there  is  a  chance  of  losing  the  sharply </text>
<text top="861" left="162" width="627" height="16" font="0">detailed  regions  with  rapid  illumination  changes.  The  edges  and  fine  details  of  an </text>
<text top="902" left="162" width="627" height="16" font="0">image  are  important  in  many  image  processing  applications.  In  order  to  keep  those </text>
<text top="943" left="162" width="627" height="16" font="0">details,  a  high  frequency  filtered  image  is  added  to  the  enhanced  image.  The </text>
<text top="985" left="162" width="583" height="16" font="0">computation of high frequency components is achieved by a Laplacian operator. </text>
<text top="1026" left="162" width="4" height="15" font="4"> </text>
</page>
<page number="35" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">24 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="173" height="16" font="6"><i>3.1.4.1 Laplacian mask </i></text>
<text top="159" left="162" width="49" height="15" font="8"><i>      </i>      </text>
<text top="158" left="211" width="578" height="16" font="0">The  Laplacian  is  a  2D  measure  of  the  second  spatial  derivative  of  an  image. </text>
<text top="199" left="162" width="627" height="16" font="0">The  Laplacian  of  an  image  highlights  regions  of  rapid  intensity  changes.  Image </text>
<text top="241" left="162" width="627" height="16" font="0">sharpening  falls  into a category of  image processing called spatial  filtering. One can </text>
<text top="282" left="162" width="628" height="16" font="0">take  advantage  of  how  quickly  or  abruptly  gray-scale  values  or  colors  change  from </text>
<text top="323" left="162" width="627" height="16" font="0">one pixel to the next. First order operators (using  first derivative  measurements) are </text>
<text top="365" left="162" width="627" height="16" font="0">particularly  good  at  finding  edges  in  images.  The  Sobel  and  Roberts  edge </text>
<text top="406" left="162" width="627" height="16" font="0">enhancement  operators  are  examples  of  these  first  order  filters,  sometimes  called </text>
<text top="448" left="162" width="627" height="16" font="0">gradient filters. The Laplacian operator is an example of an isotropic second order or </text>
<text top="489" left="162" width="627" height="16" font="0">second  derivative  method of  enhancement.  It  is  particularly  good  at  finding  the  fine </text>
<text top="530" left="162" width="627" height="16" font="0">details in an image. Any feature with a sharp discontinuity (like noise, unfortunately) </text>
<text top="572" left="162" width="627" height="16" font="0">will  be  enhanced  by  a  Laplacian  operator.  Thus,  one  application  of  a  Laplacian </text>
<text top="613" left="162" width="627" height="16" font="0">operator is to restore fine details to an image that has been smoothed to remove noise. </text>
<text top="655" left="162" width="627" height="16" font="0">(The median operator is often used to remove noise in an image. The Laplacian L(x, </text>
<text top="696" left="162" width="436" height="16" font="0">y) of an image with pixel intensity values I(x, y) is given by </text>
<text top="737" left="162" width="5" height="16" font="0"> </text>
<text top="810" left="555" width="5" height="16" font="0"> </text>
<text top="847" left="727" width="63" height="16" font="0">     (3-9) </text>
<text top="888" left="162" width="628" height="16" font="0">The  input  image  is  represented  as  a  set  of  discrete  pixels,  thus  we  use  a  discrete </text>
<text top="930" left="162" width="627" height="16" font="0">convolution kernel that can approximate the second derivatives in the definition of the </text>
<text top="971" left="162" width="80" height="16" font="0">Laplacian. </text>
<text top="1013" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="36" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">25 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="197" height="16" font="6"><i>3.2 Contrast Enhancement </i></text>
<text top="158" left="162" width="627" height="16" font="6"><i>    </i>        In  the  enhancement  stage,  the  contrast  of  the  image  is  downgraded,  so  the </text>
<text top="199" left="162" width="627" height="16" font="0">appearance of the image is grayed out. In order to improve the overall quality of the </text>
<text top="241" left="162" width="627" height="16" font="0">images,  a  contrast  enhancement  process  must  be  applied  to  restore or  even  enhance </text>
<text top="282" left="162" width="627" height="16" font="0">the  original  image.  The  conventional  global  contrast  enhancement  methods  simply </text>
<text top="323" left="162" width="627" height="16" font="0">increase the intensity for bright pixels and decrease the intensity of dark pixels [14]. </text>
<text top="365" left="162" width="627" height="16" font="0">This process is the opposite of the requirement for our image. Increase in the intensity </text>
<text top="406" left="162" width="627" height="16" font="0">for  bright  pixels  and  decrease  in  the  intensity  for  dark  pixels  can  be  obtained  with </text>
<text top="448" left="162" width="627" height="16" font="0">significant  expanded  dynamic  range.  From  the  other  point  of  view,  these  methods </text>
<text top="489" left="162" width="627" height="16" font="0">have  limited  performance  for  bringing  out  fine  details  where  adjacent  pixels  have </text>
<text top="530" left="162" width="627" height="16" font="0">small  intensity  differences  about the  threshold  point  after  the  intensity  enhancement </text>
<text top="572" left="162" width="628" height="16" font="0">process.  Therefore,  a  surrounding  pixel  (neighborhood)-dependent  contrast </text>
<text top="613" left="162" width="628" height="16" font="0">enhancement  technique  is  needed.  A  surrounding  pixel-dependent  contrast </text>
<text top="655" left="162" width="627" height="16" font="0">enhancement technique might supply sufficient contrast, even higher than that of the </text>
<text top="696" left="162" width="627" height="16" font="0">original image, while maintaining the dynamic range compression that was set in the </text>
<text top="737" left="162" width="627" height="16" font="0">previous step. This adaptive process must be based on the intensity information of the </text>
<text top="779" left="162" width="372" height="16" font="0">processed (center) pixel and its surrounding pixels. </text>
<text top="820" left="162" width="5" height="16" font="0"> </text>
<text top="859" left="162" width="468" height="16" font="6"><i>3.2.1 Acquiring the Intensity Information of Surrounding Pixels  </i></text>
<text top="905" left="162" width="627" height="16" font="0">            The intensity information of surrounding pixels of a M×N grayscale image can </text>
<text top="946" left="162" width="627" height="16" font="0">be obtained  by  performing a 2D discrete spatial  convolution with a Gaussian kernel </text>
<text top="988" left="162" width="160" height="16" font="0">which is expressed as </text>
<text top="1029" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="1071" left="162" width="5" height="16" font="2"><b> </b></text>
</page>
<page number="37" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">26 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="177" left="669" width="4" height="21" font="3"> </text>
<text top="220" left="740" width="50" height="16" font="0">(3-10) </text>
<text top="261" left="162" width="5" height="16" font="0"> </text>
<text top="329" left="559" width="5" height="16" font="0"> </text>
<text top="366" left="740" width="50" height="16" font="0">(3-11) </text>
<text top="407" left="162" width="417" height="16" font="0">where c is the scale or Gaussian surround space constant. </text>
<text top="449" left="162" width="5" height="16" font="0"> </text>
<text top="490" left="162" width="627" height="16" font="0">            The estimated  illumination  is  based on the  fact that the  illumination changes </text>
<text top="531" left="162" width="627" height="16" font="0">quite smoothly in the parts of the image illuminated from the same luminous source, </text>
<text top="573" left="162" width="628" height="16" font="0">but  however,  it  can  also  present  abrupt  variation  when  the  scene  is  illuminated  by </text>
<text top="614" left="162" width="627" height="16" font="0">different  light  sources  in  the  case  of  background  lights.  To  reduce  the  influence  of </text>
<text top="656" left="162" width="627" height="16" font="0">neighborhood areas in which  luminance produces a high  contrast, which  would  lead </text>
<text top="697" left="162" width="628" height="16" font="0">to artifacts, a weighted averaging method is used for bright pixels. So the illumination </text>
<text top="739" left="162" width="628" height="16" font="0">estimate  values  for  less  than  80%  of  the  highest  gray-scale  value  (i.e.  255  for  8-bit </text>
<text top="780" left="162" width="623" height="16" font="0">image)  are  the  illumination  that  is  obtained  in  Equation  (3-10).  For  the  other  gray-</text>
<text top="821" left="162" width="628" height="16" font="0">scale  values,  it  is  a  weighted  average  of  illumination  and  intensity  values,  which </text>
<text top="863" left="162" width="627" height="16" font="0">decreases  the  contribution  of  the  illumination  linearly  as  the  value  of  the  gray  scale </text>
<text top="904" left="162" width="566" height="16" font="0">increases. This averaging can be mathematically expressed for 8-bit image as: </text>
<text top="946" left="162" width="5" height="16" font="0"> </text>
<text top="1019" left="711" width="5" height="16" font="0"> </text>
<text top="1056" left="740" width="50" height="16" font="0">(3-12) </text>
<text top="1098" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="38" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">27 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="286" height="16" font="6"><i>3.2.2 Intensity Transformation Process </i></text>
<text top="158" left="162" width="627" height="16" font="6"><i>            </i>After  obtaining  surrounding  intensity  information,  it  is  compared  with  the </text>
<text top="199" left="162" width="627" height="16" font="0">intensity  value  of  the  center  pixel.  The  result  is  used  to  identify  the  value  of  the </text>
<text top="241" left="162" width="293" height="16" font="0">corresponding enhanced intensity pixel <i>I</i></text>
<text top="247" left="455" width="17" height="11" font="9"><i>enh</i></text>
<text top="241" left="473" width="295" height="16" font="0">. These two processes can be defined as  </text>
<text top="282" left="162" width="5" height="16" font="0"> </text>
<text top="352" left="554" width="5" height="16" font="0"> </text>
<text top="389" left="740" width="50" height="16" font="0">(3-13) </text>
<text top="431" left="162" width="16" height="16" font="0">If </text>
<text top="437" left="234" width="3" height="11" font="14"> </text>
<text top="431" left="238" width="111" height="16" font="0">is less than 1, <i>I</i></text>
<text top="437" left="349" width="17" height="11" font="9"><i>enh</i></text>
<text top="431" left="367" width="32" height="16" font="6"><i>(x,y)</i></text>
<text top="427" left="399" width="29" height="11" font="9"><i>E(x,y)</i></text>
<text top="431" left="428" width="160" height="16" font="0"> will be greater than <i>I</i></text>
<text top="437" left="588" width="17" height="11" font="9"><i>enh</i></text>
<text top="431" left="606" width="184" height="16" font="6"><i>(x,y) </i>(i.e the center pixel </text>
<text top="473" left="162" width="289" height="16" font="0">is brighter than the surrounding pixels). </text>
<text top="514" left="162" width="5" height="16" font="0"> </text>
<text top="556" left="162" width="16" height="16" font="0">If </text>
<text top="562" left="234" width="3" height="11" font="14"> </text>
<text top="556" left="238" width="134" height="16" font="0">is greater than 1, <i>I</i></text>
<text top="562" left="372" width="17" height="11" font="9"><i>enh</i></text>
<text top="556" left="390" width="32" height="16" font="6"><i>(x,y)</i></text>
<text top="552" left="422" width="29" height="11" font="9"><i>E(x,y)</i></text>
<text top="556" left="451" width="137" height="16" font="0"> will be less than <i>I</i></text>
<text top="562" left="588" width="17" height="11" font="9"><i>enh</i></text>
<text top="556" left="606" width="184" height="16" font="6"><i>(x,y) </i>(i.e the center pixel </text>
<text top="598" left="162" width="279" height="16" font="0">is darker than the surrounding pixels). </text>
<text top="639" left="162" width="5" height="16" font="0"> </text>
<text top="699" left="162" width="480" height="16" font="6"><i>3.2.3 Contrast Enhancement with Multi-level Convolution Results </i></text>
<text top="744" left="162" width="627" height="16" font="6"><i>            </i>As discussed in Section 3.1.3, for better image quality, at the expense of losing </text>
<text top="786" left="162" width="627" height="16" font="0">some  details,  multiple  convolutions  are  necessary  to  achieve  a  graceful  balance </text>
<text top="827" left="162" width="627" height="16" font="0">between  dynamic  range  compression  and  tonal  rendition.  Then,  for  contrast </text>
<text top="869" left="162" width="627" height="16" font="0">enhancement, it is be preferable to use a linear combination of multiple convolutions </text>
<text top="910" left="162" width="627" height="16" font="0">with  different  scales.  Generally,  enhancement  with  a  small  scale  (i.e.  a  few </text>
<text top="951" left="162" width="627" height="16" font="0">neighboring  pixels  can  provide  intensity  information  of  about  the  nearest </text>
<text top="993" left="162" width="627" height="16" font="0">neighborhood  pixel)  convolution  tends  to  enhance  local  contrast  or  fine  details  and </text>
<text top="1034" left="162" width="627" height="16" font="0">enhancement with a  large scale (i.e.  large number of neighboring pixels can provide </text>
<text top="1076" left="162" width="627" height="16" font="0">intensity  information  of  the  entire  image)  convolution  can  provide  a  global  tonality, </text>
<text top="1117" left="162" width="627" height="16" font="0">with a smooth and  natural  looking  image. A  medium  scale can provide a  mixture of </text>
</page>
<page number="39" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">28 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">both  details  and  image  rendition.  Obviously,  convolution  with  multiple  scales  can </text>
<text top="150" left="162" width="627" height="20" font="3">yield  more  complete  information  on  the  image’s  intensity  distribution,  and,  hence, </text>
<text top="195" left="162" width="623" height="16" font="0">lead  to  more  balanced  image  enhancement.  The  contrast  enhancement  with  multi-</text>
<text top="236" left="162" width="459" height="16" font="0">scale convolutions can be described by the following equations </text>
<text top="278" left="162" width="5" height="16" font="0"> </text>
<text top="350" left="586" width="5" height="16" font="0"> </text>
<text top="387" left="740" width="50" height="16" font="0">(3-14) </text>
<text top="473" left="653" width="5" height="16" font="0"> </text>
<text top="510" left="740" width="50" height="16" font="0">(3-15) </text>
<text top="551" left="785" width="5" height="16" font="0"> </text>
<text top="603" left="552" width="5" height="16" font="0"> </text>
<text top="640" left="740" width="50" height="16" font="0">(3-16) </text>
<text top="702" left="565" width="5" height="16" font="0"> </text>
<text top="740" left="740" width="50" height="16" font="0">(3-17) </text>
<text top="799" left="162" width="129" height="16" font="6"><i>3.2.4 Auto Levels </i></text>
<text top="845" left="162" width="627" height="16" font="0">            Auto levels is a commonly used image enhancement function, which provides </text>
<text top="886" left="162" width="627" height="16" font="0">good  processed  results  for  input  images  that  have  narrow  dynamic  range.  After </text>
<text top="928" left="162" width="627" height="16" font="0">contrast enhancement process, some pixels, with  values close to the threshold point, </text>
<text top="969" left="162" width="627" height="16" font="0">have  very  small  intensity  differences  with  their  adjacent  pixels.  This  is  similar  to  a </text>
<text top="1010" left="162" width="177" height="16" font="0">contrast stretch process. </text>
<text top="1052" left="162" width="5" height="16" font="0"> </text>
<text top="1093" left="162" width="627" height="16" font="0">            For the enhancement of an overexposed image, there might be many colors at </text>
<text top="1135" left="162" width="627" height="16" font="0">the  high  end.  Similarly  in  the  process  of  enhancement  of  under  exposed  images  the </text>
</page>
<page number="40" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">29 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">low  end  has  many  colors.  The  Auto  levels  effect  detects  and  fixes  this  kind  of </text>
<text top="153" left="162" width="627" height="16" font="0">imbalance.  It  scans  through  the  levels  of  intensity  within  the  image  and  chooses  a </text>
<text top="195" left="162" width="627" height="16" font="0">level  that  should  be  regarded  as  black  (low  intensity)  and  another  that  should  be </text>
<text top="236" left="162" width="627" height="16" font="0">regarded as white (high intensity). It then stretches the levels in the image so that all </text>
<text top="278" left="162" width="627" height="16" font="0">the  intensities  present  lie  between  the  black  and  the  white  points.  This  results  in  an </text>
<text top="319" left="162" width="319" height="16" font="0">image with a good span of color intensities. </text>
<text top="360" left="162" width="5" height="16" font="0"> </text>
<text top="402" left="162" width="627" height="16" font="0">          To soothe the impact of outliers - small numbers of pixels at extreme values of </text>
<text top="443" left="162" width="627" height="16" font="0">intensity - a clipping percentage is used. By default, the value is 0.5%, which means </text>
<text top="485" left="162" width="627" height="16" font="0">that the  bottom  and  top  0.5% of  pixels  will  be  ignored  when  determining  the  black </text>
<text top="526" left="162" width="628" height="16" font="0">and  white  points.  This  process  makes  the  images  span  an  entire  range  of  color </text>
<text top="567" left="162" width="82" height="16" font="0">intensities. </text>
<text top="609" left="162" width="5" height="16" font="0"> </text>
<text top="668" left="162" width="162" height="16" font="6"><i>3.3 Color Restoration </i></text>
<text top="714" left="162" width="627" height="16" font="0">            The human visual system has a complex nonlinear mechanism that determines </text>
<text top="755" left="162" width="627" height="16" font="0">the  perceived  color  by  spatial  comparisons  of  color  signals  across  the  scene. </text>
<text top="797" left="162" width="627" height="16" font="0">Therefore,  it  is  a  complex  problem  for  digital  vision.  To  deal  with  this  problem, </text>
<text top="838" left="162" width="627" height="16" font="0">various  color  restoration  methods  exist.  They  involve  strong  assumptions,  such  as </text>
<text top="880" left="162" width="574" height="16" font="0">constant illumination, that are in general, unsatisfied in complex environments. </text>
<text top="921" left="162" width="5" height="16" font="0"> </text>
<text top="962" left="162" width="627" height="16" font="0">            In the LTSN algorithm, among the  basic  linear and  nonlinear approaches  for </text>
<text top="1004" left="162" width="627" height="16" font="0">color  consistency,  a  basic  linear  color  restoration  process  based  on  the  chromatic </text>
<text top="1045" left="162" width="545" height="16" font="0">information of the input image is applied. This process can be expressed as </text>
<text top="1087" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="41" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">30 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="141" left="572" width="5" height="16" font="0"> </text>
<text top="177" left="686" width="104" height="16" font="0">            (3-18) </text>
<text top="219" left="162" width="409" height="16" font="0">where j represents the red, green and blue spectral band. </text>
<text top="260" left="162" width="5" height="16" font="0"> </text>
<text top="299" left="162" width="100" height="16" font="6"><i>3.4 Summary </i></text>
<text top="345" left="162" width="627" height="16" font="0">            In  this  chapter,  a  new  nonlinear  image  enhancement  technique,  based  on </text>
<text top="386" left="162" width="427" height="16" font="0">LTSN, has been proposed. The goals of this algorithm are: </text>
<text top="428" left="189" width="12" height="16" font="0">a.</text>
<text top="427" left="202" width="5" height="17" font="15"> </text>
<text top="428" left="216" width="574" height="16" font="0">To  enhance  the  dark  pixels  and  bright  pixels  in  an  image  at  the  same  time </text>
<text top="469" left="216" width="311" height="16" font="0">using a special nonlinear transfer function. </text>
<text top="511" left="189" width="13" height="16" font="0">b.</text>
<text top="510" left="203" width="5" height="17" font="15"> </text>
<text top="511" left="216" width="516" height="16" font="0">To adaptively compute the control parameter in the nonlinear function. </text>
<text top="552" left="189" width="12" height="16" font="0">c.</text>
<text top="551" left="202" width="5" height="17" font="15"> </text>
<text top="552" left="216" width="563" height="16" font="0">To apply a contrast enhancement process to preserve important visual details. </text>
<text top="593" left="189" width="14" height="16" font="0">d.</text>
<text top="593" left="203" width="5" height="17" font="15"> </text>
<text top="593" left="216" width="574" height="16" font="0">To restore the color for the RGB  images  based on the  chromatic  information </text>
<text top="635" left="216" width="159" height="16" font="0">of the original image. </text>
<text top="676" left="162" width="5" height="16" font="0"> </text>
<text top="718" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="749" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="780" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="811" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="853" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="894" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="935" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="977" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="1018" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="1060" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="1101" left="162" width="5" height="16" font="2"><b> </b></text>
</page>
<page number="42" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="16" size="15" family="Times" color="#000000"/>
<text top="1180" left="465" width="20" height="17" font="1">31 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="154" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="195" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="237" left="423" width="106" height="16" font="2"><b>CHAPTER 4 </b></text>
<text top="296" left="389" width="175" height="16" font="2"><b>GPGPU PLATFORM </b></text>
<text top="321" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="342" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="363" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="383" left="162" width="628" height="16" font="0">             Graphics processing units (GPGPUs) have been used in the past as dedicated </text>
<text top="424" left="162" width="628" height="16" font="0">rendering devices  for computers and gaming consoles. In recent years  however  with </text>
<text top="466" left="162" width="627" height="16" font="0">the  advent  of  CUDA  and  OpenCL,  commodity  GPUs  have  become  increasingly </text>
<text top="507" left="162" width="627" height="16" font="0">programmable and are now capable of performing much more than graphics specific </text>
<text top="548" left="162" width="627" height="16" font="0">computations. The specialized rendering hardware provides an advantage for the GPU </text>
<text top="590" left="162" width="588" height="16" font="0">over the CPU when performing compute-intensive, highly parallel computations. </text>
<text top="631" left="162" width="5" height="16" font="0"> </text>
<text top="995" left="596" width="4" height="16" font="16"> </text>
<text top="1029" left="162" width="464" height="14" font="12"><i>Figure 4.1 CPU v/s GPU comparison of floating point operations per second</i></text>
<text top="1028" left="626" width="4" height="16" font="16"> </text>
<text top="1064" left="162" width="4" height="14" font="12"><i> </i></text>
</page>
<page number="43" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">32 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">            The primary reason for the increasing bandwidth and performance of NVIDIA </text>
<text top="150" left="162" width="627" height="20" font="3">GPU’s  over  Intel  CPUs  is  the  transistor  allocation  for  the  GPU  vs.  the  CPU.  The </text>
<text top="195" left="162" width="627" height="16" font="0">majority of the transistors on the GPU are devoted to data processing rather than flow </text>
<text top="236" left="162" width="190" height="16" font="0">control and data caching.  </text>
<text top="278" left="162" width="5" height="16" font="0"> </text>
<text top="512" left="699" width="5" height="16" font="0"> </text>
<text top="548" left="162" width="320" height="14" font="12"><i>Figure 4.2 Transistor allocations for CPU and GPU </i></text>
<text top="584" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="643" left="162" width="241" height="16" font="6"><i>4.1 GPU Hardware Architecture </i></text>
<text top="689" left="162" width="627" height="16" font="0">           The  C2070  NVIDIA  range  of  GPUs  is  based  on  the  revolutionary  Fermi </text>
<text top="730" left="162" width="627" height="16" font="0">architecture.  The  Fermi  processor  focused  on  increasing  the  raw  computer </text>
<text top="772" left="162" width="627" height="16" font="0">horsepower  and  through  architectural  innovations  offers  dramatically  increased </text>
<text top="813" left="162" width="628" height="16" font="0">programmability  and  compute  efficiency.  The  first  Fermi  based  GPU  (Figure  4.3), </text>
<text top="854" left="162" width="627" height="16" font="0">implemented with 3.0  billion transistors, features up to 512 CUDA cores.  A CUDA </text>
<text top="896" left="162" width="627" height="16" font="0">core  executes  a  floating  point  or  integer  instruction  per  clock  for  a  thread.  The  512 </text>
<text top="937" left="162" width="628" height="16" font="0">CUDA cores are organized in 16 Streaming Multiprocessors (SMs) of 32 cores each. </text>
<text top="979" left="162" width="628" height="16" font="0">The  GPU  has  six  64-bit  memory  partitions,  for  a  384-bit  memory  interface, </text>
<text top="1020" left="162" width="627" height="16" font="0">supporting  up  to  a  total  of  6  GB  of  GDDR5  DRAM  memory.  A  host  interface </text>
<text top="1062" left="162" width="627" height="16" font="0">connects  the  GPU  to  the  CPU  via  PCI-Express.  The  GigaThread  global  scheduler </text>
<text top="1103" left="162" width="364" height="16" font="0">distributes thread blocks to SM thread schedulers. </text>
</page>
<page number="44" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">33 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="153" left="162" width="627" height="16" font="0">            The  Fermi  architecture  greatly  improves  the  performance  with  its  32  CUDA </text>
<text top="195" left="162" width="627" height="16" font="0">cores  per  SM.  The  Dual  Warp  Scheduler  simultaneously  schedules  and  dispatches </text>
<text top="236" left="162" width="628" height="16" font="0">instructions  from  two  independent  warps.  Concurrent  kernel  execution  and  Out  of </text>
<text top="278" left="162" width="628" height="16" font="0">Order  thread  block  execution  helps  in  stream  processing  of  the  GPU  kernels  which </text>
<text top="319" left="162" width="339" height="16" font="0">was used in color restoration in this algorithm. </text>
<text top="360" left="162" width="5" height="16" font="0"> </text>
<text top="785" left="682" width="5" height="16" font="0"> </text>
<text top="821" left="162" width="185" height="14" font="12"><i>Figure 4.3 Fermi architecture </i></text>
<text top="855" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="909" left="162" width="365" height="16" font="6"><i>4.1.1 Third Generation Streaming Multiprocessor </i></text>
<text top="955" left="162" width="628" height="16" font="0">           The  architectural  innovations  used  in  the  Fermi  architecture  not only  make  it </text>
<text top="996" left="162" width="627" height="16" font="0">the most powerful SM, but also the most programmable and efficient. There are 512 </text>
<text top="1037" left="162" width="628" height="16" font="0">High Performance CUDA cores. Each SM features 32 CUDA processors—a fourfold </text>
<text top="1079" left="162" width="627" height="16" font="0">increase over  prior SM designs. Each CUDA processor has a  fully pipelined  integer </text>
<text top="1120" left="162" width="423" height="16" font="0">arithmetic logic unit (ALU) and floating point unit (FPU). </text>
</page>
<page number="45" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">34 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="629" left="595" width="5" height="16" font="0"> </text>
<text top="665" left="162" width="268" height="14" font="12"><i>Figure 4.4 Fermi Streaming Multiprocessor </i></text>
<text top="701" left="162" width="5" height="16" font="0"> </text>
<text top="742" left="162" width="628" height="16" font="0">            The Fermi Streaming Multiprocessor has 16 load/store units, allowing source </text>
<text top="784" left="162" width="627" height="16" font="0">and  destination  addresses  to  be  calculated  for  sixteen  threads  per  clock.  Supporting </text>
<text top="825" left="162" width="627" height="16" font="0">units  loads  and  store  the  data  at  each  address  to  cache  or  DRAM.  There  are  four </text>
<text top="866" left="162" width="627" height="16" font="0">Special  Function  Units  execute  transcendental  instructions  such  as  sin,  cosine, </text>
<text top="908" left="162" width="627" height="16" font="0">reciprocal, and square root. Each SFU executes one instruction per thread, per clock; a </text>
<text top="949" left="162" width="627" height="16" font="0">warp  executes  over  eight  clocks.  The  SFU  pipeline  is  decoupled  from  the  dispatch </text>
<text top="991" left="162" width="627" height="16" font="0">unit,  allowing  the  dispatch  unit  to  issue  to  other  execution  units  while  the  SFU  is </text>
<text top="1032" left="162" width="627" height="16" font="0">occupied.  The  new  SFU  structure  enabled  faster  computation  of  the  sine  transfer </text>
<text top="1073" left="162" width="627" height="16" font="0">function  in  the  LTSN  algorithm.  The  Dual  Warp  Scheduler  stands  out  from  the </text>
<text top="1115" left="162" width="627" height="16" font="0">previous  NVIDIA  GPU  designs.  The  SM  schedules  threads  in  groups  of  32  parallel </text>
</page>
<page number="46" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">35 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">threads  called  warps.  Each  SM  features  two  warp  schedulers  and  two  instruction </text>
<text top="153" left="162" width="548" height="16" font="0">dispatch units, allowing two warps to be issued and executed concurrently.  </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="233" left="162" width="206" height="16" font="6"><i>4.1.2 Fermi Dual Scheduler </i></text>
<text top="279" left="162" width="627" height="16" font="0">            Fermi’s  dual  warp  (Fig  4.5)  scheduler  selects  two  warps,  and  issues  one </text>
<text top="321" left="162" width="627" height="16" font="0">instruction from each warp to a group of sixteen cores, sixteen load/store units, or four </text>
<text top="358" left="162" width="627" height="20" font="3">SFUs. Warps execute independently and Fermi’s scheduler does not need to check for </text>
<text top="404" left="162" width="627" height="16" font="0">dependencies  from  within  the  instruction  stream.  Fermi  achieves  peak  performance </text>
<text top="445" left="162" width="334" height="16" font="0">with  the  introduction  of  the  Dual  Warp  Sche</text>
<text top="446" left="496" width="293" height="15" font="4">duler  and  the  two  instruction  and  dispatch </text>
<text top="486" left="162" width="44" height="15" font="4">units.  </text>
<text top="524" left="162" width="4" height="15" font="4"> </text>
<text top="918" left="724" width="4" height="15" font="4"> </text>
<text top="952" left="162" width="233" height="14" font="12"><i>Figure 4.5: The Dual Warp Scheduler </i></text>
<text top="986" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="1022" left="162" width="628" height="16" font="0">            Most  of  the  instructions  can  be  issued  concurrently  thus  improving  the </text>
<text top="1063" left="162" width="628" height="16" font="0">performance of compute bound algorithms. The  instructions can be dual  issued; two </text>
</page>
<page number="47" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">36 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">integer operations, two floating instructions  or  a  mix  of  integer,  floating  point,  load </text>
<text top="153" left="162" width="220" height="16" font="0">or store and SFU instructions. </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="233" left="162" width="187" height="16" font="6"><i>4.2 GPU Software Model </i></text>
<text top="279" left="162" width="628" height="16" font="0">            CUDA is the GPU programmable language that has created a lot of attention </text>
<text top="321" left="162" width="627" height="16" font="0">in the academic and scientific area. A CUDA program calls parallel kernels. A kernel </text>
<text top="362" left="162" width="627" height="16" font="0">executes  in  parallel  across  a  set  of  parallel  threads.  The  programmer  or  compiler </text>
<text top="404" left="162" width="627" height="16" font="0">organizes  these  threads  in  thread  blocks  and  grids  of  thread  blocks.  The  GPU </text>
<text top="445" left="162" width="627" height="16" font="0">instantiates a kernel program on a grid of parallel thread blocks. Each thread within a </text>
<text top="486" left="162" width="627" height="16" font="0">thread block executes an instance of the kernel, and has a thread ID within its thread </text>
<text top="528" left="162" width="627" height="16" font="0">block,  program  counter,  registers,  per-thread  private  memory,  inputs,  and  output </text>
<text top="569" left="162" width="56" height="16" font="0">results. </text>
<text top="986" left="162" width="5" height="16" font="0"> </text>
<text top="986" left="483" width="5" height="16" font="0"> </text>
<text top="1022" left="162" width="352" height="14" font="12"><i>Figure 4.6 CUDA Hierarchy of threads, blocks, and grids </i></text>
<text top="1057" left="162" width="628" height="16" font="0">CUDA Hierarchy of threads, blocks, and grids, with corresponding per-thread private, </text>
<text top="1099" left="162" width="627" height="16" font="0">per-block  shared,  and  per-application  global  memory  spaces.  A  grid  is  an  array  of </text>
</page>
<page number="48" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">37 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">thread  blocks  that  execute  the  same  kernel,  read  inputs  from  global  memory,  write </text>
<text top="153" left="162" width="627" height="16" font="0">results  to  global  memory,  and  synchronize  between  dependent  kernel  calls.  In  the </text>
<text top="195" left="162" width="628" height="16" font="0">CUDA  parallel  programming  model,  each  thread  has  a  per-thread  private  memory </text>
<text top="236" left="162" width="628" height="16" font="0">space  used  for  register  spills,  function  calls,  and  C  automatic  array  variables.  Each </text>
<text top="278" left="162" width="628" height="16" font="0">thread  block  has  a  per-Block  shared  memory  space  used  for  inter-thread </text>
<text top="319" left="162" width="628" height="16" font="0">communication, data sharing, and result sharing in parallel algorithms. Grids of thread </text>
<text top="360" left="162" width="628" height="16" font="0">blocks  share  results  in  Global  Memory  space  after  kernel-wide  global </text>
<text top="402" left="162" width="124" height="16" font="0">synchronization. </text>
<text top="443" left="162" width="5" height="16" font="0"> </text>
<text top="503" left="162" width="195" height="16" font="6"><i>4.2.1 Hardware Execution </i></text>
<text top="548" left="162" width="627" height="16" font="0">            CUDA’s hierarchy of threads maps to a hierarchy of processors on the GPU; a </text>
<text top="590" left="162" width="627" height="16" font="0">GPU  executes  one  or  more  kernel  grids;  a  streaming  multiprocessor  (SM)  executes </text>
<text top="631" left="162" width="627" height="16" font="0">one  or  more  thread  blocks;  and  CUDA  cores  and  other  execution  units  in  the  SM </text>
<text top="673" left="162" width="627" height="16" font="0">execute  threads.  The  SM  executes  threads  in  groups  of  32  threads  called  a  warp. </text>
<text top="714" left="162" width="627" height="16" font="0">While  programmers  can  generally  ignore  warp  execution  for  functional  correctness </text>
<text top="755" left="162" width="628" height="16" font="0">and  think  of  programming  one  thread,  they  can  greatly  improve  performance  by </text>
<text top="797" left="162" width="627" height="16" font="0">having  threads  in  a  warp  execute the  same  code  path  and  access  memory  in  nearby </text>
<text top="838" left="162" width="78" height="16" font="0">addresses. </text>
<text top="880" left="162" width="5" height="16" font="0"> </text>
<text top="911" left="162" width="5" height="16" font="0"> </text>
<text top="942" left="162" width="5" height="16" font="0"> </text>
<text top="973" left="162" width="5" height="16" font="0"> </text>
<text top="1004" left="162" width="5" height="16" font="0"> </text>
<text top="1035" left="162" width="5" height="16" font="0"> </text>
<text top="1066" left="162" width="5" height="16" font="0"> </text>
<text top="1097" left="162" width="5" height="16" font="0"> </text>
<text top="1128" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="49" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">38 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="154" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="195" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="237" left="423" width="106" height="16" font="2"><b>CHAPTER 5 </b></text>
<text top="296" left="359" width="233" height="16" font="2"><b>CUDA IMPLEMENTATION </b></text>
<text top="321" left="162" width="5" height="16" font="0"> </text>
<text top="341" left="162" width="9" height="16" font="0">  </text>
<text top="362" left="162" width="54" height="16" font="0">            </text>
<text top="383" left="162" width="628" height="16" font="0">             In Chapter 3 the hardware model of GPUs were explored and it’s potential to </text>
<text top="424" left="162" width="627" height="16" font="0">give high computational speeds. CUDA is the hardware and software architecture that </text>
<text top="466" left="162" width="627" height="16" font="0">enables NVIDIA GPUs to execute programs written with C, C++, Fortran, OpenCL, </text>
<text top="507" left="162" width="627" height="16" font="0">DirectCompute,  and  other  languages.  A  CUDA  program  calls  parallel  kernels.  A </text>
<text top="548" left="162" width="627" height="16" font="0">kernel  executes  in  parallel  across  a  set  of  parallel  threads.  The  programmer  or </text>
<text top="590" left="162" width="627" height="16" font="0">compiler  organizes  these  threads  in  thread  blocks  and  grids  of  thread  blocks.  The </text>
<text top="631" left="162" width="627" height="16" font="0">GPU  instantiates  a  kernel  program  on  a  grid  of  parallel  thread  blocks.  Each  thread </text>
<text top="673" left="162" width="627" height="16" font="0">within a thread block executes an instance of the kernel, and has a thread ID within its </text>
<text top="714" left="162" width="628" height="16" font="0">thread  block,  program  counter,  registers,  per-thread  private  memory,  inputs,  and </text>
<text top="755" left="162" width="628" height="16" font="0">output  results.  The  massive  parallelism  it  could  offer  is  due  to  the  large  number  of </text>
<text top="797" left="162" width="627" height="16" font="0">cores  and  light  weight  threads.    Computer  vision  algorithms  require  fast  response </text>
<text top="838" left="162" width="627" height="16" font="0">times.  The  video  enhancement  algorithms  processes  each  frame  which  are </text>
<text top="880" left="162" width="627" height="16" font="0">computationally  intensive,  making  them  impossible  for  real  time  applications  if </text>
<text top="921" left="162" width="628" height="16" font="0">executed sequentially. Each frame is processed for each pixel, making it a very strong </text>
<text top="962" left="162" width="627" height="16" font="0">candidate for GPU acceleration. They are SIMD instructions and can be offloaded to </text>
<text top="1004" left="162" width="627" height="16" font="0">the  GPU  and  free  the  CPU  for  other  tasks  such  as  device  IO,  user  interaction  or </text>
<text top="1045" left="162" width="257" height="16" font="0">running various background tasks.  </text>
<text top="1087" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="50" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">39 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">            The LTSN algorithm is computationally bound but holds great potential to be </text>
<text top="153" left="162" width="627" height="16" font="0">accelerated because of the parallel nature of the algorithm. The process of enhancing </text>
<text top="195" left="162" width="627" height="16" font="0">low  illumination  regions  and  compressing  high  illumination  or  contrast  regions  in  a </text>
<text top="236" left="162" width="627" height="16" font="0">nonlinear  fashion  is  done  in  parallel.  This  chapter  deals  with  the  approach  taken  to </text>
<text top="278" left="162" width="556" height="16" font="0">accelerate such computationally intense functions on the GPU using CUDA. </text>
<text top="319" left="162" width="5" height="16" font="0"> </text>
<text top="378" left="162" width="250" height="16" font="6"><i>5.1 Image Processing with CUDA </i></text>
<text top="424" left="162" width="628" height="16" font="0">            Image Processing is done per pixel with the number of light weight threads the </text>
<text top="466" left="162" width="628" height="16" font="0">CUDA device is able to launch for a kernel. A 2D grid is be laid over the image and is </text>
<text top="507" left="162" width="628" height="16" font="0">split  up  into  several  rectangular  sections  called  blocks  as  illustrated  in  Fig  5.1.  The </text>
<text top="548" left="162" width="628" height="16" font="0">image  is  divided  into  several  blocks  of  equal  size  for  simplicity.    If  the  image  has </text>
<text top="590" left="162" width="628" height="16" font="0">DIM x DIM pixels, DIM/32  x DIM/32  blocks  are launched so and to get one thread </text>
<text top="631" left="162" width="73" height="16" font="0">per pixel. </text>
<text top="673" left="162" width="5" height="16" font="0"> </text>
<text top="714" left="162" width="627" height="16" font="0">            Figure 5.1 illustrates a 2D hierarchy of blocks and threads to process a 48 x 32 </text>
<text top="755" left="162" width="628" height="16" font="0">pixel  image using one thread per pixel. The  number of threads  per  block  is (16, 16) </text>
<text top="797" left="162" width="327" height="16" font="0">i.e. 256 threads per block in this illustration.  </text>
<text top="838" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="51" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">40 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="566" left="573" width="5" height="16" font="0"> </text>
<text top="601" left="162" width="439" height="14" font="12"><i>Figure 5.1: 2D hierarchy of blocks and threads for a 48 x 32 pixel image</i></text>
<text top="600" left="601" width="5" height="16" font="0"> </text>
<text top="636" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="672" left="162" width="628" height="16" font="0">            Since the image is ridiculously small 48 x 32 pixels, blocks with width (48/16, </text>
<text top="713" left="162" width="628" height="16" font="0">32/16) i.e. (3, 2) having 16 x16 threads each are launched. The 2D structure makes it </text>
<text top="754" left="162" width="627" height="16" font="0">easier  for  the  programmer  to  assign  each  thread  to  a  pixel  for  computation  for  the </text>
<text top="796" left="162" width="255" height="16" font="0">enhancement of a frame or image.  </text>
<text top="837" left="162" width="5" height="16" font="0"> </text>
<text top="879" left="162" width="628" height="16" font="0">              A condition arises when the dimensions of the image are not a factor of the </text>
<text top="920" left="162" width="627" height="16" font="0">block dimension. The block dimension in 2D coordinates will be (32, 32) for a 1024 </text>
<text top="961" left="162" width="627" height="16" font="0">thread per block Fermi architecture GPU. If above equation (DIM/32, DIM/32) for an </text>
<text top="1003" left="162" width="628" height="16" font="0">image which is not a factor of 32, during run time we could get a segmentation error </text>
<text top="1040" left="162" width="627" height="20" font="3">or  a  clipped  image.  This  is  because  we  haven’t  assigned  enough  blocks  for  the </text>
<text top="1086" left="162" width="605" height="16" font="0">processing of the image. The following steps are used to find the number of blocks. </text>
<text top="1127" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="52" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="17" size="13" family="Times" color="#000000"/>
<text top="1180" left="465" width="20" height="17" font="1">41 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="153" left="162" width="5" height="16" font="0"> </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="236" left="162" width="628" height="16" font="0">             The  function  iDivUp returns the number of blocks needed  for the successful </text>
<text top="278" left="162" width="627" height="16" font="0">processing of the image. Below is a code snippet of how the correct number of blocks </text>
<text top="319" left="162" width="628" height="16" font="0">can  be  declared  for  processing  the  image,  where  BLOCK_DIM  is  the  number  of </text>
<text top="360" left="162" width="150" height="16" font="0">threads in the block. </text>
<text top="401" left="162" width="4" height="14" font="13"> </text>
<text top="434" left="162" width="9" height="15" font="17"> </text>
<text top="471" left="162" width="5" height="16" font="0"> </text>
<text top="512" left="162" width="432" height="16" font="0">This is an example code for processing an image in general </text>
<text top="553" left="162" width="5" height="16" font="0"> </text>
<text top="595" left="162" width="5" height="16" font="0"> </text>
<text top="636" left="162" width="5" height="16" font="0"> </text>
<text top="678" left="162" width="59" height="16" font="0">             </text>
<text top="719" left="162" width="627" height="16" font="0">The  first  three  lines  are  the  most  important  lines  in  the  kernel,  each  thread  takes  its </text>
<text top="760" left="162" width="627" height="16" font="0">index within its block as well as the index of its block within the grid and it translates </text>
<text top="802" left="162" width="321" height="16" font="0">into a unique (x,y)  index within the image.  </text>
<text top="843" left="162" width="5" height="16" font="0"> </text>
<text top="903" left="162" width="199" height="16" font="6"><i>5.2 GPU Kernel Processes </i></text>
<text top="948" left="162" width="628" height="16" font="0">             The  SIMD  functions  to  be  accelerated  on  the  GPU  are  run  as  kernels  as </text>
<text top="990" left="162" width="627" height="16" font="0">shown in Figure 5.2. Since the approach taken to accelerate the algorithm comprises </text>
<text top="1031" left="162" width="628" height="16" font="0">of the CPU and the GPU, there are data transfers between the device  and host during </text>
<text top="1073" left="162" width="627" height="16" font="0">run time. Since the  new generation  Fermi architecture GPU have  high  bandwidth of </text>
<text top="1114" left="162" width="627" height="16" font="0">the  order  of  150GB/s,  the  data  transfers  between  host  and  device  do  not  limit  the </text>
<text top="415" left="174" width="576" height="15" font="17">dim3 grid(iDivUp(height, BLOCK_DIM), iDivUp(width, BLOCK_DIM)); </text>
<text top="441" left="174" width="324" height="15" font="17">dim3 threads(BLOCK_DIM, BLOCK_DIM); </text>
<text top="470" left="174" width="4" height="17" font="1"> </text>
<text top="116" left="174" width="234" height="15" font="17">int iDivUp(int a, int b){ </text>
<text top="142" left="174" width="405" height="15" font="17">return (a % b != 0) ? (a / b + 1) : (a / b); </text>
<text top="167" left="174" width="18" height="15" font="17">} </text>
<text top="196" left="174" width="4" height="17" font="1"> </text>
<text top="565" left="174" width="540" height="15" font="17">__global__ void kernel(unsigned char *ptr , int height, int </text>
<text top="582" left="174" width="72" height="15" font="17">width){ </text>
<text top="599" left="174" width="495" height="15" font="17">        int x = blockDim.x * blockIdx.x + threadIdx.x; </text>
<text top="617" left="174" width="495" height="15" font="17">        int y = blockDim.y * blockIdx.y + threadIdx.y; </text>
<text top="633" left="174" width="306" height="15" font="17">        int offset = y + x*width; </text>
<text top="650" left="174" width="63" height="15" font="17">       </text>
<text top="667" left="174" width="369" height="15" font="17">        ptr[offset] = 255 – ptr[offset]; </text>
<text top="684" left="174" width="18" height="15" font="17">} </text>
<text top="701" left="174" width="9" height="15" font="17"> </text>
<text top="718" left="174" width="9" height="15" font="17"> </text>
<text top="735" left="174" width="9" height="15" font="17"> </text>
</page>
<page number="53" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">42 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="628" height="16" font="0">performance of the algorithm. In Figure 4.2 the orange blocks are the CPU stages and </text>
<text top="153" left="162" width="627" height="16" font="0">the  blue  blocks  represent  the  GPU  kernels.  The  luminance  intensity  parameters  are </text>
<text top="195" left="162" width="627" height="16" font="0">transferred  to  the  GPU  pipeline  for  computing  the  Gaussian  average.  The  GPU </text>
<text top="236" left="162" width="627" height="16" font="0">pipeline  also  consists  of  the  sine  nonlinear  transfer  function  calculation.  The  results </text>
<text top="278" left="162" width="627" height="16" font="0">are  copied  back  to  the  CPU  and  a  contrast  stretch  functionality  is  carried  out.  The </text>
<text top="319" left="162" width="627" height="16" font="0">results  obtained  from  the  contrast  stretch  function  are  copied  to  the  GPU  for </text>
<text top="360" left="162" width="627" height="16" font="0">rendering. The CUDA device restores the color of the  image, so that the  fine details </text>
<text top="402" left="162" width="331" height="16" font="0">and the color of the enhanced image is intact. </text>
<text top="443" left="162" width="9" height="16" font="0">  </text>
<text top="485" left="162" width="628" height="16" font="0">           The  OpenCV  Gaussian  filter  is  replaced  by  Deriche's  recursive  method  [3] </text>
<text top="526" left="162" width="627" height="16" font="0">implemented in CUDA. This filter uses the previous outputs of the filter as well as the </text>
<text top="567" left="162" width="627" height="16" font="0">previous inputs. This is known as an Infinite  Response filter (IIR), since its response </text>
<text top="609" left="162" width="627" height="16" font="0">to  an  input  response  can  last  forever.  The  advantage  of  using  this  method  over  the </text>
<text top="650" left="162" width="627" height="16" font="0">conventional Gaussian  filter  method is  because the execution time  is  independent of </text>
<text top="692" left="162" width="628" height="16" font="0">the  filter width.  The GPU processes columns of  the  image  in parallel  using  CUDA </text>
<text top="733" left="162" width="627" height="16" font="0">programming language. To avoid non-coalesced reads for the row pass we transpose </text>
<text top="775" left="162" width="620" height="16" font="0">the image and then transpose it back again afterwards. The reason why this approach  </text>
<text top="816" left="162" width="5" height="16" font="0"> </text>
<text top="847" left="162" width="5" height="16" font="0"> </text>
<text top="878" left="162" width="5" height="16" font="0"> </text>
<text top="909" left="162" width="5" height="16" font="0"> </text>
<text top="940" left="162" width="5" height="16" font="0"> </text>
<text top="971" left="162" width="5" height="16" font="0"> </text>
<text top="1002" left="162" width="5" height="16" font="0"> </text>
<text top="1033" left="162" width="5" height="16" font="0"> </text>
<text top="1064" left="162" width="5" height="16" font="0"> </text>
<text top="1095" left="162" width="5" height="16" font="0"> </text>
<text top="1126" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="54" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">43 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="143" left="162" width="5" height="16" font="0"> </text>
<text top="174" left="162" width="5" height="16" font="0"> </text>
<text top="205" left="162" width="4" height="17" font="1"> </text>
<text top="243" left="162" width="5" height="16" font="0"> </text>
<text top="274" left="162" width="5" height="16" font="0"> </text>
<text top="305" left="162" width="5" height="16" font="0"> </text>
<text top="336" left="162" width="4" height="17" font="1"> </text>
<text top="374" left="162" width="4" height="17" font="1"> </text>
<text top="412" left="162" width="4" height="17" font="1"> </text>
<text top="450" left="162" width="4" height="17" font="1"> </text>
<text top="488" left="162" width="4" height="17" font="1"> </text>
<text top="527" left="162" width="4" height="17" font="1"> </text>
<text top="565" left="162" width="4" height="17" font="1"> </text>
<text top="603" left="162" width="4" height="17" font="1"> </text>
<text top="642" left="162" width="4" height="17" font="1"> </text>
<text top="680" left="162" width="4" height="17" font="1"> </text>
<text top="718" left="162" width="4" height="17" font="1"> </text>
<text top="756" left="162" width="4" height="17" font="1"> </text>
<text top="794" left="162" width="4" height="17" font="1"> </text>
<text top="832" left="162" width="4" height="17" font="1"> </text>
<text top="870" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="905" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="940" left="162" width="233" height="14" font="12"><i>Figure 5.2 GPU kernels flow diagram </i></text>
<text top="975" left="162" width="59" height="16" font="0">             </text>
<text top="1006" left="162" width="628" height="16" font="0">is  taken  rather  than  reading  the  rows  and  columns  together  is  because  the  highest </text>
<text top="1048" left="162" width="628" height="16" font="0">latency instructions while reading from global memory is 400-600 clock cycles. There </text>
<text top="1089" left="162" width="627" height="16" font="0">is  likely  to  be  a  performance  bottleneck,  but  optimizations  can  greatly  increase  the </text>
<text top="1131" left="162" width="627" height="16" font="0">performance.  Coalescing  greatly  improves  the  throughput  and  is  critical  to  small  or </text>
<text top="196" left="234" width="91" height="17" font="1">GPU Pipeline </text>
<text top="271" left="395" width="120" height="17" font="1">Gaussian Smooth </text>
<text top="299" left="625" width="94" height="17" font="1">Smooth sig=5 </text>
<text top="354" left="619" width="103" height="17" font="1">Smooth sig=45 </text>
<text top="392" left="669" width="4" height="17" font="1"> </text>
<text top="419" left="619" width="103" height="17" font="1">Smooth sig=65 </text>
<text top="457" left="669" width="4" height="17" font="1"> </text>
<text top="483" left="395" width="123" height="17" font="1">Gaussian Average </text>
<text top="721" left="407" width="121" height="17" font="1">Color Restoration </text>
<text top="123" left="263" width="32" height="17" font="1">CPU </text>
<text top="499" left="261" width="32" height="17" font="1">CPU </text>
<text top="882" left="270" width="32" height="17" font="1">CPU </text>
<text top="661" left="610" width="98" height="17" font="1">  Red Enhance </text>
<text top="738" left="611" width="102" height="17" font="1">  Blue Enhance </text>
<text top="805" left="613" width="110" height="17" font="1"> Green Enhance </text>
<text top="590" left="405" width="102" height="17" font="1">Sine Nonlinear </text>
<text top="613" left="426" width="60" height="17" font="1">function </text>
<text top="655" left="261" width="32" height="17" font="1">CPU </text>
</page>
<page number="55" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">44 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="628" height="16" font="0">memory bound kernels. The Gaussian filter is applied to the luminance for 3 values of </text>
<text top="153" left="162" width="628" height="16" font="0">sigma  and  their  resultant  values  are  averaged  thus  utilizing  the  bandwidth  and </text>
<text top="195" left="162" width="285" height="16" font="0">parallelism of the device to the fullest.  </text>
<text top="236" left="162" width="5" height="16" font="0"> </text>
<text top="278" left="162" width="627" height="16" font="0">          Figure 5.2 illustrates that the Gaussian Averaging output is transferred from the </text>
<text top="319" left="162" width="627" height="16" font="0">CUDA device to the CPU. The most computationally intensive part of the algorithm </text>
<text top="360" left="162" width="627" height="16" font="0">is the  sine  nonlinear  transfer  function, which  is computed  in parallel  by the GPU  in </text>
<text top="402" left="162" width="627" height="16" font="0">CUDA for each pixel. The parallel hardware and the large number of threads makes it </text>
<text top="443" left="162" width="627" height="16" font="0">possible to compute the sine nonlinear transfer function for each pixel. This enhances </text>
<text top="485" left="162" width="627" height="16" font="0">the  performance  and  ensures  a  very  high  speed  up  compared  to  the  CPU  that  goes </text>
<text top="526" left="162" width="627" height="16" font="0">through each pixel in one cycle. The output of the transfer function is transferred from </text>
<text top="567" left="162" width="627" height="16" font="0">the  GPU  to  the  CPU.  The  CPU  does  the  contrast  stretch  which  is  efficient  on  the </text>
<text top="609" left="162" width="627" height="16" font="0">CPU,  and  the  output  of  the  contrast  stretch  function  is  transferred to the  GPU  color </text>
<text top="650" left="162" width="627" height="16" font="0">restoration kernel. The GPU color restoration kernel enhances the RGB components. </text>
<text top="692" left="162" width="627" height="16" font="0">Three kernels are actively dedicated to the color enhancement of the image. Streams </text>
<text top="733" left="162" width="627" height="16" font="0">were used for asynchronous execution of the kernels, because the three kernels could </text>
<text top="775" left="162" width="627" height="16" font="0">be executed independent of each other. This approach has an upper edge compared to </text>
<text top="816" left="162" width="627" height="16" font="0">the  execution  of  the  three  color  restoration  kernels  in  sync.  Thus  an  efficient </text>
<text top="857" left="162" width="627" height="16" font="0">CPU+GPU  system  was  developed  to  accelerate  the  LTSN  video  enhancement </text>
<text top="899" left="162" width="79" height="16" font="0">algorithm. </text>
<text top="941" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="961" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="982" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1002" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1023" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1044" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1065" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1085" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1106" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1127" left="474" width="5" height="16" font="2"><b> </b></text>
</page>
<page number="56" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">45 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="133" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="154" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="174" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="195" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="216" left="423" width="106" height="16" font="2"><b>CHAPTER 6 </b></text>
<text top="237" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="275" left="304" width="344" height="16" font="2"><b>EXPERIMENTAL SETUP AND RESULTS </b></text>
<text top="300" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="321" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="342" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="362" left="162" width="628" height="16" font="2"><b>             </b>This  chapter  deals  with  the  approaches  taken  to  detect  the  SIMD  functions </text>
<text top="404" left="162" width="627" height="16" font="0">that could be accelerated using CUDA. The experimentation starts with profiling the </text>
<text top="441" left="162" width="627" height="20" font="3">sequential algorithm. An estimation of the total speedup is estimated using Amdahl’s </text>
<text top="486" left="162" width="628" height="16" font="0">law  to  determine  whether  accelerating  the  function  would  give  any  significant </text>
<text top="528" left="162" width="73" height="16" font="0">speedup.  </text>
<text top="569" left="162" width="5" height="16" font="0"> </text>
<text top="629" left="162" width="97" height="16" font="6"><i>6.1 Profiling </i></text>
<text top="674" left="162" width="627" height="16" font="0">         To  get  a  comprehensive  idea  of  the  system  workload  distribution  we  have </text>
<text top="716" left="162" width="628" height="16" font="0">measured  the  computational  complexity  of  each  individual  component  of  the  LTSN </text>
<text top="757" left="162" width="628" height="16" font="0">enhancement  algorithm.  Figure  6.1  shows  the  complexity  profiling  of  the  building </text>
<text top="799" left="162" width="628" height="16" font="0">blocks of the algorithm. The benchmarking was done on an Intel Xeon 5650 processor </text>
<text top="840" left="162" width="628" height="16" font="0">which has a clock  speed of 2.66 GHz, memory size 288 GB and maximum memory </text>
<text top="881" left="162" width="168" height="16" font="0">bandwidth of 32GB/s.  </text>
<text top="923" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="57" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">46 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="405" left="634" width="126" height="16" font="6"><i>                            </i></text>
<text top="431" left="162" width="527" height="14" font="12"><i>Figure 6.1 Complexity profiling of the building blocks of the proposed LTSN algorithm </i></text>
<text top="459" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="489" left="162" width="627" height="16" font="0">           Benchmarking  of  the  algorithm  is  important,  as  running  the  whole  algorithm </text>
<text top="530" left="162" width="628" height="16" font="0">on  the  device  could  lead  to  an  out  of  memory  error.  Only  6GB  of  memory  can  be </text>
<text top="572" left="162" width="627" height="16" font="0">allocated on the GPU. If the entire algorithm is run on the GPU hardware, there will </text>
<text top="613" left="162" width="627" height="16" font="0">not be enough memory for all the data structures used for the computation. For faster </text>
<text top="655" left="162" width="628" height="16" font="0">execution and streams processing page locked memory was allocated and thus virtual </text>
<text top="696" left="162" width="294" height="16" font="0">memory translation will not be possible. </text>
<text top="737" left="162" width="628" height="16" font="0">           The  most  time  consuming  part  of  the  algorithm  from  Fig  6.1  is  the  Sine </text>
<text top="779" left="162" width="627" height="16" font="0">Nonlinear  Function  which  constitutes  47%  of  the  overall  processing  time.  Even  the </text>
<text top="820" left="162" width="628" height="16" font="0">most efficient Sine calculation based on the  Maclaurin series take 47% of  CPU time </text>
<text top="862" left="162" width="627" height="16" font="0">for processing an image. The proposed design of the GPU kernels has led to massive </text>
<text top="903" left="162" width="627" height="16" font="0">parallelism and significant acceleration. The analysis of the acceleration and speedup </text>
<text top="944" left="162" width="628" height="16" font="0">is mentioned in later sub sections in this chapter. This time consuming function have </text>
<text top="986" left="162" width="558" height="16" font="0">been efficiently mapped into the GPU with optimized CUDA programming.  </text>
<text top="1027" left="162" width="627" height="16" font="0">            From  the  profiling  chart  in  Fig  6.1  it  is  also  evident  that  the  Gaussian </text>
<text top="1069" left="162" width="627" height="16" font="0">smoothening  and  averaging  function  accounts  to  27%  of  the  total  processing  time. </text>
<text top="1110" left="162" width="627" height="16" font="0">The  OpenCV  Gaussian  smoothening  function  has  been  replaced  by  a  more  efficient </text>
</page>
<page number="58" position="absolute" top="0" left="0" height="1262" width="893">
	<fontspec id="18" size="14" family="Times" color="#ffffff"/>
<text top="1180" left="465" width="20" height="17" font="1">47 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="628" height="16" font="0">recursive  Gaussian  smoothening  filter.  The  recursive  Gaussian  smoothening  and </text>
<text top="153" left="162" width="574" height="16" font="0">averaging function have been successfully mapped into the GPU using CUDA. </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="226" left="162" width="628" height="16" font="0">            The  color  restoration  functionality  done  on  the  CPU  took  16%  of  the  total </text>
<text top="267" left="162" width="628" height="16" font="0">processing  time  and  thus  it  was  taken  into  consideration  for  acceleration.  Since  the </text>
<text top="309" left="162" width="627" height="16" font="0">same kernel were used for the enhancing the red, blue and green components, stream </text>
<text top="350" left="162" width="627" height="16" font="0">processing  was  possible.  A  study  was  done  to  compare  the  results  of  stream </text>
<text top="391" left="162" width="627" height="16" font="0">processing  for  speed  and  accuracy.  For  larger  images,  the  addition  of  a  color </text>
<text top="433" left="162" width="330" height="16" font="0">restoration GPU kernel yielded better results. </text>
<text top="474" left="162" width="5" height="16" font="0"> </text>
<text top="516" left="162" width="5" height="16" font="0"> </text>
<text top="516" left="216" width="573" height="16" font="0">The  approach  taken  for  optimizing  and  accelerating  the  video  enhancement </text>
<text top="557" left="162" width="628" height="16" font="0">algorithm  was  using  CPU  and  a  GPU,  thus  it  was  important  to  benchmark  the </text>
<text top="598" left="162" width="627" height="16" font="0">algorithm. Some functions run fast on the CPU, so trying to export those functions to </text>
<text top="640" left="162" width="627" height="16" font="0">the  GPU  could  result  in  little  or  no  speedup.  In  some  cases  it  could  even  lead  to  a </text>
<text top="681" left="162" width="627" height="16" font="0">decrease in processing speed due to the memory bottleneck, therefore it’s important to </text>
<text top="723" left="162" width="628" height="16" font="0">choose  the  SIMD  instructions  that  need  to  be  offloaded  to  the  GPU.  Table  6.1 </text>
<text top="764" left="162" width="447" height="16" font="0">describes the time taken for the GPU to do memory transfers. </text>
<text top="805" left="162" width="5" height="16" font="0"> </text>
<text top="848" left="169" width="83" height="17" font="18"><b>Image Sizes </b></text>
<text top="848" left="346" width="78" height="17" font="18"><b>Size(bytes) </b></text>
<text top="848" left="469" width="165" height="17" font="18"><b>Data Transfer Time(ms) </b></text>
<text top="869" left="169" width="62" height="17" font="1">640X480 </text>
<text top="869" left="394" width="62" height="17" font="1">1228800 </text>
<text top="869" left="641" width="41" height="17" font="1">0.292 </text>
<text top="890" left="169" width="62" height="17" font="1">800X600 </text>
<text top="890" left="394" width="62" height="17" font="1">1920000 </text>
<text top="890" left="641" width="41" height="17" font="1">0.394 </text>
<text top="912" left="169" width="79" height="17" font="1">1024X1024 </text>
<text top="912" left="394" width="62" height="17" font="1">4194304 </text>
<text top="912" left="632" width="50" height="17" font="1">0.8315 </text>
<text top="933" left="169" width="79" height="17" font="1">1600X1200 </text>
<text top="933" left="394" width="62" height="17" font="1">7680000 </text>
<text top="933" left="632" width="50" height="17" font="1">1.5455 </text>
<text top="954" left="169" width="79" height="17" font="1">2272X1704 </text>
<text top="954" left="386" width="71" height="17" font="1">15485952 </text>
<text top="954" left="632" width="50" height="17" font="1">4.3231 </text>
<text top="976" left="169" width="79" height="17" font="1">2816X2816 </text>
<text top="976" left="386" width="71" height="17" font="1">31719424 </text>
<text top="976" left="632" width="50" height="17" font="1">5.2675 </text>
<text top="997" left="169" width="79" height="17" font="1">4480X3360 </text>
<text top="997" left="386" width="71" height="17" font="1">60211200 </text>
<text top="997" left="632" width="50" height="17" font="1">9.5865 </text>
<text top="1018" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="1052" left="162" width="209" height="14" font="12"><i>Table 6.1 GPU memory copy time </i></text>
<text top="1088" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="59" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">48 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="628" height="16" font="0">From the above table its evident that memory transfer times to and from the GPU are </text>
<text top="153" left="162" width="628" height="16" font="0">bottlenecks  to  the  overall  performance  of  the  algorithm.  Thus  compute  bound </text>
<text top="195" left="162" width="628" height="16" font="0">functions  are  chosen  such  that  the  memory  copy  time  can  be  leveraged  with  the </text>
<text top="236" left="162" width="249" height="16" font="0">computational speed of the GPU.  </text>
<text top="278" left="162" width="14" height="16" font="0">   </text>
<text top="337" left="162" width="317" height="16" font="6"><i>6.2 Sine Non Linear Function Performance </i></text>
<text top="383" left="162" width="627" height="16" font="0">            The Sine Non Linear  function calculation,  a critical component of the  LTSN </text>
<text top="424" left="162" width="627" height="16" font="0">video enhancement algorithm was computed on the GPU using CUDA. OpenCV 32 </text>
<text top="466" left="162" width="627" height="16" font="0">bit floating point structures were copied to the device and the computation was done </text>
<text top="507" left="162" width="628" height="16" font="0">for  each  pixel.  The  speedup  achieved  by  GPU  computation  of  the  functionality  was </text>
<text top="548" left="162" width="627" height="16" font="0">above  expected.  In  Figure  6.2  we  could  see  that  as  the  resolution  of  the  frame </text>
<text top="590" left="162" width="627" height="16" font="0">increases, the difference between the execution times of the CPU and GPU increases. </text>
<text top="631" left="162" width="627" height="16" font="0">The  computation  done  by  the  Sine  Nonlinear  function  kernel  on  the  GPU  gives </text>
<text top="673" left="162" width="627" height="16" font="0">tremendous  performance  improvement  compared  to  the  CPU  for  high  resolution </text>
<text top="714" left="162" width="58" height="16" font="0">frames. </text>
<text top="755" left="162" width="4" height="15" font="4"> </text>
<text top="1061" left="582" width="4" height="15" font="4"> </text>
<text top="1094" left="162" width="368" height="14" font="12"><i>Figure 6.2 Performance analysis of Sine Nonlinear function  </i></text>
<text top="1129" left="162" width="4" height="14" font="12"><i> </i></text>
</page>
<page number="60" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">49 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="127" left="177" width="83" height="17" font="18"><b>Image Sizes </b></text>
<text top="127" left="372" width="87" height="17" font="18"><b>CPU Time(s) </b></text>
<text top="127" left="489" width="88" height="17" font="18"><b>GPU Time(s) </b></text>
<text top="127" left="605" width="69" height="17" font="18"><b>Speed Up </b></text>
<text top="163" left="177" width="62" height="17" font="1">400X300 </text>
<text top="163" left="372" width="66" height="17" font="1">0.015776 </text>
<text top="163" left="489" width="66" height="17" font="1">0.001246 </text>
<text top="163" left="605" width="92" height="17" font="1">12.66621705 </text>
<text top="198" left="177" width="62" height="17" font="1">640X480 </text>
<text top="198" left="372" width="66" height="17" font="1">0.043752 </text>
<text top="198" left="489" width="66" height="17" font="1">0.002056 </text>
<text top="198" left="605" width="75" height="17" font="1">21.280107 </text>
<text top="234" left="177" width="62" height="17" font="1">800X600 </text>
<text top="234" left="372" width="66" height="17" font="1">0.067337 </text>
<text top="234" left="489" width="66" height="17" font="1">0.003178 </text>
<text top="234" left="605" width="92" height="17" font="1">21.18819265 </text>
<text top="270" left="177" width="71" height="17" font="1">1024X768 </text>
<text top="270" left="372" width="66" height="17" font="1">0.107272 </text>
<text top="270" left="489" width="66" height="17" font="1">0.004832 </text>
<text top="270" left="605" width="92" height="17" font="1">22.20102031 </text>
<text top="311" left="177" width="79" height="17" font="1">1600X1200 </text>
<text top="311" left="372" width="66" height="17" font="1">0.247454 </text>
<text top="311" left="489" width="66" height="17" font="1">0.010744 </text>
<text top="311" left="605" width="92" height="17" font="1">23.03118863 </text>
<text top="347" left="177" width="79" height="17" font="1">2272X1704 </text>
<text top="347" left="372" width="66" height="17" font="1">0.509652 </text>
<text top="347" left="489" width="66" height="17" font="1">0.015476 </text>
<text top="347" left="605" width="92" height="17" font="1">32.93112695 </text>
<text top="382" left="177" width="79" height="17" font="1">2816X2112 </text>
<text top="382" left="372" width="58" height="17" font="1">1.02599 </text>
<text top="382" left="489" width="66" height="17" font="1">0.038282 </text>
<text top="382" left="605" width="92" height="17" font="1">36.80070633 </text>
<text top="403" left="162" width="4" height="14" font="13"> </text>
<text top="429" left="162" width="413" height="14" font="12"><i> Table 6.2 Execution times and speed up of Sine Nonlinear function  </i></text>
<text top="456" left="162" width="5" height="16" font="0"> </text>
<text top="487" left="162" width="628" height="16" font="0">            The  –fastmath  function,  when  mentioned  in the Makefile  during compilation </text>
<text top="528" left="162" width="628" height="16" font="0">and execution, increases the performance is improved to a great extent. The fastmath </text>
<text top="570" left="162" width="627" height="16" font="0">function uses the ―special function unit‖ in each multiprocessor taking one instruction, </text>
<text top="611" left="162" width="627" height="16" font="0">whereas  the  normal  implementation  can  take  many  instructions.  If  we  look  at  the </text>
<text top="652" left="162" width="628" height="16" font="0">disassembly listing of the code we could find that the number of instructions is greatly </text>
<text top="694" left="162" width="627" height="16" font="0">reduced  when  fastmath  functions  are  used.  In  situations  where  accuracy  is  needed </text>
<text top="735" left="162" width="627" height="16" font="0">more  than  speed,  we  tend  to  avoid  these  functions,  but  in  image  processing </text>
<text top="777" left="162" width="627" height="16" font="0">applications and computer vision applications, processing speeds gains the upper edge </text>
<text top="818" left="162" width="627" height="16" font="0">over  accuracy.  Using  these  functions,  the  output  results  did  not  look  any  different </text>
<text top="860" left="162" width="574" height="16" font="0">from what was achieved by the ordinary functions or the CPU implementation. </text>
<text top="901" left="162" width="5" height="16" font="0"> </text>
<text top="942" left="162" width="628" height="16" font="0">          By achieving  a good  speed  on the sine  nonlinear  function, which was  close to </text>
<text top="984" left="162" width="627" height="16" font="0">36x  times  for  high  resolution  images,  the  overall  performance  of  the  algorithm  was </text>
<text top="1025" left="162" width="628" height="16" font="0">improved to around 1.8 times. This experiment was a good way to prove the power of </text>
<text top="1067" left="162" width="627" height="16" font="0">the GPU on compute bound operations. The large number of cores in the GPU with a </text>
<text top="1108" left="162" width="627" height="16" font="0">functional unit makes it ideal for computing arithmetic and logic operations for large </text>
</page>
<page number="61" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">50 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">data[5][7]. Figure 6.3 shows the speedup gained for various frame resolutions/image </text>
<text top="153" left="162" width="605" height="16" font="0">sizes and we can notice the large increase in speedups for higher resolution images. </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="487" left="600" width="5" height="16" font="0"> </text>
<text top="513" left="162" width="496" height="14" font="12"><i> Figure 6.3 Speedup gained by the Sine Nonlinear function for various image sizes</i></text>
<text top="511" left="658" width="5" height="16" font="0"> </text>
<text top="540" left="162" width="5" height="16" font="0"> </text>
<text top="589" left="162" width="515" height="16" font="6"><i>6.3 Gaussian Smoothening and Averaging Kernel Performance</i><b>            </b><i> </i></text>
<text top="635" left="162" width="627" height="16" font="7"><i><b>            </b></i>The Gaussian smoothening was done for 3 values of sigma and their average </text>
<text top="676" left="162" width="627" height="16" font="0">was  computed  on  the  GPU  using  CUDA  programming.  Initially  when  the  recursive </text>
<text top="718" left="162" width="627" height="16" font="0">Gaussian blur algorithm [2] was implemented in CUDA for 3 different sigma levels, </text>
<text top="759" left="162" width="627" height="16" font="0">we  had  to  copy  3  data  structures  to  the  OpenCV  structures  for  the  CPU  to  process </text>
<text top="800" left="162" width="628" height="16" font="0">these  as  inputs  to  the  averaging  function.  In  order  to  minimize  the  number  of  data </text>
<text top="842" left="162" width="627" height="16" font="0">structures  being  copied  from  and  to  the  device,  we  decided  to  do  the  averaging </text>
<text top="883" left="162" width="627" height="16" font="0">function  within the  CUDA kernel  so that the number of data structures copied  from </text>
<text top="925" left="162" width="628" height="16" font="0">the  device  is  minimized  to  one.  And  only  one  structure,  which  is  the  mean  of  the </text>
<text top="966" left="162" width="627" height="16" font="0">smoothened luminance, is copied to the OpenCV structure. This greatly increased the </text>
<text top="1008" left="162" width="627" height="16" font="0">efficiency as the copy to the OpenCV structure took significant amount of CPU time. </text>
<text top="1049" left="162" width="628" height="16" font="0">Therefore  we  reduced  the  number  of  memory  copies  from  device  to  host  and  from </text>
<text top="1090" left="162" width="259" height="16" font="0">host to OpenCV from three to one.  </text>
<text top="1132" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="62" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">51 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="396" left="655" width="5" height="16" font="0"> </text>
<text top="422" left="162" width="429" height="14" font="12"><i>Fig 6.4 Performance analysis of Gaussian smoothening and averaging </i></text>
<text top="458" left="162" width="4" height="15" font="8"><i> </i></text>
<text top="487" left="162" width="627" height="16" font="0">            After  doing  the  above  optimizations  we  compared  the  performances  of  the </text>
<text top="528" left="162" width="628" height="16" font="0">OpenCV  Gaussian  blur  function  and  averaging  run  on  the  CPU  to  the  recursive </text>
<text top="570" left="162" width="628" height="16" font="0">Gaussian  blur  and  averaging  function  programmed  in  CUDA  and  executed  on  the </text>
<text top="611" left="162" width="627" height="16" font="0">GPU as shown in Figure 6.4. From the graph we could visualize that the performance </text>
<text top="652" left="162" width="628" height="16" font="0">increases with increase in resolution of the input image due to the massive parallelism </text>
<text top="694" left="162" width="627" height="16" font="0">available in GPUs. For larger resolution images, a speedup of 2.5 was achieved. Thus </text>
<text top="735" left="162" width="627" height="16" font="0">we have reduced 23% of the total execution time of the algorithm to around half  by </text>
<text top="777" left="162" width="508" height="16" font="0">implementing a recursive Gaussian smoothening algorithm in CUDA. </text>
<text top="818" left="162" width="5" height="16" font="0"> </text>
<text top="849" left="162" width="628" height="16" font="0">            Table 6.2 illustrates the execution times for various image sizes; we could see </text>
<text top="890" left="162" width="628" height="16" font="0">that  the  speedup  increases  with  the  increase  in  the  image  size.  Figure  6.5  gives  the </text>
<text top="932" left="162" width="627" height="16" font="0">graph that plots the image size versus speedup and it touches 2.5 for large images. As </text>
<text top="973" left="162" width="627" height="16" font="0">the  input  data  increases  below  8MP  we  would  see  even  higher  speedups,  thus </text>
<text top="1015" left="162" width="424" height="16" font="0">enabling high resolution processing of the image or video. </text>
<text top="1056" left="162" width="5" height="16" font="0"> </text>
<text top="1098" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="63" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">52 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="125" left="169" width="76" height="17" font="18"><b>Image Size </b></text>
<text top="125" left="319" width="87" height="17" font="18"><b>CPU Time(s) </b></text>
<text top="125" left="494" width="88" height="17" font="18"><b>GPU Time(s) </b></text>
<text top="125" left="665" width="64" height="17" font="18"><b>Speedup </b></text>
<text top="159" left="169" width="62" height="17" font="1">400X300 </text>
<text top="159" left="319" width="66" height="17" font="1">0.008821 </text>
<text top="159" left="494" width="66" height="17" font="1">0.006168 </text>
<text top="159" left="665" width="83" height="17" font="1">1.43020435 </text>
<text top="193" left="169" width="62" height="17" font="1">640X480 </text>
<text top="193" left="319" width="66" height="17" font="1">0.024397 </text>
<text top="193" left="494" width="66" height="17" font="1">0.012934 </text>
<text top="193" left="665" width="83" height="17" font="1">1.88635028 </text>
<text top="227" left="169" width="62" height="17" font="1">800X600 </text>
<text top="227" left="319" width="66" height="17" font="1">0.036452 </text>
<text top="227" left="494" width="66" height="17" font="1">0.019137 </text>
<text top="227" left="665" width="83" height="17" font="1">1.90481117 </text>
<text top="261" left="169" width="71" height="17" font="1">1024X768 </text>
<text top="261" left="319" width="66" height="17" font="1">0.069598 </text>
<text top="261" left="494" width="66" height="17" font="1">0.028894 </text>
<text top="261" left="665" width="83" height="17" font="1">2.40871037 </text>
<text top="294" left="169" width="79" height="17" font="1">1600X1200 </text>
<text top="294" left="319" width="66" height="17" font="1">0.163036 </text>
<text top="294" left="494" width="66" height="17" font="1">0.063584 </text>
<text top="294" left="665" width="83" height="17" font="1">2.56412434 </text>
<text top="328" left="169" width="79" height="17" font="1">2272X1704 </text>
<text top="328" left="319" width="66" height="17" font="1">0.316641 </text>
<text top="328" left="494" width="66" height="17" font="1">0.123661 </text>
<text top="328" left="665" width="83" height="17" font="1">2.56055668 </text>
<text top="362" left="169" width="79" height="17" font="1">2816X2112 </text>
<text top="362" left="319" width="66" height="17" font="1">0.687516 </text>
<text top="362" left="494" width="66" height="17" font="1">0.251589 </text>
<text top="362" left="665" width="83" height="17" font="1">2.73269499 </text>
<text top="383" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="409" left="162" width="465" height="14" font="12"><i>Table 6.3 Execution times and speed up of Gaussian smoothening algorithm  </i></text>
<text top="435" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="462" left="162" width="5" height="16" font="7"><i><b> </b></i></text>
<text top="734" left="557" width="5" height="16" font="0"> </text>
<text top="760" left="162" width="420" height="14" font="12"><i>Figure 6.5 Speedup gained by Gaussian smoothening and averaging  </i></text>
<text top="804" left="162" width="314" height="16" font="6"><i>6.4 Color Restoration Kernel Performance </i></text>
<text top="851" left="162" width="628" height="16" font="0">             The color restoration component constitutes 16% of the  total runtime. There </text>
<text top="892" left="162" width="627" height="16" font="0">were 5 data structures to the copied to the device memory, and 3 data structures to be </text>
<text top="933" left="162" width="627" height="16" font="0">copied from device memory to the host. Since the enhancement was done on the Tesla </text>
<text top="975" left="162" width="628" height="16" font="0">C2070 range of NVIDIA GPUs, there was enough bandwidth to make the  7 memory </text>
<text top="1016" left="162" width="628" height="16" font="0">transfers without limiting the performance of the color restoration function. The Tesla </text>
<text top="1058" left="162" width="627" height="16" font="0">C2070 has the Fermi architecture with memory bandwidth of 144GB/s and a memory </text>
<text top="1099" left="162" width="552" height="16" font="0">interface of 384-bit which ensures that a memory bottleneck will not occur.  </text>
</page>
<page number="64" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">53 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="5" height="16" font="0"> </text>
<text top="153" left="162" width="628" height="16" font="0">            The  Fermi  architecture  supports  streams,  which  was  used  for  this  function </text>
<text top="195" left="162" width="627" height="16" font="0">because there were scope for parallel execution of kernels and asynchronous memory </text>
<text top="236" left="162" width="627" height="16" font="0">transfers.    The  application  of  streams  increased  the  performance  by  around  26% </text>
<text top="278" left="162" width="628" height="16" font="0">compared  to  the  non-stream  version  of  the  color  restoration  function.  Including  the </text>
<text top="319" left="162" width="627" height="16" font="0">Color Restoration kernel gave a 16% speed up to the overall runtime of the algorithm, </text>
<text top="360" left="162" width="627" height="16" font="0">even with the eight memory transfers happening.  Fig 5.5 shows a comparison of the </text>
<text top="402" left="162" width="627" height="16" font="0">color restore function run on the CPU and GPU. We could find that for larger images, </text>
<text top="443" left="162" width="498" height="16" font="0">the GPU excels in performance due to its massive parallel hardware. </text>
<text top="485" left="162" width="5" height="16" font="0"> </text>
<text top="800" left="599" width="5" height="16" font="0"> </text>
<text top="825" left="162" width="310" height="14" font="12"><i>Fig 6.6 Performance analysis of Color Restoration </i></text>
<text top="823" left="472" width="5" height="16" font="6"><i> </i></text>
<text top="852" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="888" left="169" width="74" height="17" font="18"><b>Operation </b></text>
<text top="888" left="496" width="68" height="17" font="18"><b>Time(ms) </b></text>
<text top="912" left="169" width="240" height="17" font="1">5 Host to Device Memory Transfers </text>
<text top="912" left="558" width="33" height="17" font="1">0.25 </text>
<text top="936" left="169" width="236" height="17" font="1">3 Device To Host Memory Transfer </text>
<text top="936" left="558" width="33" height="17" font="1">0.15 </text>
<text top="961" left="169" width="213" height="17" font="1">Color Restoration Computation </text>
<text top="961" left="550" width="41" height="17" font="1">0.011 </text>
<text top="985" left="169" width="75" height="17" font="1">Total Time </text>
<text top="985" left="550" width="41" height="17" font="1">0.411 </text>
<text top="1007" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="1037" left="162" width="444" height="14" font="12"><i>Table 6.4 Color Restoration GPU kernel timing for 640X480 pixel image </i></text>
<text top="1064" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="1095" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="1126" left="162" width="5" height="16" font="6"><i> </i></text>
</page>
<page number="65" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">54 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="128" left="169" width="76" height="17" font="18"><b>Image Size </b></text>
<text top="128" left="330" width="87" height="17" font="18"><b>CPU Time(s) </b></text>
<text top="128" left="474" width="88" height="17" font="18"><b>GPU Time(s) </b></text>
<text top="128" left="635" width="64" height="17" font="18"><b>Speedup </b></text>
<text top="165" left="169" width="62" height="17" font="1">640X480 </text>
<text top="165" left="330" width="75" height="17" font="1">0.0119739 </text>
<text top="165" left="474" width="83" height="17" font="1">0.00438251 </text>
<text top="165" left="635" width="83" height="17" font="1">2.73220141 </text>
<text top="202" left="169" width="62" height="17" font="1">800X600 </text>
<text top="202" left="330" width="66" height="17" font="1">0.023701 </text>
<text top="202" left="474" width="83" height="17" font="1">0.00771409 </text>
<text top="202" left="635" width="92" height="17" font="1">3.072429801 </text>
<text top="239" left="169" width="71" height="17" font="1">1024X768 </text>
<text top="239" left="330" width="75" height="17" font="1">0.0411295 </text>
<text top="239" left="474" width="75" height="17" font="1">0.0113441 </text>
<text top="239" left="635" width="92" height="17" font="1">3.625629182 </text>
<text top="276" left="169" width="79" height="17" font="1">1600X1200 </text>
<text top="276" left="330" width="75" height="17" font="1">0.0741003 </text>
<text top="276" left="474" width="75" height="17" font="1">0.0184525 </text>
<text top="276" left="635" width="92" height="17" font="1">4.015732286 </text>
<text top="313" left="169" width="79" height="17" font="1">2272X1704 </text>
<text top="313" left="330" width="66" height="17" font="1">0.147664 </text>
<text top="313" left="474" width="75" height="17" font="1">0.0335725 </text>
<text top="313" left="635" width="92" height="17" font="1">4.398361754 </text>
<text top="350" left="169" width="79" height="17" font="1">2816X2112 </text>
<text top="350" left="330" width="66" height="17" font="1">0.311041 </text>
<text top="350" left="474" width="75" height="17" font="1">0.0634061 </text>
<text top="350" left="635" width="83" height="17" font="1">4.90553748 </text>
<text top="387" left="169" width="79" height="17" font="1">4480X3360 </text>
<text top="387" left="330" width="66" height="17" font="1">0.583698 </text>
<text top="387" left="474" width="66" height="17" font="1">0.116205 </text>
<text top="387" left="635" width="92" height="17" font="1">5.023002453 </text>
<text top="408" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="434" left="162" width="420" height="14" font="12"><i>Table 6.5 Execution times and speed up of Color Restoration function</i></text>
<text top="432" left="582" width="5" height="16" font="6"><i> </i></text>
<text top="461" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="764" left="577" width="5" height="16" font="0"> </text>
<text top="791" left="162" width="301" height="14" font="12"><i>Figure 6.7 Speedup gained by Color Restoration  </i></text>
<text top="816" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="843" left="162" width="627" height="16" font="0">             For large images for around 15Megapixel we could find that the color restore </text>
<text top="885" left="162" width="628" height="16" font="0">function gets around 5 times speed up. Table 6.3 illustrates the execution times taken </text>
<text top="926" left="162" width="628" height="16" font="0">for the CPU and GPU to run the color restore function. Table 6.4 illustrates that even </text>
<text top="968" left="162" width="627" height="16" font="0">though the number of data transfers  from the CPU to the GPU device are 5 and the </text>
<text top="1009" left="162" width="627" height="16" font="0">number of transfers from GPU to the CPU are 3, significant speedup is achieved over </text>
<text top="1050" left="162" width="628" height="16" font="0">the CPU execution time. The  high  bandwidth of  the GPU architecture ensures these </text>
<text top="1092" left="162" width="628" height="16" font="0">memory  transfers  do  not  affect  the  performance  of  the  algorithm.  Figure  6.7  shows </text>
</page>
<page number="66" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">55 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">the  speedup  achieved  by  the  GPU  for  the  various  image  sizes.  We  again  notice  the </text>
<text top="153" left="162" width="432" height="16" font="0">rate of increase of speedup as the size of the data increases. </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="236" left="162" width="627" height="16" font="0">           In the next section we will explore the total speedup of the video enhancement </text>
<text top="278" left="162" width="627" height="16" font="0">algorithm. We have accelerated the major 3 components of the LTSN algorithm and </text>
<text top="319" left="162" width="465" height="16" font="0">we investigate on how it has impacted the overall performance.  </text>
<text top="360" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="409" left="162" width="230" height="16" font="6"><i>6.5 Overall Algorithm Analysis </i></text>
<text top="438" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="469" left="162" width="627" height="16" font="0">           The approach taken was to enhance the algorithm using the CPU and the GPU. </text>
<text top="510" left="162" width="628" height="16" font="0">Certain  SIMD  functions  execute  really  fast  on  the  CPU,  so  only  the  functions  that </text>
<text top="552" left="162" width="628" height="16" font="0">took a lot of CPU time was transferred to the GPU like explained in the chapter. The </text>
<text top="593" left="162" width="627" height="16" font="0">accelerated GPU kernel functions replaced the CPU functions and the resulting output </text>
<text top="634" left="162" width="106" height="16" font="0">was accurate.  </text>
<text top="950" left="623" width="5" height="16" font="0"> </text>
<text top="976" left="162" width="501" height="14" font="12"><i>Figure 6.8 Performance analysis of overall CPU+GPU enhanced LTSN algorithm </i></text>
<text top="1002" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="1028" left="162" width="628" height="16" font="0">             Figure 6.8 illustrates the performance analysis done for various image sizes A </text>
<text top="1070" left="162" width="627" height="16" font="0">CPU+GPU  versus  CPU  runtime  is  plotted  against  image  sizes  varying  from  low </text>
<text top="1111" left="162" width="627" height="16" font="0">resolution  to  very  high  resolution  images.  As  noticed,  we  see  an  increase  in </text>
</page>
<page number="67" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">56 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="628" height="16" font="0">performance for bigger images, compared to the CPU. Table 6.3 gives the finer details </text>
<text top="153" left="162" width="357" height="16" font="0">of the execution times and the speedup achieved. </text>
<text top="195" left="162" width="5" height="16" font="0"> </text>
<text top="557" left="162" width="5" height="16" font="0"> </text>
<text top="587" left="155" width="362" height="14" font="12"><i>Table 6.6 Execution times and speed up of LTSN algorithm  </i></text>
<text top="613" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="639" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="665" left="162" width="627" height="16" font="0">            A  minimum  speedup  of  2  was  achieved  for  low  image  resolutions  and  for  a </text>
<text top="706" left="162" width="628" height="16" font="0">very  high resolution  image, we got an overall  speedup of 3.24. Figure 6.9 gives  the </text>
<text top="748" left="162" width="627" height="16" font="0">plot of the image sizes versus the speedup attainted on the CPU+GPU configuration. </text>
<text top="789" left="162" width="627" height="16" font="0">The  speedup  curve  increases  as  the  image  size  increases  in  the  accelerated  LTSN </text>
<text top="831" left="162" width="627" height="16" font="0">video enhancement  algorithm. By accelerating the algorithm  for a  single  image or a </text>
<text top="872" left="162" width="627" height="16" font="0">frame  we  have  come  closer  to  the  objective  to  produce  a  faster  video  enhancement </text>
<text top="914" left="162" width="276" height="16" font="0">algorithm to achieve real time results. </text>
<text top="954" left="162" width="4" height="14" font="13"> </text>
<text top="274" left="162" width="83" height="17" font="18"><b>Image Sizes </b></text>
<text top="274" left="395" width="83" height="17" font="18"><b>CPU Time(s)</b></text>
<text top="274" left="478" width="4" height="17" font="5"><b> </b></text>
<text top="254" left="501" width="70" height="17" font="18"><b>CPU+GPU </b></text>
<text top="274" left="501" width="55" height="17" font="18"><b>Time(s) </b></text>
<text top="274" left="626" width="69" height="17" font="18"><b>Speed Up </b></text>
<text top="311" left="162" width="62" height="17" font="1">640X480 </text>
<text top="311" left="395" width="66" height="17" font="1">0.106786 </text>
<text top="311" left="501" width="41" height="17" font="1">0.049 </text>
<text top="311" left="626" width="83" height="17" font="1">2.17930612 </text>
<text top="348" left="162" width="62" height="17" font="1">800X600 </text>
<text top="348" left="395" width="66" height="17" font="1">0.163678 </text>
<text top="348" left="501" width="75" height="17" font="1">0.0748869 </text>
<text top="348" left="626" width="83" height="17" font="1">2.18566932 </text>
<text top="385" left="162" width="71" height="17" font="1">1024X768 </text>
<text top="385" left="395" width="58" height="17" font="1">0.28046 </text>
<text top="385" left="501" width="66" height="17" font="1">0.119197 </text>
<text top="385" left="626" width="83" height="17" font="1">2.35291157 </text>
<text top="423" left="162" width="79" height="17" font="1">1600X1200 </text>
<text top="423" left="395" width="66" height="17" font="1">0.616025 </text>
<text top="423" left="501" width="66" height="17" font="1">0.259966 </text>
<text top="423" left="626" width="75" height="17" font="1">2.3696368 </text>
<text top="460" left="162" width="79" height="17" font="1">2272X1704 </text>
<text top="460" left="395" width="58" height="17" font="1">1.22408 </text>
<text top="460" left="501" width="66" height="17" font="1">0.495642 </text>
<text top="460" left="626" width="83" height="17" font="1">2.46968578 </text>
<text top="497" left="162" width="79" height="17" font="1">2816X2112 </text>
<text top="497" left="395" width="58" height="17" font="1">2.54791 </text>
<text top="497" left="501" width="12" height="17" font="1">1 </text>
<text top="497" left="626" width="25" height="17" font="1">2.6 </text>
<text top="535" left="162" width="79" height="17" font="1">4480X3360 </text>
<text top="535" left="395" width="33" height="17" font="1">4.84 </text>
<text top="535" left="501" width="33" height="17" font="1">1.49 </text>
<text top="535" left="626" width="83" height="17" font="1">3.24832215 </text>
</page>
<page number="68" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">57 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="379" left="594" width="5" height="16" font="6"><i> </i></text>
<text top="410" left="162" width="615" height="14" font="12"><i>Figure 6.9 Speedup achieved by the GPU accelerated LTSN video enhancement algorithm for a frame</i></text>
<text top="408" left="776" width="5" height="16" font="6"><i> </i></text>
<text top="436" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="465" left="162" width="60" height="14" font="13">                </text>
<text top="463" left="222" width="567" height="16" font="0">The  accelerated  LTSN  algorithm  was  first  tested  for  various  resolution </text>
<text top="504" left="162" width="355" height="16" font="0">images and the following outputs were obtained. </text>
<text top="545" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="792" left="782" width="5" height="16" font="6"><i> </i></text>
<text top="818" left="162" width="298" height="14" font="12"><i>Figure 6.10 Original image and enhanced image </i></text>
<text top="1055" left="779" width="5" height="16" font="0"> </text>
<text top="1081" left="162" width="298" height="14" font="12"><i>Figure 6.11 Original image and enhanced image </i></text>
<text top="1107" left="162" width="4" height="14" font="13"> </text>
</page>
<page number="69" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">58 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="328" left="780" width="5" height="16" font="0"> </text>
<text top="354" left="162" width="298" height="14" font="12"><i>Figure 6.12 Original image and enhanced image </i></text>
<text top="381" left="162" width="5" height="16" font="6"><i> </i></text>
<text top="647" left="779" width="5" height="16" font="0"> </text>
<text top="673" left="162" width="298" height="14" font="12"><i>Figure 6.13 Original image and enhanced image </i></text>
</page>
<page number="70" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">59 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="565" left="780" width="4" height="14" font="13"> </text>
<text top="587" left="162" width="298" height="14" font="12"><i>Figure 6.14 Original image and enhanced image </i></text>
<text top="614" left="162" width="5" height="16" font="0"> </text>
<text top="858" left="782" width="5" height="16" font="0"> </text>
<text top="884" left="162" width="298" height="14" font="12"><i>Figure 6.15 Original image and enhanced image </i></text>
</page>
<page number="71" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">60 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="444" left="760" width="5" height="16" font="0"> </text>
<text top="469" left="162" width="298" height="14" font="12"><i>Figure 6.16 Original image and enhanced image </i></text>
<text top="495" left="162" width="4" height="14" font="13"> </text>
<text top="961" left="757" width="5" height="16" font="0"> </text>
<text top="987" left="162" width="298" height="14" font="12"><i>Figure 6.17 Original image and enhanced image </i></text>
<text top="1014" left="162" width="5" height="16" font="0"> </text>
<text top="1035" left="162" width="627" height="16" font="0">Figure  6.10  –  6.17  shows  images  that  consist  of  both  dark  and  bright  regions.  The </text>
<text top="1076" left="162" width="627" height="16" font="0">enhancement brought up the intensities of pixels in the dark region and brought down </text>
</page>
<page number="72" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">61 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">the intensities of pixels in the bright region. The quality of the enhancement was not </text>
<text top="153" left="162" width="364" height="16" font="0">affected by the acceleration done on the GPGPU.  </text>
<text top="195" left="162" width="4" height="15" font="4"> </text>
<text top="493" left="624" width="5" height="16" font="0"> </text>
<text top="509" left="162" width="5" height="16" font="0"> </text>
<text top="529" left="162" width="410" height="14" font="12"><i>Fig 6.18 FPS of the LTSN video enhancement for video resolutions  </i></text>
<text top="547" left="162" width="5" height="16" font="0"> </text>
<text top="568" left="162" width="5" height="16" font="0"> </text>
<text top="588" left="178" width="44" height="17" font="18"><b>Video </b></text>
<text top="608" left="178" width="77" height="17" font="18"><b>Resolution </b></text>
<text top="608" left="301" width="66" height="17" font="18"><b>Standard </b></text>
<text top="608" left="482" width="67" height="17" font="18"><b>CPU (fps) </b></text>
<text top="608" left="586" width="65" height="17" font="18"><b>GPU(fps) </b></text>
<text top="608" left="681" width="64" height="17" font="18"><b>Speedup </b></text>
<text top="632" left="178" width="69" height="17" font="1">320 x 240 </text>
<text top="632" left="301" width="103" height="17" font="1">HVGA (potrait) </text>
<text top="632" left="482" width="291" height="17" font="1">39.83381333  54.0137627  1.355977703 </text>
<text top="655" left="178" width="69" height="17" font="1">640 x 480 </text>
<text top="655" left="301" width="84" height="17" font="1">VGA, MCGA </text>
<text top="655" left="482" width="291" height="17" font="1">9.364523439  21.2765957  2.272042553 </text>
<text top="678" left="178" width="77" height="17" font="1">1280 x 720 </text>
<text top="678" left="301" width="147" height="17" font="1">720p (WXGA-H, min.) </text>
<text top="678" left="482" width="291" height="17" font="1">3.261121239  9.24052154  2.833541245 </text>
<text top="702" left="178" width="85" height="17" font="1">1920 x 1080 </text>
<text top="702" left="301" width="75" height="17" font="1">HDV 1080i </text>
<text top="702" left="482" width="291" height="17" font="1">1.460312361  4.40794665  3.018495744 </text>
<text top="723" left="162" width="5" height="16" font="0"> </text>
<text top="741" left="162" width="5" height="16" font="0"> </text>
<text top="743" left="167" width="395" height="14" font="12"><i>Table 6.7 Execution times and speedup of LTSN video algorithm  </i></text>
<text top="760" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="778" left="162" width="4" height="14" font="12"><i> </i></text>
<text top="796" left="162" width="5" height="16" font="0"> </text>
<text top="1076" left="606" width="5" height="16" font="0"> </text>
<text top="1092" left="162" width="5" height="16" font="0"> </text>
<text top="1112" left="162" width="537" height="14" font="12"><i>Fig 6.19 GPU speed up for the LTSN video enhancement algorithm for video resolutions </i></text>
<text top="1130" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="73" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">62 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="627" height="16" font="0">           The  LTSN  algorithm  was  tested  for  performance  on  videos  of  various  frame </text>
<text top="153" left="162" width="628" height="16" font="0">sizes  and  the  performance  increased  for  higher  resolutions.  640  x  480  resolution </text>
<text top="195" left="162" width="627" height="16" font="0">obtained only close to 10 frames per second (fps), which cannot be used for real time </text>
<text top="236" left="162" width="627" height="16" font="0">video processing. The GPU results  were close to 21  fps  which was close to the real </text>
<text top="278" left="162" width="445" height="16" font="0">time rendering time essential for computer vision algorithms.<b> </b></text>
<text top="319" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="340" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="361" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="381" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="402" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="423" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="444" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="464" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="485" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="506" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="526" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="547" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="588" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="630" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="671" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="713" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="754" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="775" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="795" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="816" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="837" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="858" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="878" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="899" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="920" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="941" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="961" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="982" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1002" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1023" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1044" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1065" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1085" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1106" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="1127" left="474" width="5" height="16" font="2"><b> </b></text>
</page>
<page number="74" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">63 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="154" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="195" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="237" left="423" width="106" height="16" font="2"><b>CHAPTER 7 </b></text>
<text top="296" left="320" width="312" height="16" font="2"><b>CONCLUSION AND FUTURE WORK </b></text>
<text top="321" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="342" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="363" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="383" left="162" width="627" height="16" font="0">            This  thesis  has  explored  the  GPU  and  CPU  implementation  of  the  LTSN </text>
<text top="424" left="162" width="627" height="16" font="0">algorithm.  The  algorithm  was  processed  per  frame  on  the  CPU  and  GPU  to  attain </text>
<text top="466" left="162" width="627" height="16" font="0">speedups close to real time. A video of 640×480 resolution was able to get 21 frames </text>
<text top="507" left="162" width="627" height="16" font="0">per second compared to 9 frames per second when it was run only on the CPU using </text>
<text top="548" left="162" width="627" height="16" font="0">OpenCV  functions.    The  compute  bound  operations  like  the  calculation  of  a  sine </text>
<text top="590" left="162" width="627" height="16" font="0">nonlinear  transfer  function  got  speedups  close  to  36×  which  comprised  47%  of  the </text>
<text top="631" left="162" width="627" height="16" font="0">total runtime of the algorithm. The Gaussian function which comprised of 23% of the </text>
<text top="673" left="162" width="627" height="16" font="0">total run time got on an average a 2× speedup. Color Restoration was processed on the </text>
<text top="714" left="162" width="628" height="16" font="0">GPU  as  streams  and  a  speedup  on  an  average  of  2×  was  achieved.  Thus  an  overall </text>
<text top="755" left="162" width="408" height="16" font="0">speedup to up to 3× was got for high resolution frames.  </text>
<text top="797" left="162" width="5" height="16" font="0"> </text>
<text top="838" left="162" width="627" height="16" font="0">             For  this  work  a  CPU  core  and  multiple  GPU  cores  were  used  to  process  a </text>
<text top="880" left="162" width="628" height="16" font="0">single  frame.  However  it  should  be  possible  to  exploit  multiple  CPU  cores  for  the </text>
<text top="921" left="162" width="628" height="16" font="0">processing of multiple frames in parallel. This would further increase the throughput </text>
<text top="962" left="162" width="627" height="16" font="0">as  there  are  dedicated  CPU  cores  processing  each  frame  in  parallel.  The  SIMD </text>
<text top="1004" left="162" width="513" height="16" font="0">instructions that run faster on the GPU could process multiple frames.  </text>
<text top="1046" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="1067" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="1108" left="162" width="5" height="16" font="2"><b> </b></text>
</page>
<page number="75" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">64 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="151" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="189" left="474" width="5" height="16" font="2"><b> </b></text>
<text top="228" left="413" width="125" height="16" font="2"><b>REFERENCES </b></text>
<text top="253" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="274" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="295" left="162" width="5" height="16" font="2"><b> </b></text>
<text top="315" left="162" width="628" height="16" font="0">[1]  SaiBabu  Aregela  and  Vijayan  Asari,  ―An  adaptive  and  non-linear  technique  for </text>
<text top="357" left="162" width="628" height="16" font="0">enhancement  of  high  contrast  images,‖  <i>WSEAS  Transactions  on  signal  processing</i>, </text>
<text top="398" left="162" width="114" height="16" font="0">pp.42-54, 2007 </text>
<text top="440" left="162" width="5" height="16" font="0"> </text>
<text top="481" left="162" width="628" height="16" font="0">[2]  I.T.  Young  and  L.J.  van  Vliet.  ―Recursive  implementation  of  the  Gaussian,‖ </text>
<text top="522" left="162" width="335" height="16" font="6"><i>Signal Processing, </i>vol. 44, pp. 139-151, 1995 </text>
<text top="564" left="162" width="5" height="16" font="0"> </text>
<text top="605" left="162" width="21" height="16" font="0">[3]</text>
<text top="605" left="183" width="5" height="17" font="15"> </text>
<text top="602" left="189" width="600" height="20" font="3">R. Deriche, ―Optimal edge detection using recursive filtering,‖ <i>Proceeding of 1st </i></text>
<text top="647" left="162" width="450" height="16" font="6"><i>International Conference on Computer Vision, London</i>, 1987. </text>
<text top="688" left="162" width="5" height="16" font="0"> </text>
<text top="730" left="162" width="628" height="16" font="0">[4]  L.  Tao  and  K.V.  Asari,  ―An  adaptive  and  integrated  neighborhood  dependent </text>
<text top="771" left="162" width="628" height="16" font="0">approach  for  nonlinear  enhancement  of  color  images,‖  <i>SPIE  Journal  of  Electronic </i></text>
<text top="812" left="162" width="372" height="16" font="6"><i>Imaging</i>, vol.14, no. 4, pp. 1.1-1.14, October 2005. </text>
<text top="854" left="162" width="5" height="16" font="0"> </text>
<text top="891" left="162" width="628" height="20" font="3">[5]  E.  S.  Larsen  and  D.  K.  McAllister,  ―Fast  matrix  multiplies  using  graphics </text>
<text top="937" left="162" width="437" height="16" font="0">hardware,‖ <i>Proc. IEEE Supercomputing</i>, pp. 55, Nov. 2001. </text>
<text top="978" left="162" width="5" height="16" font="0"> </text>
<text top="1016" left="162" width="628" height="20" font="3">[6] M. Rumpf and R. Strzodka, ―Level set segmentation in graphics hardware<i>,</i>‖ <i>Proc. </i></text>
<text top="1061" left="162" width="256" height="16" font="6"><i>ICIP</i>, vol. 3, 2001, pp. 1103–1106. </text>
<text top="1102" left="162" width="5" height="16" font="0"> </text>
</page>
<page number="76" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">65 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="108" left="162" width="628" height="20" font="3">[7] C. J. Thompson, S. Hahn, and M. Oskin, ―Using modern graphics architectures for </text>
<text top="153" left="162" width="628" height="16" font="0">general-purpose computing: A framework and analysis,‖ <i> ACM/IEEE MICRO-35</i>, pp. </text>
<text top="195" left="162" width="157" height="16" font="0">306–317, Nov. 2002. </text>
<text top="236" left="162" width="5" height="16" font="0"> </text>
<text top="278" left="162" width="628" height="16" font="0">[8]  P.  Colantoni,  N.  Boukala,  and  J.  D.  Rugna,  ―Fast  and  accurate  color  image </text>
<text top="319" left="162" width="628" height="16" font="0">processing  using  3-D  graphics  cards,‖  <i>8th  Int.Fall  Workshop:  Vision  Modeling  and </i></text>
<text top="360" left="162" width="329" height="16" font="6"><i>Visualization</i>,<i> Munich, Germany</i>,<i> </i>Nov. 2003. </text>
<text top="402" left="162" width="5" height="16" font="0"> </text>
<text top="439" left="162" width="628" height="20" font="3">[9]  K.  Moreland  and  E.  Angel,  ―The  FFT  on  a  GPU,‖  <i>Proc.  SIGGRAPH/ </i></text>
<text top="485" left="162" width="505" height="16" font="6"><i>Eurographics Workshop Graphics Hardware,</i> pp.112–119, July 2003<i> </i></text>
<text top="526" left="162" width="5" height="16" font="0"> </text>
<text top="564" left="162" width="628" height="20" font="3">[10]  M.  Hopf  and  T.  Ertl,  ―Hardware  accelerated  wavelet  transformations,‖<i>Proc. </i></text>
<text top="609" left="162" width="462" height="16" font="6"><i>EG/IEEE TCVG Symp. Visualization</i>, pp. 93–103, August 2000 </text>
<text top="650" left="162" width="5" height="16" font="0"> </text>
<text top="688" left="162" width="628" height="20" font="3">[11]  K.  Barnard  and  B.  Funt,  ―Analysis  and  improvement  of  multi-scale  retinex,‖ </text>
<text top="733" left="162" width="628" height="16" font="6"><i>Proc. IS&amp;T/SID 5th  Color Imaging Conf.: Color  Science, Systems  and Applications, </i></text>
<text top="775" left="162" width="178" height="16" font="0">pp.221-226, June 1997.  </text>
<text top="816" left="162" width="5" height="16" font="0"> </text>
<text top="857" left="162" width="628" height="16" font="0">[12] L. Tao, R.C. Tompkins, and K.V. Asari, ―An illuminance-reflectance model for </text>
<text top="895" left="162" width="628" height="20" font="3">nonlinear  enhancement  of  video  stream  for  homeland  security  applications,‖  <i>IEEE </i></text>
<text top="940" left="162" width="628" height="16" font="6"><i>International  Workshop  on  Applied  Imagery  and Pattern  Recognition,  AIPR  -  2005</i>, </text>
<text top="982" left="162" width="298" height="16" font="0">Washington DC, October 19 - 21, 2005.  </text>
<text top="1023" left="162" width="5" height="16" font="0"> </text>
<text top="1064" left="162" width="594" height="16" font="0">[13] K.V. Asari, E. Oguslu, and S. Arigela, ―Nonlinear enhancement of extremely </text>
<text top="1102" left="162" width="624" height="20" font="3">high contrast images for visibility improvement,‖ <i>Lecture Notes in Computer Science</i>, </text>
</page>
<page number="77" position="absolute" top="0" left="0" height="1262" width="893">
<text top="1180" left="465" width="20" height="17" font="1">66 </text>
<text top="1218" left="474" width="4" height="17" font="1"> </text>
<text top="112" left="162" width="562" height="16" font="6"><i>Proc. of the 5th Indian Conference on Computer Vision, Graphics and Image </i></text>
<text top="153" left="162" width="589" height="16" font="6"><i>Processing - ICVGIP 2006</i>: (ISBN: 3-540-29643-3), vol.4338/2006, pp.240-251, </text>
<text top="195" left="162" width="112" height="16" font="0">October 2006.  </text>
<text top="236" left="162" width="5" height="16" font="0"> </text>
<text top="274" left="162" width="597" height="20" font="3">[14] R.C. Gonzalez, R.E. Woods, ―<i>Digital image processing</i>,‖ 2nd ed., pp.97-130, </text>
<text top="319" left="162" width="50" height="16" font="0">2002.  </text>
<text top="360" left="162" width="5" height="16" font="0"> </text>
<text top="381" left="162" width="5" height="16" font="0"> </text>
<text top="402" left="162" width="5" height="16" font="0"> </text>
<text top="422" left="162" width="5" height="16" font="0"> </text>
<text top="443" left="162" width="5" height="16" font="0"> </text>
<text top="464" left="162" width="5" height="16" font="0"> </text>
<text top="485" left="162" width="5" height="16" font="0"> </text>
<text top="505" left="162" width="5" height="16" font="0"> </text>
<text top="526" left="162" width="5" height="16" font="0"> </text>
<text top="547" left="162" width="5" height="16" font="0"> </text>
<text top="567" left="162" width="5" height="16" font="0"> </text>
<text top="588" left="162" width="5" height="16" font="0"> </text>
<text top="609" left="162" width="5" height="16" font="0"> </text>
<text top="629" left="162" width="5" height="16" font="0"> </text>
<text top="650" left="162" width="5" height="16" font="0"> </text>
<text top="671" left="162" width="5" height="16" font="0"> </text>
<text top="692" left="162" width="5" height="16" font="0"> </text>
<text top="712" left="162" width="5" height="16" font="0"> </text>
<text top="733" left="162" width="5" height="16" font="0"> </text>
<text top="754" left="162" width="5" height="16" font="0"> </text>
<text top="775" left="162" width="5" height="16" font="0"> </text>
<text top="795" left="162" width="5" height="16" font="0"> </text>
<text top="816" left="162" width="5" height="16" font="0"> </text>
<text top="836" left="162" width="5" height="16" font="0"> </text>
<text top="857" left="162" width="5" height="16" font="0"> </text>
<text top="878" left="162" width="5" height="16" font="0"> </text>
<text top="899" left="162" width="5" height="16" font="0"> </text>
<text top="919" left="162" width="5" height="16" font="0"> </text>
<text top="940" left="162" width="5" height="16" font="0"> </text>
<text top="961" left="162" width="5" height="16" font="0"> </text>
<text top="982" left="162" width="5" height="16" font="0"> </text>
<text top="1002" left="162" width="5" height="16" font="0"> </text>
<text top="1023" left="162" width="5" height="16" font="0"> </text>
<text top="1044" left="162" width="5" height="16" font="0"> </text>
</page>
</pdf2xml>
