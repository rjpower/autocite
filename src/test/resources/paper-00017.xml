<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="0" size="15" family="Times" color="#000000"/>
	<fontspec id="1" size="19" family="Times" color="#000000"/>
	<fontspec id="2" size="19" family="Times" color="#000000"/>
<text top="157" left="330" width="288" height="16" font="0">Czech Technical University in Prague</text>
<text top="178" left="349" width="252" height="16" font="0">Faculty of Electrical Engineering</text>
<text top="198" left="281" width="387" height="16" font="0">Department of Computer Science and Engineering</text>
<text top="554" left="415" width="120" height="16" font="0">Master’s Thesis</text>
<text top="591" left="292" width="365" height="19" font="1"><b>Hyper neural network on OpenCL</b></text>
<text top="651" left="376" width="198" height="19" font="2"><i>Bc.František Šindelář</i></text>
<text top="887" left="311" width="318" height="16" font="0">Supervisor: Ing. Miroslav Skrbek, Ph.D.</text>
<text top="972" left="202" width="545" height="16" font="0">Study Programme: Electrical Engineering and Information Technology</text>
<text top="1011" left="278" width="392" height="16" font="0">Field of Study: Computer Science and Engineering</text>
<text top="1050" left="413" width="122" height="16" font="0">January 3, 2012</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="3" size="14" family="Times" color="#000000"/>
<text top="92" left="93" width="13" height="21" font="3">iv</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="4" size="28" family="Times" color="#000000"/>
<text top="92" left="791" width="9" height="21" font="3">v</text>
<text top="1018" left="149" width="275" height="27" font="4"><b>Aknowledgements</b></text>
<text top="1065" left="149" width="244" height="21" font="3">Thanks to everyone for patience...</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="13" height="21" font="3">vi</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="5" size="6" family="Times" color="#000000"/>
<text top="92" left="782" width="18" height="21" font="3">vii</text>
<text top="852" left="149" width="176" height="27" font="4"><b>Declaration</b></text>
<text top="899" left="149" width="651" height="21" font="3">I hereby declare that I have completed this thesis independently and that I have listed all</text>
<text top="920" left="149" width="260" height="21" font="3">the literature and publications used.</text>
<text top="940" left="149" width="651" height="21" font="3">I have no objection to usage of this work in compliance with the act §60 Zákon č. 121/2000Sb.</text>
<text top="960" left="149" width="651" height="21" font="3">(copyright law), and with the rights connected with the copyright act including the changes</text>
<text top="981" left="149" width="74" height="21" font="3">in the act.</text>
<text top="1065" left="149" width="213" height="21" font="3">In Prague on January 3, 2012</text>
<text top="1074" left="499" width="292" height="8" font="5">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="22" height="21" font="3">viii</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="6" size="35" family="Times" color="#000000"/>
<text top="263" left="149" width="160" height="33" font="6"><b>Abstract</b></text>
<text top="353" left="149" width="651" height="21" font="3">The goal of this thesis is to design and implement a hyper neural network that has a</text>
<text top="373" left="149" width="651" height="21" font="3">topology with limited number inputs of individual neurons and uses genetic programming</text>
<text top="394" left="149" width="185" height="21" font="3">as the learning algorithm.</text>
<text top="414" left="175" width="625" height="21" font="3">Parallelization of this neural network is done with use of OpenCL standard which allows</text>
<text top="434" left="149" width="257" height="21" font="3">running it on wide range of devices.</text>
<text top="455" left="175" width="625" height="21" font="3">From the learning algorithms two methods are presented and implemented - a method</text>
<text top="475" left="149" width="651" height="21" font="3">that performs genetic evolution of trees of simple action and a method implements the</text>
<text top="495" left="149" width="651" height="21" font="3">idea of search in the compressed space and uses a matrices of coeﬃcients of discrete cosine</text>
<text top="516" left="149" width="111" height="21" font="3">transformation.</text>
<text top="536" left="175" width="625" height="21" font="3">At the end the performance of the block neural - cornerstone of this network - is tested.</text>
<text top="769" left="149" width="163" height="33" font="6"><b>Abstrakt</b></text>
<text top="855" left="175" width="625" height="21" font="3">Cílem této práce je návrh a implementace hyperneuronové sítě s topologií s omezeným</text>
<text top="875" left="149" width="651" height="21" font="3">počtem vstupů jednotlivých neuronu, která podporuje algoritmy učení založené na genet-</text>
<text top="896" left="149" width="148" height="21" font="3">ickém programování.</text>
<text top="916" left="175" width="627" height="21" font="3">K paralelizaci této neuronové sítě je použit standard OpenCl, který umožňuje její spuštění</text>
<text top="936" left="149" width="201" height="21" font="3">na širokém spektru zařízení.</text>
<text top="957" left="175" width="625" height="21" font="3">Z učících algoritmu jsou popsány a implementovány dva - algoritmus, který provádí</text>
<text top="977" left="149" width="651" height="21" font="3">genetickou evoluci stromů jednoduchých akci, a algoritmus, který implementuje myšlenku</text>
<text top="997" left="149" width="651" height="21" font="3">hledání v komprimovaném prostoru. Druhá jmenovaná k tomuto používá matice koeﬁcientů</text>
<text top="1017" left="149" width="239" height="21" font="3">diskrétní kosínové transformance.</text>
<text top="1038" left="175" width="625" height="21" font="3">V poslední části se nacházejí výkonostní testy bloku neuronů - stavebního kamene této</text>
<text top="1058" left="149" width="107" height="21" font="3">neuronové sítě.</text>
<text top="1129" left="468" width="13" height="21" font="3">ix</text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="9" height="21" font="3">x</text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="7" size="14" family="Times" color="#0000ff"/>
	<fontspec id="8" size="14" family="Times" color="#000000"/>
	<fontspec id="9" size="14" family="Times" color="#0000ff"/>
<text top="264" left="149" width="163" height="33" font="6"><b>Contents</b></text>
<text top="375" left="149" width="9" height="15" font="7"><a href="pdfxml.html#15"><b>1</b></a></text>
<text top="375" left="174" width="104" height="15" font="7"><a href="pdfxml.html#15"><b>Introduction</b></a></text>
<text top="375" left="791" width="9" height="15" font="8"><b>1</b></text>
<text top="413" left="149" width="9" height="15" font="7"><a href="pdfxml.html#17"><b>2</b></a></text>
<text top="413" left="174" width="371" height="15" font="7"><a href="pdfxml.html#17"><b>Description of problem, speciﬁcation of goals</b></a></text>
<text top="413" left="791" width="9" height="15" font="8"><b>3</b></text>
<text top="429" left="174" width="266" height="21" font="9"><a href="pdfxml.html#17">2.1 What is a hyper neural network</a></text>
<text top="429" left="446" width="323" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="429" left="792" width="8" height="21" font="3">3</text>
<text top="450" left="174" width="165" height="21" font="9"><a href="pdfxml.html#17">2.2 Technologies used</a></text>
<text top="450" left="344" width="425" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="450" left="792" width="8" height="21" font="3">3</text>
<text top="471" left="211" width="164" height="21" font="9"><a href="pdfxml.html#17">2.2.1 About OpenCL</a></text>
<text top="471" left="382" width="386" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="471" left="792" width="8" height="21" font="3">3</text>
<text top="492" left="264" width="212" height="21" font="9"><a href="pdfxml.html#18">2.2.1.1 How OpenCL works</a></text>
<text top="492" left="484" width="285" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="492" left="792" width="8" height="21" font="3">4</text>
<text top="513" left="264" width="273" height="21" font="9"><a href="pdfxml.html#18">2.2.1.2 Execution Model of OpenCL</a></text>
<text top="513" left="548" width="221" height="21" font="3">. . . . . . . . . . . . . . . . . .</text>
<text top="513" left="792" width="8" height="21" font="3">4</text>
<text top="534" left="264" width="175" height="21" font="9"><a href="pdfxml.html#19">2.2.1.3 Memory model</a></text>
<text top="534" left="446" width="323" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="534" left="792" width="8" height="21" font="3">5</text>
<text top="555" left="264" width="213" height="21" font="9"><a href="pdfxml.html#19">2.2.1.4 Programming model</a></text>
<text top="555" left="484" width="285" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="555" left="792" width="8" height="21" font="3">5</text>
<text top="575" left="211" width="243" height="21" font="9"><a href="pdfxml.html#19">2.2.2 Development Environment</a></text>
<text top="575" left="471" width="297" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="575" left="792" width="8" height="21" font="3">5</text>
<text top="596" left="211" width="333" height="21" font="9"><a href="pdfxml.html#20">2.2.3 Cell Broadband Engine (Playstation 3)</a></text>
<text top="596" left="560" width="208" height="21" font="3">. . . . . . . . . . . . . . . . .</text>
<text top="596" left="792" width="8" height="21" font="3">6</text>
<text top="617" left="264" width="233" height="21" font="9"><a href="pdfxml.html#21">2.2.3.1 CBEA in Playstation 3</a></text>
<text top="617" left="510" width="259" height="21" font="3">. . . . . . . . . . . . . . . . . . . . .</text>
<text top="617" left="792" width="8" height="21" font="3">7</text>
<text top="638" left="264" width="258" height="21" font="9"><a href="pdfxml.html#21">2.2.3.2 OpenCL on Cell Processor</a></text>
<text top="638" left="535" width="234" height="21" font="3">. . . . . . . . . . . . . . . . . . .</text>
<text top="638" left="792" width="8" height="21" font="3">7</text>
<text top="659" left="211" width="377" height="21" font="9"><a href="pdfxml.html#21">2.2.4 General-purpose on graphics processing units</a></text>
<text top="659" left="599" width="170" height="21" font="3">. . . . . . . . . . . . . .</text>
<text top="659" left="792" width="8" height="21" font="3">7</text>
<text top="701" left="149" width="9" height="15" font="7"><a href="pdfxml.html#23"><b>3</b></a></text>
<text top="701" left="174" width="163" height="15" font="7"><a href="pdfxml.html#23"><b>Analysis and design</b></a></text>
<text top="701" left="791" width="9" height="15" font="8"><b>9</b></text>
<text top="717" left="174" width="217" height="21" font="9"><a href="pdfxml.html#23">3.1 Structure of the Network</a></text>
<text top="717" left="408" width="361" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="717" left="792" width="8" height="21" font="3">9</text>
<text top="738" left="211" width="183" height="21" font="9"><a href="pdfxml.html#23">3.1.1 Network of Blocks</a></text>
<text top="738" left="408" width="361" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="738" left="792" width="8" height="21" font="3">9</text>
<text top="759" left="211" width="341" height="21" font="9"><a href="pdfxml.html#24">3.1.2 Block - The integral part of the network</a></text>
<text top="759" left="560" width="239" height="21" font="3">. . . . . . . . . . . . . . . . . 10</text>
<text top="780" left="211" width="203" height="21" font="9"><a href="pdfxml.html#25">3.1.3 Weights in Functions</a></text>
<text top="780" left="420" width="379" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . 11</text>
<text top="801" left="264" width="409" height="21" font="9"><a href="pdfxml.html#25">3.1.3.1 Inverse Discrete Cosine Transformation (IDCT)</a></text>
<text top="801" left="688" width="112" height="21" font="3">. . . . . . . 11</text>
<text top="822" left="264" width="294" height="21" font="9"><a href="pdfxml.html#27">3.1.3.2 Trees of actions and coeﬃcients</a></text>
<text top="822" left="573" width="227" height="21" font="3">. . . . . . . . . . . . . . . . 13</text>
<text top="843" left="211" width="155" height="21" font="9"><a href="pdfxml.html#28">3.1.4 Parallelization</a></text>
<text top="843" left="382" width="418" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14</text>
<text top="884" left="149" width="9" height="15" font="7"><a href="pdfxml.html#29"><b>4</b></a></text>
<text top="884" left="174" width="92" height="15" font="7"><a href="pdfxml.html#29"><b>Realization</b></a></text>
<text top="884" left="781" width="19" height="15" font="8"><b>15</b></text>
<text top="901" left="174" width="96" height="21" font="9"><a href="pdfxml.html#29">4.1 Neurons</a></text>
<text top="901" left="280" width="519" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15</text>
<text top="922" left="174" width="272" height="21" font="9"><a href="pdfxml.html#30">4.2 Handling of ﬂoating point values</a></text>
<text top="922" left="459" width="341" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . 16</text>
<text top="943" left="174" width="400" height="21" font="9"><a href="pdfxml.html#30">4.3 Memory representation of the state of the network</a></text>
<text top="943" left="586" width="214" height="21" font="3">. . . . . . . . . . . . . . . 16</text>
<text top="964" left="211" width="434" height="21" font="9"><a href="pdfxml.html#30">4.3.1 Mapping of real model to logical one described above</a></text>
<text top="964" left="662" width="138" height="21" font="3">. . . . . . . . . 16</text>
<text top="985" left="174" width="279" height="21" font="9"><a href="pdfxml.html#32">4.4 Description of network evaluation</a></text>
<text top="985" left="459" width="341" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . 18</text>
<text top="1005" left="211" width="322" height="21" font="9"><a href="pdfxml.html#32">4.4.1 Parts common to all implementations</a></text>
<text top="1005" left="548" width="252" height="21" font="3">. . . . . . . . . . . . . . . . . . 18</text>
<text top="1026" left="264" width="177" height="21" font="9"><a href="pdfxml.html#33">4.4.1.1 OpenCL set-up</a></text>
<text top="1026" left="446" width="354" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . 19</text>
<text top="1047" left="264" width="435" height="21" font="9"><a href="pdfxml.html#34">4.4.1.2 Choice of The Implementation and Network Set-up</a></text>
<text top="1047" left="713" width="87" height="21" font="3">. . . . . 20</text>
<text top="1068" left="264" width="238" height="21" font="9"><a href="pdfxml.html#34">4.4.1.3 Evaluating the Network</a></text>
<text top="1068" left="510" width="290" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . 20</text>
<text top="1129" left="468" width="13" height="21" font="3">xi</text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="18" height="21" font="3">xii</text>
<text top="97" left="651" width="93" height="14" font="3">CONTENTS</text>
<text top="153" left="155" width="547" height="21" font="9"><a href="pdfxml.html#35">4.4.2 How is Discreet Cosine Transformation is implemented and used in</a></text>
<text top="174" left="208" width="85" height="21" font="9"><a href="pdfxml.html#35">the network</a></text>
<text top="174" left="301" width="443" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21</text>
<text top="194" left="155" width="122" height="21" font="9"><a href="pdfxml.html#36">4.4.3 Evolution</a></text>
<text top="194" left="288" width="456" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22</text>
<text top="214" left="208" width="230" height="21" font="9"><a href="pdfxml.html#36">4.4.3.1 Evolution by mutation</a></text>
<text top="214" left="454" width="290" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . 22</text>
<text top="235" left="208" width="218" height="21" font="9"><a href="pdfxml.html#37">4.4.3.2 Diﬀerential evolution</a></text>
<text top="235" left="441" width="303" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . 23</text>
<text top="255" left="155" width="203" height="21" font="9"><a href="pdfxml.html#37">4.4.4 The Method of Trees</a></text>
<text top="255" left="364" width="379" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . 23</text>
<text top="275" left="155" width="417" height="21" font="9"><a href="pdfxml.html#37">4.4.5 How trees are represented and used in the network</a></text>
<text top="275" left="581" width="163" height="21" font="3">. . . . . . . . . . . 23</text>
<text top="296" left="155" width="346" height="21" font="9"><a href="pdfxml.html#39">4.4.6 Description of the Tree internal language</a></text>
<text top="296" left="517" width="227" height="21" font="3">. . . . . . . . . . . . . . . . 25</text>
<text top="316" left="155" width="225" height="21" font="9"><a href="pdfxml.html#40">4.4.7 Possibilities of mutation</a></text>
<text top="316" left="390" width="354" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . 26</text>
<text top="336" left="155" width="338" height="21" font="9"><a href="pdfxml.html#40">4.4.8 Weight Matrix implementation speciﬁcs</a></text>
<text top="336" left="504" width="239" height="21" font="3">. . . . . . . . . . . . . . . . . 26</text>
<text top="357" left="118" width="398" height="21" font="9"><a href="pdfxml.html#41">4.5 Problem with genetic algorithms and this network</a></text>
<text top="357" left="530" width="214" height="21" font="3">. . . . . . . . . . . . . . . 27</text>
<text top="397" left="93" width="9" height="15" font="7"><a href="pdfxml.html#43"><b>5</b></a></text>
<text top="397" left="118" width="60" height="15" font="7"><a href="pdfxml.html#43"><b>Testing</b></a></text>
<text top="397" left="725" width="19" height="15" font="8"><b>29</b></text>
<text top="414" left="118" width="176" height="21" font="9"><a href="pdfxml.html#43">5.1 Description of tests</a></text>
<text top="414" left="301" width="443" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29</text>
<text top="434" left="118" width="90" height="21" font="9"><a href="pdfxml.html#44">5.2 Results</a></text>
<text top="434" left="212" width="532" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30</text>
<text top="475" left="93" width="9" height="15" font="7"><a href="pdfxml.html#49"><b>6</b></a></text>
<text top="475" left="118" width="90" height="15" font="7"><a href="pdfxml.html#49"><b>Conclusion</b></a></text>
<text top="475" left="725" width="19" height="15" font="8"><b>35</b></text>
<text top="511" left="93" width="118" height="15" font="7"><a href="pdfxml.html#53"><b>A Installation</b></a></text>
<text top="511" left="725" width="19" height="15" font="8"><b>39</b></text>
<text top="528" left="118" width="541" height="21" font="9"><a href="pdfxml.html#53">A.1 Installation of the IBM OpenCL Development Kit for Linux on Power</a></text>
<text top="528" left="670" width="74" height="21" font="3">. . . . 39</text>
<text top="548" left="118" width="346" height="21" font="9"><a href="pdfxml.html#54">A.2 Installation of the NetBeans OpenCL Pack</a></text>
<text top="548" left="479" width="265" height="21" font="3">. . . . . . . . . . . . . . . . . . . 40</text>
<text top="568" left="118" width="223" height="21" font="9"><a href="pdfxml.html#1">A.3 The List of Abbreviations</a></text>
<text top="568" left="352" width="392" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41</text>
<text top="609" left="93" width="185" height="15" font="7"><a href="pdfxml.html#55"><b>B The Content of CD</b></a></text>
<text top="609" left="725" width="19" height="15" font="8"><b>43</b></text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="10" size="14" family="Times" color="#0000ff"/>
<text top="263" left="149" width="266" height="33" font="6"><b>List of Figures</b></text>
<text top="368" left="174" width="585" height="21" font="9"><a href="pdfxml.html#20">2.1 Simpliﬁed Cell Broadband Engine Architecture diagram. More speciﬁcally</a></text>
<text top="388" left="211" width="547" height="21" font="9"><a href="pdfxml.html#20">this is a simpliﬁed diagram of a CBEA used in Playstation 3 - it shows that</a></text>
<text top="409" left="211" width="462" height="21" font="9"><a href="pdfxml.html#20">one SPE is disabled and one SPE is being used as a hyper-visor.</a></text>
<text top="409" left="688" width="81" height="21" font="3">. . . . . . .</text>
<text top="409" left="792" width="8" height="21" font="3">6</text>
<text top="444" left="174" width="217" height="21" font="9"><a href="pdfxml.html#23">3.1 Structure of the Network</a></text>
<text top="444" left="408" width="361" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="444" left="792" width="8" height="21" font="3">9</text>
<text top="464" left="174" width="162" height="21" font="9"><a href="pdfxml.html#24">3.2 The Purkinje cell</a></text>
<text top="464" left="344" width="456" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10</text>
<text top="485" left="174" width="208" height="21" font="9"><a href="pdfxml.html#25">3.3 Block of the input layer</a></text>
<text top="485" left="395" width="405" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11</text>
<text top="505" left="174" width="181" height="21" font="9"><a href="pdfxml.html#26">3.4 Inner network block</a></text>
<text top="505" left="370" width="430" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12</text>
<text top="525" left="174" width="218" height="21" font="9"><a href="pdfxml.html#26">3.5 Top block of the network</a></text>
<text top="525" left="408" width="392" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12</text>
<text top="546" left="174" width="559" height="21" font="9"><a href="pdfxml.html#27">3.6 Function <i>y </i>= <i>cos</i>(<i>a</i>) + <i>sin</i>(2<i>c</i>) represented by a tree of simpler functions.</a></text>
<text top="546" left="739" width="61" height="21" font="3">. . . 13</text>
<text top="581" left="174" width="208" height="21" font="9"><a href="pdfxml.html#29">4.1 Rosenblatt’s percentron</a></text>
<text top="581" left="395" width="405" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15</text>
<text top="616" left="174" width="400" height="21" font="9"><a href="pdfxml.html#44">5.1 Chart of run times for weight matrix method tests</a></text>
<text top="616" left="586" width="214" height="21" font="3">. . . . . . . . . . . . . . . 30</text>
<text top="636" left="174" width="342" height="21" font="9"><a href="pdfxml.html#45">5.2 Chart of run times for IDCT method tests</a></text>
<text top="636" left="522" width="278" height="21" font="3">. . . . . . . . . . . . . . . . . . . . 31</text>
<text top="657" left="174" width="332" height="21" font="9"><a href="pdfxml.html#46">5.3 Chart of run times for Tree method tests</a></text>
<text top="657" left="510" width="290" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . 32</text>
<text top="1129" left="463" width="22" height="21" font="3">xiii</text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="22" height="21" font="3">xiv</text>
<text top="97" left="599" width="145" height="14" font="3">LIST OF FIGURES</text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1262" width="892">
<text top="263" left="149" width="247" height="33" font="6"><b>List of Tables</b></text>
<text top="368" left="174" width="258" height="21" font="9"><a href="pdfxml.html#33">4.1 OpenCL initialization function</a></text>
<text top="368" left="446" width="354" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . 19</text>
<text top="388" left="174" width="301" height="21" font="9"><a href="pdfxml.html#36">4.2 The IDCT implementation functions</a></text>
<text top="388" left="484" width="316" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . 22</text>
<text top="409" left="174" width="290" height="21" font="9"><a href="pdfxml.html#38">4.3 The Tree implementation functions</a></text>
<text top="409" left="471" width="329" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . 24</text>
<text top="429" left="174" width="191" height="21" font="9"><a href="pdfxml.html#39">4.4 The Actions Of Trees</a></text>
<text top="429" left="370" width="430" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25</text>
<text top="464" left="174" width="225" height="21" font="9"><a href="pdfxml.html#44">5.1 Weight matrix test results</a></text>
<text top="464" left="408" width="392" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30</text>
<text top="485" left="174" width="164" height="21" font="9"><a href="pdfxml.html#45">5.2 IDCT test results</a></text>
<text top="485" left="344" width="456" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31</text>
<text top="505" left="174" width="153" height="21" font="9"><a href="pdfxml.html#45">5.3 Tree test results</a></text>
<text top="505" left="331" width="469" height="21" font="3">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31</text>
<text top="525" left="174" width="541" height="21" font="9"><a href="pdfxml.html#45">5.4 Speed-ups when six work-items are used (compared to one work-item)</a></text>
<text top="525" left="726" width="74" height="21" font="3">. . . . 31</text>
<text top="546" left="174" width="601" height="21" font="9"><a href="pdfxml.html#46">5.5 Speed-ups when ten inner cycles were used in combination with six work-items</a></text>
<text top="546" left="784" width="16" height="21" font="3">32</text>
<text top="566" left="174" width="601" height="21" font="9"><a href="pdfxml.html#46">5.6 Speed-ups when ten inner cycles were used in combination with one work-items</a></text>
<text top="566" left="784" width="16" height="21" font="3">32</text>
<text top="1129" left="466" width="17" height="21" font="3">xv</text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="22" height="21" font="3">xvi</text>
<text top="97" left="608" width="136" height="14" font="3">LIST OF TABLES</text>
</page>
<page number="15" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="11" size="9" family="Times" color="#0000ff"/>
	<fontspec id="12" size="11" family="Times" color="#000000"/>
<text top="264" left="149" width="154" height="27" font="4"><b>Chapter 1</b></text>
<text top="338" left="149" width="230" height="33" font="6"><b>Introduction</b></text>
<text top="433" left="149" width="651" height="21" font="3">The goal of this thesis was to design and implement a hyper neural network using OpenCL.</text>
<text top="453" left="149" width="651" height="21" font="3">The focus of this network should have been on topologies with limited number of inputs of</text>
<text top="473" left="149" width="595" height="21" font="3">individual neurons and on algorithms of learning with use of genetic programming.</text>
<text top="498" left="175" width="625" height="21" font="3">This assignment has evolved to a design and implementation of a hierarchical hyper</text>
<text top="518" left="149" width="651" height="21" font="3">neural network that would be inspired by neural networks that are present in the living</text>
<text top="538" left="149" width="651" height="21" font="3">organisms. The topology of here presented artiﬁcial neural network has evolved to a design</text>
<text top="559" left="149" width="651" height="21" font="3">that remotely resemble neural networks can be found for example in cerebellum (little brain)</text>
<text top="579" left="149" width="651" height="21" font="3">- a part of the brain that is responsible for coordination of movements and balance control.</text>
<text top="603" left="175" width="625" height="21" font="3">The main idea that was borrowed from nature here are the Purkinje cells that are located</text>
<text top="624" left="149" width="651" height="21" font="3">in the cerebellum - specialized neurons with very long axons that connect clusters of neurons</text>
<text top="644" left="149" width="197" height="21" font="3">with far places in the body.</text>
<text top="668" left="175" width="625" height="21" font="3">From the technical point of view, this implementation should be primarily targeted on</text>
<text top="689" left="149" width="651" height="21" font="3">the Cell Broadband Engine, but given that parallelization will be done using OpenCL it</text>
<text top="709" left="149" width="651" height="21" font="3">should be possible to run it on hardware other than that. This makes sense especially now,</text>
<text top="729" left="149" width="651" height="21" font="3">when the development of the Cell Broadband Engine has practically stopped, the SDK for it</text>
<text top="750" left="149" width="651" height="21" font="3">is not available any more and the only publicly available implementation of this architecture</text>
<text top="770" left="149" width="651" height="21" font="3">- the Playstation 3 - has been crippled by removing the ability to install other operating</text>
<text top="790" left="149" width="60" height="21" font="3">systems.</text>
<text top="815" left="175" width="625" height="21" font="3">Now the OpenCL is the only supported way of programming for the Cell Broadband</text>
<text top="835" left="149" width="54" height="21" font="3"><a href="pdfxml.html#15">Engine.</a></text>
<text top="836" left="203" width="21" height="11" font="11"><a href="pdfxml.html#15">1 2</a></text>
<text top="835" left="224" width="576" height="21" font="3"><a href="pdfxml.html#15">This </a>also directly requires you to have access to hardware with outdated versions</text>
<text top="855" left="149" width="651" height="21" font="3">of ﬁrmware (Playstation 3) or to have access to expensive server/blade/add-on card solutions</text>
<text top="876" left="149" width="182" height="21" font="3">that are based on CBEA.</text>
<text top="1039" left="168" width="5" height="8" font="5">1</text>
<text top="1041" left="174" width="333" height="12" font="12">Except for proprietary SDK that is provided by SONY</text>
<text top="1055" left="168" width="5" height="8" font="5">2</text>
<text top="1058" left="174" width="626" height="12" font="12">On March 31, 2011 IBM SDK for Multicore Acceleration and all of its documentation was removed from</text>
<text top="1074" left="149" width="223" height="12" font="12">the developerWorks Resource Center</text>
<text top="1129" left="470" width="8" height="21" font="3">1</text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="8" height="21" font="3">2</text>
<text top="97" left="497" width="247" height="14" font="3">CHAPTER 1. INTRODUCTION</text>
</page>
<page number="17" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="13" size="15" family="Times" color="#000000"/>
<text top="263" left="149" width="154" height="27" font="4"><b>Chapter 2</b></text>
<text top="336" left="149" width="433" height="33" font="6"><b>Description of problem,</b></text>
<text top="381" left="149" width="376" height="33" font="6"><b>speciﬁcation of goals</b></text>
<text top="481" left="149" width="31" height="19" font="1"><b>2.1</b></text>
<text top="481" left="204" width="340" height="19" font="1"><b>What is a hyper neural network</b></text>
<text top="520" left="149" width="651" height="21" font="3">When one searches for the information on hyper neural networks he basically doesn’t ﬁnd</text>
<text top="540" left="149" width="642" height="21" font="3">much. This is caused by the fact that the idea of hyper neural networks is relatively new.</text>
<text top="563" left="175" width="625" height="21" font="3">The basic idea is in representing the weights, that belong to interconnections in the</text>
<text top="584" left="149" width="651" height="21" font="3">neural network, by function.The learning process then doesn’t happen directly on the level</text>
<text top="604" left="149" width="651" height="21" font="3">of weights like it is common in normal neural networks, but instead it happens by changing</text>
<text top="624" left="149" width="605" height="21" font="3">the function that is used to generate the weight every time when its value is needed.</text>
<text top="647" left="175" width="625" height="21" font="3">This move from values to a structure that can provide us these values is beneﬁcial in the</text>
<text top="668" left="149" width="651" height="21" font="3">way that we can for example train a small network for a particular problem (or its subset)</text>
<text top="688" left="149" width="651" height="21" font="3">and then take the function that has been perfected and apply it to a similar bigger network.</text>
<text top="711" left="175" width="625" height="21" font="3">The weight information is viewed as dependant on the location of the relevant neural</text>
<text top="732" left="149" width="436" height="21" font="3">connection - this is the input variable of the weight function.</text>
<text top="755" left="175" width="625" height="21" font="3">There are several ways to represent these weight functions. Probably the most common</text>
<text top="775" left="149" width="651" height="21" font="3">approach is to use conventional neural network for approximation of these functions. Every</text>
<text top="795" left="149" width="651" height="21" font="3">time, the location information is fed to the approximating neural network and the value of</text>
<text top="816" left="149" width="415" height="21" font="3">weight come out as a result of evaluation of that network.</text>
<text top="839" left="175" width="625" height="21" font="3">I have focused on a diﬀerent approach - the genetic evolution of these functions. This</text>
<text top="859" left="149" width="651" height="21" font="3">necessitate in specifying of the parts - genes - that a function can consist of. Here I have</text>
<text top="880" left="149" width="651" height="21" font="3">gone in two ways - representation of a function as a compressed matrix of coeﬃcients used</text>
<text top="900" left="149" width="458" height="21" font="3">for Inverse Discrete Cosine Transformation described in section</text>
<text top="900" left="613" width="46" height="21" font="9"><a href="pdfxml.html#25">3.1.3.1</a></text>
<text top="900" left="666" width="134" height="21" font="3">and representation</text>
<text top="920" left="149" width="588" height="21" font="3">of a function as a tree composed of elemental operations that is described in section</text>
<text top="920" left="742" width="46" height="21" font="9"><a href="pdfxml.html#27">3.1.3.2</a></text>
<text top="920" left="788" width="5" height="21" font="3"><a href="pdfxml.html#27">.</a></text>
<text top="975" left="149" width="31" height="19" font="1"><b>2.2</b></text>
<text top="975" left="204" width="189" height="19" font="1"><b>Technologies used</b></text>
<text top="1017" left="149" width="41" height="16" font="13"><b>2.2.1</b></text>
<text top="1017" left="211" width="137" height="16" font="13"><b>About OpenCL</b></text>
<text top="1048" left="149" width="651" height="21" font="3">OpenCL is the ﬁrst open industry standard for heterogeneous parallel programming of mod-</text>
<text top="1068" left="149" width="260" height="21" font="3">ern processors of today’s computers.</text>
<text top="1129" left="470" width="8" height="21" font="3">3</text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="8" height="21" font="3">4</text>
<text top="97" left="164" width="580" height="14" font="3">CHAPTER 2. DESCRIPTION OF PROBLEM, SPECIFICATION OF GOALS</text>
<text top="153" left="118" width="625" height="21" font="3">It began it’s life in Apple corporation, where it was also made available to the public</text>
<text top="174" left="93" width="651" height="21" font="3">for the ﬁrst time in Mac OS X 10.6 &#34;Snow Leopard&#34;. In 2008 OpenCL moved to Khronos</text>
<text top="194" left="93" width="651" height="21" font="3">group, that now manages and develops open standards for parallel computations - OpenCL</text>
<text top="214" left="93" width="651" height="21" font="3">itself, graphics - OpenGL and many others. The members of this group include such big</text>
<text top="235" left="93" width="272" height="21" font="3">names as AMD, Intel, IBM or nVidia.</text>
<text top="260" left="118" width="625" height="21" font="3">Version 1.0 was released on December 8, 2008, version 1.1 followed June 11, 2010. The</text>
<text top="281" left="93" width="95" height="21" font="3">latest vers<a href="pdfxml.html#18">ion</a></text>
<text top="282" left="188" width="6" height="11" font="11"><a href="pdfxml.html#18">1</a></text>
<text top="281" left="200" width="301" height="21" font="3">- 1.2 - was released on November 15 2011.</text>
<text top="336" left="93" width="53" height="15" font="8"><b>2.2.1.1</b></text>
<text top="336" left="165" width="166" height="15" font="8"><b>How OpenCL works</b></text>
<text top="368" left="93" width="584" height="21" font="3">The OpenCL standard includes programming language derived from C99 standard</text>
<text top="370" left="682" width="6" height="11" font="11"><a href="pdfxml.html#18">2</a></text>
<text top="368" left="693" width="51" height="21" font="3">, which</text>
<text top="389" left="93" width="651" height="21" font="3">serves for programming of computational kernels and API for creation and management of</text>
<text top="409" left="93" width="651" height="21" font="3">these kernels. Kernels are being compiled in the execution time for target devices (sim-</text>
<text top="429" left="93" width="651" height="21" font="3">ilar principle to Java’s JIT, here e.g.. llvm is used), which enables them to fully utilize</text>
<text top="450" left="93" width="515" height="21" font="3">computational abilities of given computer, using only one set of kernels.</text>
<text top="505" left="93" width="53" height="15" font="8"><b>2.2.1.2</b></text>
<text top="505" left="165" width="237" height="15" font="8"><b>Execution Model of OpenCL</b></text>
<text top="537" left="93" width="651" height="21" font="3">A program that is using OpenCL can be derived into two parts - one part, that is running</text>
<text top="558" left="93" width="651" height="21" font="3">on host (CPU) - this part is also responsible for communication between host and OpenCL</text>
<text top="578" left="93" width="651" height="21" font="3">devices, and also for coordination of kernel executions - and one part that is written in</text>
<text top="598" left="93" width="428" height="21" font="3">OpenCL and runs on OpenCL devices (kernels themselves).</text>
<text top="624" left="118" width="625" height="21" font="3">Every instance of kernel - every work-item - executed on an OpenCL device runs in it’s</text>
<text top="644" left="93" width="81" height="21" font="3">own thread</text>
<text top="646" left="179" width="6" height="11" font="11"><a href="pdfxml.html#18">3</a></text>
<text top="644" left="186" width="5" height="21" font="3"><a href="pdfxml.html#18">.</a></text>
<text top="670" left="118" width="625" height="21" font="3">When executed, application speciﬁes one, two or three dimensional space, total number</text>
<text top="690" left="93" width="390" height="21" font="3">of work-items and size of work-groups for w<a href="pdfxml.html#18">ork-items</a></text>
<text top="692" left="483" width="6" height="11" font="11"><a href="pdfxml.html#18">4</a></text>
<text top="690" left="490" width="254" height="21" font="3"><a href="pdfxml.html#18">. </a>From these information OpenCL</text>
<text top="711" left="93" width="651" height="21" font="3">determines the number of work-groups and assigns every work-item it’s global, local and</text>
<text top="731" left="93" width="651" height="21" font="3">group index. Global index is for distinction between all work-items, local index is for</text>
<text top="751" left="93" width="651" height="21" font="3">distinction in the work-group that a work-item belongs to and group index tells the work-</text>
<text top="772" left="93" width="262" height="21" font="3">group which a work-item belongs to.</text>
<text top="797" left="118" width="625" height="21" font="3">Every work-item can ﬁnd out it’s identiﬁer, which makes it aware of the part of the</text>
<text top="818" left="93" width="151" height="21" font="3">problem it is solving.</text>
<text top="843" left="118" width="625" height="21" font="3">Application keeps contexts within the execution model that contain information about</text>
<text top="864" left="93" width="651" height="21" font="3">devices, kernels and memory objects and other important things for further execution of</text>
<text top="884" left="93" width="54" height="21" font="3">kernels.</text>
<text top="910" left="118" width="625" height="21" font="3">For synchronization and management of devices and streams of data there exist command</text>
<text top="930" left="93" width="651" height="21" font="3">queues, which can execute commands in and also out of order. Every command added to</text>
<text top="950" left="93" width="651" height="21" font="3">queue generates an event, that can be in case of asynchronous command execution used for</text>
<text top="971" left="93" width="264" height="21" font="3">monitoring of the command’s status.</text>
<text top="1006" left="112" width="5" height="8" font="5">1</text>
<text top="1009" left="118" width="130" height="12" font="12">in the time of writing</text>
<text top="1022" left="112" width="5" height="8" font="5">2</text>
<text top="1025" left="118" width="540" height="12" font="12">Main extension is addition of vector types 2D and 3D image types and build-in functions</text>
<text top="1039" left="112" width="5" height="8" font="5">3</text>
<text top="1041" left="118" width="626" height="12" font="12">These are in case of GPUs hardware managed, which enables fast context switching, which enables</text>
<text top="1058" left="93" width="398" height="12" font="12">running upto thousands of threads, which can simultaneously run</text>
<text top="1072" left="112" width="5" height="8" font="5">4</text>
<text top="1074" left="118" width="93" height="12" font="12">non-mandatory</text>
</page>
<page number="19" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="223" height="14" font="3">2.2. TECHNOLOGIES USED</text>
<text top="92" left="792" width="8" height="21" font="3">5</text>
<text top="158" left="149" width="53" height="15" font="8"><b>2.2.1.3</b></text>
<text top="158" left="221" width="125" height="15" font="8"><b>Memory model</b></text>
<text top="188" left="149" width="651" height="21" font="3">OpenCL distinguishes four diﬀerent address spaces: __private, __local __constant and</text>
<text top="208" left="149" width="651" height="21" font="3">__global. The __global memory space is a part of memory that is available to all work-</text>
<text top="228" left="149" width="651" height="21" font="3">items. The __constant memory space is a part of global memory that is read-only for work-</text>
<text top="249" left="149" width="651" height="21" font="3">items. Content of the __local memory space is accessible for work-items in one work-group</text>
<text top="269" left="149" width="651" height="21" font="3">and the __private memory space is accessible only to given work-item. The non-OpenCL</text>
<text top="289" left="149" width="651" height="21" font="3">part of the application can dynamically allocate memory in spaces __global, __constant</text>
<text top="310" left="149" width="651" height="21" font="3">and __local and it doesn’t have access to __private memory space. Kernel on the other</text>
<text top="330" left="149" width="651" height="21" font="3">hand doesn’t have access to __global space and in remaining spaces can allocate memory</text>
<text top="350" left="149" width="68" height="21" font="3">statically.</text>
<text top="374" left="175" width="625" height="21" font="3">Application has read/write access only to __global and __constant spaces. Kernel can</text>
<text top="394" left="149" width="651" height="21" font="3">read from __global, __constant and __private spaces. It can also write to __global and</text>
<text top="415" left="149" width="129" height="21" font="3">__private spaces.</text>
<text top="465" left="149" width="53" height="15" font="8"><b>2.2.1.4</b></text>
<text top="465" left="221" width="169" height="15" font="8"><b>Programming model</b></text>
<text top="495" left="149" width="651" height="21" font="3">OpenCL supports both task parallel model, that is similar to POSIX programming model,</text>
<text top="515" left="149" width="356" height="21" font="3">and data parallel model which is similar to <a href="pdfxml.html#19">SIMD</a></text>
<text top="517" left="505" width="6" height="11" font="11"><a href="pdfxml.html#19">5</a></text>
<text top="515" left="517" width="72" height="21" font="3">execution.</text>
<text top="539" left="175" width="625" height="21" font="3">In task parallel model the tasks aren’t pre-emptive - tasks have to be queued to out of</text>
<text top="559" left="149" width="651" height="21" font="3">order command queue or to multiple in order command queues so that multiple computa-</text>
<text top="580" left="149" width="651" height="21" font="3">tional devices can be used on one OpenCL device. In this model, because of big overhead</text>
<text top="600" left="149" width="651" height="21" font="3">connected to starting a task, one should avoid running short tasks, where overhead can take</text>
<text top="620" left="149" width="294" height="21" font="3">longer than actual computation on CPU.</text>
<text top="644" left="175" width="625" height="21" font="3">In data parallel model work is distributed to N dimensional space (NDRange) that is</text>
<text top="664" left="149" width="309" height="21" font="3">being iterated by OpenCL by work-groups.</text>
<text top="714" left="149" width="41" height="16" font="13"><b>2.2.2</b></text>
<text top="714" left="211" width="236" height="16" font="13"><b>Development Environment</b></text>
<text top="745" left="149" width="651" height="21" font="3">The this project is implemented in the C programming language - syntax that was used</text>
<text top="766" left="149" width="612" height="21" font="3">should be &#34;ANSI C&#34; (C89) compliant - and OpenCL which is based on C99 standard.</text>
<text top="789" left="175" width="625" height="21" font="3">Compiler that was used was standard GCC that were supplied with the Linux distri-</text>
<text top="810" left="149" width="651" height="21" font="3">butions that were used - in case of PC this was Kubuntu 11.10 with GCC 4.6.1, in case of</text>
<text top="830" left="149" width="341" height="21" font="3">Playstation 3 it was Fedora 10 with GCC 4.3.1.</text>
<text top="854" left="175" width="625" height="21" font="3">For development with OpenCL some OpenCL implementations are necessary. In case of</text>
<text top="874" left="149" width="651" height="21" font="3">Playstation 3 IBM OpenCL Development Kit for Linux on Power 0.3 was used and in case</text>
<text top="894" left="149" width="348" height="21" font="3">of PC the nVidia CUDA Toolkit 4.0.17 was <a href="pdfxml.html#19">used</a></text>
<text top="896" left="497" width="6" height="11" font="11"><a href="pdfxml.html#19">6</a></text>
<text top="894" left="505" width="5" height="21" font="3"><a href="pdfxml.html#19">.</a></text>
<text top="918" left="175" width="625" height="21" font="3">As an integrated development environment (IDE) Netbeans 7.0.1 was used. This choice</text>
<text top="938" left="149" width="651" height="21" font="3">proven not to be the best possible. The OpenCL isn’t properly supported in any of major</text>
<text top="959" left="149" width="651" height="21" font="3">IDEs so I started using vim for editing the OpenCL part of the project. Later the NetBeans</text>
<text top="979" left="149" width="651" height="21" font="3">OpenCL Pack appeared - this, being far from perfect, allowed me to edit OpenCL inside of</text>
<text top="999" left="149" width="631" height="21" font="3">Netbeans which was much better than constantly switching between Netbeans and vim.</text>
<text top="1023" left="175" width="551" height="21" font="3">Notes on how to install all of the necessary software are located in Appendix</text>
<text top="1023" left="731" width="12" height="21" font="9"><a href="pdfxml.html#53">A</a></text>
<text top="1055" left="168" width="5" height="8" font="5">5</text>
<text top="1058" left="174" width="197" height="12" font="12">Single Instruction Multiple Data</text>
<text top="1072" left="168" width="5" height="8" font="5">6</text>
<text top="1074" left="174" width="215" height="12" font="12">This also includes OpenCL support</text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="14" size="12" family="Times" color="#000000"/>
	<fontspec id="15" size="13" family="Times" color="#000000"/>
	<fontspec id="16" size="16" family="Times" color="#000000"/>
<text top="92" left="93" width="8" height="21" font="3">6</text>
<text top="97" left="164" width="580" height="14" font="3">CHAPTER 2. DESCRIPTION OF PROBLEM, SPECIFICATION OF GOALS</text>
<text top="345" left="293" width="251" height="17" font="14">Element Interconnection Bus (EIB)</text>
<text top="226" left="298" width="30" height="19" font="15">SPE</text>
<text top="226" left="227" width="30" height="19" font="15">SPE</text>
<text top="226" left="156" width="30" height="19" font="15">SPE</text>
<text top="226" left="653" width="30" height="19" font="15">SPE</text>
<text top="226" left="582" width="30" height="19" font="15">SPE</text>
<text top="226" left="511" width="30" height="19" font="15">SPE</text>
<text top="226" left="440" width="30" height="19" font="15">SPE</text>
<text top="226" left="369" width="30" height="19" font="15">SPE</text>
<text top="464" left="401" width="34" height="21" font="16">PPE</text>
<text top="588" left="93" width="651" height="21" font="3">Figure 2.1: Simpliﬁed Cell Broadband Engine Architecture diagram. More speciﬁcally this</text>
<text top="608" left="93" width="651" height="21" font="3">is a simpliﬁed diagram of a CBEA used in Playstation 3 - it shows that one SPE is disabled</text>
<text top="629" left="93" width="315" height="21" font="3">and one SPE is being used as a hyper-visor.</text>
<text top="685" left="93" width="41" height="16" font="13"><b>2.2.3</b></text>
<text top="685" left="155" width="345" height="16" font="13"><b>Cell Broadband Engine (Playstation 3)</b></text>
<text top="718" left="93" width="651" height="21" font="3">The Cell Broadband Engine Architecture (CBEA) is a processor architecture aimed at</text>
<text top="738" left="93" width="651" height="21" font="3">distributed processing. It was designed to bridge the gap between conventional processors</text>
<text top="758" left="93" width="651" height="21" font="3">such as those used in regular PCs and more specialized high performance processors such</text>
<text top="778" left="93" width="226" height="21" font="3">as those used in graphics cards.</text>
<text top="803" left="118" width="625" height="21" font="3">The physical view of the CBEA can diﬀer depending on the technology used, the perfor-</text>
<text top="823" left="93" width="651" height="21" font="3">mance and cost characteristics. It can be a single chip (the case of Playstation 3), a multi</text>
<text top="844" left="93" width="415" height="21" font="3">chip module or one of many other possible conﬁgurations.</text>
<text top="868" left="118" width="625" height="21" font="3">From the logical point of view, the CBEA consists of four types of functional components:</text>
<text top="907" left="113" width="305" height="21" font="3">• the PowerPC Processor Element (PPE)</text>
<text top="941" left="113" width="281" height="21" font="3">• the synergistic processor unit (SPU)</text>
<text top="975" left="113" width="269" height="21" font="3">• the memory ﬂow controller (MFC)</text>
<text top="1009" left="113" width="289" height="21" font="3">• the internal interrupt controller (IIC)</text>
<text top="1048" left="93" width="651" height="21" font="3">From these, the computational units are PPE and SPU. Each SPU has it’s own dedicated</text>
<text top="1068" left="93" width="651" height="21" font="3">local storage and dedicated MFC with its associated memory management unit (MMU) and</text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="223" height="14" font="3">2.2. TECHNOLOGIES USED</text>
<text top="92" left="792" width="8" height="21" font="3">7</text>
<text top="153" left="149" width="651" height="21" font="3">a replacement management table (RMT). This combination is then called Synergistic Pro-</text>
<text top="174" left="149" width="651" height="21" font="3">cessor Element (SPE). The PPE and SPEs are then connected via Element Interconnection</text>
<text top="194" left="149" width="212" height="21" font="3">Bus (EIB) as shown on ﬁgure</text>
<text top="194" left="366" width="21" height="21" font="9"><a href="pdfxml.html#20">2.1</a></text>
<text top="194" left="393" width="55" height="21" font="3">on page</text>
<text top="194" left="454" width="8" height="21" font="9"><a href="pdfxml.html#20">6</a></text>
<text top="194" left="462" width="5" height="21" font="3"><a href="pdfxml.html#20">.</a></text>
<text top="218" left="175" width="625" height="21" font="3">More detail information about the Cell Broadband Engine Architecture can be found in</text>
<text top="239" left="149" width="408" height="21" font="3">Cell Broadband Engine Architecture document by IBM <a href="pdfxml.html#51">[</a></text>
<text top="239" left="557" width="8" height="21" font="9"><a href="pdfxml.html#51">3</a></text>
<text top="239" left="565" width="9" height="21" font="3"><a href="pdfxml.html#51">].</a></text>
<text top="290" left="149" width="53" height="15" font="8"><b>2.2.3.1</b></text>
<text top="290" left="221" width="190" height="15" font="8"><b>CBEA in Playstation 3</b></text>
<text top="321" left="149" width="651" height="21" font="3">The CBEA that was available to me (and the only publicly available CBEA) was the pro-</text>
<text top="341" left="149" width="332" height="21" font="3">cessor of Playstation3. Its diagram is on ﬁgure</text>
<text top="341" left="486" width="21" height="21" font="9"><a href="pdfxml.html#20">2.1</a></text>
<text top="341" left="512" width="288" height="21" font="3">- it contains two PowerPC cores running</text>
<text top="362" left="149" width="651" height="21" font="3">on 3 GHz and eight SPEs out of one is disabled and one is being used as a hyper-visor in</text>
<text top="382" left="149" width="443" height="21" font="3">the &#34;Other OS&#34; mode. That leaves user with six usable SPEs.</text>
<text top="406" left="175" width="625" height="21" font="3">Every of the six SPEs contains 256 KiB of embedded SDRAM. In addition to this there</text>
<text top="427" left="149" width="651" height="21" font="3">is 256 MiB of system RAM that is available to PPE. This memory is being used also for</text>
<text top="447" left="149" width="651" height="21" font="3">running the operating system and hyper-visor so available memory may vary on the services</text>
<text top="467" left="149" width="123" height="21" font="3">that are running.</text>
<text top="519" left="149" width="53" height="15" font="8"><b>2.2.3.2</b></text>
<text top="519" left="221" width="220" height="15" font="8"><b>OpenCL on Cell Processor</b></text>
<text top="550" left="149" width="651" height="21" font="3">OpenCL application can utilize two OpenCL devices - one that consists of two PowerPC</text>
<text top="570" left="149" width="651" height="21" font="3">Processor Elements (CPU device) and one that includes all Synergistic Processor Elements</text>
<text top="590" left="149" width="148" height="21" font="3">(Accelerator device).</text>
<text top="615" left="175" width="625" height="21" font="3">The CPU device maps every work-item to a thread - this device is a collection of all</text>
<text top="635" left="149" width="651" height="21" font="3">computing threads running on PPE. Both CBEA and IBM Power systems have one CPU</text>
<text top="655" left="149" width="651" height="21" font="3">that from the OpenCL point of view represent one CPU device. This device has all of the</text>
<text top="676" left="149" width="392" height="21" font="3">OpenCL memory spaces mapped to the same memory.</text>
<text top="700" left="175" width="625" height="21" font="3">On CBEA OpenCL provides one Accelerator device, that contains all SPEs. Local</text>
<text top="720" left="149" width="651" height="21" font="3">memory of every SPE is divided between OpenCL kernel runtime, 8 KiB global data cache,</text>
<text top="741" left="149" width="651" height="21" font="3">program code and __private, __local and __constant variables. OpenCL program can</text>
<text top="761" left="149" width="651" height="21" font="3">consist of one or more kernels that will share local memory. Because of shortage of local</text>
<text top="781" left="149" width="651" height="21" font="3">memory, kernels, that need big amount of this memory, have to be executed in smaller</text>
<text top="802" left="149" width="92" height="21" font="3">work-groups.</text>
<text top="853" left="149" width="41" height="16" font="13"><b>2.2.4</b></text>
<text top="853" left="211" width="402" height="16" font="13"><b>General-purpose on graphics processing units</b></text>
<text top="884" left="149" width="651" height="21" font="3">General-purpose computing on graphics processing units (GPGPU) is the technique of using</text>
<text top="905" left="149" width="459" height="21" font="3">GPU to perform computation other than graphics computation.</text>
<text top="929" left="175" width="625" height="21" font="3">The GPU with GPGPU support that was available to me was nVidia Quadro NVS 140m</text>
<text top="949" left="149" width="469" height="21" font="3">which has two multiprocessors that allow running 8 threads each.</text>
</page>
<page number="22" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="8" height="21" font="3">8</text>
<text top="97" left="164" width="580" height="14" font="3">CHAPTER 2. DESCRIPTION OF PROBLEM, SPECIFICATION OF GOALS</text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1262" width="892">
<text top="264" left="149" width="154" height="27" font="4"><b>Chapter 3</b></text>
<text top="339" left="149" width="363" height="33" font="6"><b>Analysis and design</b></text>
<text top="441" left="149" width="31" height="19" font="1"><b>3.1</b></text>
<text top="441" left="204" width="269" height="19" font="1"><b>Structure of the Network</b></text>
<text top="481" left="149" width="95" height="21" font="3">On the ﬁgure</text>
<text top="481" left="250" width="21" height="21" font="9"><a href="pdfxml.html#23">3.1</a></text>
<text top="481" left="276" width="524" height="21" font="3">you can see the top level diagram of the network. It consists of numerous</text>
<text top="501" left="149" width="651" height="21" font="3">layers. There are basically three types of layers - input layer, where the inputs of the network</text>
<text top="522" left="149" width="651" height="21" font="3">are connected - regular &#34;inner&#34; layers that accept output of lower layers and output layer</text>
<text top="542" left="149" width="282" height="21" font="3">that aggregates outputs from all layers.</text>
<text top="780" left="343" width="86" height="19" font="3">Input Layer</text>
<text top="575" left="649" width="101" height="19" font="3">Output Layer</text>
<text top="828" left="342" width="264" height="21" font="3">Figure 3.1: Structure of the Network</text>
<text top="894" left="149" width="41" height="16" font="13"><b>3.1.1</b></text>
<text top="894" left="211" width="163" height="16" font="13"><b>Network of Blocks</b></text>
<text top="926" left="149" width="651" height="21" font="3">Every layer is further divided into clusters of neurons called &#34;Blocks&#34;. These blocks are meant</text>
<text top="946" left="149" width="651" height="21" font="3">to be a equivalent to clusters of neurons commonly found in biological neural networks -</text>
<text top="966" left="149" width="651" height="21" font="3">mainly in cerebellum. In cerebellum there is a cluster of neurons with where one of the</text>
<text top="987" left="149" width="651" height="21" font="3">neurons is specialized and aggregates and sends the information from that cluster further.</text>
<text top="1007" left="149" width="258" height="21" font="3">These cells are called <b>Purkinje </b>cells</text>
<text top="1007" left="412" width="21" height="21" font="9"><a href="pdfxml.html#24">3.2</a></text>
<text top="1007" left="433" width="367" height="21" font="3"><a href="pdfxml.html#24">. </a>Similarly here is a block of interconnected neurons</text>
<text top="1027" left="149" width="651" height="21" font="3">with one specialized neuron that sends the information to the input of another block of</text>
<text top="1048" left="149" width="651" height="21" font="3">higher layer. Furthermore there is one more specialized neuron in every block that sends</text>
<text top="1068" left="149" width="651" height="21" font="3">it’s information to the input of block in the lower layer thus forming ﬁrst level of recurrence.</text>
<text top="1129" left="470" width="8" height="21" font="3">9</text>
</page>
<page number="24" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="17" size="11" family="Times" color="#0000ff"/>
<text top="92" left="93" width="16" height="21" font="3">10</text>
<text top="97" left="437" width="307" height="14" font="3">CHAPTER 3. ANALYSIS AND DESIGN</text>
<text top="536" left="314" width="208" height="21" font="3">Figure 3.2: The Purkinje cell</text>
<text top="575" left="386" width="54" height="12" font="12">Source: <a href="pdfxml.html#51">[</a></text>
<text top="575" left="440" width="7" height="12" font="17"><a href="pdfxml.html#51">2</a></text>
<text top="575" left="447" width="4" height="12" font="12"><a href="pdfxml.html#51">]</a></text>
<text top="629" left="93" width="208" height="21" font="3">All of this is visible on ﬁgure</text>
<text top="629" left="307" width="21" height="21" font="9"><a href="pdfxml.html#23">3.1</a></text>
<text top="629" left="333" width="410" height="21" font="3">- blue colour are inputs, green colour is for Purkinje cells</text>
<text top="650" left="93" width="318" height="21" font="3">and orange shows the recurrent connections.</text>
<text top="722" left="93" width="41" height="16" font="13"><b>3.1.2</b></text>
<text top="722" left="155" width="357" height="16" font="13"><b>Block - The integral part of the network</b></text>
<text top="764" left="93" width="179" height="21" font="3">As it is shown on ﬁgures</text>
<text top="764" left="278" width="21" height="21" font="9"><a href="pdfxml.html#25">3.3</a></text>
<text top="764" left="299" width="5" height="21" font="3"><a href="pdfxml.html#25">,</a></text>
<text top="764" left="310" width="21" height="21" font="9"><a href="pdfxml.html#26">3.4</a></text>
<text top="764" left="337" width="26" height="21" font="3">and</text>
<text top="764" left="369" width="21" height="21" font="9"><a href="pdfxml.html#26">3.5</a></text>
<text top="764" left="390" width="354" height="21" font="3"><a href="pdfxml.html#26">, </a>every block consists of a given number of inter-</text>
<text top="784" left="93" width="503" height="21" font="3">connected neurons. This creates second and third level of <a href="pdfxml.html#24">recurrence.</a></text>
<text top="785" left="596" width="6" height="11" font="11"><a href="pdfxml.html#24">1</a></text>
<text top="784" left="612" width="131" height="21" font="3">The only channels</text>
<text top="804" left="93" width="651" height="21" font="3">that these are able to communicate with &#34;outer world&#34; is by accepting the inputs - these</text>
<text top="825" left="93" width="651" height="21" font="3">are in case of input layer blocks inputs from outer world and in case of inner layers these</text>
<text top="845" left="93" width="651" height="21" font="3">are outputs from lower and upper (recurrent connection) layer - and by &#34;Purkinje&#34; neurons</text>
<text top="865" left="93" width="374" height="21" font="3">that send &#34;state&#34; of block to upper and lower layers.</text>
<text top="897" left="118" width="470" height="21" font="3">There are three types of block in the network - input layer blocks</text>
<text top="897" left="594" width="21" height="21" font="9"><a href="pdfxml.html#25">3.3</a></text>
<text top="897" left="615" width="129" height="21" font="3"><a href="pdfxml.html#25">, </a>inner layer block</text>
<text top="918" left="93" width="21" height="21" font="9"><a href="pdfxml.html#26">3.4</a></text>
<text top="918" left="120" width="100" height="21" font="3">and top block</text>
<text top="918" left="225" width="21" height="21" font="9"><a href="pdfxml.html#26">3.5</a></text>
<text top="918" left="246" width="498" height="21" font="3"><a href="pdfxml.html#26">. </a>These mainly diﬀer in block’s outputs - input blocks lack recurrent</text>
<text top="938" left="93" width="651" height="21" font="3">output, inner blocks have both recurrent and forward output and ﬁnally the top block lacks</text>
<text top="958" left="93" width="141" height="21" font="3">the forward output.</text>
<text top="990" left="118" width="355" height="21" font="3">There is also one specialized block that is in ﬁgure</text>
<text top="990" left="478" width="21" height="21" font="9"><a href="pdfxml.html#23">3.1</a></text>
<text top="990" left="504" width="240" height="21" font="3">called the &#34;Output Layer&#34;. Inputs</text>
<text top="1011" left="93" width="529" height="21" font="3">of this block are all &#34;Purkinje&#34; outputs of all of the blocks of the network.</text>
<text top="1055" left="112" width="5" height="8" font="5">1</text>
<text top="1058" left="118" width="626" height="12" font="12">Second level is the connection of the output of one neuron to input of another neuron in the block, third</text>
<text top="1074" left="93" width="358" height="12" font="12">level is connection of output of the neuron to its own input</text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="306" height="14" font="3">3.1. STRUCTURE OF THE NETWORK</text>
<text top="92" left="784" width="16" height="21" font="3">11</text>
<text top="516" left="347" width="255" height="21" font="3">Figure 3.3: Block of the input layer</text>
<text top="574" left="149" width="41" height="16" font="13"><b>3.1.3</b></text>
<text top="574" left="211" width="186" height="16" font="13"><b>Weights in Functions</b></text>
<text top="608" left="149" width="500" height="21" font="3">There are three ways how weights can be represented in this network.</text>
<text top="633" left="175" width="625" height="21" font="3">First one is the most basic one - weight matrix. Weight matrix is a two dimensional</text>
<text top="654" left="149" width="651" height="21" font="3">matrix where all of the possible weights are stored weight for given connection is given by</text>
<text top="674" left="149" width="651" height="21" font="3">coordinates that are given by endpoints of the connection e.g. connection from neuron #1</text>
<text top="694" left="149" width="101" height="21" font="3">to neuron #2.</text>
<text top="720" left="175" width="625" height="21" font="3">Second possibility the evolution of matrix that contains a function encoded by Discrete</text>
<text top="740" left="149" width="168" height="21" font="3">Cosine Transformation.</text>
<text top="766" left="175" width="625" height="21" font="3">Third possibility is genetic evolution of trees that represent a decomposition of function</text>
<text top="786" left="149" width="383" height="21" font="3">to some basic actions e.g.. multiplication or addition.</text>
<text top="842" left="149" width="53" height="15" font="8"><b>3.1.3.1</b></text>
<text top="842" left="221" width="396" height="15" font="8"><b>Inverse Discrete Cosine Transformation (IDCT)</b></text>
<text top="874" left="149" width="396" height="21" font="3">This method is closely based on work of Jan Koutník <a href="pdfxml.html#51">[</a></text>
<text top="874" left="545" width="8" height="21" font="9"><a href="pdfxml.html#51">6</a></text>
<text top="874" left="553" width="247" height="21" font="3"><a href="pdfxml.html#51">]. </a>The trick here is mainly in that</text>
<text top="895" left="149" width="651" height="21" font="3">that functions aren’t represented by functions, but by its compressed &#34;image&#34; that would</text>
<text top="915" left="149" width="651" height="21" font="3">come out of the function’s discrete cosine transformation (DCT). Main idea here is that we</text>
<text top="935" left="149" width="651" height="21" font="3">don’t really need to know how the function looks like - its prescription - the thing we really</text>
<text top="956" left="149" width="378" height="21" font="3">want to know is the function value in speciﬁc points.</text>
<text top="981" left="175" width="625" height="21" font="3">One of beneﬁts that DCT brings is that the most important information is in the top</text>
<text top="1002" left="149" width="651" height="21" font="3">left corner of the coeﬃcient matrix. This allows us to specify the precision with which we</text>
<text top="1022" left="149" width="477" height="21" font="3">want to know the value of that particular function in given points.</text>
<text top="1048" left="175" width="625" height="21" font="3">In this network neurons in particular blocks share the same coeﬃcient matrix - there is</text>
<text top="1068" left="149" width="254" height="21" font="3">a coeﬃcient matrix for every block.</text>
</page>
<page number="26" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">12</text>
<text top="97" left="437" width="307" height="14" font="3">CHAPTER 3. ANALYSIS AND DESIGN</text>
<text top="535" left="305" width="228" height="21" font="3">Figure 3.4: Inner network block</text>
<text top="992" left="286" width="264" height="21" font="3">Figure 3.5: Top block of the network</text>
</page>
<page number="27" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="18" size="9" family="Times" color="#000000"/>
	<fontspec id="19" size="7" family="Times" color="#000000"/>
	<fontspec id="20" size="14" family="Times" color="#000000"/>
<text top="97" left="149" width="306" height="14" font="3">3.1. STRUCTURE OF THE NETWORK</text>
<text top="92" left="784" width="16" height="21" font="3">13</text>
<text top="309" left="282" width="7" height="13" font="18">a</text>
<text top="330" left="281" width="7" height="13" font="18">1</text>
<text top="309" left="408" width="7" height="13" font="18">0</text>
<text top="330" left="408" width="7" height="13" font="18">1</text>
<text top="309" left="534" width="7" height="13" font="18">2</text>
<text top="330" left="534" width="7" height="13" font="18">1</text>
<text top="309" left="661" width="6" height="13" font="18">c</text>
<text top="330" left="660" width="7" height="13" font="18">1</text>
<text top="159" left="471" width="7" height="13" font="18">1</text>
<text top="180" left="471" width="9" height="13" font="18">+</text>
<text top="253" left="584" width="34" height="11" font="19">sin(_._)</text>
<text top="235" left="597" width="7" height="13" font="18">1</text>
<text top="256" left="330" width="36" height="11" font="19">cos(_._)</text>
<text top="238" left="345" width="7" height="13" font="18">1</text>
<text top="384" left="172" width="606" height="21" font="3">Figure 3.6: Function <i>y </i>= <i>cos</i>(<i>a</i>) + <i>sin</i>(2<i>c</i>) represented by a tree of simpler functions.</text>
<text top="439" left="175" width="625" height="21" font="3">Given the nature of genetic information in the genome - the coeﬃcient matrix - it makes</text>
<text top="459" left="149" width="651" height="21" font="3">sense to use diﬀerential evolution. Diﬀerential evolution is a little bit diﬀerent than regular</text>
<text top="480" left="149" width="651" height="21" font="3">genetic evolution. There are no new individuals created in this process. Instead three</text>
<text top="500" left="149" width="651" height="21" font="3">individuals enter the process, the diﬀerence between two is found by simple subtraction of</text>
<text top="520" left="149" width="651" height="21" font="3">genes - here subtraction of two coeﬃcient matrices - and the resulting matrix is than added</text>
<text top="541" left="149" width="373" height="21" font="3">to the third individual that has entered the process.</text>
<text top="596" left="149" width="53" height="15" font="8"><b>3.1.3.2</b></text>
<text top="596" left="221" width="261" height="15" font="8"><b>Trees of actions and coeﬃcients</b></text>
<text top="628" left="149" width="651" height="21" font="3">This method was loosely inspired by Ing. Jan Drchal who is working with genetic evolution</text>
<text top="649" left="149" width="651" height="21" font="3">of functions represented by trees of basic actions. However for my purpose his method was</text>
<text top="669" left="149" width="651" height="21" font="3">too much complicated and also it was implemented in Java in very &#34;Java&#34; way - lot’s of</text>
<text top="689" left="149" width="643" height="21" font="3">objects wrapping another objects etc. So I have written my implementation from scratch.</text>
<text top="715" left="175" width="625" height="21" font="3">The idea of this is that every function can be approximated to some level by dividing it</text>
<text top="735" left="149" width="651" height="21" font="3">to small subsequent steps that can than be written in the form of tree. If we don’t specify</text>
<text top="756" left="149" width="651" height="21" font="3">the height of the tree, this approximation can be 100% accurate. The accuracy also depends</text>
<text top="776" left="149" width="651" height="21" font="3">on the actions that we have available - the nodes of the tree. An example of function</text>
<text top="796" left="149" width="293" height="21" font="3">represented by tree can be seen on ﬁgure</text>
<text top="796" left="448" width="21" height="21" font="9"><a href="pdfxml.html#27">3.6</a></text>
<text top="796" left="469" width="5" height="21" font="3"><a href="pdfxml.html#27">.</a></text>
<text top="822" left="175" width="625" height="21" font="3">Representing the function by a tree has one big advantage - it can easily be evaluated.</text>
<text top="843" left="149" width="651" height="21" font="3">This is possible by the fact that the post-order tree traversal gives us a program for a</text>
<text top="863" left="149" width="164" height="21" font="3">push-down automaton.</text>
<text top="889" left="175" width="625" height="21" font="3">In fact we can represent the tree by its post-order traversal - the program for a push-</text>
<text top="909" left="149" width="651" height="21" font="3">down automaton - and thus save a step of ﬁnding the program for evaluation every time</text>
<text top="929" left="149" width="509" height="21" font="3">that the tree needs to be evaluated which in our case occurs very <a href="pdfxml.html#27">often</a></text>
<text top="931" left="658" width="6" height="11" font="11"><a href="pdfxml.html#27">2</a></text>
<text top="929" left="665" width="5" height="21" font="3"><a href="pdfxml.html#27">.</a></text>
<text top="955" left="175" width="625" height="21" font="3">The method of choice for evolving these trees is genetic evolution. There are several</text>
<text top="975" left="149" width="651" height="21" font="3">mechanisms of genetic evolution that are commonly used - diﬀerent types of crossovers -</text>
<text top="996" left="149" width="651" height="21" font="3">when a part or parts of two or more individuals are swapped or mutation. After suggestion</text>
<text top="1016" left="149" width="651" height="21" font="3">from Ing. Jan Drchal I have come to conclusion that crossovers aren’t very suitable for</text>
<text top="1036" left="149" width="651" height="21" font="3">this type of genome. One change - here this would mean swapping some sub-tree of two</text>
<text top="1072" left="168" width="5" height="8" font="5">2</text>
<text top="1074" left="174" width="593" height="12" font="12">For the rest of the text, when I will be talking about trees, I will have this representation in mind</text>
</page>
<page number="28" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">14</text>
<text top="97" left="437" width="307" height="14" font="3">CHAPTER 3. ANALYSIS AND DESIGN</text>
<text top="153" left="93" width="651" height="21" font="3">individuals - could cause a huge change in the genetic information. This change could create</text>
<text top="174" left="93" width="651" height="21" font="3">a completely new individual that practically doesn’t have any (or only small) relationship to</text>
<text top="194" left="93" width="651" height="21" font="3">the individuals with which we have started the process. It would maybe make some sense to</text>
<text top="214" left="93" width="651" height="21" font="3">try crossover on the leaves or only small sub-trees on high levels of trees, but these &#34;subtle&#34;</text>
<text top="235" left="93" width="545" height="21" font="3">subtle crossovers can almost completely be substituted by genetic mutation.</text>
<text top="259" left="118" width="625" height="21" font="3">From what we have in mind here, there are two ways of dealing with genetic mutation -</text>
<text top="279" left="93" width="651" height="21" font="3">we can either simply change a random node representing an action to a node representing</text>
<text top="300" left="93" width="118" height="21" font="3">a random action</text>
<text top="301" left="217" width="6" height="11" font="11"><a href="pdfxml.html#28">3</a></text>
<text top="300" left="230" width="514" height="21" font="3">or we can keep in mind the type of node’s action and choose randomly</text>
<text top="320" left="93" width="559" height="21" font="3">from similar actions. Both of these are implemented as they both make sense.</text>
<text top="344" left="118" width="625" height="21" font="3">First approach has a potential to be more aggressive and create similar changes as would</text>
<text top="365" left="93" width="643" height="21" font="3">be created by crossover - it may produce individuals that diﬀer a lot from their &#34;parents&#34;.</text>
<text top="389" left="118" width="625" height="21" font="3">The second approach is more subtle and slightly limited when it comes to the variety of</text>
<text top="410" left="93" width="651" height="21" font="3">individuals that can come out of the process - there may be a population of parents that</text>
<text top="430" left="93" width="651" height="21" font="3">will not be able to create a certain type of children ever. This &#34;problem&#34; can be solved by</text>
<text top="450" left="93" width="651" height="21" font="3">randomization of some individuals (or of entire tire population, when one’s genome is then</text>
<text top="470" left="93" width="651" height="21" font="3">completely regenerated thus creating a potential for generating more suitable children for</text>
<text top="491" left="93" width="106" height="21" font="3">given problem.</text>
<text top="542" left="93" width="41" height="16" font="13"><b>3.1.4</b></text>
<text top="542" left="155" width="126" height="16" font="13"><b>Parallelization</b></text>
<text top="574" left="93" width="651" height="21" font="3">The parts of that are running in parallel were written in OpenCL and are executed selected</text>
<text top="594" left="93" width="651" height="21" font="3">OpenCL device - in case of PC the only device available is graphics card and in case of</text>
<text top="614" left="93" width="651" height="21" font="3">Playstation 3, although there are technically two devices, the wise choice is to run them</text>
<text top="635" left="93" width="651" height="21" font="3">on Accelerator device which consists of SPEs of the Cell Broadband Engine processor as</text>
<text top="655" left="93" width="651" height="21" font="3">the PPE device is being used for all other programs running on the system including the</text>
<text top="675" left="93" width="127" height="21" font="3">operating system.</text>
<text top="700" left="118" width="625" height="21" font="3">I have chosen to parallelize the computation of a block of neurons - an action that is</text>
<text top="720" left="93" width="651" height="21" font="3">being done for the most of the time and for given block it has a SIMD character as it is</text>
<text top="740" left="93" width="599" height="21" font="3">necessary to do the same sequence of steps for every interconnection in given block.</text>
<text top="765" left="118" width="625" height="21" font="3">There is also a special kernel for aiding the diﬀerential evolution of IDCT method and</text>
<text top="785" left="93" width="491" height="21" font="3">a testing kernel for interpretation of trees of actions and coeﬃcients.</text>
<text top="1072" left="112" width="5" height="8" font="5">3</text>
<text top="1074" left="118" width="366" height="12" font="12">Random here means randomly chosen from available actions</text>
</page>
<page number="29" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="21" size="22" family="Times" color="#000000"/>
	<fontspec id="22" size="10" family="Times" color="#000000"/>
	<fontspec id="23" size="10" family="Times" color="#008000"/>
	<fontspec id="24" size="10" family="Times" color="#008080"/>
	<fontspec id="25" size="9" family="Times" color="#000000"/>
<text top="264" left="149" width="154" height="27" font="4"><b>Chapter 4</b></text>
<text top="338" left="149" width="205" height="33" font="6"><b>Realization</b></text>
<text top="432" left="149" width="651" height="21" font="3">In this chapter it is described how the network is implemented. For development of this</text>
<text top="453" left="149" width="651" height="21" font="3">neural network the IBM OpenCL Utility Library (clu) was used. Its documentation can be</text>
<text top="473" left="149" width="580" height="21" font="3">found on the IBM OpenCL Development Kit for Linux on Power download site <a href="pdfxml.html#51">[</a></text>
<text top="473" left="730" width="8" height="21" font="9"><a href="pdfxml.html#51">5</a></text>
<text top="473" left="738" width="62" height="21" font="3"><a href="pdfxml.html#51">] </a>- it is a</text>
<text top="493" left="149" width="651" height="21" font="3">part of OpenCL sample package. It consists of two ﬁles - clu.h and clu.c both of which</text>
<text top="514" left="149" width="260" height="21" font="3">are included with sources of project.</text>
<text top="570" left="149" width="31" height="19" font="1"><b>4.1</b></text>
<text top="570" left="204" width="88" height="19" font="1"><b>Neurons</b></text>
<text top="610" left="149" width="651" height="21" font="3">In this neural network a standard Rosenblatt’s perceptrons are used. One of these is depicted</text>
<text top="630" left="149" width="64" height="21" font="3">on ﬁgure</text>
<text top="630" left="219" width="21" height="21" font="9"><a href="pdfxml.html#29">4.1</a></text>
<text top="630" left="240" width="560" height="21" font="3"><a href="pdfxml.html#29">. </a>The only diﬀerence between standard Rosenblatt’s perceptron and neurons</text>
<text top="650" left="149" width="651" height="21" font="3">used here is that weights (here w1, w2 and w3) aren’t variables, but instead they are results</text>
<text top="671" left="149" width="233" height="21" font="3">of evaluation of weight functions</text>
<text top="672" left="387" width="6" height="11" font="11"><a href="pdfxml.html#29">1</a></text>
<text top="671" left="394" width="5" height="21" font="3"><a href="pdfxml.html#29">.</a></text>
<text top="759" left="452" width="47" height="28" font="21">S(ξ)</text>
<text top="863" left="466" width="19" height="28" font="21">Θ</text>
<text top="705" left="329" width="16" height="15" font="22">x1</text>
<text top="756" left="329" width="16" height="15" font="22">x2</text>
<text top="808" left="329" width="16" height="15" font="22">x3</text>
<text top="723" left="375" width="21" height="15" font="23">w()</text>
<text top="757" left="374" width="21" height="15" font="23">w()</text>
<text top="791" left="374" width="21" height="15" font="23">w()</text>
<text top="757" left="563" width="8" height="15" font="24">y</text>
<text top="914" left="347" width="254" height="21" font="3">Figure 4.1: Rosenblatt’s percentron</text>
<text top="956" left="175" width="491" height="21" font="3">Mathematical explanation of how this perceptron works is following:</text>
<text top="1010" left="398" width="7" height="15" font="20"><i>ξ</i></text>
<text top="1005" left="410" width="13" height="21" font="3">=</text>
<text top="994" left="432" width="10" height="11" font="25"><i>N</i></text>
<text top="1031" left="428" width="21" height="11" font="25"><i>i</i>=1</text>
<text top="1010" left="452" width="12" height="15" font="20"><i>w</i></text>
<text top="1005" left="464" width="54" height="21" font="3">(<i>i, j</i>) · <i>x</i></text>
<text top="1015" left="518" width="4" height="11" font="25"><i>i</i></text>
<text top="1009" left="527" width="24" height="15" font="3">− <i>θ</i></text>
<text top="1055" left="168" width="5" height="8" font="5">1</text>
<text top="1058" left="174" width="626" height="12" font="12">Except for the weight matrix method, where this evaluation consists of fetching values from a weight</text>
<text top="1074" left="149" width="40" height="12" font="12">matrix</text>
<text top="1129" left="466" width="16" height="21" font="3">15</text>
</page>
<page number="30" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">16</text>
<text top="97" left="515" width="229" height="14" font="3">CHAPTER 4. REALIZATION</text>
<text top="159" left="336" width="10" height="15" font="20"><i>S</i></text>
<text top="154" left="347" width="38" height="21" font="3">(<i>ξ</i>) =</text>
<text top="143" left="441" width="8" height="21" font="3">1</text>
<text top="166" left="391" width="108" height="21" font="3">1 + <i>exp</i>(−<i>λ </i>· <i>ξ</i>)</text>
<text top="218" left="93" width="31" height="19" font="1"><b>4.2</b></text>
<text top="218" left="148" width="347" height="19" font="1"><b>Handling of ﬂoating point values</b></text>
<text top="259" left="93" width="651" height="21" font="3">Diﬀerent OpenCL devices support diﬀerent optional extensions. Sadly, double precision</text>
<text top="279" left="93" width="387" height="21" font="3">ﬂoating point type is one of these optional extensions.</text>
<text top="305" left="118" width="625" height="21" font="3">To facilitate the ability to switch between single precision - float - and double precision</text>
<text top="325" left="93" width="651" height="21" font="3">- double - I have deﬁned a macro __FLOATING__ that can be set to either one of them.</text>
<text top="345" left="93" width="651" height="21" font="3">So everywhere where one of them would be used (depending on the support) this macro is</text>
<text top="366" left="93" width="36" height="21" font="3">used.</text>
<text top="425" left="93" width="31" height="19" font="1"><b>4.3</b></text>
<text top="425" left="148" width="540" height="19" font="1"><b>Memory representation of the state of the network</b></text>
<text top="466" left="93" width="651" height="21" font="3">The memory representation of the network diﬀers a little bit from the logical design. Instead</text>
<text top="486" left="93" width="651" height="21" font="3">of allocating every block of neurons separately, all of the important ﬁelds holding the state</text>
<text top="506" left="93" width="651" height="21" font="3">of network are allocated per layer. This means that from the memory point of view blocks</text>
<text top="527" left="93" width="146" height="21" font="3">aren’t distinguished.</text>
<text top="580" left="93" width="41" height="16" font="13"><b>4.3.1</b></text>
<text top="580" left="155" width="473" height="16" font="13"><b>Mapping of real model to logical one described above</b></text>
<text top="613" left="93" width="651" height="21" font="3">The neural network itself is bounded by the structure BlockNet whose members contain</text>
<text top="634" left="93" width="598" height="21" font="3">everything that is necessary for the network to operate. It contains these members:</text>
<text top="673" left="113" width="631" height="21" font="3">• baseLayer - a structure on which a tree-like structure that holds the information</text>
<text top="694" left="134" width="349" height="21" font="3">about state of all neurons in the network is built</text>
<text top="729" left="113" width="438" height="21" font="3">• outputBlock - a structure that represent the output layer</text>
<text top="764" left="113" width="526" height="21" font="3">• inputs - a structure to through which input can be passed to network</text>
<text top="799" left="113" width="631" height="21" font="3">• numberOfInputs - member which says how many input variables we are passing to</text>
<text top="819" left="134" width="85" height="21" font="3">the network</text>
<text top="855" left="113" width="505" height="21" font="3">• numberOfOutputs - member which says how big is the outputBlock</text>
<text top="894" left="93" width="651" height="21" font="3">For initializing and destruction of this structure there exist functions buildSubstrate and</text>
<text top="920" left="93" width="103" height="13" font="3">freeBlockNet</text>
<text top="915" left="202" width="542" height="21" font="3">that should take care of everything except for one thing - before calling the</text>
<text top="941" left="93" width="120" height="13" font="3">buildSubstrate</text>
<text top="935" left="219" width="310" height="21" font="3">function on the the BlockNet structure the</text>
<text top="955" left="93" width="592" height="21" font="3">__MAX_NUMBER_OF_INNERBLOCK_INPUTS constant has to be <a href="pdfxml.html#30">deﬁned</a></text>
<text top="957" left="686" width="6" height="11" font="11"><a href="pdfxml.html#30">2</a></text>
<text top="955" left="693" width="51" height="21" font="3"><a href="pdfxml.html#30">. </a>This</text>
<text top="976" left="93" width="651" height="21" font="3">constant sets the limit for the number of input connection per block and thus deﬁnes the</text>
<text top="996" left="93" width="651" height="21" font="3">limit for the number of neuron inputs. This constant plays an important role in the process</text>
<text top="1016" left="93" width="651" height="21" font="3">of creating the structure that is built upon the baseLayer of the network as the number of</text>
<text top="1037" left="93" width="565" height="21" font="3">block in every layer that follow up the baseLayer is derived from this number.</text>
<text top="1072" left="112" width="5" height="8" font="5">2</text>
<text top="1074" left="118" width="218" height="12" font="12">This is by default done in defs.h ﬁle</text>
</page>
<page number="31" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="567" height="14" font="3">4.3. MEMORY REPRESENTATION OF THE STATE OF THE NETWORK</text>
<text top="92" left="784" width="16" height="21" font="3">17</text>
<text top="153" left="175" width="625" height="21" font="3">The simpler of these two functions - freeBlockNet - accepts only one parameter - a</text>
<text top="174" left="149" width="651" height="21" font="3">pointer to the BlockNet structure that is to be freed. This function than cleans everything</text>
<text top="194" left="149" width="348" height="21" font="3">that was allocated by buildSubstrate function.</text>
<text top="221" left="175" width="391" height="21" font="3">The buildSubstrate function takes these parameters:</text>
<text top="264" left="169" width="280" height="21" font="3">• network - a pointer to the structure</text>
<text top="302" left="169" width="430" height="21" font="3">• blockSize - number of neurons per block in the network</text>
<text top="339" left="169" width="423" height="21" font="3">• sizeOfLayer - number of blocks of the base/input layer</text>
<text top="377" left="169" width="631" height="21" font="3">• upwards - number of the neuron in the block that will serve as upward &#34;Purkinje cell&#34;</text>
<text top="414" left="169" width="631" height="21" font="3">• downwards - number of the neuron in the block that will serve as downward &#34;Purkinje</text>
<text top="434" left="190" width="30" height="21" font="3">cell&#34;</text>
<text top="472" left="169" width="418" height="21" font="3">• numberOfInputs - the number of inputs of the network</text>
<text top="509" left="169" width="436" height="21" font="3">• numberOfOutputs - the number of outputs of the network</text>
<text top="553" left="175" width="625" height="21" font="3">The number of block in the upper layers are determined by the number of blocks in the</text>
<text top="573" left="149" width="442" height="21" font="3">layer that we are building the layer upon and by the constant</text>
<text top="593" left="149" width="651" height="21" font="3">__MAX_NUMBER_OF_INNERBLOCK_INPUTS. To get the network exactly as de-</text>
<text top="614" left="149" width="111" height="21" font="3">picted on ﬁgure</text>
<text top="614" left="266" width="21" height="21" font="9"><a href="pdfxml.html#23">3.1</a></text>
<text top="614" left="292" width="240" height="21" font="3">with blocks as depicted on ﬁgures</text>
<text top="614" left="537" width="21" height="21" font="9"><a href="pdfxml.html#25">3.3</a></text>
<text top="614" left="558" width="5" height="21" font="3"><a href="pdfxml.html#25">,</a></text>
<text top="614" left="568" width="21" height="21" font="9"><a href="pdfxml.html#26">3.4</a></text>
<text top="614" left="594" width="26" height="21" font="3">and</text>
<text top="614" left="626" width="21" height="21" font="9"><a href="pdfxml.html#26">3.5</a></text>
<text top="614" left="652" width="148" height="21" font="3">the buildSubstrate</text>
<text top="634" left="149" width="651" height="21" font="3">needs to be called with blockSize equal to three, sizeOfLayer equal to nine and constant</text>
<text top="654" left="149" width="478" height="21" font="3">__MAX_NUMBER_OF_INNERBLOCK_INPUTS set to three.</text>
<text top="681" left="175" width="625" height="21" font="3">The main structure that serves for storing the information about the state of neurons in</text>
<text top="701" left="149" width="651" height="21" font="3">the network is called VariableLayer. This is the structure type of baseLayer member of</text>
<text top="722" left="149" width="405" height="21" font="3">the BlockNet. This structure consists of these members:</text>
<text top="765" left="169" width="485" height="21" font="3">• upperLayer - a pointer to the upper layer in the &#34;tree&#34; structure</text>
<text top="802" left="169" width="464" height="21" font="3">• y - outputs of all of the neurons in the layer in the given time</text>
<text top="840" left="169" width="631" height="21" font="3">• inputs - pointer to &#34;Purkinje cell&#34; neuron outputs of lower layer (this is being ignored</text>
<text top="860" left="190" width="177" height="21" font="3">for the base/input layer)</text>
<text top="898" left="169" width="410" height="21" font="3">• numberOfInputs - the number of inputs of given layer</text>
<text top="935" left="169" width="417" height="21" font="3">• maxBlockSize - shared size of the block in the network</text>
<text top="973" left="169" width="349" height="21" font="3">• sizeOfLayer - number of block in given layer</text>
<text top="1010" left="169" width="631" height="21" font="3">• upwards - number of the neuron in the block that will serve as upward &#34;Purkinje cell&#34;</text>
<text top="1048" left="169" width="631" height="21" font="3">• downwards - number of the neuron in the block that will serve as downward &#34;Purkinje</text>
<text top="1068" left="190" width="30" height="21" font="3">cell&#34;</text>
</page>
<page number="32" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">18</text>
<text top="97" left="515" width="229" height="14" font="3">CHAPTER 4. REALIZATION</text>
<text top="153" left="93" width="651" height="21" font="3">Storing upwards and downwards indexes may seem redundant for now, but it allows to use</text>
<text top="174" left="93" width="608" height="21" font="3">the same structure in the future and perhaps experiment with these two parameters.</text>
<text top="199" left="118" width="625" height="21" font="3">As it was written earlier, there is no &#34;physical&#34; distinction of blocks in the memory -</text>
<text top="219" left="93" width="651" height="21" font="3">outputs of all of the layer’s neurons are stored in one array y and the same applies to inputs</text>
<text top="239" left="93" width="651" height="21" font="3">blocks. These are here in fact represented only by pointers to the members of y array</text>
<text top="260" left="93" width="651" height="21" font="3">of lower layer that were marked as &#34;upper&#34; for particular block of the lower layer. This</text>
<text top="280" left="93" width="651" height="21" font="3">way no updates of inputs of individual layers are necessary - they get updated as soon as</text>
<text top="300" left="93" width="483" height="21" font="3">corresponding outputs are written to the y array of the lower layer.</text>
<text top="325" left="118" width="625" height="21" font="3">There is one more part that is worth mentioning here - the outputBlock member of</text>
<text top="346" left="93" width="651" height="21" font="3">the BlockNet structure. This structure represent the output layer of the network. Its size</text>
<text top="366" left="93" width="651" height="21" font="3">is determined by the parameter numberOfOutputs of the buildSubstrate. Every upward</text>
<text top="386" left="93" width="651" height="21" font="3">connection gets connected to the input of every neuron in this special block. This block isn’t</text>
<text top="407" left="93" width="651" height="21" font="3">special only by its position in the network, but its structure is also diﬀerent. Not only that</text>
<text top="427" left="93" width="651" height="21" font="3">the blockSize parameter doesn’t apply to it, but also the neurons that the block consists</text>
<text top="447" left="93" width="651" height="21" font="3">of aren’t mutually interconnected. Also this block has special functions and OpenCL kernel</text>
<text top="468" left="93" width="651" height="21" font="3">for its evaluation. For this kernel only the &#34;weight matrix&#34; method can be used. The</text>
<text top="494" left="93" width="95" height="13" font="3">OutputBlock</text>
<text top="488" left="193" width="210" height="21" font="3">structure has these members:</text>
<text top="527" left="113" width="324" height="21" font="3">• y - outputs of neurons in the output block</text>
<text top="562" left="113" width="249" height="21" font="3">• inputs - inputs of output block</text>
<text top="597" left="113" width="521" height="21" font="3">• numberOfInputs - number of inputs that are brought to output block</text>
<text top="631" left="113" width="301" height="21" font="3">• sizeOfBlock - size of the output block</text>
<text top="670" left="93" width="651" height="21" font="3">The inputs here are once again represented only by pointers corresponding outputs of</text>
<text top="691" left="93" width="651" height="21" font="3">neurons marked as &#34;upper&#34; in the main network structure so they get updated automatically.</text>
<text top="711" left="93" width="651" height="21" font="3">This makes it possible to evaluate the output block independently on the inner network -</text>
<text top="731" left="93" width="651" height="21" font="3">it would then just take a snapshot of state of &#34;upper&#34; neurons in the network at the time</text>
<text top="752" left="93" width="301" height="21" font="3">when the output block evaluation started.</text>
<text top="810" left="93" width="31" height="19" font="1"><b>4.4</b></text>
<text top="810" left="148" width="358" height="19" font="1"><b>Description of network evaluation</b></text>
<text top="851" left="93" width="533" height="21" font="3">Here it is described how to set-up and start the evaluation of the network.</text>
<text top="903" left="93" width="41" height="16" font="13"><b>4.4.1</b></text>
<text top="903" left="155" width="332" height="16" font="13"><b>Parts common to all implementations</b></text>
<text top="936" left="93" width="595" height="21" font="3">There are three major steps that needs to be done prior to evaluating the network.</text>
<text top="975" left="113" width="344" height="21" font="3">• Set-up everything that OpenCL needs to run</text>
<text top="1010" left="113" width="631" height="21" font="3">• Set-up CL_BLOCK and CL_OUTPUT_BLOCK structures that are needed for passing data</text>
<text top="1030" left="134" width="137" height="21" font="3">to OpenCL devices</text>
<text top="1065" left="113" width="585" height="21" font="3">• Choose which implementation to use and set-up thing that are necessary for it</text>
</page>
<page number="33" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="393" height="14" font="3">4.4. DESCRIPTION OF NETWORK EVALUATION</text>
<text top="92" left="784" width="16" height="21" font="3">19</text>
<text top="153" left="174" width="60" height="13" font="3">cluInit</text>
<text top="147" left="355" width="160" height="21" font="3">returns clu_t instance</text>
<text top="173" left="174" width="129" height="13" font="3">cluGetCLContext</text>
<text top="168" left="355" width="234" height="21" font="3">returns the cl_context instance</text>
<text top="194" left="174" width="146" height="13" font="3">cluCreateCmdQueue</text>
<text top="188" left="355" width="258" height="21" font="3">returns cl_command_queue instance</text>
<text top="214" left="174" width="129" height="13" font="3">cluCreateKernel</text>
<text top="208" left="355" width="420" height="21" font="3">compiles the selected kernel for given device and returns it</text>
<text top="234" left="174" width="163" height="13" font="3">cluSetKernelNDRange</text>
<text top="229" left="355" width="290" height="21" font="3">sets kernel’s NDRange - the size of work</text>
<text top="279" left="326" width="298" height="21" font="3">Table 4.1: OpenCL initialization function</text>
<text top="342" left="149" width="53" height="15" font="8"><b>4.4.1.1</b></text>
<text top="342" left="221" width="126" height="15" font="8"><b>OpenCL set-up</b></text>
<text top="384" left="149" width="651" height="21" font="3">First of all you need to make sure that your project includes the clu.h header ﬁle. After</text>
<text top="404" left="149" width="651" height="21" font="3">that you need to create instances of clu_t, cl_context, cl_kernel and cl_command_queue</text>
<text top="425" left="149" width="229" height="21" font="3">and use functions listed in table</text>
<text top="425" left="383" width="21" height="21" font="9"><a href="pdfxml.html#33">4.1</a></text>
<text top="425" left="410" width="127" height="21" font="3">to initialize them.</text>
<text top="457" left="175" width="625" height="21" font="3">I won’t go to the detail description of the functions here, I will mention what I have</text>
<text top="478" left="149" width="651" height="21" font="3">used. This will not be the only possible conﬁguration of parameters of these functions, it’s</text>
<text top="498" left="149" width="651" height="21" font="3">the one I’ve used. For more information about this function please refer to IBM OpenCL</text>
<text top="518" left="149" width="651" height="21" font="3">Utility Library documentation that is included in the OpenCL Sample package available at</text>
<text top="539" left="149" width="73" height="21" font="3">IBM site <a href="pdfxml.html#51">[</a></text>
<text top="539" left="222" width="8" height="21" font="9"><a href="pdfxml.html#51">5</a></text>
<text top="539" left="230" width="9" height="21" font="3"><a href="pdfxml.html#51">].</a></text>
<text top="571" left="175" width="625" height="21" font="3">The function cluInit takes as parameter the platform ID. If this is set to &#34;NULL&#34; it will</text>
<text top="591" left="149" width="408" height="21" font="3">create clu_t instance for the ﬁrst platform and return it.</text>
<text top="624" left="175" width="466" height="21" font="3">The cluGetCLContext takes as parameters the initialized clu_t.</text>
<text top="657" left="175" width="625" height="21" font="3">Function cluCreateCmdQueue takes again as parameters initialized clu_t instance, num-</text>
<text top="677" left="149" width="651" height="21" font="3">ber device ID - this can be set to &#34;NULL&#34;, device type - this can be set to either one of the</text>
<text top="697" left="149" width="511" height="21" font="3">following CL_DEVICE_TYPE_CPU, CL_DEVICE_TYPE_GPU or</text>
<text top="717" left="149" width="651" height="21" font="3">CL_DEVICE_TYPE_ACCELERATOR and properties of command queue - this is a bit-</text>
<text top="738" left="149" width="178" height="21" font="3">ﬁeld and can be set to 0.</text>
<text top="770" left="175" width="534" height="21" font="3">The function cluCreateKernel accepts as parameters clu_t instance, the</text>
<text top="796" left="149" width="137" height="13" font="3">cl_command_queue</text>
<text top="791" left="291" width="509" height="21" font="3">instance, the OpenCL source ﬁle name - this is &#34;Neurons.cl&#34; in our case,</text>
<text top="811" left="149" width="651" height="21" font="3">the name of the kernel that is going to be compiled - this is plain character array that</text>
<text top="831" left="149" width="651" height="21" font="3">contains the name of particular kernel, additional properties - in our case we want to specify</text>
<text top="852" left="149" width="651" height="21" font="3">that we want to include the directory that includes sources of this project by specifying &#34;-I</text>
<text top="878" left="149" width="43" height="13" font="3">&lt;path</text>
<text top="872" left="192" width="6" height="21" font="3">&#34;</text>
<text top="873" left="204" width="6" height="11" font="11"><a href="pdfxml.html#33">3</a></text>
<text top="872" left="216" width="355" height="21" font="3">- and a ﬂag that we will set to &#34;CLU_SOURCE&#34;.</text>
<text top="904" left="175" width="625" height="21" font="3">Than we need to set the NDRange for the kernel by function cluSetKernelNDRange.</text>
<text top="925" left="149" width="651" height="21" font="3">This function needs again the clu_t instance, the cl_kernel instance that we got from the</text>
<text top="945" left="149" width="651" height="21" font="3">previous function, the number of dimensions - we set this to &#34;1&#34;, global size that speciﬁes</text>
<text top="965" left="149" width="651" height="21" font="3">the global number of work-items - this should be,in our case, an one member array of the</text>
<text top="992" left="149" width="52" height="13" font="3">size_t</text>
<text top="986" left="207" width="593" height="21" font="3">type that I set to the block size which in our case will be equal to the number of</text>
<text top="1006" left="149" width="651" height="21" font="3">SPEs in the Cell Broadband Engine processor - that is six and the local size that we can</text>
<text top="1026" left="149" width="346" height="21" font="3">set to &#34;NULL&#34; to let the implementation decide.</text>
<text top="1072" left="168" width="5" height="8" font="5">3</text>
<text top="1074" left="174" width="556" height="12" font="12">This needs to be speciﬁed as the OpenCL ﬁle includes some of the headers from the project</text>
</page>
<page number="34" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">20</text>
<text top="97" left="515" width="229" height="14" font="3">CHAPTER 4. REALIZATION</text>
<text top="158" left="93" width="53" height="15" font="8"><b>4.4.1.2</b></text>
<text top="158" left="165" width="425" height="15" font="8"><b>Choice of The Implementation and Network Set-up</b></text>
<text top="188" left="93" width="651" height="21" font="3">Prior to executing anything, it is necessary to specify the implementation of the network’s</text>
<text top="208" left="93" width="651" height="21" font="3">weight functions. This is by default set in the def.h ﬁle and can be one of the three</text>
<text top="229" left="93" width="651" height="21" font="3">following: __MATRIX , __IDCT or __TREE_TRAVERSAL. This decides which parts</text>
<text top="249" left="93" width="651" height="21" font="3">of the source code are compiled. The naming of the functions was made the same for all of</text>
<text top="269" left="93" width="651" height="21" font="3">the implementations, they just diﬀer in the parameters that they accept. These parameters,</text>
<text top="290" left="93" width="651" height="21" font="3">being implementation dependent, will be mentioned later and can also be fond out from the</text>
<text top="310" left="93" width="87" height="21" font="3">source code.</text>
<text top="334" left="118" width="625" height="21" font="3">Now that everything is set up on the OpenCL side and the implementation was chosen,</text>
<text top="354" left="93" width="651" height="21" font="3">the network can be prepared. First of all we need to create instances of CL_BLOCK and</text>
<text top="380" left="93" width="129" height="13" font="3"><a href="pdfxml.html#34">CL_OUTPUT_BLOCK</a></text>
<text top="376" left="222" width="6" height="11" font="11"><a href="pdfxml.html#34">4</a></text>
<text top="375" left="229" width="403" height="21" font="3"><a href="pdfxml.html#34">. </a>These are then initialize by initCL_BLOCK respectively</text>
<text top="401" left="93" width="163" height="13" font="3">initCL_OUTPUT_BLOCK</text>
<text top="395" left="262" width="70" height="21" font="3">functions.</text>
<text top="419" left="118" width="625" height="21" font="3">The CL_OUTPUT_BLOCK structure is the same regardless of the implementation. This</text>
<text top="439" left="93" width="202" height="21" font="3">contains following members:</text>
<text top="475" left="113" width="499" height="21" font="3">• allUps an array of pointers to all Purkinje neurons in the network</text>
<text top="508" left="113" width="431" height="21" font="3">• numberOfUps number of Purkinje neurons in the network</text>
<text top="542" left="113" width="345" height="21" font="3">• networkOutput array for the network output</text>
<text top="575" left="113" width="219" height="21" font="3">• blockSize size of the block</text>
<text top="608" left="113" width="500" height="21" font="3">• blockMatrix the weight matrix of size <i>numberOfUps </i>× <i>blockSize</i></text>
<text top="641" left="113" width="232" height="21" font="3">• clu pointer to clu_t instance</text>
<text top="674" left="113" width="265" height="21" font="3">• kernel pointer cl_kernel instance</text>
<text top="710" left="118" width="625" height="21" font="3">All of these members are used for transferring data to the chosen OpenCL device. The</text>
<text top="736" left="93" width="163" height="13" font="3">initCL_OUTPUT_BLOCK</text>
<text top="731" left="265" width="479" height="21" font="3">function accepts parameters that correspond to the members of</text>
<text top="751" left="93" width="651" height="21" font="3">the CL_OUTPUT_BLOCK structure. The evaluation of output block is started by function</text>
<text top="777" left="93" width="77" height="13" font="3">getOutput</text>
<text top="771" left="170" width="5" height="21" font="3">.</text>
<text top="795" left="118" width="625" height="21" font="3">Basically the same applies also for the initCL_BLOCK function and CL_BLOCK structure</text>
<text top="816" left="93" width="651" height="21" font="3">which members will be described in the parts that will be about the particular implemen-</text>
<text top="836" left="93" width="47" height="21" font="3">tation.</text>
<text top="887" left="93" width="53" height="15" font="8"><b>4.4.1.3</b></text>
<text top="887" left="165" width="197" height="15" font="8"><b>Evaluating the Network</b></text>
<text top="917" left="93" width="651" height="21" font="3">The evaluation of the network gets done by the computeNetwork function. This function</text>
<text top="938" left="93" width="651" height="21" font="3">than takes care of calling of the function for the layer computation and subsequently the</text>
<text top="958" left="93" width="651" height="21" font="3">block computation where the necessary data is transferred to the device and the OpenCL</text>
<text top="978" left="93" width="248" height="21" font="3">part of the program gets executed.</text>
<text top="1002" left="118" width="625" height="21" font="3">This function takes some parameters that are common to all of the three implementations</text>
<text top="1023" left="93" width="651" height="21" font="3">- these are the CL_BLOCK instance, pointer to the BlockNet structure that holds the network,</text>
<text top="1055" left="112" width="5" height="8" font="5">4</text>
<text top="1058" left="118" width="626" height="12" font="12">This one is actually needed only for ﬁnding out the outputs of the network, it is not necessary for the</text>
<text top="1074" left="93" width="165" height="12" font="12">inner network-tree function</text>
</page>
<page number="35" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="393" height="14" font="3">4.4. DESCRIPTION OF NETWORK EVALUATION</text>
<text top="92" left="784" width="16" height="21" font="3">21</text>
<text top="153" left="149" width="651" height="21" font="3">and the cl_command_queue. The rest of the parameters are implementation dependant and</text>
<text top="174" left="149" width="651" height="21" font="3">will be described in latter parts of the text. Also there is one conﬁguration constant for the</text>
<text top="200" left="149" width="120" height="13" font="3">computeNetwork</text>
<text top="194" left="275" width="525" height="21" font="3">to be precise to the computeBlock function that called by this function -</text>
<text top="214" left="149" width="651" height="21" font="3">__BLOCK_REPETITION. This constant sets number of consequent evaluation of every</text>
<text top="235" left="149" width="651" height="21" font="3">block. If this is set to more than 1 it causes running the computing kernel on given block</text>
<text top="255" left="149" width="651" height="21" font="3">speciﬁed number of times without changing the inputs of the block or switching the &#34;block</text>
<text top="275" left="149" width="570" height="21" font="3">context&#34; thus saving the time spend on transferring data to the OpenCL device</text>
<text top="331" left="149" width="41" height="16" font="13"><b>4.4.2</b></text>
<text top="331" left="211" width="589" height="16" font="13"><b>How is Discreet Cosine Transformation is implemented and used in</b></text>
<text top="352" left="211" width="106" height="16" font="13"><b>the network</b></text>
<text top="386" left="149" width="651" height="21" font="3">The method that is being described is one of the possible methods how to shrink the amount</text>
<text top="407" left="149" width="651" height="21" font="3">of actual information that is needed to describe the weight function. The basic principle is</text>
<text top="427" left="149" width="651" height="21" font="3">that for the representation of the function we can use it’s transformed and compressed rep-</text>
<text top="447" left="149" width="651" height="21" font="3">resentation in the matrix of coeﬃcients that come out of the discrete cosine transformation.</text>
<text top="468" left="149" width="651" height="21" font="3">The other beneﬁt is that with rising number of coeﬃcients the precision is getting higher -</text>
<text top="488" left="149" width="651" height="21" font="3">this enables to start with just a few coeﬃcients, ﬁnd the &#34;sweet spot&#34; and then add more</text>
<text top="508" left="149" width="651" height="21" font="3">coeﬃcients and focus the aim of the function further. You can ﬁnd more about this in the</text>
<text top="529" left="149" width="90" height="21" font="3">publication <a href="pdfxml.html#51">[</a></text>
<text top="529" left="239" width="8" height="21" font="9"><a href="pdfxml.html#51">6</a></text>
<text top="529" left="247" width="9" height="21" font="3"><a href="pdfxml.html#51">].</a></text>
<text top="555" left="175" width="625" height="21" font="3">This implementation uses 2D DCT-II transformation to get the values of the function</text>
<text top="575" left="149" width="651" height="21" font="3">of two variables from the matrix of coeﬃcients. The mathematical expression for this is</text>
<text top="595" left="149" width="68" height="21" font="3">following:</text>
<text top="652" left="227" width="14" height="15" font="20"><i>X</i></text>
<text top="657" left="241" width="7" height="11" font="25"><i>k</i></text>
<text top="661" left="247" width="5" height="8" font="5">1</text>
<text top="657" left="253" width="10" height="11" font="25"><i>,k</i></text>
<text top="661" left="264" width="5" height="8" font="5">2</text>
<text top="648" left="275" width="13" height="21" font="3">=</text>
<text top="635" left="292" width="10" height="11" font="25"><i>N</i></text>
<text top="639" left="303" width="5" height="8" font="5">1</text>
<text top="635" left="309" width="16" height="11" font="18">−1</text>
<text top="673" left="294" width="8" height="11" font="25"><i>n</i></text>
<text top="677" left="301" width="5" height="8" font="5">1</text>
<text top="673" left="308" width="16" height="11" font="18">=0</text>
<text top="635" left="328" width="10" height="11" font="25"><i>N</i></text>
<text top="639" left="338" width="5" height="8" font="5">2</text>
<text top="635" left="344" width="16" height="11" font="18">−1</text>
<text top="673" left="329" width="8" height="11" font="25"><i>n</i></text>
<text top="677" left="337" width="5" height="8" font="5">2</text>
<text top="673" left="343" width="16" height="11" font="18">=0</text>
<text top="652" left="363" width="9" height="15" font="20"><i>x</i></text>
<text top="657" left="372" width="8" height="11" font="25"><i>n</i></text>
<text top="661" left="380" width="5" height="8" font="5">1</text>
<text top="657" left="386" width="11" height="11" font="25"><i>,n</i></text>
<text top="661" left="397" width="5" height="8" font="5">2</text>
<text top="648" left="407" width="22" height="21" font="3">cos</text>
<text top="641" left="447" width="9" height="15" font="20"><i>π</i></text>
<text top="663" left="442" width="13" height="15" font="20"><i>N</i></text>
<text top="669" left="455" width="6" height="11" font="18">1</text>
<text top="652" left="477" width="10" height="15" font="20"><i>n</i></text>
<text top="657" left="487" width="6" height="11" font="18">1</text>
<text top="648" left="498" width="13" height="21" font="3">+</text>
<text top="636" left="516" width="8" height="21" font="3">1</text>
<text top="659" left="516" width="8" height="21" font="3">2</text>
<text top="652" left="540" width="9" height="15" font="20"><i>k</i></text>
<text top="657" left="548" width="6" height="11" font="18">1</text>
<text top="648" left="566" width="22" height="21" font="3">cos</text>
<text top="641" left="605" width="9" height="15" font="20"><i>π</i></text>
<text top="663" left="600" width="13" height="15" font="20"><i>N</i></text>
<text top="669" left="613" width="6" height="11" font="18">2</text>
<text top="652" left="636" width="10" height="15" font="20"><i>n</i></text>
<text top="657" left="646" width="6" height="11" font="18">2</text>
<text top="648" left="657" width="13" height="21" font="3">+</text>
<text top="636" left="675" width="8" height="21" font="3">1</text>
<text top="659" left="675" width="8" height="21" font="3">2</text>
<text top="652" left="698" width="9" height="15" font="20"><i>k</i></text>
<text top="657" left="707" width="6" height="11" font="18">2</text>
<text top="706" left="175" width="625" height="21" font="3">The matrix of coeﬃcient is being represented by the blockGene that is basically an array</text>
<text top="726" left="149" width="208" height="21" font="3">of __FLOATING__ values.</text>
<text top="752" left="175" width="625" height="21" font="3">These genes are then grouped to the structure One that then represents and holds the</text>
<text top="773" left="149" width="651" height="21" font="3">genetic information for one individual and its rating. From the name of the gene it is obvious</text>
<text top="793" left="149" width="540" height="21" font="3">that for every individual one gene belongs to one of the individual’s blocks.</text>
<text top="819" left="175" width="625" height="21" font="3">These individuals are then further grouped in to the Population that has following</text>
<text top="839" left="149" width="68" height="21" font="3">members:</text>
<text top="881" left="169" width="495" height="21" font="3">• sizeOfGene that speciﬁes the number of coeﬃcients in the matrix</text>
<text top="917" left="169" width="606" height="21" font="3">• numberOfGenes which has to be the same as the number of blocks in the network</text>
<text top="954" left="169" width="503" height="21" font="3">• sizeOfPopulation deﬁnes number of individuals in the population</text>
<text top="990" left="169" width="465" height="21" font="3">• overallrating is for storing average rating of the population</text>
<text top="1026" left="169" width="313" height="21" font="3">• population is basically an array of Ones</text>
<text top="1068" left="175" width="462" height="21" font="3">To work with these structures several functions shown in table</text>
<text top="1068" left="644" width="21" height="21" font="9"><a href="pdfxml.html#36">4.2</a></text>
<text top="1068" left="672" width="128" height="21" font="3">are supplied. For</text>
</page>
<page number="36" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">22</text>
<text top="97" left="515" width="229" height="14" font="3">CHAPTER 4. REALIZATION</text>
<text top="155" left="102" width="120" height="13" font="3">initPopulation</text>
<text top="149" left="323" width="328" height="21" font="3">initializes the population by given parameters</text>
<text top="175" left="102" width="120" height="13" font="3">freePopulation</text>
<text top="169" left="323" width="284" height="21" font="3">frees memory allocated by a population</text>
<text top="195" left="102" width="163" height="13" font="3">randomizePopulation</text>
<text top="189" left="323" width="372" height="21" font="3">function that performs randomization of population</text>
<text top="216" left="102" width="77" height="13" font="3">mutateOne</text>
<text top="210" left="323" width="300" height="21" font="3">function that performs a mutation of One</text>
<text top="236" left="102" width="86" height="13" font="3">dif_ev_One</text>
<text top="230" left="323" width="477" height="21" font="3">function that performs the diﬀerential evolution implemented in C</text>
<text top="250" left="102" width="714" height="21" font="3">kernel differentialEvolve kernel for diﬀerential evolution acceleration implemented in OpenCL</text>
<text top="277" left="102" width="60" height="13" font="3">flatten</text>
<text top="271" left="323" width="320" height="21" font="3">function for ﬂattening of genetic information</text>
<text top="297" left="102" width="77" height="13" font="3">deflatten</text>
<text top="291" left="323" width="249" height="21" font="3">reverse function to function ﬂatten</text>
<text top="341" left="248" width="341" height="21" font="3">Table 4.2: The IDCT implementation functions</text>
<text top="394" left="93" width="311" height="21" font="3">DCT the CL_BLOCK has following members:</text>
<text top="431" left="113" width="451" height="21" font="3">• numberOfinputs that speciﬁes the number of block’s inputs</text>
<text top="465" left="113" width="304" height="21" font="3">• bl_input that contains the block input</text>
<text top="499" left="113" width="346" height="21" font="3">• blockSize that speciﬁes the size of the block</text>
<text top="532" left="113" width="372" height="21" font="3">• blockState that holds current state of the block</text>
<text top="566" left="113" width="541" height="21" font="3">• nextBlockState that serves for recording for the next state of the block</text>
<text top="599" left="113" width="465" height="21" font="3">• IDCTCoefs that contains the &#34;matrix&#34; of coeﬃcients for IDCT</text>
<text top="633" left="113" width="544" height="21" font="3">• IDCTCoefs_length that represents the size of the &#34;matrix&#34; of coeﬃcients</text>
<text top="666" left="113" width="315" height="21" font="3">• clu is the pointer to the clu_t structure</text>
<text top="700" left="113" width="327" height="21" font="3">• kernel is the pointer to the current kernel</text>
<text top="737" left="118" width="625" height="21" font="3">In addition to the common parameters the function computeNetwork also requires a</text>
<text top="757" left="93" width="651" height="21" font="3">pointer to the One with genes of evaluated individual and the parameter that speciﬁes the</text>
<text top="778" left="93" width="221" height="21" font="3">lent of genes of this individual.</text>
<text top="802" left="118" width="625" height="21" font="3">When using this method the NeuralBlock_IDCT OpenCL kernel has to be used for</text>
<text top="822" left="93" width="140" height="21" font="3">network evaluation.</text>
<text top="873" left="93" width="41" height="16" font="13"><b>4.4.3</b></text>
<text top="873" left="155" width="85" height="16" font="13"><b>Evolution</b></text>
<text top="905" left="93" width="651" height="21" font="3">In the case of use of DCT there are two possible types of genetic evolution supported by</text>
<text top="925" left="93" width="148" height="21" font="3">this implementation.</text>
<text top="976" left="93" width="53" height="15" font="8"><b>4.4.3.1</b></text>
<text top="976" left="165" width="186" height="15" font="8"><b>Evolution by mutation</b></text>
<text top="1007" left="93" width="651" height="21" font="3">This method is basically the standard genetic mutation performed on the matrices of coeﬃ-</text>
<text top="1027" left="93" width="651" height="21" font="3">cients. It can be done with use of mutateOne function. This function requires the pointer to</text>
<text top="1048" left="93" width="651" height="21" font="3">the One that is going to be mutated, its number and size of genes, the mutation probability</text>
<text top="1068" left="93" width="161" height="21" font="3">and mutation amount.</text>
</page>
<page number="37" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="393" height="14" font="3">4.4. DESCRIPTION OF NETWORK EVALUATION</text>
<text top="92" left="784" width="16" height="21" font="3">23</text>
<text top="153" left="175" width="625" height="21" font="3">The latter two are speciﬁed as parameters and not as constants because this along with</text>
<text top="174" left="149" width="651" height="21" font="3">the parameter size of genes allows to use diﬀerent probabilities and amounts for diﬀerent</text>
<text top="194" left="149" width="651" height="21" font="3">parts of the matrix e.g.. we can mutate drastically the beginning of the matrices and then</text>
<text top="214" left="149" width="407" height="21" font="3">later mutate slightly bigger and bigger parts of matrices.</text>
<text top="267" left="149" width="53" height="15" font="8"><b>4.4.3.2</b></text>
<text top="267" left="221" width="174" height="15" font="8"><b>Diﬀerential evolution</b></text>
<text top="299" left="149" width="651" height="21" font="3">The other interesting possibility is to perform the diﬀerential evolution when three individ-</text>
<text top="319" left="149" width="651" height="21" font="3">uals enter the process - two of the act as donors, the third one is acceptor. The diﬀerence</text>
<text top="340" left="149" width="651" height="21" font="3">of donors’ genetic information is computed by subtracting the genetic information of the</text>
<text top="360" left="149" width="651" height="21" font="3">second donor from the genetic information of the ﬁrst donor and the result is then added</text>
<text top="380" left="149" width="651" height="21" font="3">to the genetic information of acceptor. This is done by the use of the dif_ev_One function</text>
<text top="401" left="149" width="651" height="21" font="3">which in addition to the genetic information also requires the length of gene as a parameter.</text>
<text top="426" left="175" width="625" height="21" font="3">Because for big networks with long genes this can be very time consuming an I have</text>
<text top="446" left="149" width="651" height="21" font="3">written an OpenCL kernel to aid with this. The only disadvantage is that the genetic</text>
<text top="466" left="149" width="237" height="21" font="3">information has to be ﬂatten <a href="pdfxml.html#37">ﬁrst</a></text>
<text top="468" left="386" width="6" height="11" font="11"><a href="pdfxml.html#37">5</a></text>
<text top="466" left="398" width="402" height="21" font="3">and then later deﬂatten back. This can be done with use</text>
<text top="487" left="149" width="651" height="21" font="3">of supplied flatten and deflaten functions. The kernel that then can be used is called</text>
<text top="513" left="149" width="155" height="13" font="3">differentialEvolve</text>
<text top="507" left="304" width="5" height="21" font="3">.</text>
<text top="560" left="149" width="41" height="16" font="13"><b>4.4.4</b></text>
<text top="560" left="211" width="187" height="16" font="13"><b>The Method of Trees</b></text>
<text top="592" left="149" width="651" height="21" font="3">Probably the only reasonable method of genetic evolution of functions is the genetic evolution</text>
<text top="613" left="149" width="651" height="21" font="3">of the trees of simple actions. These actions then represent the cornerstones that more</text>
<text top="633" left="149" width="651" height="21" font="3">complex functions are made of. This method represents completely diﬀerent approach than</text>
<text top="653" left="149" width="651" height="21" font="3">the DCT method, because here we are creating and perfecting actual functions whereas</text>
<text top="674" left="149" width="651" height="21" font="3">with the DCT method we don’t really care about the function itself - we are focused on its</text>
<text top="694" left="149" width="125" height="21" font="3">functional values.</text>
<text top="719" left="175" width="625" height="21" font="3">The way how the function can be mapped to a tree of actions and coeﬃcients is depicted</text>
<text top="739" left="149" width="63" height="21" font="3">on ﬁgure</text>
<text top="739" left="217" width="21" height="21" font="9"><a href="pdfxml.html#27">3.6</a></text>
<text top="739" left="238" width="5" height="21" font="3"><a href="pdfxml.html#27">.</a></text>
<text top="792" left="149" width="41" height="16" font="13"><b>4.4.5</b></text>
<text top="792" left="211" width="453" height="16" font="13"><b>How trees are represented and used in the network</b></text>
<text top="824" left="149" width="603" height="21" font="3">The tree here is represented by the structure Tree that contains following members:</text>
<text top="863" left="169" width="439" height="21" font="3">• program is an array of integers that represents the actions</text>
<text top="898" left="169" width="579" height="21" font="3">• coeficients is and array of __FLOATING__ that represent the coeﬁcients</text>
<text top="933" left="169" width="631" height="21" font="3">• rating is the pointer to shared rating of a Wood (This structure will be described</text>
<text top="953" left="190" width="39" height="21" font="3">later)</text>
<text top="992" left="149" width="493" height="21" font="3">This represents the genetic information for one block of the network.</text>
<text top="1017" left="175" width="625" height="21" font="3">To form an individual the Trees are grouped in to the Wood which represents an individ-</text>
<text top="1037" left="149" width="651" height="21" font="3">ual. Woods are then further grouped in to the Forest that represents the entire population.</text>
<text top="1072" left="168" width="5" height="8" font="5">5</text>
<text top="1074" left="174" width="428" height="12" font="12">Because of OpenCL’s inability of dealing with multidimensional arrays</text>
</page>
<page number="38" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">24</text>
<text top="97" left="515" width="229" height="14" font="3">CHAPTER 4. REALIZATION</text>
<text top="153" left="118" width="625" height="21" font="3">The Wood structure contains the array of Trees and the Wood rating (the one which was</text>
<text top="174" left="93" width="135" height="21" font="3">mentioned earlier).</text>
<text top="196" left="118" width="362" height="21" font="3">The Forest structure contains following members:</text>
<text top="226" left="113" width="421" height="21" font="3">• sizeOfForest is the number of the Woods in the forest</text>
<text top="257" left="113" width="509" height="21" font="3">• heightOfTrees speciﬁes the heights of the Trees in the entire forest</text>
<text top="289" left="113" width="631" height="21" font="3">• numberOfTreesInWood speciﬁes the number of Trees in the Wood - this has to be</text>
<text top="309" left="134" width="323" height="21" font="3">equal to the number of blocks in the network</text>
<text top="340" left="113" width="216" height="21" font="3">• forest the array of Woods</text>
<text top="370" left="118" width="501" height="21" font="3">For working with these structures functions described in the the table</text>
<text top="370" left="625" width="21" height="21" font="9"><a href="pdfxml.html#38">4.3</a></text>
<text top="410" left="102" width="95" height="13" font="3">plantForest</text>
<text top="404" left="435" width="227" height="21" font="3">allocates memory for the Forest</text>
<text top="430" left="102" width="112" height="13" font="3">cutDownForest</text>
<text top="425" left="435" width="294" height="21" font="3">frees the memory allocated by the Forest</text>
<text top="451" left="102" width="86" height="13" font="3">mutateWood</text>
<text top="445" left="435" width="164" height="21" font="3">mutates one individual</text>
<text top="471" left="102" width="77" height="13" font="3">initNodes</text>
<text top="465" left="435" width="199" height="21" font="3">initializes nodes in one Tree</text>
<text top="491" left="102" width="86" height="13" font="3">initForest</text>
<text top="486" left="435" width="141" height="21" font="3">initializes the forest</text>
<text top="512" left="102" width="112" height="13" font="3">randomizeWood</text>
<text top="506" left="435" width="201" height="21" font="3">(re)initializes one individual</text>
<text top="526" left="102" width="682" height="21" font="3">kernel resolveNeuronWeightFunctionTree OpenCL kernel for direct interpretation of a tree</text>
<text top="577" left="253" width="330" height="21" font="3">Table 4.3: The Tree implementation functions</text>
<text top="612" left="118" width="395" height="21" font="3">For Tree method the CL_BLOCK has following members:</text>
<text top="642" left="113" width="451" height="21" font="3">• numberOfinputs that speciﬁes the number of block’s inputs</text>
<text top="673" left="113" width="304" height="21" font="3">• bl_input that contains the block input</text>
<text top="705" left="113" width="346" height="21" font="3">• blockSize that speciﬁes the size of the block</text>
<text top="736" left="113" width="372" height="21" font="3">• blockState that holds current state of the block</text>
<text top="767" left="113" width="541" height="21" font="3">• nextBlockState that serves for recording for the next state of the block</text>
<text top="798" left="113" width="329" height="21" font="3">• stack_memory is memory for thread stacks</text>
<text top="830" left="113" width="218" height="21" font="3">• program holds the program</text>
<text top="861" left="113" width="338" height="21" font="3">• programLength says how log the program is</text>
<text top="892" left="113" width="366" height="21" font="3">• coeficients contains the coeﬁcients of the tree</text>
<text top="923" left="113" width="315" height="21" font="3">• clu is the pointer to the clu_t structure</text>
<text top="955" left="113" width="327" height="21" font="3">• kernel is the pointer to the current kernel</text>
<text top="984" left="118" width="625" height="21" font="3">In addition to the common parameters the function computeNetwork also requires a</text>
<text top="1005" left="93" width="651" height="21" font="3">pointer to the Wood which contains programs - Trees - of evaluated individual and the</text>
<text top="1025" left="93" width="472" height="21" font="3">parameter that speciﬁes the length of programs of this individual.</text>
<text top="1048" left="118" width="625" height="21" font="3">When using this method the NeuralBlock_TREES OpenCL kernel has to be used for</text>
<text top="1068" left="93" width="140" height="21" font="3">network evaluation.</text>
</page>
<page number="39" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="393" height="14" font="3">4.4. DESCRIPTION OF NETWORK EVALUATION</text>
<text top="92" left="784" width="16" height="21" font="3">25</text>
<text top="157" left="149" width="41" height="16" font="13"><b>4.4.6</b></text>
<text top="157" left="211" width="364" height="16" font="13"><b>Description of the Tree internal language</b></text>
<text top="192" left="149" width="651" height="21" font="3">The evaluation of trees is done by simple push-down automaton which interprets simple</text>
<text top="212" left="149" width="293" height="21" font="3">language that consists of 26 basic <a href="pdfxml.html#39">actions</a></text>
<text top="212" left="442" width="21" height="21" font="9"><a href="pdfxml.html#39">4.4</a></text>
<text top="212" left="463" width="337" height="21" font="3"><a href="pdfxml.html#39">. </a>In addiction to execution of particular action,</text>
<text top="232" left="149" width="651" height="21" font="3">every result of this execution action is then multiplied by a corresponding coeﬃcient. This</text>
<text top="253" left="149" width="651" height="21" font="3">allowed simplifying the language in a way that the constants could have been completely</text>
<text top="273" left="149" width="651" height="21" font="3">ignored - all constants are then substituted by action BN_PUSH_CONST ( BN_PUSH_CONST_IN</text>
<text top="293" left="149" width="651" height="21" font="3">respectively) that after multiplication by corresponding coeﬃcient creates a form of constant</text>
<text top="314" left="149" width="294" height="21" font="3">that can be evolved by genetic evolution.</text>
<text top="351" left="262" width="109" height="21" font="3">Name of action</text>
<text top="351" left="409" width="123" height="21" font="3">Number Action</text>
<text top="377" left="262" width="60" height="13" font="3">BN_PLUS</text>
<text top="371" left="433" width="8" height="21" font="3">0</text>
<text top="375" left="484" width="9" height="15" font="20"><i>a</i></text>
<text top="371" left="497" width="23" height="21" font="3">+ <i>b</i></text>
<text top="397" left="262" width="69" height="13" font="3">BN_MINUS</text>
<text top="391" left="433" width="8" height="21" font="3">1</text>
<text top="396" left="484" width="36" height="15" font="20"><i>a </i>− <i>b</i></text>
<text top="418" left="262" width="52" height="13" font="3">BN_MUL</text>
<text top="412" left="433" width="8" height="21" font="3">2</text>
<text top="416" left="484" width="31" height="15" font="20"><i>a </i>∗ <i>b</i></text>
<text top="438" left="262" width="112" height="13" font="3">BN_SIN_APlusB</text>
<text top="432" left="433" width="8" height="21" font="3">3</text>
<text top="436" left="484" width="23" height="15" font="20"><i>sin</i></text>
<text top="432" left="508" width="48" height="21" font="3">(<i>a </i>+ <i>b</i>)</text>
<text top="458" left="262" width="103" height="13" font="3">BN_SIN_AMulB</text>
<text top="452" left="433" width="8" height="21" font="3">4</text>
<text top="457" left="484" width="23" height="15" font="20"><i>sin</i></text>
<text top="452" left="508" width="44" height="21" font="3">(<i>a </i>∗ <i>b</i>)</text>
<text top="479" left="262" width="112" height="13" font="3">BN_COS_APlusB</text>
<text top="473" left="433" width="8" height="21" font="3">5</text>
<text top="477" left="484" width="23" height="15" font="20"><i>cos</i></text>
<text top="473" left="507" width="42" height="21" font="3">(<i>a </i>+ <i>b</i></text>
<text top="499" left="262" width="103" height="13" font="3">BN_COS_AMulB</text>
<text top="493" left="433" width="8" height="21" font="3">6</text>
<text top="497" left="484" width="23" height="15" font="20"><i>cos</i></text>
<text top="493" left="507" width="44" height="21" font="3">(<i>a </i>∗ <i>b</i>)</text>
<text top="519" left="262" width="120" height="13" font="3">BN_TANH_APlusB</text>
<text top="513" left="433" width="8" height="21" font="3">7</text>
<text top="518" left="484" width="34" height="15" font="20"><i>tanh</i></text>
<text top="513" left="518" width="48" height="21" font="3">(<i>a </i>+ <i>b</i>)</text>
<text top="539" left="262" width="112" height="13" font="3">BN_TANH_AMulB</text>
<text top="534" left="433" width="8" height="21" font="3">8</text>
<text top="538" left="484" width="24" height="15" font="20"><i>tan</i></text>
<text top="534" left="509" width="44" height="21" font="3">(<i>a </i>∗ <i>b</i>)</text>
<text top="560" left="262" width="103" height="13" font="3">BN_LN_APlusB</text>
<text top="554" left="433" width="8" height="21" font="3">9</text>
<text top="558" left="484" width="15" height="15" font="20"><i>ln</i></text>
<text top="554" left="499" width="48" height="21" font="3">(<i>a </i>+ <i>b</i>)</text>
<text top="580" left="262" width="95" height="13" font="3">BN_LN_AMulB</text>
<text top="574" left="429" width="16" height="21" font="3">10</text>
<text top="579" left="484" width="15" height="15" font="20"><i>ln</i></text>
<text top="574" left="499" width="44" height="21" font="3">(<i>a </i>∗ <i>b</i>)</text>
<text top="600" left="262" width="112" height="13" font="3">BN_EXP_APlusB</text>
<text top="595" left="429" width="16" height="21" font="3">11</text>
<text top="599" left="484" width="25" height="15" font="20"><i>exp</i></text>
<text top="595" left="510" width="48" height="21" font="3">(<i>a </i>+ <i>b</i>)</text>
<text top="621" left="262" width="103" height="13" font="3">BN_EXP_AMulB</text>
<text top="615" left="429" width="16" height="21" font="3">12</text>
<text top="619" left="484" width="25" height="15" font="20"><i>exp</i></text>
<text top="615" left="510" width="44" height="21" font="3">(<i>a </i>∗ <i>b</i>)</text>
<text top="641" left="262" width="77" height="13" font="3">BN_TAKE_A</text>
<text top="635" left="429" width="16" height="21" font="3">13</text>
<text top="640" left="484" width="9" height="15" font="20"><i>a</i></text>
<text top="661" left="262" width="77" height="13" font="3">BN_TAKE_B</text>
<text top="656" left="429" width="16" height="21" font="3">14</text>
<text top="660" left="484" width="7" height="15" font="20"><i>b</i></text>
<text top="682" left="262" width="60" height="13" font="3">BN_ZERO</text>
<text top="676" left="429" width="16" height="21" font="3">15</text>
<text top="676" left="484" width="8" height="21" font="3">0</text>
<text top="702" left="262" width="86" height="13" font="3">BN_MINUS_A</text>
<text top="696" left="429" width="16" height="21" font="3">16</text>
<text top="700" left="484" width="21" height="15" font="3">−<i>a</i></text>
<text top="722" left="262" width="86" height="13" font="3">BN_MINUS_B</text>
<text top="717" left="429" width="16" height="21" font="3">17</text>
<text top="720" left="484" width="20" height="15" font="3">−<i>b</i></text>
<text top="743" left="262" width="120" height="13" font="3">BN_PUSH_IN1_IN</text>
<text top="737" left="429" width="16" height="21" font="3">18</text>
<text top="741" left="484" width="39" height="15" font="20"><i>input</i></text>
<text top="737" left="523" width="164" height="21" font="3">1 inside of the network</text>
<text top="763" left="262" width="120" height="13" font="3">BN_PUSH_IN2_IN</text>
<text top="757" left="429" width="16" height="21" font="3">19</text>
<text top="761" left="484" width="39" height="15" font="20"><i>input</i></text>
<text top="757" left="523" width="164" height="21" font="3">2 inside of the network</text>
<text top="783" left="262" width="95" height="13" font="3">BN_CONST_IN</text>
<text top="778" left="429" width="16" height="21" font="3">20</text>
<text top="778" left="484" width="164" height="21" font="3">1 inside of the network</text>
<text top="804" left="262" width="129" height="13" font="3">BN_GAUSS_APlusB</text>
<text top="798" left="429" width="16" height="21" font="3">21</text>
<text top="802" left="484" width="25" height="15" font="20"><i>exp</i></text>
<text top="798" left="510" width="127" height="21" font="3">(−(<i>a </i>∗ <i>a </i>+ <i>b </i>∗ <i>b</i>)))</text>
<text top="824" left="262" width="120" height="13" font="3">BN_GAUSS_AMulB</text>
<text top="818" left="429" width="16" height="21" font="3">22</text>
<text top="822" left="484" width="25" height="15" font="20"><i>exp</i></text>
<text top="818" left="510" width="122" height="21" font="3">(−(<i>a </i>∗ <i>a </i>∗ <i>b </i>∗ <i>b</i>)))</text>
<text top="844" left="262" width="103" height="13" font="3">BN_SEPARATOR</text>
<text top="839" left="429" width="16" height="21" font="3">23</text>
<text top="843" left="484" width="55" height="15" font="20"><i>dummy</i></text>
<text top="865" left="262" width="95" height="13" font="3">BN_PUSH_IN1</text>
<text top="859" left="429" width="16" height="21" font="3">24</text>
<text top="863" left="484" width="39" height="15" font="20"><i>input</i></text>
<text top="859" left="523" width="8" height="21" font="3">1</text>
<text top="885" left="262" width="95" height="13" font="3">BN_PUSH_IN2</text>
<text top="879" left="429" width="16" height="21" font="3">25</text>
<text top="883" left="484" width="39" height="15" font="20"><i>input</i></text>
<text top="879" left="523" width="8" height="21" font="3">2</text>
<text top="905" left="262" width="112" height="13" font="3">BN_PUSH_CONST</text>
<text top="900" left="429" width="16" height="21" font="3">26</text>
<text top="900" left="484" width="8" height="21" font="3">1</text>
<text top="950" left="359" width="232" height="21" font="3">Table 4.4: The Actions Of Trees</text>
<text top="987" left="175" width="625" height="21" font="3">There is one special thing that a push-down automaton needs for its operation - a stack.</text>
<text top="1007" left="149" width="651" height="21" font="3">I have decided that it will be better to allocate the memory outside of the kernel and keep</text>
<text top="1027" left="149" width="651" height="21" font="3">it allocated for the entire time of CL_BLOCK existence. The size of it is determined by</text>
<text top="1048" left="149" width="651" height="21" font="3">the constant __STACK_DEPTH, that speciﬁes the depth of the stack for every thread,</text>
<text top="1068" left="149" width="553" height="21" font="3">and the global number of work-items as every work-item needs its own stack.</text>
</page>
<page number="40" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">26</text>
<text top="97" left="515" width="229" height="14" font="3">CHAPTER 4. REALIZATION</text>
<text top="157" left="93" width="41" height="16" font="13"><b>4.4.7</b></text>
<text top="157" left="155" width="213" height="16" font="13"><b>Possibilities of mutation</b></text>
<text top="188" left="93" width="651" height="21" font="3">The only mechanism of genetic evolution used in the implementation of this method is</text>
<text top="208" left="93" width="522" height="21" font="3">genetic mutation. Reasons for this were described earlier in the part</text>
<text top="208" left="623" width="46" height="21" font="9"><a href="pdfxml.html#27">3.1.3.2</a></text>
<text top="208" left="669" width="74" height="21" font="3"><a href="pdfxml.html#27">. </a>Genetic</text>
<text top="229" left="93" width="362" height="21" font="3">mutation is controlled here by following constants:</text>
<text top="266" left="113" width="522" height="21" font="3">• MUTATION_PROB that is used for setting the mutation probability</text>
<text top="299" left="113" width="631" height="21" font="3">• MUTATION_AMOUNT that is used for setting the amount of mutation for coeﬁcients</text>
<text top="332" left="113" width="482" height="21" font="3">• __structured that is used for specifying of the type of mutation</text>
<text top="369" left="118" width="625" height="21" font="3">These constants are used as it is described in the list - MUTATION_PROB is used as</text>
<text top="390" left="93" width="651" height="21" font="3">a parameter for determining the probability of mutation for both actions and coeﬁcients,</text>
<text top="410" left="93" width="651" height="21" font="3">MUTATION_AMOUNT is used for determining amount that should be added to or sub-</text>
<text top="430" left="93" width="651" height="21" font="3">tracted from the current value of particular coeﬃcient. Chances for addition or subtraction</text>
<text top="451" left="93" width="69" height="21" font="3">are 50:50.</text>
<text top="475" left="118" width="625" height="21" font="3">The last parameter of mutation - the __structured constant is used for specifying of the</text>
<text top="495" left="93" width="125" height="21" font="3">type of mutation.</text>
<text top="519" left="118" width="625" height="21" font="3">Actions were grouped to groups of similar actions - the actions that do not diﬀer to much</text>
<text top="540" left="93" width="651" height="21" font="3">by what they to to their inputs e.g.. actions + and cosine diﬀer quite a lot so they are in</text>
<text top="560" left="93" width="651" height="21" font="3">diﬀerent groups and on the other hand sine and cosine are very similar - they are in one</text>
<text top="580" left="93" width="45" height="21" font="3">group.</text>
<text top="604" left="118" width="625" height="21" font="3">Now back to the __structured parameter - it toggles between whether the mutation has</text>
<text top="625" left="93" width="651" height="21" font="3">a notion of groups or not. When it is deﬁned mutation of actions happens only within the</text>
<text top="645" left="93" width="651" height="21" font="3">groups, when it isn’t deﬁned mutation the action that will replace another action is being</text>
<text top="665" left="93" width="651" height="21" font="3">chosen randomly from the whole list of possible actions. general problems with evolution of</text>
<text top="686" left="93" width="93" height="21" font="3">this network.</text>
<text top="710" left="118" width="625" height="21" font="3">The ﬁrst approach may seem as a week method for evaluating as no radically diﬀerent</text>
<text top="730" left="93" width="651" height="21" font="3">individuals can be formed this way. This problem can be easily solved by randomiza-</text>
<text top="750" left="93" width="368" height="21" font="3">tion/reinitialization of a certain part of population.</text>
<text top="801" left="93" width="41" height="16" font="13"><b>4.4.8</b></text>
<text top="801" left="155" width="353" height="16" font="13"><b>Weight Matrix implementation speciﬁcs</b></text>
<text top="833" left="93" width="651" height="21" font="3">In this method there is no hidden magic - the weight function here was reduced to a function</text>
<text top="853" left="93" width="651" height="21" font="3">that fetches values from the weight matrix so the network works then as a normal neural</text>
<text top="873" left="93" width="61" height="21" font="3">network.</text>
<text top="897" left="118" width="468" height="21" font="3">For Weight Matrix method the CL_BLOCK has following members:</text>
<text top="934" left="113" width="451" height="21" font="3">• numberOfinputs that speciﬁes the number of block’s inputs</text>
<text top="968" left="113" width="304" height="21" font="3">• bl_input that contains the block input</text>
<text top="1001" left="113" width="346" height="21" font="3">• blockSize that speciﬁes the size of the block</text>
<text top="1035" left="113" width="372" height="21" font="3">• blockState that holds current state of the block</text>
<text top="1068" left="113" width="541" height="21" font="3">• nextBlockState that serves for recording for the next state of the block</text>
</page>
<page number="41" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="558" height="14" font="3">4.5. PROBLEM WITH GENETIC ALGORITHMS AND THIS NETWORK</text>
<text top="92" left="784" width="16" height="21" font="3">27</text>
<text top="153" left="169" width="370" height="21" font="3">• blockMatrix a matrix of weights for given block</text>
<text top="187" left="169" width="315" height="21" font="3">• clu is the pointer to the clu_t structure</text>
<text top="221" left="169" width="327" height="21" font="3">• kernel is the pointer to the current kernel</text>
<text top="259" left="149" width="651" height="21" font="3">In addition to the common parameters the function computeNetwork also requires a pointer</text>
<text top="279" left="149" width="651" height="21" font="3">to the NetWeigthMatrices which is and array of matrices (here again represented by ar-</text>
<text top="299" left="149" width="294" height="21" font="3">rays)for particular blocks of the network.</text>
<text top="324" left="175" width="625" height="21" font="3">When using this method the NeuralBlock_WEIGHTS_SUPPLIED OpenCL kernel has to</text>
<text top="344" left="149" width="225" height="21" font="3">be used for network evaluation.</text>
<text top="401" left="149" width="31" height="19" font="1"><b>4.5</b></text>
<text top="401" left="204" width="534" height="19" font="1"><b>Problem with genetic algorithms and this network</b></text>
<text top="440" left="149" width="651" height="21" font="3">After some time that was spend on designing of this network one big problem with genetic</text>
<text top="461" left="149" width="651" height="21" font="3">algorithms in combination with this network has arisen. Actually there are two problems -</text>
<text top="481" left="149" width="651" height="21" font="3">the problem of rating of an individual and the problem of getting a relevant output when it</text>
<text top="501" left="149" width="146" height="21" font="3">comes to evaluation.</text>
<text top="526" left="175" width="625" height="21" font="3">The ﬁrst problem is this - when we have a rating of an individual it doesn’t really</text>
<text top="546" left="149" width="651" height="21" font="3">correspond to the rating of individual’s individual genes. It describes the complete opposite</text>
<text top="566" left="149" width="651" height="21" font="3">the cooperation of one’s genes. Maybe it is not apparent yet - the problem is that the</text>
<text top="587" left="149" width="651" height="21" font="3">genes of an individual are complex. These complex genes aren’t being replaced as a simple</text>
<text top="607" left="149" width="651" height="21" font="3">gene, but modiﬁed. And here the problem arises - how should it be determined whether</text>
<text top="627" left="149" width="651" height="21" font="3">the structure of given gene is beneﬁcial for the whole &#34;organism&#34; or not? The only lead</text>
<text top="648" left="149" width="651" height="21" font="3">here is the rating of an individual which really isn’t too relevant when it comes down to the</text>
<text top="668" left="149" width="214" height="21" font="3">structure of a particular gene.</text>
<text top="692" left="175" width="625" height="21" font="3">The ﬁrst problem is then enhanced by the second - the output of the network depends</text>
<text top="713" left="149" width="651" height="21" font="3">on another set of weights that are on the inputs of output layer which, when exaggerated,</text>
<text top="733" left="149" width="651" height="21" font="3">allows to ﬁlter the output of the network to any shape one wants regardless of the state of</text>
<text top="753" left="149" width="651" height="21" font="3">network. This problem can be made smaller by using the same set of weights for output</text>
<text top="774" left="149" width="651" height="21" font="3">block all the time. But then again, how to determine the right set of weights for given</text>
<text top="794" left="149" width="66" height="21" font="3">problem?</text>
<text top="818" left="175" width="625" height="21" font="3">These two problems (mainly the ﬁrst one) unfortunately turn the teaching process to</text>
<text top="839" left="149" width="651" height="21" font="3">something similar to a blind shooting exercise when someone tells the shooter that the room</text>
<text top="859" left="149" width="308" height="21" font="3">he is in contains a target of particular size.</text>
</page>
<page number="42" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">28</text>
<text top="97" left="515" width="229" height="14" font="3">CHAPTER 4. REALIZATION</text>
</page>
<page number="43" position="absolute" top="0" left="0" height="1262" width="892">
<text top="265" left="149" width="154" height="27" font="4"><b>Chapter 5</b></text>
<text top="340" left="149" width="133" height="33" font="6"><b>Testing</b></text>
<text top="435" left="149" width="466" height="21" font="3">Here the tests conducted are described and the inputs presented.</text>
<text top="494" left="149" width="31" height="19" font="1"><b>5.1</b></text>
<text top="494" left="204" width="206" height="19" font="1"><b>Description of tests</b></text>
<text top="535" left="149" width="651" height="21" font="3">To get at least a particular idea of how individual implementations perform on both GPU and</text>
<text top="555" left="149" width="651" height="21" font="3">CBEA processor, I have conducted some basic tests of evaluation of the network construction</text>
<text top="576" left="149" width="651" height="21" font="3">unit - the block. For every implementation Four tests were conducted always on the same</text>
<text top="596" left="149" width="651" height="21" font="3">type of block, with diﬀerent number of work-items and diﬀerent number of inner-block</text>
<text top="616" left="149" width="84" height="21" font="3">evaluations.</text>
<text top="642" left="175" width="502" height="21" font="3">The block was always built up from six neurons and had three inputs</text>
<text top="643" left="682" width="6" height="11" font="11"><a href="pdfxml.html#43">1</a></text>
<text top="642" left="690" width="110" height="21" font="3"><a href="pdfxml.html#43">. </a>On this block</text>
<text top="662" left="149" width="410" height="21" font="3">following tests were conducted on both GPU and CBEA.</text>
<text top="702" left="169" width="224" height="21" font="3">• Weight Matrix method tests</text>
<text top="737" left="169" width="382" height="21" font="3">• IDCT method test with a matrix of 20 coeﬃcients</text>
<text top="772" left="169" width="356" height="21" font="3">• Tree method test with a program of 31 actions</text>
<text top="812" left="175" width="497" height="21" font="3">All of these tests were run with four diﬀerent network conﬁgurations:</text>
<text top="851" left="169" width="467" height="21" font="3">• Test 1 - Single inner evaluation of a block with 6 work-items.</text>
<text top="886" left="169" width="460" height="21" font="3">• Test 2 - Single inner evaluation of a block with 1 work-item.</text>
<text top="922" left="169" width="457" height="21" font="3">• Test 3 - Ten inner evaluations of a block with 6 work-items.</text>
<text top="957" left="169" width="451" height="21" font="3">• Test 4 - Ten inner evaluations of a block with 1 work-item.</text>
<text top="996" left="175" width="625" height="21" font="3">In case of single inner evaluation tests every test was repeated one hundred times and</text>
<text top="1017" left="149" width="651" height="21" font="3">the measured times were averaged. In case of tests with 10 inner evaluations tests were</text>
<text top="1037" left="149" width="131" height="21" font="3">repeated 10 times.</text>
<text top="1072" left="168" width="5" height="8" font="5">1</text>
<text top="1074" left="174" width="253" height="12" font="12">The same type of block as is described on</text>
<text top="1074" left="432" width="18" height="12" font="17"><a href="pdfxml.html#26">3.4</a></text>
<text top="1074" left="454" width="22" height="12" font="12">and</text>
<text top="1074" left="481" width="18" height="12" font="17"><a href="pdfxml.html#26">3.5</a></text>
<text top="1129" left="466" width="16" height="21" font="3">29</text>
</page>
<page number="44" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="26" size="11" family="Times" color="#000000"/>
<text top="92" left="93" width="16" height="21" font="3">30</text>
<text top="97" left="556" width="188" height="14" font="3">CHAPTER 5. TESTING</text>
<text top="418" left="268" width="41" height="17" font="15">Test 1</text>
<text top="418" left="385" width="41" height="17" font="15">Test 2</text>
<text top="418" left="501" width="41" height="17" font="15">Test 3</text>
<text top="418" left="617" width="41" height="17" font="15">Test 4</text>
<text top="399" left="212" width="8" height="17" font="15">0</text>
<text top="377" left="181" width="40" height="17" font="15">50000</text>
<text top="355" left="173" width="48" height="17" font="15">100000</text>
<text top="333" left="173" width="48" height="17" font="15">150000</text>
<text top="311" left="173" width="48" height="17" font="15">200000</text>
<text top="290" left="173" width="48" height="17" font="15">250000</text>
<text top="268" left="173" width="48" height="17" font="15">300000</text>
<text top="246" left="173" width="48" height="17" font="15">350000</text>
<text top="224" left="173" width="48" height="17" font="15">400000</text>
<text top="202" left="173" width="48" height="17" font="15">450000</text>
<text top="180" left="173" width="48" height="17" font="15">500000</text>
<text top="464" left="291" width="63" height="17" font="15">GPU float</text>
<text top="464" left="377" width="72" height="17" font="15">CBEA float</text>
<text top="464" left="472" width="88" height="17" font="15">CBEA double</text>
<text top="328" left="153" width="0" height="15" font="26">T</text>
<text top="320" left="153" width="0" height="15" font="26">im</text>
<text top="304" left="153" width="0" height="15" font="26">e</text>
<text top="296" left="153" width="0" height="15" font="26"> in</text>
<text top="282" left="153" width="0" height="15" font="26"> n</text>
<text top="271" left="153" width="0" height="15" font="26">s</text>
<text top="524" left="195" width="447" height="21" font="3">Figure 5.1: Chart of run times for weight matrix method tests</text>
<text top="558" left="236" width="74" height="21" font="3">GPU ﬂoat</text>
<text top="558" left="332" width="335" height="21" font="3">CBEA ﬂoat CBEA double CBEA speed-up</text>
<text top="578" left="170" width="44" height="21" font="3">Test 1</text>
<text top="578" left="238" width="70" height="21" font="3">237747 ns</text>
<text top="578" left="339" width="70" height="21" font="3">321540 ns</text>
<text top="578" left="449" width="70" height="21" font="3">453590 ns</text>
<text top="578" left="591" width="37" height="21" font="3">1,411</text>
<text top="599" left="170" width="44" height="21" font="3">Test 2</text>
<text top="599" left="238" width="70" height="21" font="3">387558 ns</text>
<text top="599" left="339" width="70" height="21" font="3">363270 ns</text>
<text top="599" left="449" width="70" height="21" font="3">401330 ns</text>
<text top="599" left="591" width="37" height="21" font="3">1,105</text>
<text top="619" left="170" width="145" height="21" font="3">Test 3 151242,3 ns</text>
<text top="619" left="339" width="70" height="21" font="3">266240 ns</text>
<text top="619" left="449" width="70" height="21" font="3">332620 ns</text>
<text top="619" left="591" width="37" height="21" font="3">1,249</text>
<text top="639" left="170" width="145" height="21" font="3">Test 4 331742,1 ns</text>
<text top="639" left="339" width="70" height="21" font="3">275810 ns</text>
<text top="639" left="449" width="70" height="21" font="3">285760 ns</text>
<text top="639" left="591" width="37" height="21" font="3">1,036</text>
<text top="689" left="286" width="265" height="21" font="3">Table 5.1: Weight matrix test results</text>
<text top="741" left="118" width="625" height="21" font="3">For CBEA the tests were run in both single and double precision modes. All of the tests</text>
<text top="761" left="93" width="204" height="21" font="3">were run on the SPE device.</text>
<text top="784" left="118" width="625" height="21" font="3">All of the tests were conducted with &#34;dummy&#34; structures as I was testing only the</text>
<text top="805" left="93" width="651" height="21" font="3">performance and impact of usage of more work-items. This was the only way to test if the</text>
<text top="825" left="93" width="651" height="21" font="3">parallelization has any impact on the speed of evaluation as the evaluation of blocks was</text>
<text top="845" left="93" width="217" height="21" font="3">implemented only in OpenCL.</text>
<text top="869" left="118" width="261" height="21" font="3">The main.c ﬁle contains these tests.</text>
<text top="924" left="93" width="31" height="19" font="1"><b>5.2</b></text>
<text top="924" left="148" width="78" height="19" font="1"><b>Results</b></text>
<text top="963" left="93" width="651" height="21" font="3">In this section results of conducted tests are listed. The results for the Weight Matrix (WM)</text>
<text top="983" left="93" width="159" height="21" font="3">tests are listed in table</text>
<text top="983" left="256" width="21" height="21" font="9"><a href="pdfxml.html#44">5.1</a></text>
<text top="983" left="281" width="189" height="21" font="3">and illustrated in the chart</text>
<text top="983" left="475" width="21" height="21" font="9"><a href="pdfxml.html#46">5.3</a></text>
<text top="983" left="496" width="248" height="21" font="3"><a href="pdfxml.html#46">, </a>the results for IDCT method tests</text>
<text top="1004" left="93" width="128" height="21" font="3">are listed in table</text>
<text top="1004" left="227" width="21" height="21" font="9"><a href="pdfxml.html#45">5.2</a></text>
<text top="1004" left="254" width="197" height="21" font="3">and illustrated in the chart</text>
<text top="1004" left="457" width="21" height="21" font="9"><a href="pdfxml.html#45">5.2</a></text>
<text top="1004" left="484" width="260" height="21" font="3">and the results for the Tree method</text>
<text top="1024" left="93" width="198" height="21" font="3">tests are shown in the table</text>
<text top="1024" left="297" width="21" height="21" font="9"><a href="pdfxml.html#45">5.3</a></text>
<text top="1024" left="323" width="185" height="21" font="3">and depicted by the chart</text>
<text top="1024" left="513" width="21" height="21" font="9"><a href="pdfxml.html#46">5.3</a></text>
<text top="1024" left="534" width="5" height="21" font="3"><a href="pdfxml.html#46">.</a></text>
<text top="1048" left="118" width="625" height="21" font="3">From these tables is visible that the performance of my implementations (except for</text>
<text top="1068" left="93" width="620" height="21" font="3">the Tree method tests) is better on GPU compared to CBEA processor. In the tables</text>
<text top="1068" left="718" width="21" height="21" font="9"><a href="pdfxml.html#44">5.1</a></text>
<text top="1068" left="739" width="5" height="21" font="3"><a href="pdfxml.html#44">,</a></text>
</page>
<page number="45" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="113" height="14" font="3">5.2. RESULTS</text>
<text top="92" left="784" width="16" height="21" font="3">31</text>
<text top="423" left="338" width="41" height="17" font="15">Test 1</text>
<text top="423" left="451" width="41" height="17" font="15">Test 2</text>
<text top="423" left="563" width="41" height="17" font="15">Test 3</text>
<text top="423" left="675" width="41" height="17" font="15">Test 4</text>
<text top="404" left="284" width="8" height="17" font="15">0</text>
<text top="367" left="237" width="56" height="17" font="15">2000000</text>
<text top="331" left="237" width="56" height="17" font="15">4000000</text>
<text top="294" left="237" width="56" height="17" font="15">6000000</text>
<text top="258" left="237" width="56" height="17" font="15">8000000</text>
<text top="221" left="229" width="63" height="17" font="15">10000000</text>
<text top="185" left="229" width="63" height="17" font="15">12000000</text>
<text top="469" left="347" width="63" height="17" font="15">GPU float</text>
<text top="469" left="433" width="72" height="17" font="15">CBEA float</text>
<text top="469" left="528" width="88" height="17" font="15">CBEA double</text>
<text top="333" left="209" width="0" height="15" font="26">T</text>
<text top="325" left="209" width="0" height="15" font="26">im</text>
<text top="309" left="209" width="0" height="15" font="26">e</text>
<text top="301" left="209" width="0" height="15" font="26"> in</text>
<text top="287" left="209" width="0" height="15" font="26"> n</text>
<text top="276" left="209" width="0" height="15" font="26">s</text>
<text top="527" left="280" width="389" height="21" font="3">Figure 5.2: Chart of run times for IDCT method tests</text>
<text top="561" left="291" width="74" height="21" font="3">GPU ﬂoat</text>
<text top="561" left="393" width="336" height="21" font="3">CBEA ﬂoat CBEA double CBEA speed-up</text>
<text top="582" left="220" width="44" height="21" font="3">Test 1</text>
<text top="582" left="289" width="78" height="21" font="3">1195876 ns</text>
<text top="582" left="395" width="78" height="21" font="3">1704080 ns</text>
<text top="582" left="506" width="78" height="21" font="3">1734810 ns</text>
<text top="582" left="652" width="37" height="21" font="3">1,018</text>
<text top="602" left="220" width="44" height="21" font="3">Test 2</text>
<text top="602" left="289" width="78" height="21" font="3">1631814 ns</text>
<text top="602" left="391" width="86" height="21" font="3">10219000 ns</text>
<text top="602" left="502" width="86" height="21" font="3">10017000 ns</text>
<text top="602" left="652" width="37" height="21" font="3">0,980</text>
<text top="622" left="220" width="44" height="21" font="3">Test 3</text>
<text top="622" left="289" width="78" height="21" font="3">1179788 ns</text>
<text top="622" left="395" width="78" height="21" font="3">1592950 ns</text>
<text top="622" left="506" width="78" height="21" font="3">1718830 ns</text>
<text top="622" left="652" width="37" height="21" font="3">1,079</text>
<text top="643" left="220" width="153" height="21" font="3">Test 4 1577943,7 ns</text>
<text top="643" left="395" width="78" height="21" font="3">8211580 ns</text>
<text top="643" left="506" width="78" height="21" font="3">8273100 ns</text>
<text top="643" left="652" width="37" height="21" font="3">1,007</text>
<text top="693" left="373" width="204" height="21" font="3">Table 5.2: IDCT test results</text>
<text top="725" left="292" width="74" height="21" font="3">GPU ﬂoat</text>
<text top="725" left="393" width="335" height="21" font="3">CBEA ﬂoat CBEA double CBEA speed-up</text>
<text top="745" left="221" width="44" height="21" font="3">Test 1</text>
<text top="745" left="294" width="70" height="21" font="3">733774 ns</text>
<text top="745" left="400" width="70" height="21" font="3">424660 ns</text>
<text top="745" left="509" width="70" height="21" font="3">497690 ns</text>
<text top="745" left="651" width="37" height="21" font="3">1,172</text>
<text top="765" left="221" width="44" height="21" font="3">Test 2</text>
<text top="765" left="290" width="78" height="21" font="3">2823232 ns</text>
<text top="765" left="400" width="70" height="21" font="3">524990 ns</text>
<text top="765" left="509" width="70" height="21" font="3">568430 ns</text>
<text top="765" left="651" width="37" height="21" font="3">1,083</text>
<text top="786" left="221" width="44" height="21" font="3">Test 3</text>
<text top="786" left="288" width="83" height="21" font="3">675061,5 ns</text>
<text top="786" left="400" width="70" height="21" font="3">294610 ns</text>
<text top="786" left="509" width="70" height="21" font="3">310070 ns</text>
<text top="786" left="651" width="37" height="21" font="3">1,052</text>
<text top="806" left="221" width="153" height="21" font="3">Test 4 2774089,7 ns</text>
<text top="806" left="400" width="70" height="21" font="3">374600 ns</text>
<text top="806" left="509" width="70" height="21" font="3">378070 ns</text>
<text top="806" left="651" width="37" height="21" font="3">1,009</text>
<text top="856" left="378" width="193" height="21" font="3">Table 5.3: Tree test results</text>
<text top="888" left="362" width="293" height="21" font="3">GPU ﬂoat CBEA ﬂoat CBEA double</text>
<text top="908" left="294" width="40" height="21" font="3">WM1</text>
<text top="908" left="380" width="37" height="21" font="3">1,630</text>
<text top="908" left="477" width="37" height="21" font="3">1,130</text>
<text top="908" left="587" width="37" height="21" font="3">0,885</text>
<text top="929" left="294" width="40" height="21" font="3">WM2</text>
<text top="929" left="380" width="37" height="21" font="3">2,193</text>
<text top="929" left="477" width="37" height="21" font="3">1,036</text>
<text top="929" left="587" width="37" height="21" font="3">0,859</text>
<text top="949" left="294" width="50" height="21" font="3">IDCT1</text>
<text top="949" left="380" width="37" height="21" font="3">1,365</text>
<text top="949" left="477" width="37" height="21" font="3">5,997</text>
<text top="949" left="587" width="37" height="21" font="3">5,774</text>
<text top="969" left="294" width="50" height="21" font="3">IDCT2</text>
<text top="969" left="380" width="37" height="21" font="3">1,337</text>
<text top="969" left="477" width="37" height="21" font="3">5,155</text>
<text top="969" left="587" width="37" height="21" font="3">4,813</text>
<text top="990" left="294" width="40" height="21" font="3">Tree1</text>
<text top="990" left="380" width="37" height="21" font="3">3,848</text>
<text top="990" left="477" width="37" height="21" font="3">1,236</text>
<text top="990" left="587" width="37" height="21" font="3">1,142</text>
<text top="1010" left="294" width="40" height="21" font="3">Tree2</text>
<text top="1010" left="380" width="37" height="21" font="3">4,109</text>
<text top="1010" left="477" width="37" height="21" font="3">1,272</text>
<text top="1010" left="587" width="37" height="21" font="3">1,219</text>
<text top="1061" left="184" width="581" height="21" font="3">Table 5.4: Speed-ups when six work-items are used (compared to one work-item)</text>
</page>
<page number="46" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">32</text>
<text top="97" left="556" width="188" height="14" font="3">CHAPTER 5. TESTING</text>
<text top="464" left="275" width="41" height="17" font="15">Test 1</text>
<text top="464" left="390" width="41" height="17" font="15">Test 2</text>
<text top="464" left="504" width="41" height="17" font="15">Test 3</text>
<text top="464" left="618" width="41" height="17" font="15">Test 4</text>
<text top="444" left="220" width="8" height="17" font="15">0</text>
<text top="408" left="181" width="48" height="17" font="15">500000</text>
<text top="371" left="173" width="56" height="17" font="15">1000000</text>
<text top="335" left="173" width="56" height="17" font="15">1500000</text>
<text top="298" left="173" width="56" height="17" font="15">2000000</text>
<text top="262" left="173" width="56" height="17" font="15">2500000</text>
<text top="225" left="173" width="56" height="17" font="15">3000000</text>
<text top="509" left="291" width="63" height="17" font="15">GPU float</text>
<text top="509" left="377" width="72" height="17" font="15">CBEA float</text>
<text top="509" left="472" width="88" height="17" font="15">CBEA double</text>
<text top="373" left="153" width="0" height="15" font="26">T</text>
<text top="366" left="153" width="0" height="15" font="26">im</text>
<text top="350" left="153" width="0" height="15" font="26">e</text>
<text top="342" left="153" width="0" height="15" font="26"> in</text>
<text top="327" left="153" width="0" height="15" font="26"> n</text>
<text top="316" left="153" width="0" height="15" font="26">s</text>
<text top="567" left="229" width="378" height="21" font="3">Figure 5.3: Chart of run times for Tree method tests</text>
<text top="683" left="302" width="293" height="21" font="3">GPU ﬂoat CBEA ﬂoat CBEA double</text>
<text top="703" left="242" width="32" height="21" font="3">WM</text>
<text top="703" left="320" width="37" height="21" font="3">1,572</text>
<text top="703" left="417" width="37" height="21" font="3">1,208</text>
<text top="703" left="527" width="37" height="21" font="3">1,364</text>
<text top="724" left="242" width="42" height="21" font="3">IDCT</text>
<text top="724" left="320" width="37" height="21" font="3">1,014</text>
<text top="724" left="417" width="37" height="21" font="3">1,070</text>
<text top="724" left="527" width="37" height="21" font="3">1,009</text>
<text top="744" left="242" width="31" height="21" font="3">Tree</text>
<text top="744" left="320" width="37" height="21" font="3">1,087</text>
<text top="744" left="417" width="37" height="21" font="3">1,441</text>
<text top="744" left="527" width="37" height="21" font="3">1,605</text>
<text top="794" left="97" width="643" height="21" font="3">Table 5.5: Speed-ups when ten inner cycles were used in combination with six work-items</text>
<text top="910" left="302" width="293" height="21" font="3">GPU ﬂoat CBEA ﬂoat CBEA double</text>
<text top="931" left="242" width="32" height="21" font="3">WM</text>
<text top="931" left="320" width="37" height="21" font="3">1,168</text>
<text top="931" left="417" width="37" height="21" font="3">1,317</text>
<text top="931" left="527" width="37" height="21" font="3">1,404</text>
<text top="951" left="242" width="42" height="21" font="3">IDCT</text>
<text top="951" left="320" width="37" height="21" font="3">1,034</text>
<text top="951" left="417" width="37" height="21" font="3">1,244</text>
<text top="951" left="527" width="37" height="21" font="3">1,211</text>
<text top="971" left="242" width="31" height="21" font="3">Tree</text>
<text top="971" left="320" width="37" height="21" font="3">1,018</text>
<text top="971" left="417" width="37" height="21" font="3">1,401</text>
<text top="971" left="527" width="37" height="21" font="3">1,504</text>
<text top="1021" left="94" width="648" height="21" font="3">Table 5.6: Speed-ups when ten inner cycles were used in combination with one work-items</text>
</page>
<page number="47" position="absolute" top="0" left="0" height="1262" width="892">
<text top="97" left="149" width="113" height="14" font="3">5.2. RESULTS</text>
<text top="92" left="784" width="16" height="21" font="3">33</text>
<text top="153" left="149" width="21" height="21" font="9"><a href="pdfxml.html#45">5.2</a></text>
<text top="153" left="176" width="26" height="21" font="3">and</text>
<text top="153" left="208" width="21" height="21" font="9"><a href="pdfxml.html#45">5.3</a></text>
<text top="153" left="235" width="565" height="21" font="3">also the speed-up of CBEA processor using only single precision ﬂoating point</text>
<text top="174" left="149" width="651" height="21" font="3">values compared to using double precision ﬂoating point values is shown. It is evident that</text>
<text top="194" left="149" width="268" height="21" font="3">the impact isn’t too much signiﬁcant.</text>
<text top="218" left="175" width="105" height="21" font="3">From the table</text>
<text top="218" left="283" width="21" height="21" font="9"><a href="pdfxml.html#45">5.4</a></text>
<text top="218" left="304" width="496" height="21" font="3"><a href="pdfxml.html#45">, </a>where the speed-up of of using six work-items compared to one work-</text>
<text top="239" left="149" width="651" height="21" font="3">item, is evident that for the GPU the biggest speed-up occurred when using Tree method</text>
<text top="259" left="149" width="401" height="21" font="3">and for the CBEA processor when using IDCT method.</text>
<text top="283" left="175" width="625" height="21" font="3">The dominance of CBEA processor in the in the Tree tests can probably be explained</text>
<text top="304" left="149" width="484" height="21" font="3">by advanced jump prediction that is implemented in this processor.</text>
<text top="328" left="175" width="46" height="21" font="3">Tables</text>
<text top="328" left="225" width="21" height="21" font="9"><a href="pdfxml.html#46">5.5</a></text>
<text top="328" left="251" width="26" height="21" font="3">and</text>
<text top="328" left="282" width="21" height="21" font="9"><a href="pdfxml.html#46">5.6</a></text>
<text top="328" left="308" width="492" height="21" font="3">display the impact of data transfers from host to the OpenCL device.</text>
<text top="349" left="149" width="651" height="21" font="3">As it could have been expected the weight matrix method which transfers the biggest amount</text>
<text top="369" left="149" width="651" height="21" font="3">of data ended up being the worst (the speed-up is biggest). Also the diﬀerence between the</text>
<text top="389" left="149" width="651" height="21" font="3">two tested architectures is visible here - the GPU suﬀers less from the bigger amount of data</text>
<text top="410" left="149" width="405" height="21" font="3">transfers than CBEA processor which suﬀers a lot more.</text>
</page>
<page number="48" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">34</text>
<text top="97" left="556" width="188" height="14" font="3">CHAPTER 5. TESTING</text>
</page>
<page number="49" position="absolute" top="0" left="0" height="1262" width="892">
<text top="266" left="149" width="154" height="27" font="4"><b>Chapter 6</b></text>
<text top="343" left="149" width="200" height="33" font="6"><b>Conclusion</b></text>
<text top="440" left="149" width="651" height="21" font="3">The goal of this thesis was to design and implement a hyper neural network with use of</text>
<text top="460" left="149" width="651" height="21" font="3">OpenCL standard for its parallelization. The design of topology should have been oriented</text>
<text top="480" left="149" width="651" height="21" font="3">towards a topology with limited number of neuron’s inputs. Focus should have been on</text>
<text top="501" left="149" width="651" height="21" font="3">teaching algorithms that use genetic programming. The possibility of running the algorithm</text>
<text top="521" left="149" width="651" height="21" font="3">on more multi-core computers should have been taken in account. And ﬁnally performance</text>
<text top="541" left="149" width="476" height="21" font="3">testing of the implemented neural network should have been done.</text>
<text top="568" left="175" width="625" height="21" font="3">I think that the ﬁnal hierarchical topology of the neuron network that is presented in</text>
<text top="588" left="149" width="651" height="21" font="3">this thesis in in accordance with the assignment - the block that the topology consists of</text>
<text top="609" left="149" width="651" height="21" font="3">always have a chosen number of inputs that also limits the number of inputs of individual</text>
<text top="629" left="149" width="60" height="21" font="3">neurons.</text>
<text top="656" left="175" width="625" height="21" font="3">The implemented support for learning algorithms, although they were proven practically</text>
<text top="676" left="149" width="651" height="21" font="3">unusable (at least for now), also complies with the assignment. Implemented were two</text>
<text top="697" left="149" width="651" height="21" font="3">methods - the method that uses the discrete cosine transformation and the method that</text>
<text top="717" left="149" width="292" height="21" font="3">uses genetic evolution of trees of actions.</text>
<text top="744" left="175" width="625" height="21" font="3">Although it isn’t directly mentioned in this document, there shouldn’t be any problem</text>
<text top="764" left="149" width="651" height="21" font="3">with expanding this neural network for example with use of OpenMPI library to allow its</text>
<text top="784" left="149" width="302" height="21" font="3">operation in multi computer environment.</text>
<text top="811" left="175" width="625" height="21" font="3">Although only a limited number of tests was conducted, the performance of the core</text>
<text top="831" left="149" width="651" height="21" font="3">elements was tested. These tests have shown the architectural diﬀerences between the two</text>
<text top="852" left="149" width="651" height="21" font="3">platforms that they were conducted on as well as impact of diﬀerent conﬁgurations of the</text>
<text top="872" left="149" width="159" height="21" font="3">network and OpenCL.</text>
<text top="899" left="175" width="625" height="21" font="3">The biggest problem that I have encountered was during the work on this thesis that</text>
<text top="919" left="149" width="651" height="21" font="3">also prevents any real application of this network (at least for now) is the problem of rating</text>
<text top="940" left="149" width="651" height="21" font="3">complex genes that are used in this network. This problem is probably a result of the inside</text>
<text top="960" left="149" width="651" height="21" font="3">hierarchical design of the network. The design of the output of the network, when used the</text>
<text top="980" left="149" width="332" height="21" font="3">wrong way can make this problem even worse.</text>
<text top="1007" left="175" width="625" height="21" font="3">As for the hardware that I have used it might seem that the GPU based processors have</text>
<text top="1027" left="149" width="651" height="21" font="3">won on the ﬁeld of parallel computation. This doesn’t have to be completely true because,</text>
<text top="1048" left="149" width="651" height="21" font="3">as it is visible from the tests that I have conducted, special architectures like the CBEA</text>
<text top="1068" left="149" width="651" height="21" font="3">can be faster than them. Unfortunately these special architectures tend to go the closed</text>
<text top="1129" left="466" width="16" height="21" font="3">35</text>
</page>
<page number="50" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">36</text>
<text top="97" left="519" width="225" height="14" font="3">CHAPTER 6. CONCLUSION</text>
<text top="153" left="93" width="651" height="21" font="3">and proprietary way instead of being open and widely available which may eventually cause</text>
<text top="174" left="93" width="115" height="21" font="3">their extinction.</text>
<text top="198" left="118" width="625" height="21" font="3">Although I think that I have from the most part achieved the goals stated in the as-</text>
<text top="218" left="93" width="651" height="21" font="3">signment, I think that this theme isn’t even close to exhaust by this thesis. The main area</text>
<text top="239" left="93" width="651" height="21" font="3">where the most of the research can be done is the very area that caused my problems - the</text>
<text top="259" left="93" width="357" height="21" font="3">rating of complex genes in hierarchical structures.</text>
</page>
<page number="51" position="absolute" top="0" left="0" height="1262" width="892">
<text top="267" left="149" width="234" height="33" font="6"><b>Bibliography</b></text>
<text top="357" left="149" width="282" height="21" font="3">[1] BIEN, M. NetBeans OpenCL Pack.</text>
<text top="377" left="175" width="13" height="21" font="3"><a href="http://plugins.netbeans.org/download/plugin/40037">&lt;</a></text>
<text top="383" left="187" width="421" height="13" font="9"><a href="http://plugins.netbeans.org/download/plugin/40037">http://plugins.netbeans.org/download/plugin/40037</a></text>
<text top="377" left="608" width="17" height="21" font="3"><a href="http://plugins.netbeans.org/download/plugin/40037">&gt;.</a></text>
<text top="411" left="149" width="651" height="21" font="3">[2] GRAY, H. – LEWIS, W. H. <i>Gray’s Anatomy of the Human Body</i>. Phiadelphia, USA :</text>
<text top="432" left="175" width="608" height="21" font="3">Lea &amp; Febiger, 20th edition, 1918. Now in the Public Domain. Also can be found at:</text>
<text top="452" left="175" width="13" height="21" font="3"><a href="http://commons.wikimedia.org/wiki/File:Gray706.png">&lt;</a></text>
<text top="458" left="187" width="430" height="13" font="9"><a href="http://commons.wikimedia.org/wiki/File:Gray706.png">http://commons.wikimedia.org/wiki/File:Gray706.png</a></text>
<text top="452" left="617" width="17" height="21" font="3"><a href="http://commons.wikimedia.org/wiki/File:Gray706.png">&gt;.</a></text>
<text top="486" left="149" width="567" height="21" font="3">[3] IBM. Cell Broadband Engine Architecture, 2007. [Available on 27.12.2012]]</text>
<text top="506" left="175" width="13" height="21" font="3"><a href="https://www-01.ibm.com/chips/techlib/techlib.nsf/techdocs/1AEEE1270EA2776387257060006E61BA/$file/CBEA_v1.02_11Oct2007_pub.pdf">&lt;</a></text>
<text top="512" left="187" width="499" height="13" font="9"><a href="https://www-01.ibm.com/chips/techlib/techlib.nsf/techdocs/1AEEE1270EA2776387257060006E61BA/$file/CBEA_v1.02_11Oct2007_pub.pdf">https://www-01.ibm.com/chips/techlib/techlib.nsf/techdocs/</a></text>
<text top="532" left="175" width="576" height="13" font="9"><a href="https://www-01.ibm.com/chips/techlib/techlib.nsf/techdocs/1AEEE1270EA2776387257060006E61BA/$file/CBEA_v1.02_11Oct2007_pub.pdf">1AEEE1270EA2776387257060006E61BA/$file/CBEA_v1.02_11Oct2007_pub.pdf</a></text>
<text top="526" left="750" width="17" height="21" font="3"><a href="https://www-01.ibm.com/chips/techlib/techlib.nsf/techdocs/1AEEE1270EA2776387257060006E61BA/$file/CBEA_v1.02_11Oct2007_pub.pdf">&gt;.</a></text>
<text top="560" left="149" width="538" height="21" font="3">[4] IBM. Barcelona Super Computing site, 2008. [Available on 29.12.2012]]</text>
<text top="580" left="175" width="13" height="21" font="3"><a href="http://www.bsc.es/projects/deepcomputing/linuxoncell/cellsimulator/sdk3.1/CellSDK-Open-Fedora/cbea/">&lt;</a></text>
<text top="586" left="187" width="576" height="13" font="9"><a href="http://www.bsc.es/projects/deepcomputing/linuxoncell/cellsimulator/sdk3.1/CellSDK-Open-Fedora/cbea/">http://www.bsc.es/projects/deepcomputing/linuxoncell/cellsimulator/</a></text>
<text top="606" left="175" width="276" height="13" font="9"><a href="http://www.bsc.es/projects/deepcomputing/linuxoncell/cellsimulator/sdk3.1/CellSDK-Open-Fedora/cbea/">sdk3.1/CellSDK-Open-Fedora/cbea/</a></text>
<text top="601" left="451" width="17" height="21" font="3"><a href="http://www.bsc.es/projects/deepcomputing/linuxoncell/cellsimulator/sdk3.1/CellSDK-Open-Fedora/cbea/">&gt;.</a></text>
<text top="635" left="149" width="651" height="21" font="3">[5] IBM. OpenCL Development Kit for Linux on Power (download, login and registration</text>
<text top="655" left="175" width="272" height="21" font="3">is necessary, but free), February 2011.</text>
<text top="675" left="175" width="13" height="21" font="3"><a href="https://www14.software.ibm.com/webapp/iwm/web/reg/download.do?source=swg-open-cl&amp;S_PKG=dl&amp;lang=en_US&amp;cp=UTF-8">&lt;</a></text>
<text top="681" left="187" width="593" height="13" font="9"><a href="https://www14.software.ibm.com/webapp/iwm/web/reg/download.do?source=swg-open-cl&amp;S_PKG=dl&amp;lang=en_US&amp;cp=UTF-8">https://www14.software.ibm.com/webapp/iwm/web/reg/download.do?source=</a></text>
<text top="701" left="175" width="346" height="13" font="9"><a href="https://www14.software.ibm.com/webapp/iwm/web/reg/download.do?source=swg-open-cl&amp;S_PKG=dl&amp;lang=en_US&amp;cp=UTF-8">swg-open-cl&amp;S_PKG=dl&amp;lang=en_US&amp;cp=UTF-8</a></text>
<text top="695" left="520" width="17" height="21" font="3"><a href="https://www14.software.ibm.com/webapp/iwm/web/reg/download.do?source=swg-open-cl&amp;S_PKG=dl&amp;lang=en_US&amp;cp=UTF-8">&gt;.</a></text>
<text top="729" left="149" width="651" height="21" font="3">[6] KOUTNíK, J. – GOMEZ, F. – SCHMIDHUBER, J. Searching for Minimal Neural</text>
<text top="750" left="175" width="625" height="21" font="3">Networks in Fourier Space. In <i>Third Conference on Artiﬁcial General Intelligence</i>, 2010.</text>
<text top="783" left="149" width="292" height="21" font="3">[7] ORACLE. Java Developement Kit 7.</text>
<text top="804" left="175" width="13" height="21" font="3"><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">&lt;</a></text>
<text top="809" left="187" width="567" height="13" font="9"><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></text>
<text top="804" left="754" width="17" height="21" font="3"><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">&gt;.</a></text>
<text top="1129" left="466" width="16" height="21" font="3">37</text>
</page>
<page number="52" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">38</text>
<text top="97" left="613" width="131" height="14" font="3">BIBLIOGRAPHY</text>
</page>
<page number="53" position="absolute" top="0" left="0" height="1262" width="892">
<text top="264" left="149" width="187" height="27" font="4"><b>Appendix A</b></text>
<text top="340" left="149" width="208" height="33" font="6"><b>Installation</b></text>
<text top="442" left="149" width="37" height="19" font="1"><b>A.1</b></text>
<text top="442" left="210" width="590" height="19" font="1"><b>Installation of the IBM OpenCL Development Kit for</b></text>
<text top="468" left="210" width="167" height="19" font="1"><b>Linux on Power</b></text>
<text top="509" left="149" width="649" height="21" font="3">Here it is described how to install the IBM OpenCL Development Kit for Linux on Power.</text>
<text top="534" left="175" width="625" height="21" font="3">First of all you need to check if you have the supported version of Fedora distribution</text>
<text top="554" left="149" width="294" height="21" font="3">installed. You can check this by running:</text>
<text top="599" left="149" width="198" height="13" font="3">cat /etc/fedora-release</text>
<text top="632" left="149" width="643" height="21" font="3">If you ﬁnd out that you are running anything older than Fedora 9 you’ll have to upgrade.</text>
<text top="657" left="175" width="625" height="21" font="3">Now that you have a supported version of the Fedora distribution you can start with</text>
<text top="678" left="149" width="238" height="21" font="3">installing necessary prerequisites.</text>
<text top="703" left="175" width="420" height="21" font="3">First of all install numactl package from Fedora reposi<a href="pdfxml.html#53">tory</a></text>
<text top="704" left="595" width="6" height="11" font="11"><a href="pdfxml.html#53">1</a></text>
<text top="703" left="602" width="5" height="21" font="3"><a href="pdfxml.html#53">:</a></text>
<text top="747" left="149" width="198" height="13" font="3">yum install numactl.ppc</text>
<text top="781" left="175" width="625" height="21" font="3">Next you have to download some packages that used to be a part of IBM SDK for</text>
<text top="801" left="149" width="651" height="21" font="3">Multicore Acceleration 3.1. Sadly this SDK is no longer available from IBM. You can</text>
<text top="821" left="149" width="425" height="21" font="3">download these from the Barcelona Super Computing site <a href="pdfxml.html#51">[</a></text>
<text top="821" left="574" width="8" height="21" font="9"><a href="pdfxml.html#51">4</a></text>
<text top="821" left="582" width="202" height="21" font="3"><a href="pdfxml.html#51">]. </a>Download these packages:</text>
<text top="860" left="169" width="248" height="21" font="3">• ppu-binutils-2.18.50-21.ppc.rpm</text>
<text top="895" left="169" width="210" height="21" font="3">• ppu-gcc-4.1.1-166.ppc.rpm</text>
<text top="929" left="169" width="246" height="21" font="3">• spu-binutils-2.18.50-21.ppc.rpm</text>
<text top="964" left="169" width="207" height="21" font="3">• spu-gcc-4.1.1-166.ppc.rpm</text>
<text top="999" left="169" width="231" height="21" font="3">• spu-newlib-1.16.0-17.ppc.rpm</text>
<text top="1038" left="149" width="205" height="21" font="3">And install them by running</text>
<text top="1072" left="168" width="5" height="8" font="5">1</text>
<text top="1074" left="174" width="193" height="12" font="12">you need root privileges for this</text>
<text top="1129" left="466" width="16" height="21" font="3">39</text>
</page>
<page number="54" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">40</text>
<text top="97" left="498" width="246" height="14" font="3">APPENDIX A. INSTALLATION</text>
<text top="159" left="93" width="103" height="13" font="3">rpm -i *.rpm</text>
<text top="191" left="93" width="336" height="21" font="3">in the directory you have downloaded them to.</text>
<text top="216" left="118" width="625" height="21" font="3">Now you need to download the IBM OpenCL Development Kit for Linux on Power from</text>
<text top="236" left="93" width="42" height="21" font="3">IBM <a href="pdfxml.html#51">[</a></text>
<text top="236" left="136" width="8" height="21" font="9"><a href="pdfxml.html#51">5</a></text>
<text top="236" left="144" width="403" height="21" font="3"><a href="pdfxml.html#51">]. </a>You need to download only OpenCL-0.3.linux.ppc.iso.</text>
<text top="260" left="118" width="314" height="21" font="3">With root privileges mount downloaded iso:</text>
<text top="304" left="93" width="369" height="13" font="3">mount –o loop OpenCL-0.3.linux.ppc.iso /mnt</text>
<text top="336" left="93" width="268" height="21" font="3">and start the installation by running:</text>
<text top="380" left="93" width="129" height="13" font="3">/mnt/install.sh</text>
<text top="412" left="93" width="516" height="21" font="3">After successful installation you can unmount the iso image by running:</text>
<text top="455" left="93" width="95" height="13" font="3">umount /mnt</text>
<text top="506" left="93" width="37" height="19" font="1"><b>A.2</b></text>
<text top="506" left="154" width="456" height="19" font="1"><b>Installation of the NetBeans OpenCL Pack</b></text>
<text top="546" left="93" width="651" height="21" font="3">As a pre-requirement to this I expect you to have Netbeans 7.0.1 installed and working on</text>
<text top="566" left="93" width="101" height="21" font="3">your machine.</text>
<text top="590" left="118" width="511" height="21" font="3">Download the Netbeans OpenCL Pack plug-in from the Netbeans site <a href="pdfxml.html#51">[</a></text>
<text top="590" left="630" width="8" height="21" font="9"><a href="pdfxml.html#51">1</a></text>
<text top="590" left="638" width="102" height="21" font="3"><a href="pdfxml.html#51">] </a>and unzip it.</text>
<text top="615" left="118" width="625" height="21" font="3">This plug-in requires you to run Netbeans on Oracle Java 7. You can download it from</text>
<text top="635" left="93" width="5" height="21" font="3"><a href="pdfxml.html#51">[</a></text>
<text top="635" left="98" width="8" height="21" font="9"><a href="pdfxml.html#51">7</a></text>
<text top="635" left="106" width="638" height="21" font="3"><a href="pdfxml.html#51">]. </a>I would advice downloading the binary installer version, since then you’ll have Java 7</text>
<text top="656" left="93" width="583" height="21" font="3">in one speciﬁc directory and it won’t interfere with your current Java <a href="pdfxml.html#54">installation</a></text>
<text top="657" left="676" width="6" height="11" font="11"><a href="pdfxml.html#54">2</a></text>
<text top="656" left="683" width="5" height="21" font="3"><a href="pdfxml.html#54">.</a></text>
<text top="680" left="118" width="447" height="21" font="3">Now, to run Netbeans using your new Java 7 you can execute:</text>
<text top="723" left="93" width="515" height="13" font="3">/bin/sh &#34;&lt;Netbeans Home&gt;/bin/netbeans&#34; --jdkhome &lt;JDK7 Home&gt;</text>
<text top="756" left="93" width="651" height="21" font="3">where &lt;Netbeans Home&gt; stands for the path to your Netbeans installation and &lt;JDK7</text>
<text top="776" left="93" width="309" height="21" font="3">Home&gt; stands for your Java 7 installation.</text>
<text top="800" left="118" width="625" height="21" font="3">Now that you are running Netbeans on Java 7, you can add the Netbeans OpenCL Pack</text>
<text top="821" left="93" width="651" height="21" font="3">plug-in to your Netbeans installation. Start Netbeans and go to click &#34;Plugins&#34; choice in the</text>
<text top="841" left="93" width="651" height="21" font="3">&#34;Tools&#34; menu. There navigate to &#34;Downloaded&#34; tab and click the &#34;Add Plugins&#34; button. In</text>
<text top="861" left="93" width="376" height="21" font="3">the window that appears select the unpacked plug-in</text>
<text top="863" left="474" width="6" height="11" font="11"><a href="pdfxml.html#54">3</a></text>
<text top="861" left="481" width="263" height="21" font="3"><a href="pdfxml.html#54">, </a>click the &#34;Install&#34; button and follow</text>
<text top="882" left="93" width="117" height="21" font="3">the instructions.</text>
<text top="1039" left="112" width="5" height="8" font="5">2</text>
<text top="1041" left="118" width="626" height="12" font="12">There were problems with running certain Java applications on Java 7 at the time of writing of this</text>
<text top="1058" left="93" width="59" height="12" font="12">document</text>
<text top="1072" left="112" width="5" height="8" font="5">3</text>
<text top="1074" left="118" width="91" height="12" font="12">Four .nbm ﬁles</text>
</page>
<page number="55" position="absolute" top="0" left="0" height="1262" width="892">
<text top="263" left="149" width="185" height="27" font="4"><b>Appendix B</b></text>
<text top="337" left="149" width="473" height="33" font="6"><b>The List of Abbreviations</b></text>
<text top="434" left="149" width="38" height="15" font="8"><b>PPE</b></text>
<text top="430" left="195" width="215" height="21" font="3">- PowerPC Processor Element</text>
<text top="467" left="149" width="38" height="15" font="8"><b>SPU</b></text>
<text top="463" left="195" width="200" height="21" font="3">- Synergistic Processor Unit</text>
<text top="500" left="149" width="36" height="15" font="8"><b>SPE</b></text>
<text top="495" left="193" width="227" height="21" font="3">- Synergistic Processor Element</text>
<text top="532" left="149" width="43" height="15" font="8"><b>MFC</b></text>
<text top="528" left="200" width="188" height="21" font="3">- Memory Flow Controller</text>
<text top="565" left="149" width="28" height="15" font="8"><b>IIC</b></text>
<text top="561" left="186" width="216" height="21" font="3">- Internal Interrupt Controller</text>
<text top="597" left="149" width="50" height="15" font="8"><b>MMU</b></text>
<text top="593" left="207" width="205" height="21" font="3">- Memory Management Unit</text>
<text top="630" left="149" width="45" height="15" font="8"><b>RMT</b></text>
<text top="626" left="202" width="245" height="21" font="3">- Replacement Management Table</text>
<text top="663" left="149" width="54" height="15" font="8"><b>CBEA</b></text>
<text top="659" left="211" width="273" height="21" font="3">- Cell Broadband Engine Architecture</text>
<text top="695" left="149" width="33" height="15" font="8"><b>PS3</b></text>
<text top="691" left="190" width="106" height="21" font="3">- Playstation 3</text>
<text top="728" left="149" width="24" height="15" font="8"><b>2D</b></text>
<text top="724" left="181" width="126" height="21" font="3">- two dimensional</text>
<text top="761" left="149" width="41" height="15" font="8"><b>DCT</b></text>
<text top="757" left="198" width="225" height="21" font="3">- discrete cosine transformation</text>
<text top="793" left="149" width="48" height="15" font="8"><b>IDCT</b></text>
<text top="789" left="206" width="280" height="21" font="3">- inverse discrete cosine transformation</text>
<text top="826" left="149" width="37" height="15" font="8"><b>WM</b></text>
<text top="822" left="195" width="110" height="21" font="3">- weight matrix</text>
<text top="859" left="149" width="30" height="15" font="8"><b>JIT</b></text>
<text top="854" left="187" width="193" height="21" font="3">- Just In Time compilation</text>
<text top="891" left="149" width="54" height="15" font="8"><b>CBEA</b></text>
<text top="887" left="211" width="273" height="21" font="3">- Cell Broadband Engine Architecture</text>
<text top="924" left="149" width="42" height="15" font="8"><b>GPU</b></text>
<text top="920" left="199" width="193" height="21" font="3">- Graphics Processing Unit</text>
<text top="956" left="149" width="70" height="15" font="8"><b>GPGPU</b></text>
<text top="952" left="227" width="416" height="21" font="3">- General-purpose computing on graphics processing units</text>
<text top="989" left="149" width="40" height="15" font="8"><b>SDK</b></text>
<text top="985" left="197" width="200" height="21" font="3">- Software Development Kit</text>
<text top="1022" left="149" width="33" height="15" font="8"><b>EIB</b></text>
<text top="1018" left="190" width="219" height="21" font="3">- Element Interconnection Bus</text>
<text top="1054" left="149" width="50" height="15" font="8"><b>SIMD</b></text>
<text top="1050" left="207" width="244" height="21" font="3">- Single Instruction Multiple Data</text>
<text top="1129" left="466" width="16" height="21" font="3">41</text>
</page>
<page number="56" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="3">42</text>
<text top="97" left="371" width="373" height="14" font="3">APPENDIX B. THE LIST OF ABBREVIATIONS</text>
</page>
<page number="57" position="absolute" top="0" left="0" height="1262" width="892">
<text top="264" left="149" width="186" height="27" font="4"><b>Appendix C</b></text>
<text top="338" left="149" width="356" height="33" font="6"><b>The Content of CD</b></text>
<text top="433" left="169" width="68" height="21" font="3">• Source</text>
<text top="470" left="208" width="9" height="15" font="8"><b>–</b></text>
<text top="466" left="226" width="550" height="21" font="3">source.tar.bz2 that contains complete source code with project for Netbeans.</text>
<text top="500" left="169" width="94" height="21" font="3">• Document</text>
<text top="538" left="208" width="9" height="15" font="8"><b>–</b></text>
<text top="534" left="226" width="407" height="21" font="3">document.tar.bz2 that contains sources of this document</text>
<text top="564" left="208" width="9" height="15" font="8"><b>–</b></text>
<text top="560" left="226" width="282" height="21" font="3">sindefra-hyperneural.pdf this document</text>
<text top="1129" left="466" width="16" height="21" font="3">43</text>
</page>
</pdf2xml>
