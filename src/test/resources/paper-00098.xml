<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="989" width="644">
	<fontspec id="0" size="10" family="Times" color="#000000"/>
	<fontspec id="1" size="21" family="Times" color="#000000"/>
	<fontspec id="2" size="14" family="Times" color="#ffffff"/>
	<fontspec id="3" size="13" family="Times" color="#000000"/>
	<fontspec id="4" size="12" family="Times" color="#000000"/>
	<fontspec id="5" size="12" family="Times" color="#000000"/>
	<fontspec id="6" size="16" family="Times" color="#000000"/>
	<fontspec id="7" size="11" family="Times" color="#000000"/>
	<fontspec id="8" size="7" family="Times" color="#000000"/>
<text top="915" left="74" width="383" height="11" font="0">Z. Qian et al. (Eds.): Recent Advances in CSIE 2011, LNEE 125, pp. 555<a href="pdfxml.html#9">–563.</a> </text>
<text top="929" left="74" width="384" height="11" font="0">springerlink.com                                            © Springer-Verlag Berlin Heidelberg 2012 </text>
<text top="81" left="74" width="450" height="22" font="1"><b>The Research of Web Security Model Based</b></text>
<text top="75" left="524" width="8" height="15" font="2"><b>1</b></text>
<text top="81" left="533" width="18" height="22" font="1"><b>   </b></text>
<text top="110" left="74" width="325" height="22" font="1"><b>on JavaScript Hijacking Attack</b></text>
<text top="105" left="398" width="8" height="14" font="3"><b>*</b></text>
<text top="110" left="407" width="6" height="22" font="1"><b> </b></text>
<text top="170" left="74" width="392" height="14" font="4">Zhiguang Wang, Chongyang Bi, Wei Wang, and Pingping Dong </text>
<text top="368" left="74" width="497" height="14" font="5"><b>Abstract.</b> The era of Web 2.0 has come, which provides users with a large num-</text>
<text top="384" left="74" width="503" height="14" font="4">ber of interactive features. But network attacks also come thick and fast, which </text>
<text top="400" left="74" width="502" height="14" font="4">pose a threat to network security. By simply expounding related network security </text>
<text top="417" left="74" width="503" height="14" font="4">strategy, introducing the principle of JavaScript Hijacking attacks, and proposing </text>
<text top="433" left="74" width="504" height="14" font="4">preventive measures, this paper has a practice of network security on a certain </text>
<text top="450" left="74" width="107" height="14" font="4">guiding function. </text>
<text top="482" left="74" width="327" height="14" font="5"><b>Keywords: </b>JavaScript Hijacking, Prevention, Attack. </text>
<text top="527" left="74" width="138" height="16" font="6"><b>1   Introduction </b></text>
<text top="566" left="74" width="502" height="14" font="4">In recent years, the network has launched a wave of Web 2.0 development boom </text>
<text top="584" left="74" width="498" height="14" font="4">(Web 2.0 is the business revolution in the computer industry[1]), and many web-</text>
<text top="602" left="74" width="497" height="14" font="4">sites have introduced the concept of Web 2.0, providing a large number of interac-</text>
<text top="620" left="74" width="502" height="14" font="4">tive features. At the same time, these sites are also likely to suffer from JavaScript </text>
<text top="638" left="74" width="502" height="14" font="4">Hijacking attacks, which can steal a user’s privacy information from the server on </text>
<text top="656" left="74" width="502" height="14" font="4">the network and result in a great threat. JavaScript Hijacking was first discovered </text>
<text top="674" left="74" width="498" height="14" font="4">by Jeremiah Grossman, who confirmed the attack in his Google Gmail[2]. As ear-</text>
<text top="692" left="74" width="498" height="14" font="4">ly as 2007, JavaScript Hijacking has been recognized as a high hazard level of at-</text>
<text top="710" left="74" width="481" height="14" font="4">tack by CAPCE (Common Attack Pattern Enumeration and Classification)[3].   </text>
<text top="728" left="91" width="481" height="14" font="4">This paper will briefly discuss network security strategy and introduce the prin-</text>
<text top="746" left="74" width="501" height="14" font="4">ciple of JavaScript Hijacking attack, the similarities and differences with CSRF, as </text>
<text top="764" left="74" width="288" height="14" font="4">well as the corresponding preventive measures. </text>
<text top="792" left="74" width="220" height="14" font="4">                                                           </text>
<text top="809" left="74" width="91" height="12" font="7">Zhiguang Wang </text>
<text top="824" left="74" width="480" height="12" font="7">Dept of Computer Science &amp; Technology China University of Petroleum Beijing, China </text>
<text top="840" left="74" width="191" height="12" font="7">e-mail: wzg0202@cup.edu.cn </text>
<text top="856" left="74" width="3" height="12" font="7"> </text>
<text top="869" left="74" width="5" height="8" font="8">*</text>
<text top="872" left="78" width="491" height="12" font="7"> The paper is supported by the National Natural Science Foundation of China (60803159). </text>
</page>
<page number="2" position="absolute" top="0" left="0" height="989" width="644">
	<fontspec id="9" size="16" family="Times" color="#000000"/>
<text top="40" left="74" width="24" height="12" font="7">556 </text>
<text top="40" left="495" width="77" height="12" font="7">Z. Wang et al.</text>
<text top="57" left="91" width="4" height="14" font="4"> </text>
<text top="79" left="74" width="150" height="16" font="6"><b>2   Web Security </b></text>
<text top="122" left="74" width="93" height="16" font="9"><i><b>2.1   SOP </b></i></text>
<text top="154" left="74" width="501" height="14" font="4">SOP (SOP, The Same Origin Policy) is an important security metrics of client-side </text>
<text top="171" left="74" width="504" height="14" font="4">scripting (especially JavaScript, VbSrcipt, etc.)[4]. It is the first from Netscape </text>
<text top="188" left="74" width="502" height="14" font="4">Navigator2.0, and its core content as follows: same protocol, same domain name </text>
<text top="205" left="74" width="497" height="14" font="4">and same port. Its purpose is to prevent a document or script loaded from a num-</text>
<text top="223" left="74" width="498" height="14" font="4">ber of different sources, in other words, client-side script only can be read or mod-</text>
<text top="240" left="74" width="264" height="14" font="4">ified with homologous cookie or message.   </text>
<text top="257" left="91" width="485" height="14" font="4">SOP, to a large extent, ensures the security of Web applications, but it merely </text>
<text top="274" left="74" width="497" height="14" font="4">prevents the client-side script to access the content from non-homologous web-</text>
<text top="292" left="74" width="503" height="14" font="4">sites. Many attacks would still be able to bypass the same origin policy, in other </text>
<text top="309" left="74" width="502" height="14" font="4">words, client-side script can launch attacks through the non-homologous website. </text>
<text top="326" left="74" width="483" height="14" font="4">JavaScript Hijacking also takes advantage of this flaw to make SOP do nothing. </text>
<text top="371" left="74" width="207" height="16" font="9"><i><b>2.2   Web Authentication </b></i></text>
<text top="409" left="74" width="498" height="14" font="4">As we all know, Http is a stateless protocol and different &#34;request / response&#34; opera-</text>
<text top="426" left="74" width="498" height="14" font="4">tions are independent, which could do nothing with non-connected state of the main-</text>
<text top="444" left="74" width="502" height="14" font="4">tenance and management. In order to get a user-friendly interface in Web 2.0, many </text>
<text top="461" left="74" width="498" height="14" font="4">websites use cookie for user identity authentication. If someone visits a website us-</text>
<text top="478" left="74" width="502" height="14" font="4">ing cookie, the site will save a cookie on the client-side after the completion of the </text>
<text top="495" left="74" width="501" height="14" font="4">authentication. Thus, if the user does not appear to exit the site, or the cookie has not </text>
<text top="513" left="74" width="503" height="14" font="4">expired, the user would not need to verify identity when visiting the same website </text>
<text top="530" left="74" width="498" height="14" font="4">next time. The principle of cookie mechanism is very simple--bringing a user-</text>
<text top="547" left="74" width="395" height="14" font="4">friendly interface. But it also leads to a lot of security implications. </text>
<text top="564" left="91" width="488" height="14" font="4">In order to convenience users, many browsers at present are multi-tabbed </text>
<text top="582" left="74" width="506" height="14" font="4">browsing, for example, Maxthon, Firefox, Opera, Chrome and so on. These </text>
<text top="599" left="74" width="502" height="14" font="4">browsers are more or less at security risk, for they run a single process and share </text>
<text top="616" left="74" width="497" height="14" font="4">the cookie between pages in each window or tab. Thus, websites containing mali-</text>
<text top="633" left="74" width="497" height="14" font="4">cious code can use cookie for the theft of private information. Recently the so-</text>
<text top="651" left="74" width="498" height="14" font="4">called “Cookie poison” and “Cookie Thief” could steal cookie, including the con-</text>
<text top="668" left="74" width="501" height="14" font="4">tent of session cookie, which causes great personal worries on private information. </text>
<text top="685" left="74" width="502" height="14" font="4">And so is the theory of JavaScript Hijacking. In addition to cookie, browsers will </text>
<text top="702" left="74" width="504" height="14" font="4">“smartly” and automatically add SSL authentication information to third party, </text>
<text top="720" left="74" width="502" height="14" font="4">and attach it to other web authentication request, even if they use Secure Sockets </text>
<text top="737" left="74" width="220" height="14" font="4">(SSL) to encrypt the connection [5]. </text>
<text top="782" left="74" width="90" height="16" font="9"><i><b>2.3   P3P </b></i></text>
<text top="820" left="74" width="502" height="14" font="4">As the existing security problems in cookie, P3P comes into being in the aspect of </text>
<text top="837" left="74" width="497" height="14" font="4">privacy protection. P3P (Platform for Privacy Preferences Project) is a recom-</text>
<text top="854" left="74" width="501" height="14" font="4">mended standard of privacy protection published by World Wide Web Consortium </text>
</page>
<page number="3" position="absolute" top="0" left="0" height="989" width="644">
<text top="40" left="74" width="417" height="12" font="7">The Research of Web Security Model Based on JavaScript Hijacking Attack </text>
<text top="40" left="551" width="20" height="12" font="7">557</text>
<text top="57" left="91" width="4" height="14" font="4"> </text>
<text top="78" left="74" width="502" height="14" font="4">(W3C), it provides a standard machine-readable format for the privacy policy, as </text>
<text top="95" left="74" width="505" height="14" font="4">well as an agreement which enables browsers automatically read and process </text>
<text top="112" left="74" width="497" height="14" font="4">strategies [6]. Now a lot of websites, especially the ones with commercial charac-</text>
<text top="130" left="74" width="505" height="14" font="4">ter, would “transparently” collect users’ information for commercial purposes </text>
<text top="147" left="74" width="259" height="14" font="4">when they visit. Such as online shopping.   </text>
<text top="164" left="91" width="486" height="14" font="4">We will often see the following tips: Customers Who Bought This Item Also </text>
<text top="181" left="74" width="503" height="14" font="4">Bought. However, this will reveal users’ privacy. Developing P3P standard is to </text>
<text top="199" left="74" width="503" height="14" font="4">reduce the concerns triggered by violations of the websites which collect users’ </text>
<text top="216" left="74" width="503" height="14" font="4">privacy information. P3P standard’s idea is: Website’s privacy policy should tell </text>
<text top="233" left="74" width="501" height="14" font="4">the users the type of the information collected by the website, who will receive the </text>
<text top="250" left="74" width="497" height="14" font="4">information, how long the information will be retained and what the mode of us-</text>
<text top="267" left="74" width="502" height="14" font="4">ing the information[7]. Users who visit the website supporting P3P have the right </text>
<text top="285" left="74" width="498" height="14" font="4">to view the site’s privacy reports, and decide whether to accept the cookie conti-</text>
<text top="302" left="74" width="122" height="14" font="4">nually visit the site. </text>
<text top="319" left="91" width="480" height="14" font="4">To a certain extent, P3P has brought the gospel for the web application’s priva-</text>
<text top="337" left="74" width="502" height="14" font="4">cy protection. However, its flaw is also obvious. For P3P is included in the HTTP </text>
<text top="354" left="74" width="503" height="14" font="4">header, if the user allow it to access to his privacy, the browser reading the P3P </text>
<text top="371" left="74" width="502" height="14" font="4">would be tantamount to allowing access of a third party cookie (from other cookie </text>
<text top="388" left="74" width="502" height="14" font="4">rather than the current visit to the site) . So the site including malicious code can </text>
<text top="406" left="74" width="502" height="14" font="4">attack vulnerable site or get user’s private information through the means such as </text>
<text top="423" left="74" width="453" height="14" font="4">cross-domain. JavaScript Hijacking can also achieve its aim in such a way. </text>
<text top="468" left="74" width="104" height="16" font="9"><i><b>2.4   JSON </b></i></text>
<text top="506" left="74" width="474" height="14" font="4">JSON (JavaScript Object Notation) is a lightweight data interchange format</text>
<text top="503" left="548" width="5" height="9" font="8">8</text>
<text top="506" left="553" width="25" height="14" font="4">. It </text>
<text top="523" left="74" width="503" height="14" font="4">consists of key-value pairs, or arrays, different values are separated by commas, </text>
<text top="540" left="74" width="503" height="14" font="4">which simplifies the data access. JSON has the advantage: it is more convenient </text>
<text top="557" left="74" width="497" height="14" font="4">than the DOM (Document Object Model), and has small data size, fast transmis-</text>
<text top="575" left="74" width="501" height="14" font="4">sion, without the similar open-closing tags of XML elements. JSON is originally a </text>
<text top="592" left="74" width="503" height="14" font="4">safe JavaScript subset and does not contain assignment and calling. We use the </text>
<text top="609" left="74" width="503" height="14" font="4">Eval() function in JavaScript to analyze and parse JSON data, however if JSON </text>
<text top="626" left="74" width="502" height="14" font="4">contains malicious code, it may bring unexpected security issues. An attacker can </text>
<text top="644" left="74" width="501" height="14" font="4">also use this function to send malicious JSON data, so that the Eval() function will </text>
<text top="661" left="74" width="497" height="14" font="4">parse these malicious code. The principle of JavaScript Hijacking is to use the fea-</text>
<text top="678" left="74" width="502" height="14" font="4">ture of JSON arrays which can be parsed in browsers. But it receives the returned </text>
<text top="696" left="74" width="371" height="14" font="4">JSON array from the server instead of sending a JSON array. </text>
<text top="741" left="74" width="386" height="16" font="6"><b>3   The Principle of Javascript Hijacking Attack </b></text>
<text top="788" left="74" width="180" height="16" font="9"><i><b>3.1   Javascript Hook </b></i></text>
<text top="826" left="74" width="502" height="14" font="4">To put it simply, JavaScript Hook is to cover the original function, similar to the </text>
<text top="843" left="74" width="498" height="14" font="4">concept of high-level programming language. The Object provides JavaScript ob-</text>
<text top="861" left="74" width="502" height="14" font="4">jects with common functions. FireFox supports __defineSetter__ function in order </text>
</page>
<page number="4" position="absolute" top="0" left="0" height="989" width="644">
	<fontspec id="10" size="16" family="Times" color="#000000"/>
	<fontspec id="11" size="11" family="Times" color="#000000"/>
<text top="40" left="74" width="24" height="12" font="7">558 </text>
<text top="40" left="495" width="77" height="12" font="7">Z. Wang et al.</text>
<text top="57" left="91" width="4" height="14" font="4"> </text>
<text top="78" left="74" width="504" height="14" font="4">to set the properties of an object. By using Object.prototype. __defineSetter__ </text>
<text top="95" left="74" width="502" height="14" font="4">function, JavaScript Hijacking overwrites the original default function. Thus when </text>
<text top="112" left="74" width="502" height="14" font="4">making use of eval () function to resolve JSON array, the overridden function will </text>
<text top="130" left="74" width="492" height="14" font="4">automatically be called, which can get the private information of the JSON array. </text>
<text top="175" left="74" width="302" height="16" font="9"><i><b>3.2   JavaScript Hijacking Conditions </b></i></text>
<text top="213" left="74" width="498" height="14" font="4">From the analysis above, in order to obtain privacy information, JavaScript Hi-</text>
<text top="230" left="74" width="360" height="14" font="4">jacking needs certain conditions, approximately as follows: </text>
<text top="247" left="91" width="433" height="14" font="4">A malicious site attacks on private information and has specific target.   </text>
<text top="264" left="91" width="484" height="14" font="4">Browser should support JavaScript. Modern browsers mostly support this script </text>
<text top="282" left="74" width="456" height="14" font="4">language, and users basically do not forbid the browser to parse JavaScript. </text>
<text top="299" left="91" width="487" height="14" font="4">Attacked vulnerable site should return JSON array instead of JSON objects. </text>
<text top="316" left="74" width="503" height="14" font="4">Because JSON array is considered to be an executable JavaScript script that the </text>
<text top="333" left="74" width="504" height="14" font="4">browser will execute, while the JSON objects do not. The malicious site also </text>
<text top="350" left="74" width="257" height="14" font="4">needs to know the format of JSON array.   </text>
<text top="368" left="91" width="481" height="14" font="4">Vulnerable site only responds to GET requests, that is, if sending POST re-</text>
<text top="385" left="74" width="278" height="14" font="4">quest, the vulnerable site will not be attacked. </text>
<text top="402" left="91" width="284" height="14" font="4">The attack requires a specific browser support. </text>
<text top="447" left="74" width="172" height="16" font="9"><i><b>3.3   Attack Analysis </b></i></text>
<text top="485" left="74" width="356" height="14" font="4">Figure 1 shows the whole process of JavaScript Hijacking. </text>
<text top="503" left="91" width="5" height="16" font="10"> </text>
<text top="648" left="433" width="4" height="14" font="4"> </text>
<text top="670" left="74" width="188" height="12" font="11"><b>Fig. 1 </b>JavaScript Hijacking attack </text>
<text top="705" left="91" width="219" height="14" font="4">The victim visits a vulnerable site </text>
<text top="702" left="310" width="267" height="19" font="4">（http://www.vulnerable.com/）, and logs </text>
<text top="723" left="74" width="145" height="14" font="4">in through legal means. </text>
<text top="741" left="91" width="486" height="14" font="4">Vulnerable site audits the victim’s request, and response the browser with an </text>
<text top="758" left="74" width="92" height="14" font="4">authentication. </text>
<text top="775" left="91" width="485" height="14" font="4">Before exiting the vulnerable site, the victim opens a browser tab, and visits a </text>
<text top="792" left="74" width="498" height="14" font="4">malicious web site (http://www.attack.com/). The malicious site has settled up ma-</text>
<text top="809" left="74" width="497" height="14" font="4">licious code, once the object is setting ‘LoginTime’ property, it will trigger the ex-</text>
<text top="827" left="74" width="184" height="14" font="4">ecution of the following code: </text>
<text top="844" left="91" width="4" height="14" font="4"> </text>
<text top="861" left="91" width="4" height="14" font="4"> </text>
</page>
<page number="5" position="absolute" top="0" left="0" height="989" width="644">
<text top="40" left="74" width="417" height="12" font="7">The Research of Web Security Model Based on JavaScript Hijacking Attack </text>
<text top="40" left="551" width="20" height="12" font="7">559</text>
<text top="57" left="91" width="4" height="14" font="4"> </text>
<text top="78" left="91" width="288" height="12" font="4">&lt;script type=”text/javascript”&gt; </text>
<text top="95" left="91" width="423" height="12" font="4">Object.prototype.__defineSetter__(‘LoginTime’, </text>
<text top="112" left="91" width="135" height="12" font="4">function(obj){ </text>
<text top="129" left="91" width="180" height="12" font="4">var objString = “”; </text>
<text top="146" left="91" width="180" height="12" font="4">for (fld in this) { </text>
<text top="163" left="91" width="396" height="12" font="4">objString += fld + “: ” + this[fld] + “, ”; </text>
<text top="180" left="91" width="18" height="12" font="4">} </text>
<text top="197" left="91" width="261" height="12" font="4">objString += “Time: ” + obj; </text>
<text top="214" left="91" width="162" height="12" font="4">alert(objString); </text>
<text top="231" left="91" width="36" height="12" font="4">}); </text>
<text top="248" left="91" width="90" height="12" font="4">&lt;/script&gt; </text>
<text top="265" left="91" width="279" height="12" font="4">&lt;script type=“text/javascript” </text>
<text top="282" left="91" width="279" height="12" font="4">src=“http://www.vulnerable.com </text>
<text top="299" left="91" width="351" height="12" font="4">/Default.aspx?oper=details”&gt; &lt;/script&gt; </text>
<text top="316" left="91" width="9" height="12" font="4"> </text>
<text top="333" left="91" width="497" height="14" font="4">The malicious site sends a request to obtain vulnerable site’s </text>
<text top="350" left="74" width="216" height="14" font="4">(http://www.vulnerable.com/) data. </text>
<text top="367" left="91" width="480" height="14" font="4">Because the victim does not exit the vulnerable site, the browser using the un-</text>
<text top="384" left="74" width="505" height="14" font="4">expired authentication information sends a GET request to the vulnerable site </text>
<text top="402" left="74" width="187" height="14" font="4">(http://www.vulnerable.com/). </text>
<text top="419" left="91" width="480" height="14" font="4">The vulnerable site audits the authentication, and returns a JSON array accord-</text>
<text top="436" left="74" width="111" height="14" font="4">ing to the request. </text>
<text top="453" left="91" width="4" height="14" font="4"> </text>
<text top="471" left="91" width="288" height="12" font="4">&lt;script type=“text/javascript”&gt; </text>
<text top="488" left="91" width="108" height="12" font="4">var object; </text>
<text top="505" left="91" width="288" height="12" font="4">var req = new XMLHttpRequest(); </text>
<text top="522" left="91" width="459" height="12" font="4">req.open(“GET”, “Default.aspx?oper=details”,true); </text>
<text top="539" left="91" width="351" height="12" font="4">req.onreadystatechange = function () { </text>
<text top="556" left="91" width="243" height="12" font="4">if (req.readyState == 4) { </text>
<text top="573" left="91" width="252" height="12" font="4">var txt = req.responseText; </text>
<text top="590" left="91" width="297" height="12" font="4">object = eval(“ (“ + txt + “)”); </text>
<text top="607" left="91" width="108" height="12" font="4">req = null; </text>
<text top="624" left="91" width="36" height="12" font="4">}}; </text>
<text top="641" left="91" width="144" height="12" font="4">req.send(null); </text>
<text top="658" left="91" width="90" height="12" font="4">&lt;/script&gt; </text>
<text top="675" left="91" width="9" height="12" font="4"> </text>
<text top="692" left="91" width="487" height="14" font="4">The browser receives the response from the vulnerable site and sends JSON </text>
<text top="709" left="74" width="386" height="14" font="4">messages to the malicious site. JSON information is as follows: </text>
<text top="725" left="91" width="3" height="11" font="0"> </text>
<text top="740" left="91" width="505" height="12" font="4">[{“UserName”: “JhonSmith”, “Password”:“JhonSmith”, </text>
<text top="757" left="74" width="450" height="12" font="4">“Balance”: “1234.56”, “LoginTime”: “2009.07.22”}] </text>
<text top="774" left="91" width="9" height="12" font="4"> </text>
<text top="791" left="91" width="481" height="14" font="4">Now, the malicious site obtains the victim’s private information on the vulner-</text>
<text top="808" left="74" width="501" height="14" font="4">able site. Its attack way is very similar with the principle of CSRF, but by different </text>
<text top="825" left="74" width="46" height="14" font="4">means. </text>
</page>
<page number="6" position="absolute" top="0" left="0" height="989" width="644">
<text top="40" left="74" width="24" height="12" font="7">560 </text>
<text top="40" left="495" width="77" height="12" font="7">Z. Wang et al.</text>
<text top="57" left="91" width="4" height="14" font="4"> </text>
<text top="79" left="74" width="143" height="16" font="6"><b>3.4   Conclusion </b></text>
<text top="116" left="74" width="502" height="14" font="4">From the above analysis we can see, if there are loopholes in the server-side code </text>
<text top="134" left="74" width="498" height="14" font="4">or users’ security awareness is not strong, the website is very likely to suffer Java-</text>
<text top="151" left="74" width="498" height="14" font="4">Script Hijacking attacks. The attack exists not only in the FireFox browser, but al-</text>
<text top="168" left="74" width="504" height="14" font="4">so IE. There is no difference between them other than the implemented attack </text>
<text top="186" left="74" width="502" height="14" font="4">code. Strengthening the prevention of server-side and client-side could avoid such </text>
<text top="203" left="74" width="49" height="14" font="4">attacks. </text>
<text top="248" left="74" width="327" height="16" font="6"><b>4      The Research of Web Security Model </b></text>
<text top="296" left="74" width="293" height="16" font="9"><i><b>4.1      JavaScript Hijacking and CSRF </b></i></text>
<text top="333" left="74" width="505" height="14" font="4">CSRF (Cross-Site Request Forgery) is a widespread network loophole, whose </text>
<text top="351" left="74" width="498" height="14" font="4">principle is also to make use of the deficiencies of web authentication and the ma-</text>
<text top="368" left="74" width="498" height="14" font="4">licious code to obtain data from vulnerable site. They both bypass the SOP strate-</text>
<text top="385" left="74" width="502" height="14" font="4">gy and simulate the victim’s identity to attack the vulnerable site [9]. A site with </text>
<text top="402" left="74" width="504" height="14" font="4">CSRF vulnerability exists probably JavaScript Hijacking vulnerability, and vice </text>
<text top="420" left="74" width="503" height="14" font="4">versa. The biggest difference between JavaScript Hijacking and CSRF is: CSRF </text>
<text top="437" left="74" width="498" height="14" font="4">executes malicious operations by sending a request, such as modifying user ac-</text>
<text top="454" left="74" width="504" height="14" font="4">counts, deleting data, etc.; While JavaScript Hijacking is to use the concept of </text>
<text top="471" left="74" width="503" height="14" font="4">Hook in JavaScript language to steal the victim’s privacy information. Although </text>
<text top="489" left="74" width="502" height="14" font="4">JavaScript Hijacking has more additional constraints, but its attack means is more </text>
<text top="506" left="74" width="434" height="14" font="4">subtle, more difficult to detect. So it is difficult to estimate its fatalness. </text>
<text top="551" left="74" width="444" height="16" font="9"><i><b>4.2   Authentication Based on Client-Side and Server-Side </b></i></text>
<text top="589" left="74" width="498" height="14" font="4">Based on the above analysis of JavaScript Hijacking and CSRF, in order to pre-</text>
<text top="606" left="74" width="501" height="14" font="4">vent the leakage of user information and data tampering, it is necessary to improve </text>
<text top="623" left="74" width="504" height="14" font="4">the web authentication. Using the combination authentication of clientside and </text>
<text top="641" left="74" width="497" height="14" font="4">server-side is a good choice, which can effectively reduce or prevent similar at-</text>
<text top="658" left="74" width="497" height="14" font="4">tacks on the probability of the network. The combination authentication of client-</text>
<text top="675" left="74" width="253" height="14" font="4">side and server-side is shown in Figure 2. </text>
<text top="692" left="91" width="486" height="14" font="4">User logins. After the authentication, the server returns a Session and a form </text>
<text top="710" left="74" width="502" height="14" font="4">(page) with random value (using RN expressed in figure) to the user, and records </text>
<text top="727" left="74" width="151" height="14" font="4">the user’s random value. </text>
<text top="744" left="91" width="480" height="14" font="4">User must send the cookie and the form’s random value to the server when re-</text>
<text top="761" left="74" width="503" height="14" font="4">questing operation of server data. If the server passes the authentication, then it </text>
<text top="778" left="74" width="424" height="14" font="4">will response user’s request, otherwise the user’s request is not legal.   </text>
<text top="796" left="91" width="486" height="14" font="4">If the user using multi-tabbed browser opens multiple form pages after login, </text>
<text top="813" left="74" width="502" height="14" font="4">then the server should temporarily maintain more than one form’s random values, </text>
<text top="830" left="74" width="331" height="14" font="4">set a time stamp, and release resources after time-out.   </text>
</page>
<page number="7" position="absolute" top="0" left="0" height="989" width="644">
<text top="40" left="74" width="417" height="12" font="7">The Research of Web Security Model Based on JavaScript Hijacking Attack </text>
<text top="40" left="551" width="20" height="12" font="7">561</text>
<text top="57" left="91" width="4" height="14" font="4"> </text>
<text top="78" left="91" width="487" height="14" font="4">Because the site containing malicious attacks lacks of access to the form of </text>
<text top="95" left="74" width="502" height="14" font="4">random values, it is very difficult to launch attacks similar to CSRF or JavaScript </text>
<text top="112" left="74" width="67" height="14" font="4">Hijacking. </text>
<text top="130" left="91" width="4" height="14" font="4"> </text>
<text top="314" left="426" width="4" height="14" font="4"> </text>
<text top="342" left="74" width="346" height="12" font="11"><b>Fig. 2 </b>Combination authentication of client-side and server-side</text>
<text top="341" left="420" width="4" height="14" font="4"> </text>
<text top="385" left="74" width="294" height="16" font="6"><b>5   Javascript Hijacking Prevention </b></text>
<text top="433" left="74" width="275" height="16" font="9"><i><b>5.1      Prevention on the Server-Side </b></i></text>
<text top="471" left="74" width="497" height="14" font="4">It is necessary to ensure the safety of JSON when using JSON as a data inter-</text>
<text top="488" left="74" width="503" height="14" font="4">change format. One of the common approaches is to use regular expressions to </text>
<text top="505" left="74" width="498" height="14" font="4">check whether JSON data contain the keyword of malicious code. Use the parseJ-</text>
<text top="523" left="74" width="498" height="14" font="4">SON () function provided by the official site (http://www.json.org/) instead of Ja-</text>
<text top="540" left="74" width="379" height="14" font="4">vaScript’s eval () function, which includes a big security risk.   </text>
<text top="557" left="91" width="481" height="14" font="4">When there is privacy or important data, use POST request instead of GET re-</text>
<text top="574" left="74" width="502" height="14" font="4">quest. Because &lt;script&gt; uses GET request to obtain data, using POST request can </text>
<text top="592" left="74" width="503" height="14" font="4">effectively reduce the probability of attack and increase the difficulty of attacks. </text>
<text top="609" left="74" width="498" height="14" font="4">However, the use of POST can not totally prevent JavaScript Hijacking, under cer-</text>
<text top="626" left="74" width="502" height="14" font="4">tain conditions a malicious website can also send POST request in the form of the </text>
<text top="643" left="74" width="71" height="14" font="4">form [10].   </text>
<text top="661" left="91" width="487" height="14" font="4">Check HTTP-Refferer and make sure that the requests come from the same </text>
<text top="678" left="74" width="506" height="14" font="4">domain. It can reduce the possibility of attacks although the referrer can be forged.   </text>
<text top="695" left="91" width="486" height="14" font="4">In achieving the authentication combination of server-side and client-side, we </text>
<text top="712" left="74" width="502" height="14" font="4">need to notice: &#34;compatible with parallel sessions.&#34; If the user visiting a site opens </text>
<text top="730" left="74" width="503" height="14" font="4">two different forms at the same time, the measures of authentication protection </text>
<text top="747" left="74" width="497" height="14" font="4">should not affect any other forms’ submission. If the site generates a pseudo-</text>
<text top="764" left="74" width="503" height="14" font="4">random value to cover the previous one when the form is loaded every time, the </text>
<text top="781" left="74" width="503" height="14" font="4">user can only successfully submit the final opened form, for all the other forms </text>
<text top="799" left="74" width="497" height="14" font="4">contain the illegal pseudo-random value. We must be careful to ensure that protec-</text>
<text top="816" left="74" width="506" height="14" font="4">tion measures will not affect tabbed browsing or multiple browser windows </text>
<text top="833" left="74" width="145" height="14" font="4">browsing the same site. </text>
<text top="850" left="91" width="4" height="14" font="4"> </text>
</page>
<page number="8" position="absolute" top="0" left="0" height="989" width="644">
<text top="40" left="74" width="24" height="12" font="7">562 </text>
<text top="40" left="495" width="77" height="12" font="7">Z. Wang et al.</text>
<text top="57" left="91" width="4" height="14" font="4"> </text>
<text top="78" left="91" width="487" height="14" font="4">Add comment symbol before and after the JSON after the server returns a </text>
<text top="95" left="74" width="502" height="14" font="4">JSON array, such as /*[{“ name “:“ abc ”}]*/, which can be regarded as comment </text>
<text top="112" left="74" width="506" height="14" font="4">and not implemented by JavaScript. The comment could be removed when </text>
<text top="130" left="74" width="50" height="14" font="4">needed. </text>
<text top="147" left="91" width="486" height="14" font="4">Use XML instead of JSON when the data are extremely important, which is </text>
<text top="164" left="74" width="150" height="14" font="4">more secure than JSON. </text>
<text top="181" left="91" width="480" height="14" font="4">Reduce dynamically generated code and executions. JavaScript’s eval () func-</text>
<text top="199" left="74" width="503" height="14" font="4">tion allows the execution of arbitrary strings as JavaScript code, so it should be </text>
<text top="216" left="74" width="119" height="14" font="4">used with caution.   </text>
<text top="233" left="91" width="485" height="14" font="4">Use tools of vulnerability-checking to test possible vulnerable code and reduce </text>
<text top="250" left="74" width="154" height="14" font="4">the possibility of attacks. </text>
<text top="295" left="74" width="272" height="16" font="9"><i><b>5.2      Prevention on the Client-Side </b></i></text>
<text top="333" left="74" width="503" height="14" font="4">Use high security and strongly stability browser, update security patches and to </text>
<text top="350" left="74" width="155" height="14" font="4">the latest version in time. </text>
<text top="368" left="91" width="485" height="14" font="4">Exit after visiting the website with privacy (such as Internet Bank). Don’t visit </text>
<text top="385" left="74" width="181" height="14" font="4">other websites before exiting. </text>
<text top="402" left="91" width="480" height="14" font="4">Clear history and cookie regularly, or use the browsers with a “privacy brows-</text>
<text top="419" left="74" width="279" height="14" font="4">ing” feature, such as Safari, IE8, Chrome, etc. </text>
<text top="437" left="91" width="484" height="14" font="4">Visit the legitimate sites instead of unknown ones. It is recommended that using </text>
<text top="454" left="74" width="497" height="14" font="4">the site authentication function of  IE8 or Google toolbar to identify illegal web-</text>
<text top="471" left="74" width="42" height="14" font="4">sites.  </text>
<text top="516" left="74" width="244" height="16" font="6"><b>6   Conclusion and Summary </b></text>
<text top="554" left="74" width="503" height="14" font="4">Network changes with each passing day, more and more websites start to use or </text>
<text top="571" left="74" width="504" height="14" font="4">are already using Web 2.0 technologies, in order to enhance the interactivity, </text>
<text top="589" left="74" width="497" height="14" font="4">enrich user experience, and reduce the burden on the server. But the security is-</text>
<text top="606" left="74" width="497" height="14" font="4">sues of network attack bring much trouble to developers and users. This article in-</text>
<text top="623" left="74" width="503" height="14" font="4">troduces one such attack - JavaScript Hijacking, and describes its principle and </text>
<text top="640" left="74" width="502" height="14" font="4">prevention strategies in detail, which is a practice of network security on a certain </text>
<text top="658" left="74" width="107" height="14" font="4">guiding function. </text>
<text top="703" left="74" width="88" height="16" font="6"><b>References </b></text>
<text top="741" left="81" width="269" height="12" font="7">1.  Web 2.0 Compact Definition: Trying Again,   </text>
<text top="759" left="99" width="348" height="11" font="7">http://radar.oreilly.com/archives/2006/12/ </text>
<text top="775" left="99" width="162" height="11" font="7">web-20-compact.html </text>
<text top="791" left="81" width="329" height="12" font="7">2.  Chess, B., O’Neil, Y.T., West, J.: JavaScript Hijacking,   </text>
<text top="808" left="99" width="389" height="11" font="7">http://www.fortify.com/servlet/download/public/ </text>
<text top="825" left="99" width="203" height="11" font="7">JavaScript_Hijacking.pdf </text>
<text top="841" left="75" width="16" height="11" font="7">3.</text>
<text top="840" left="91" width="206" height="13" font="7">  CAPEC Dictionary (Release 1.3),   </text>
<text top="858" left="99" width="373" height="11" font="7">http://capec.mitre.org/data/dictionary.html#j </text>
</page>
<page number="9" position="absolute" top="0" left="0" height="989" width="644">
<text top="40" left="74" width="417" height="12" font="7">The Research of Web Security Model Based on JavaScript Hijacking Attack </text>
<text top="40" left="551" width="20" height="12" font="7">563</text>
<text top="57" left="91" width="4" height="14" font="4"> </text>
<text top="78" left="81" width="497" height="12" font="7">4.  Justin, S.: Same-Origin Policy Part 1: Why we’re stuck with things like XSS and </text>
<text top="95" left="99" width="87" height="12" font="7">XSRF/CSRF,  </text>
<text top="112" left="99" width="470" height="11" font="7">http://taossa.com/index.php/2007/02/08/same-origin-policy/</text>
<text top="112" left="569" width="3" height="12" font="7"> </text>
<text top="128" left="81" width="474" height="12" font="7">5.  Chen Zhen, J.: The Ananysis and Solution of CSRF. Fujian Computer, 6–28 (2009) </text>
<text top="144" left="81" width="446" height="12" font="7">6.  Enabling smarter Privacy Tools for the Web, http://www.w3.org/P3P/ </text>
<text top="161" left="81" width="332" height="12" font="7">7.  Yuan, X.: Privacy Parameters Selection Platform—P3P,   </text>
<text top="178" left="99" width="397" height="11" font="7">http://www.yxl.cn/Info/20060302,212041,5095.html </text>
<text top="194" left="81" width="240" height="12" font="7">8.  Introducing JSON, http://www.json.org/ </text>
<text top="211" left="81" width="276" height="12" font="7">9.  Understanding JavaScript Hijacking Concept,   </text>
<text top="228" left="99" width="397" height="11" font="7">http://www.cnblogs.com/hyddd/archive/2009/07/02/ </text>
<text top="244" left="99" width="97" height="11" font="7">1515768.htm </text>
<text top="260" left="74" width="356" height="12" font="7">10.  Submitting Form Automatically When users are not wared,   </text>
<text top="277" left="99" width="445" height="11" font="7">http://blog.roodo.com/rocksaying/archives/2665954.html </text>
</page>
</pdf2xml>
