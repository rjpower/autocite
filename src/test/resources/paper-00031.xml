<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="0" size="19" family="Times" color="#000000"/>
	<fontspec id="1" size="12" family="Times" color="#000000"/>
	<fontspec id="2" size="11" family="Times" color="#000000"/>
	<fontspec id="3" size="15" family="Times" color="#000000"/>
<text top="174" left="205" width="513" height="19" font="0">CSP AiDer: An Automated Recommendation of</text>
<text top="201" left="218" width="486" height="19" font="0">Content Security Policy for Web Applications</text>
<text top="258" left="421" width="81" height="13" font="1">Ashar Javed</text>
<text top="290" left="328" width="267" height="12" font="2">Hamburg University of Technology (TUHH)</text>
<text top="306" left="402" width="120" height="12" font="2">Hamburg, Germany</text>
<text top="323" left="368" width="186" height="12" font="2">ashar.javed@tu-harburg.de</text>
<text top="388" left="245" width="434" height="12" font="2">Abstract. Content Security Policy (CSP) is a Mozilla initiative to pro-</text>
<text top="404" left="245" width="434" height="12" font="2">vide website administrators with a way to specify how content interacts</text>
<text top="421" left="245" width="434" height="12" font="2">on their web sites. To assist web site administrators, in this paper, we</text>
<text top="437" left="245" width="434" height="12" font="2">present the ﬁrst automated approach for the recommendation of content</text>
<text top="454" left="245" width="434" height="12" font="2">security policies in web applications. Using our prototype implementa-</text>
<text top="470" left="245" width="434" height="12" font="2">tion called CSP AiDer, we have contributed in the recommendation of</text>
<text top="487" left="245" width="434" height="12" font="2">CSPs of more than 10000 web sites. We informed a number of major</text>
<text top="503" left="245" width="434" height="12" font="2">web sites about the CSPs we identiﬁed, and our ﬁndings were conﬁrmed</text>
<text top="519" left="245" width="252" height="12" font="2">by mainstream web sites such as Twitter.</text>
<text top="553" left="245" width="401" height="12" font="2">Keywords: web applications, content security policy, CSP AiDer</text>
<text top="602" left="202" width="10" height="16" font="3">1</text>
<text top="602" left="232" width="111" height="16" font="3">Introduction</text>
<text top="643" left="202" width="519" height="13" font="1">Content Security Policy <a href="pdfxml.html#10">[5,6] </a>is a Mozilla initiative to provide website pub-</text>
<text top="661" left="202" width="519" height="13" font="1">lishers with a way to specify how content interacts on their web sites, and</text>
<text top="679" left="202" width="519" height="13" font="1">have this enforced by the web browser. Content Security Policy provides gran-</text>
<text top="697" left="202" width="519" height="13" font="1">ular controls enabling website publishers to restrict the locations from which</text>
<text top="715" left="202" width="519" height="13" font="1">diﬀerent types of web content can be loaded. The policy is delivered via an</text>
<text top="734" left="202" width="519" height="12" font="1">X-Content-Security-Policy HTTP response header and is aimed at thwart-</text>
<text top="750" left="202" width="519" height="13" font="1">ing Cross-Site Scripting XSS attacks <a href="pdfxml.html#9">[1] </a>which has become an increasing prob-</text>
<text top="768" left="202" width="519" height="13" font="1">lem <a href="pdfxml.html#10">[2,3]. </a>An XSS attack takes place when the web browser executes, as higher-</text>
<text top="786" left="202" width="519" height="13" font="1">privileged application code, data input restrained by a low-privileged entity. CSP</text>
<text top="804" left="202" width="502" height="13" font="1">prevents the execution of any script not explicitly intended by the publisher.</text>
<text top="823" left="225" width="496" height="13" font="1">In this paper, we present the automated approach for the construction of</text>
<text top="841" left="202" width="519" height="13" font="1">safe policies i.e., CSPs in web applications. Our prototype implementation, that</text>
<text top="858" left="202" width="519" height="14" font="1">we call CSP AiDer, uses components that analyze the content on the current</text>
<text top="876" left="202" width="519" height="13" font="1">page and recommends a Content Security Policy based on the types of content</text>
<text top="894" left="202" width="519" height="13" font="1">it ﬁnds on the page and the sources of that content. Before creating the policy</text>
<text top="912" left="202" width="519" height="13" font="1">itself, web application developers need to understand all the content included in</text>
<text top="930" left="202" width="519" height="13" font="1">the site and from which sources (scheme, host, or port) they are drawn from. At</text>
<text top="948" left="202" width="519" height="13" font="1">the time of the writing of this paper, the most eﬀective means of recommending</text>
<text top="966" left="202" width="519" height="13" font="1">CSPs for websites is via manual inspection which can be hard and error-prone</text>
<text top="984" left="202" width="519" height="13" font="1">for complex sites. If websites publishers do not properly construct the policies for</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="4" size="8" family="Times" color="#000000"/>
	<fontspec id="5" size="6" family="Times" color="#000000"/>
<text top="178" left="202" width="519" height="13" font="1">web applications, the browser would refuse to download the particular resources</text>
<text top="196" left="202" width="364" height="13" font="1">and their websites may experience broken functionality.</text>
<text top="216" left="225" width="496" height="14" font="1">In order to show the feasibility of our approach, we used CSP AiDer to con-</text>
<text top="234" left="202" width="519" height="13" font="1">duct a large-scale study of more than 10000 popular websites. When we were</text>
<text top="251" left="202" width="519" height="13" font="1">able to obtain contact information, we informed the web sites of their respective</text>
<text top="269" left="202" width="519" height="13" font="1">CSPs we constructed. In the cases where the representatives of the concerned</text>
<text top="287" left="202" width="519" height="13" font="1">websites wrote back to us, our ﬁndings were conﬁrmed. Website publishers of</text>
<text top="305" left="202" width="336" height="14" font="1">well-known websites such as <a href="mobile.twitter.com">mobile.twitter.com</a></text>
<text top="303" left="538" width="6" height="9" font="4"><a href="mobile.twitter.com">1</a></text>
<text top="305" left="545" width="176" height="13" font="1"><a href="pdfxml.html#2">, </a>About.com, History.com,</text>
<text top="323" left="202" width="519" height="13" font="1">Espncricinfo, BBC WebWise, Newsiﬁed and Geo TV conﬁrmed that the policies</text>
<text top="341" left="202" width="479" height="14" font="1">found by CSP AiDer corresponds to their websites at the time of writing.</text>
<text top="360" left="225" width="496" height="14" font="1">There are several design and implementation challenges for CSP AiDer. First,</text>
<text top="378" left="202" width="519" height="13" font="1">scanning is complicated in practice and at the same time static web page scan-</text>
<text top="396" left="202" width="519" height="13" font="1">ning is insuﬃcient for the recommendation of CSP. Sites want to allow their users</text>
<text top="414" left="202" width="519" height="13" font="1">to provide rich content, with images, client-side scripts, hyperlinks, stylings and</text>
<text top="432" left="202" width="519" height="13" font="1">so on. The ability to deal with dynamic content is a necessary prerequisite and</text>
<text top="450" left="202" width="519" height="13" font="1">require us to actively render a web page in a browser to analyze its contents for</text>
<text top="468" left="202" width="519" height="13" font="1">the recommendation of CSP. Secondly, the crawling coverage; our aim was to</text>
<text top="486" left="202" width="519" height="13" font="1">favor breadth over depth and obtain good coverage. Last but not least, turns a</text>
<text top="504" left="202" width="253" height="13" font="1">list of sources into proper CSP syntax.</text>
<text top="556" left="202" width="22" height="13" font="1">1.1</text>
<text top="556" left="241" width="104" height="13" font="1">Contributions</text>
<text top="593" left="202" width="379" height="13" font="1">In summary, the paper makes the following contributions:</text>
<text top="627" left="213" width="508" height="14" font="1">• We present an automated approach for the construction of safe policies i.e.,</text>
<text top="646" left="228" width="493" height="13" font="1">CSPs in web applications. This may assit web site publishers to construct</text>
<text top="664" left="228" width="493" height="13" font="1">safe policies their web sites. Our approach consists of components that an-</text>
<text top="682" left="228" width="493" height="13" font="1">alyze the content on the current page and recommends a Content Security</text>
<text top="700" left="228" width="493" height="13" font="1">Policy based on the types of content it ﬁnds on the page and the sources of</text>
<text top="718" left="228" width="493" height="13" font="1">that content. The implementation also takes into account resources that are</text>
<text top="736" left="228" width="300" height="13" font="1">dynamically added to the page by JavaScript.</text>
<text top="754" left="213" width="508" height="14" font="1">• We describe the architecture and implementation of the prototype of our</text>
<text top="773" left="228" width="493" height="14" font="1">approach that we call CSP AiDer. CSP AiDer is able to crawl websites and</text>
<text top="791" left="228" width="420" height="13" font="1">construct CSP based on the site’s behavior at the time of crawl.</text>
<text top="809" left="213" width="508" height="14" font="1">• We present and discuss ﬁrst large-scale, real-world experiments we conducted</text>
<text top="828" left="228" width="493" height="13" font="1">with more than 10000 popular websites. Our experimental evaluation shows</text>
<text top="846" left="228" width="308" height="14" font="1">the eﬃciency and the scalability of CSP AiDer.</text>
<text top="880" left="225" width="496" height="13" font="1">The paper is structured as follows: Section <a href="pdfxml.html#3">2 </a>gives an explanation of Content</text>
<text top="898" left="202" width="519" height="13" font="1">Security Policy. Section <a href="pdfxml.html#4">3 </a>describes our approach and presents the main com-</text>
<text top="916" left="202" width="519" height="14" font="1">ponents of CSP AiDer. Section <a href="pdfxml.html#6">4 </a>presents and discusses the evaluation of CSP</text>
<text top="935" left="202" width="509" height="12" font="1">AiDer. Section <a href="pdfxml.html#9">5 </a>lists related work, and Section <a href="pdfxml.html#9">6 </a>brieﬂy concludes the paper.</text>
<text top="966" left="206" width="5" height="8" font="5">1</text>
<text top="969" left="217" width="504" height="12" font="2">Twitter has implemented CSP on its mobile website which is aimed at thwarting</text>
<text top="985" left="217" width="204" height="12" font="2">cross-site scripting (XSS) attacks.</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1188" width="918">
<text top="176" left="202" width="10" height="16" font="3">2</text>
<text top="176" left="232" width="211" height="16" font="3">Content Security Policy</text>
<text top="213" left="202" width="109" height="13" font="1">According to <a href="pdfxml.html#10">[7]:</a></text>
<text top="249" left="225" width="496" height="13" font="1">Content Security Policy (CSP) is an added layer of security that helps to</text>
<text top="266" left="202" width="519" height="13" font="1">detect and mitigate certain types of attacks, including Cross Site Scripting (XSS)</text>
<text top="284" left="202" width="519" height="13" font="1">and data injection attacks. If the site doesn’t oﬀer the CSP header, browsers</text>
<text top="302" left="202" width="360" height="13" font="1">likewise use the standard same origin policy (SOP) <a href="pdfxml.html#10">[4].</a></text>
<text top="346" left="202" width="22" height="13" font="1">2.1</text>
<text top="346" left="241" width="191" height="13" font="1">Default CSP Restrictions</text>
<text top="374" left="202" width="519" height="13" font="1">By default, when CSP is in eﬀect, a certain set of restrictions is put in place to</text>
<text top="392" left="202" width="159" height="13" font="1">support XSS protection.</text>
<text top="428" left="225" width="496" height="13" font="1">Default Restriction 1: No Inline Scripts Will Execute. This is the</text>
<text top="446" left="202" width="519" height="13" font="1">inline-scripts property, which, by default, is disabled. When disabled, this means</text>
<text top="464" left="202" width="519" height="13" font="1">that the browser will not allow any scripts to execute within the page. The</text>
<text top="482" left="202" width="433" height="13" font="1">following form is not allowed in a web page when CSP is in eﬀect:</text>
<text top="511" left="202" width="243" height="12" font="1">&lt;script type=&#34;text/javascript&#34;&gt;</text>
<text top="529" left="202" width="39" height="12" font="1">.....</text>
<text top="547" left="202" width="71" height="12" font="1">&lt;/script&gt;</text>
<text top="574" left="202" width="519" height="14" font="1">The only scripts that may be run are ones included by the src attribute of a</text>
<text top="592" left="202" width="114" height="13" font="1">&lt;script&gt; tag i.e.,</text>
<text top="622" left="202" width="463" height="12" font="1">&lt;script type=&#34;text/javascript&#34; src=&#34;myscripts.js&#34;&gt;&lt;/script&gt;</text>
<text top="649" left="202" width="519" height="14" font="1">Base Restriction 2: Code will not be created from strings. The eval()</text>
<text top="667" left="202" width="519" height="13" font="1">function and related functions make trivial the task of generating code from</text>
<text top="685" left="202" width="519" height="13" font="1">strings, which commonly come from untrusted sources. Calls to the JavaScript</text>
<text top="702" left="202" width="519" height="14" font="1">function eval() are blocked by CSP, as are any equivalent functions setTimeout,</text>
<text top="722" left="202" width="519" height="12" font="1">setInterval and the Function constructor that all take a string representing</text>
<text top="738" left="202" width="519" height="13" font="1">code as an argument. In the interest of space, we refer to the CSP’s speciﬁcation</text>
<text top="756" left="202" width="300" height="13" font="1">for deeper concerns about policy language <a href="pdfxml.html#10">[6].</a></text>
<text top="800" left="202" width="22" height="13" font="1">2.2</text>
<text top="800" left="241" width="123" height="13" font="1">Policy Language</text>
<text top="828" left="202" width="519" height="14" font="1">Content Security Policy is composed of directives; each directive states how</text>
<text top="846" left="202" width="519" height="13" font="1">the behavior of the browser should be modiﬁed on the protected document.</text>
<text top="864" left="202" width="519" height="13" font="1">Directive is composed of a directive name and a directive value, which is either a</text>
<text top="882" left="202" width="519" height="13" font="1">list of host items or a URI, for certain types of directives. Most of the directives</text>
<text top="900" left="202" width="519" height="13" font="1">control from where a type of resource may be loaded. This section only serves</text>
<text top="918" left="202" width="519" height="13" font="1">to summarize the policy language; a detailed syntax can be found in <a href="pdfxml.html#10">[6]. </a>Some</text>
<text top="936" left="202" width="393" height="13" font="1">of directives supported by CSP, and what they regulate are:</text>
<text top="965" left="213" width="508" height="15" font="1">• script-src: deﬁnes the list of sources from which scripts may be fetched</text>
<text top="984" left="228" width="201" height="13" font="1">as external &lt;script&gt; elements.</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1188" width="918">
<text top="177" left="213" width="473" height="15" font="1">• img-src: requests that will be loaded as images via &lt;img&gt; elements.</text>
<text top="196" left="213" width="508" height="15" font="1">• frame-src: Indicates which sources are valid for &lt;frame&gt; and &lt;iframe&gt;</text>
<text top="214" left="228" width="60" height="13" font="1">elements.</text>
<text top="231" left="213" width="508" height="15" font="1">• frame-ancestors: Indicates which sources are valid ancestors for embed-</text>
<text top="250" left="228" width="475" height="13" font="1">ding the protected resource via &lt;object&gt;, &lt;frame&gt; and &lt;iframe&gt; tags.</text>
<text top="267" left="213" width="508" height="15" font="1">• media-src: Indicates which sources are valid for &lt;audio&gt; and &lt;video&gt;</text>
<text top="286" left="228" width="60" height="13" font="1">elements.</text>
<text top="303" left="213" width="508" height="15" font="1">• style-src: deﬁnes the list of sources from which external style sheets may</text>
<text top="322" left="228" width="457" height="13" font="1">be fetched via &lt;link rel=“stylesheet”&gt; elements in HTML document.</text>
<text top="339" left="213" width="508" height="15" font="1">• object-src: requests targeted by an &lt;object&gt;, &lt;embed&gt; or &lt;applet&gt;</text>
<text top="358" left="228" width="54" height="13" font="1">element.</text>
<text top="375" left="213" width="508" height="15" font="1">• policy-uri: Indicates the location of a ﬁle containing the security policies</text>
<text top="394" left="228" width="173" height="13" font="1">for the protected resource.</text>
<text top="411" left="213" width="508" height="15" font="1">• report-uri: To provide an early-warning system, so that a site’s admin-</text>
<text top="430" left="228" width="493" height="13" font="1">istrators can be notiﬁed when an injection attack may be occurring, CSP</text>
<text top="448" left="228" width="493" height="14" font="1">implements violation reporting. report-uri directive instructs the browser</text>
<text top="466" left="228" width="493" height="13" font="1">where to send a report when CSP is violated <a href="pdfxml.html#10">[6]. </a>While there are no protec-</text>
<text top="484" left="228" width="493" height="13" font="1">tions aﬀorded by this variant, deploying a report-only policy can help site</text>
<text top="502" left="228" width="493" height="13" font="1">designers gauge how much work will need to be done in order to support</text>
<text top="520" left="228" width="54" height="13" font="1">CSP <a href="pdfxml.html#10">[5].</a></text>
<text top="566" left="202" width="10" height="16" font="3">3</text>
<text top="566" left="232" width="443" height="16" font="3">Automated Recommendation of Content Security</text>
<text top="587" left="232" width="207" height="16" font="3">Policy with CSP AiDer</text>
<text top="625" left="202" width="519" height="14" font="1">Our Content Security Policy Aiding System (CSP AiDer) to automatically rec-</text>
<text top="643" left="202" width="519" height="13" font="1">ommend CSP for websites consists of four main components: A browser, a</text>
<text top="661" left="202" width="252" height="13" font="1">crawler, scanner and CSP constructor.</text>
<text top="679" left="225" width="496" height="13" font="1">The ﬁrst component is an instrumented browser that is responsible for fetch-</text>
<text top="697" left="202" width="519" height="14" font="1">ing the webpages and rendering the content. The instrumented browser in CSP</text>
<text top="716" left="202" width="519" height="12" font="1">AiDer ﬁrst waits until the target page is loaded. After the browser has ﬁnished</text>
<text top="733" left="202" width="519" height="13" font="1">parsing the DOM, executing the client-side scripts, and loading additional re-</text>
<text top="751" left="202" width="519" height="13" font="1">sources, a browser extension (i.e., plugin) extracts the content. The browser</text>
<text top="769" left="202" width="519" height="13" font="1">extension has been developed by using the standard technology oﬀered by the</text>
<text top="787" left="202" width="519" height="13" font="1">Mozilla development environment: a mix of Javascript and XML User Interface</text>
<text top="805" left="202" width="351" height="13" font="1">Language (XUL). The XUL is ﬂexible and extensible.</text>
<text top="823" left="225" width="496" height="13" font="1">The second component is a crawler that communicates with the browser</text>
<text top="840" left="202" width="519" height="13" font="1">through a bidirectional channel. This channel is used by the crawler to inform</text>
<text top="858" left="202" width="519" height="13" font="1">the browser on the URLs that need to be visited. Furthermore, the channel is</text>
<text top="876" left="202" width="519" height="13" font="1">also used to retrieve the collected information from the browser. We used the</text>
<text top="894" left="202" width="519" height="13" font="1">Heritrix public domain Web crawler <a href="pdfxml.html#10">[11] </a>to gather a crawl of over 10000 Internet</text>
<text top="912" left="202" width="67" height="13" font="1">Web sites.</text>
<text top="930" left="225" width="496" height="13" font="1">Every time the crawler visits a page, it passes the extracted information</text>
<text top="948" left="202" width="519" height="13" font="1">to the scanner so that it can be analyzed. Similar to other scanners, it would</text>
<text top="966" left="202" width="519" height="13" font="1">have been possible to directly retrieve web pages without rendering them in</text>
<text top="984" left="202" width="519" height="13" font="1">a real browser. However, such techniques have the drawback that they cannot</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1188" width="918">
<text top="178" left="202" width="519" height="13" font="1">eﬃciently deal with dynamic content that is often found on Web pages (e.g.,</text>
<text top="196" left="202" width="519" height="13" font="1">Javascript). By using a real browser to render the pages we visit, we are able to</text>
<text top="214" left="202" width="519" height="13" font="1">analyze the page as it is supposed to appear after the dynamic content has been</text>
<text top="232" left="202" width="519" height="13" font="1">generated. The ability to deal with dynamic content is a necessary prerequisite</text>
<text top="250" left="202" width="519" height="13" font="1">to be able to construct content security policy for web mashups. The scanner is</text>
<text top="268" left="202" width="519" height="13" font="1">responsible for analyzing the page to determine the types of content it ﬁnds on</text>
<text top="286" left="202" width="519" height="13" font="1">the page and the sources of that content. The scanner also takes into account</text>
<text top="304" left="202" width="421" height="13" font="1">resources that are dynamically added to the page by JavaScript.</text>
<text top="322" left="225" width="496" height="14" font="1">The last component in our CSP AiDer system is generator. CSP generator</text>
<text top="340" left="202" width="519" height="13" font="1">recommends CSP based on the information that are coming from scanner. In</text>
<text top="358" left="202" width="519" height="13" font="1">other words generator turns a list of sources into proper CSP syntax. All the</text>
<text top="376" left="202" width="519" height="13" font="1">collected information about CSP is stored in a database that is later analyzed by</text>
<text top="394" left="202" width="519" height="13" font="1">a statistical component that groups together information and generates a report.</text>
<text top="412" left="202" width="426" height="13" font="1">The general architecture of the system is summarized in ﬁgure <a href="pdfxml.html#5">1.</a></text>
<text top="766" left="314" width="294" height="12" font="2">Fig. 1. The architecture of the CSP AiDer Tool.</text>
<text top="845" left="202" width="22" height="13" font="1">3.1</text>
<text top="845" left="241" width="119" height="13" font="1">Implementation</text>
<text top="876" left="202" width="519" height="13" font="1">Our implementation is the JavaScript library used by both the ’scanner’ and</text>
<text top="894" left="202" width="519" height="13" font="1">’generator’ component. Our JavaScript library has 455 lines (including com-</text>
<text top="912" left="202" width="519" height="14" font="1">ments). In the following, we describe the library used by CSP AiDer for the</text>
<text top="930" left="202" width="472" height="13" font="1">constrcution of CSPs. Most of the library functions are self-explanatory.</text>
<text top="948" left="202" width="519" height="13" font="1">function getElements(tags): Return an array of elements matching the comma-</text>
<text top="966" left="202" width="138" height="13" font="1">separated tag names.</text>
<text top="984" left="202" width="519" height="13" font="1">function parseUri (string): parseUri is a function which splits any well-formed</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1188" width="918">
<text top="178" left="202" width="519" height="13" font="1">URI into its parts, all of which are optional. We have used Steven Levithan’s</text>
<text top="196" left="202" width="304" height="13" font="1">open source parseUri fucntion availabe at <a href="pdfxml.html#10">[10].</a></text>
<text top="214" left="202" width="519" height="13" font="1">function objectIsEmpty(object): Return whether or not an object has no proper-</text>
<text top="232" left="202" width="27" height="13" font="1">ties.</text>
<text top="250" left="202" width="519" height="13" font="1">function analyzeContent(): Search the document for various types of content</text>
<text top="268" left="202" width="353" height="13" font="1">and take note of the sources being used for each type.</text>
<text top="286" left="202" width="527" height="13" font="1">function generatePolicyFromSources(sourceList): Turn a list of sources into proper</text>
<text top="304" left="202" width="81" height="13" font="1">CSP syntax.</text>
<text top="346" left="202" width="22" height="13" font="1">3.2</text>
<text top="346" left="241" width="340" height="13" font="1">Example Policies Constructed by CSP AiDer</text>
<text top="374" left="202" width="311" height="13" font="1">Constructed CSP of Mobile.Twitter.com:</text>
<text top="403" left="202" width="361" height="12" font="1">X-Content-Security-Policy: default-src ’self’;</text>
<text top="421" left="202" width="55" height="12" font="1">img-src</text>
<text top="421" left="273" width="110" height="12" font="1">si0.twing.com;</text>
<text top="439" left="202" width="196" height="12" font="1">script-src si0.twimg.com;</text>
<text top="457" left="202" width="71" height="12" font="1">style-src</text>
<text top="457" left="288" width="110" height="12" font="1">si0.twimg.com;</text>
<text top="483" left="202" width="248" height="13" font="1">Constructed CSP of history.com:</text>
<text top="512" left="202" width="361" height="12" font="1">X-Content-Security-Policy: default-src ’self’;</text>
<text top="530" left="202" width="55" height="12" font="1">img-src</text>
<text top="530" left="296" width="47" height="12" font="1">’self’</text>
<text top="530" left="359" width="86" height="12" font="1">s0.2mdn.net</text>
<text top="530" left="461" width="126" height="12" font="1">shop.history.com</text>
<text top="530" left="610" width="196" height="12" font="1">pixel.rubiconproject.com;</text>
<text top="548" left="202" width="78" height="12" font="1">script-src</text>
<text top="548" left="296" width="47" height="12" font="1">’self’</text>
<text top="548" left="359" width="180" height="12" font="1">b.scorecardresearch.com</text>
<text top="548" left="555" width="188" height="12" font="1">www.google-analytics.com</text>
<text top="565" left="296" width="157" height="12" font="1">pixel.quatnserve.com</text>
<text top="565" left="469" width="102" height="12" font="1">cdn.gigya.com</text>
<text top="565" left="587" width="126" height="12" font="1">pglb.buzzfed.com</text>
<text top="583" left="296" width="204" height="12" font="1">tap-cdn.rubiconproject.com</text>
<text top="583" left="516" width="157" height="12" font="1">connect.facebook.net</text>
<text top="601" left="296" width="141" height="12" font="1">ad.doubleclick.net</text>
<text top="601" left="453" width="149" height="12" font="1">edge.quantserve.com</text>
<text top="601" left="618" width="126" height="12" font="1">ct.buzzfeed.com;</text>
<text top="619" left="202" width="71" height="12" font="1">frame-src</text>
<text top="619" left="296" width="94" height="12" font="1">facebook.com</text>
<text top="619" left="406" width="55" height="12" font="1">’self’;</text>
<text top="637" left="202" width="71" height="12" font="1">style-src</text>
<text top="637" left="288" width="55" height="12" font="1">’self’;</text>
<text top="679" left="202" width="10" height="16" font="3">4</text>
<text top="679" left="232" width="94" height="16" font="3">Evaluation</text>
<text top="715" left="202" width="519" height="13" font="1">To do evaluation, we conduct a large-scale outward-looking study by crawling</text>
<text top="733" left="202" width="519" height="13" font="1">the Web, downloading content from a large number of sites, and then analyzing</text>
<text top="751" left="202" width="519" height="13" font="1">it to determine CSP. In an experiment, we collected 7,000 unique URLs from the</text>
<text top="769" left="202" width="519" height="13" font="1">public database of Alexa <a href="pdfxml.html#10">[9]. </a>In particular, we extracted the top ranked sites from</text>
<text top="787" left="202" width="519" height="13" font="1">each of the Alexa’s categories. Each website was considered only once even if</text>
<text top="805" left="202" width="519" height="13" font="1">it was present in multiple distinct categories, or with diﬀerent top-level domain</text>
<text top="823" left="202" width="519" height="14" font="1">names such as <a href="www.google.com">www.google.com </a>and <a href="www.google.de">www.google.de. </a>In addition, we crawled</text>
<text top="841" left="202" width="519" height="14" font="1">award winning mashups from <a href="http://mashupawards.com/winners/">http://mashupawards.com/winners/ </a>site and</text>
<text top="858" left="202" width="519" height="14" font="1">mashups directory available at <a href="http://www.programmableweb.com/mashups/directory">http://www.programmableweb.com/mashups/</a></text>
<text top="878" left="202" width="519" height="12" font="1"><a href="http://www.programmableweb.com/mashups/directory">directory. </a>In two weeks of experiments, we successfully scanned 10117 websites.</text>
<text top="894" left="202" width="519" height="13" font="1">For each front page, our tool receommended a CSP. The websites we tested were</text>
<text top="912" left="202" width="519" height="13" font="1">distributed over 100 countries and hundreds of diﬀerent Alexa categories. An</text>
<text top="930" left="202" width="519" height="13" font="1">external watchdog was also conﬁgured to monitor and restart the browser in</text>
<text top="948" left="202" width="188" height="13" font="1">case it became unresponsive.</text>
<text top="966" left="225" width="496" height="13" font="1">When we were able to obtain contact information, we informed the number</text>
<text top="984" left="202" width="519" height="13" font="1">of websites about their CSPs we constructed. In the cases where the security</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1188" width="918">
<text top="178" left="202" width="519" height="13" font="1">oﬃcers of the concerned websites wrote back to us, our ﬁndings were conﬁrmed.</text>
<text top="196" left="202" width="508" height="14" font="1">Website administrators of well-known websites such as <a href="mobile.twitter.com">mobile.twitter.com</a></text>
<text top="194" left="710" width="6" height="9" font="4"><a href="mobile.twitter.com">2</a></text>
<text top="196" left="717" width="4" height="13" font="1"><a href="pdfxml.html#7">,</a></text>
<text top="214" left="202" width="519" height="13" font="1">About.com, History.com, Espncricinfo, BBC WebWise, Newsiﬁed and Geo TV</text>
<text top="232" left="202" width="519" height="14" font="1">conﬁrmed that the policies found by CSP AiDer corresponds to their websites at</text>
<text top="250" left="202" width="519" height="13" font="1">the time of writing. None of the security groups of the websites that we interacted</text>
<text top="268" left="202" width="519" height="13" font="1">with complained to us when we informed them that we were researchers, and</text>
<text top="286" left="202" width="519" height="13" font="1">that we had analyzed their site for CSP with a tool that we were testing. On the</text>
<text top="304" left="202" width="519" height="13" font="1">contrary, many people were thankful to us that we were informing them about</text>
<text top="322" left="202" width="507" height="13" font="1">CSP of their site, and how it can help them in making their site more secure.</text>
<text top="368" left="202" width="22" height="13" font="1">4.1</text>
<text top="368" left="241" width="396" height="13" font="1">Methodology Validation Using User-Driven Analysis</text>
<text top="399" left="202" width="519" height="13" font="1">In the previous sections, we examined sites by visiting their home pages and</text>
<text top="417" left="202" width="519" height="14" font="1">relying on CSP AiDer to construct CSP. However, CSP AiDer may miss some re-</text>
<text top="435" left="202" width="519" height="13" font="1">sources on which websites are relying during policy recommendation. To evaluate</text>
<text top="453" left="202" width="519" height="13" font="1">the “misses” of our automated approach, we conducted a user-driven examina-</text>
<text top="471" left="202" width="519" height="13" font="1">tion of the top 100 Alexa sites. To do this, author manually visited these sites</text>
<text top="489" left="202" width="519" height="13" font="1">and used his best judgement to analyze the source code of home pages of 100</text>
<text top="507" left="202" width="519" height="13" font="1">sites. We then compared the results obtained through this manual analysis to</text>
<text top="525" left="202" width="297" height="14" font="1">those obtained using CSP AiDer for the sites.</text>
<text top="543" left="225" width="496" height="13" font="1">We observe no diﬀerences in constructed CSP policy via manual inspection</text>
<text top="561" left="202" width="519" height="14" font="1">and CSP AiDer in the case of 81 sites, providing conﬁdence that our CSP AiDer</text>
<text top="579" left="202" width="519" height="13" font="1">works well in practice. We found some discrepancies in the case of 19 sites.</text>
<text top="597" left="202" width="519" height="13" font="1">In 19 sites, the prevalence of all CSP directives (Section <a href="pdfxml.html#3">2.2) </a>are mostly equal</text>
<text top="615" left="202" width="519" height="14" font="1">except for script-src directives (See Table <a href="pdfxml.html#8">1). </a>We also observe that CSP AiDer</text>
<text top="633" left="202" width="519" height="14" font="1">is able to get complete coverage as far as prevalence of script-src directive is</text>
<text top="651" left="202" width="519" height="14" font="1">concerned. It would be better to say that CSP AiDer outperforms manual analyis</text>
<text top="669" left="202" width="519" height="14" font="1">in getting coverage about script-src directive. The legacy sites use scripts that</text>
<text top="686" left="202" width="519" height="13" font="1">in turns call another script from their body and so on. It can be very hard, if</text>
<text top="704" left="202" width="462" height="13" font="1">not impossible, to ﬁnd all the sources of scripts via manual inspection.</text>
<text top="724" left="225" width="496" height="12" font="1">CSP AiDer was able to found all sources of scripts because we used real</text>
<text top="741" left="202" width="523" height="13" font="1">browser to render the site ﬁrst and then analyzed the rendered page for whitelisted</text>
<text top="758" left="202" width="519" height="14" font="1">sources e.g., website <a href="http://www.bbc.co.uk/news/">http://www.bbc.co.uk/news/ </a>has 8 whitelisted sources of</text>
<text top="776" left="202" width="568" height="13" font="1">scripts (i.e., node1.bbcimg.co.uk, static.bbc.co.uk, self, js.revsci.net, b.scorecardresearch.</text>
<text top="794" left="202" width="532" height="14" font="1">com, s0.2mdn.net, pix04.revsci.net and ad.doubleclick.net) according to CSP AiDer</text>
<text top="812" left="202" width="519" height="13" font="1">but via manual inspection of source code of home page we found only 5 (i.e.,</text>
<text top="830" left="202" width="519" height="13" font="1">node1.bbcimg.co.uk, static.bbc.co.uk, self, js.revsci.net and b.scorecardresearch.</text>
<text top="848" left="202" width="519" height="13" font="1">com). By looking at the source code we were unable to found the following</text>
<text top="866" left="202" width="519" height="13" font="1">three sources of scripts i.e., s0.2mdn.net, pix04.revsci.net and ad.doubleclick.net</text>
<text top="884" left="202" width="519" height="13" font="1">because pix04.revsci.net has a call from the body of js.revsci.net and the re-</text>
<text top="902" left="202" width="519" height="13" font="1">maining two have calls from the body of “self”. If we take another example i.e.,</text>
<text top="921" left="202" width="519" height="12" font="1"><a href="http://www.zedo.com">http://www.zedo.com, </a>it has scripts running from four whitelisted sources (i.e.,</text>
<text top="938" left="202" width="519" height="14" font="1">self, myseofriend.net, c1.zedo.com and c7.zedo.com) according to CSP AiDer</text>
<text top="966" left="206" width="5" height="8" font="5">2</text>
<text top="969" left="217" width="504" height="12" font="2">Twitter has implemented CSP on its mobile website which is aimed at thwarting</text>
<text top="985" left="217" width="224" height="12" font="2">cross-site scripting (XSS) attacks <a href="pdfxml.html#10">[8].</a></text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1188" width="918">
<text top="178" left="202" width="519" height="13" font="1">but via manual inspection we found only three (i.e., self, myseofriend.net and</text>
<text top="196" left="202" width="517" height="13" font="1">c1.zedo.com) because c7.zedo.com has call from the inner body of c1.zedo.com.</text>
<text top="249" left="511" width="71" height="11" font="2">script-src</text>
<text top="265" left="511" width="145" height="11" font="2">CSP AiDer User-Driven</text>
<text top="282" left="267" width="169" height="11" font="2"><a href="http://www.linkedin.com/">http://www.linkedin.com/</a></text>
<text top="281" left="511" width="7" height="12" font="2">4</text>
<text top="281" left="579" width="7" height="12" font="2">4</text>
<text top="299" left="267" width="184" height="11" font="2"><a href="http://www.bbc.co.uk/news/">http://www.bbc.co.uk/news/</a></text>
<text top="298" left="511" width="7" height="12" font="2">8</text>
<text top="298" left="579" width="7" height="12" font="2">5</text>
<text top="316" left="267" width="226" height="11" font="2"><a href="http://www.huffingtonpost.co.uk/">http://www.huffingtonpost.co.uk/</a></text>
<text top="315" left="511" width="7" height="12" font="2">7</text>
<text top="315" left="579" width="7" height="12" font="2">6</text>
<text top="333" left="267" width="134" height="11" font="2"><a href="http://www.cnet.com">http://www.cnet.com</a></text>
<text top="332" left="511" width="14" height="12" font="2">11</text>
<text top="332" left="579" width="7" height="12" font="2">4</text>
<text top="351" left="267" width="141" height="11" font="2"><a href="http://www.adobe.com">http://www.adobe.com</a></text>
<text top="349" left="511" width="7" height="12" font="2">4</text>
<text top="349" left="579" width="7" height="12" font="2">2</text>
<text top="368" left="267" width="155" height="11" font="2"><a href="http://www.espn.go.com">http://www.espn.go.com</a></text>
<text top="366" left="511" width="7" height="12" font="2">8</text>
<text top="366" left="579" width="7" height="12" font="2">4</text>
<text top="385" left="267" width="148" height="11" font="2"><a href="http://www.tumblr.com">http://www.tumblr.com</a></text>
<text top="383" left="511" width="7" height="12" font="2">3</text>
<text top="383" left="579" width="7" height="12" font="2">3</text>
<text top="402" left="267" width="141" height="11" font="2"><a href="http://www.yahoo.com">http://www.yahoo.com</a></text>
<text top="401" left="511" width="7" height="12" font="2">1</text>
<text top="401" left="579" width="7" height="12" font="2">1</text>
<text top="419" left="267" width="134" height="11" font="2"><a href="http://www.imdb.com">http://www.imdb.com</a></text>
<text top="418" left="511" width="7" height="12" font="2">2</text>
<text top="418" left="579" width="7" height="12" font="2">2</text>
<text top="436" left="267" width="155" height="11" font="2"><a href="http://www.myspace.com">http://www.myspace.com</a></text>
<text top="435" left="511" width="7" height="12" font="2">4</text>
<text top="435" left="579" width="7" height="12" font="2">4</text>
<text top="453" left="267" width="134" height="11" font="2"><a href="http://www.zedo.com">http://www.zedo.com</a></text>
<text top="452" left="511" width="7" height="12" font="2">4</text>
<text top="452" left="579" width="7" height="12" font="2">3</text>
<text top="470" left="267" width="184" height="11" font="2"><a href="http://www.livejournal.com">http://www.livejournal.com</a></text>
<text top="469" left="511" width="14" height="12" font="2">10</text>
<text top="469" left="579" width="7" height="12" font="2">6</text>
<text top="487" left="267" width="141" height="11" font="2"><a href="http://www.imgur.com">http://www.imgur.com</a></text>
<text top="486" left="511" width="14" height="12" font="2">10</text>
<text top="486" left="579" width="7" height="12" font="2">6</text>
<text top="504" left="267" width="205" height="11" font="2"><a href="http://www.dailymotion.com/de">http://www.dailymotion.com/de</a></text>
<text top="503" left="511" width="14" height="12" font="2">11</text>
<text top="503" left="579" width="7" height="12" font="2">6</text>
<text top="521" left="267" width="251" height="11" font="2"><a href="http://www.google.com/doubleclick/">http://www.google.com/doubleclick/ </a>3</text>
<text top="520" left="579" width="7" height="12" font="2">3</text>
<text top="538" left="267" width="155" height="11" font="2"><a href="http://www.addthis.com">http://www.addthis.com</a></text>
<text top="537" left="511" width="7" height="12" font="2">4</text>
<text top="537" left="579" width="7" height="12" font="2">3</text>
<text top="555" left="267" width="127" height="11" font="2"><a href="http://www.ebay.de">http://www.ebay.de</a></text>
<text top="554" left="511" width="7" height="12" font="2">2</text>
<text top="554" left="579" width="7" height="12" font="2">2</text>
<text top="572" left="267" width="148" height="11" font="2"><a href="http://www.renren.com">http://www.renren.com</a></text>
<text top="571" left="511" width="7" height="12" font="2">3</text>
<text top="571" left="579" width="7" height="12" font="2">3</text>
<text top="589" left="267" width="169" height="11" font="2"><a href="http://www.wordpress.com">http://www.wordpress.com</a></text>
<text top="588" left="511" width="7" height="12" font="2">7</text>
<text top="588" left="579" width="7" height="12" font="2">5</text>
<text top="604" left="202" width="519" height="12" font="2">Table 1. Prevalence of script-src directives using CSP AiDer and User-driven anal-</text>
<text top="621" left="202" width="26" height="12" font="2">ysis.</text>
<text top="714" left="202" width="22" height="13" font="1">4.2</text>
<text top="714" left="241" width="86" height="13" font="1">Limitations</text>
<text top="746" left="202" width="519" height="13" font="1">Our study has several limitations due to our measurement method and the nature</text>
<text top="764" left="202" width="519" height="13" font="1">of the Web itself. First, we did not crawl the entire Web—our results are based on</text>
<text top="782" left="202" width="519" height="13" font="1">a directed sampling of Web pages. While our sampling explores what we believe</text>
<text top="799" left="202" width="519" height="13" font="1">are interesting parts of the Web, such as Alexa’s top domains and award winning</text>
<text top="817" left="202" width="519" height="13" font="1">mashups in various categories, we cannot prove that this is representative of</text>
<text top="835" left="202" width="519" height="13" font="1">what people actually encounter while browsing the Web 2.0 applications. In</text>
<text top="853" left="202" width="496" height="13" font="1">addition, we limited the study to front page because the common use c<a href="pdfxml.html#8">ase</a></text>
<text top="851" left="698" width="6" height="9" font="4"><a href="pdfxml.html#8">3</a></text>
<text top="853" left="711" width="10" height="13" font="1">is</text>
<text top="871" left="202" width="519" height="13" font="1">to use the same CSP policy across a site and the aim of our experiments was</text>
<text top="889" left="202" width="519" height="13" font="1">to quickly scan as many websites as possible in order to show the feasibility of</text>
<text top="917" left="206" width="5" height="8" font="5">3</text>
<text top="919" left="217" width="504" height="12" font="2">Twitter <a href="mobile.twitter.com">(mobile.twitter.com) </a>and WebKit <a href="http://www.webkit.org/">(http://www.webkit.org/) </a>are the</text>
<text top="936" left="217" width="504" height="12" font="2">early adopters of the CSP technology and after having some discussion with them</text>
<text top="952" left="217" width="504" height="12" font="2">we arrived at a point that site will not micromanage policies on per page basis in</text>
<text top="969" left="217" width="504" height="12" font="2">order to avoid administrative overhead. Twitter and WebKit are using same CSP</text>
<text top="985" left="217" width="144" height="12" font="2">policy across the origin.</text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1188" width="918">
<text top="178" left="202" width="519" height="14" font="1">our approach. Some legacy sites use &lt;noscript&gt; tag for the purpose of third-</text>
<text top="196" left="202" width="519" height="14" font="1">party tracking. The content inside the &lt;noscript&gt; tag will only be displayed</text>
<text top="214" left="202" width="519" height="13" font="1">if scripts are not supported, or are disabled in the user’s browser. In all cases</text>
<text top="232" left="202" width="519" height="14" font="1">we found web beacons in the &lt;noscript&gt; tag. A Web beacon, also known as</text>
<text top="250" left="202" width="519" height="13" font="1">a web bug or clear GIFs, is an object that is placed on a web page to track</text>
<text top="268" left="202" width="519" height="14" font="1">users’ behavior on the Internet. Our tool CSP AiDer uses Javascript supported</text>
<text top="286" left="202" width="519" height="13" font="1">browser to render the pages for CSP construction and this was the main reason</text>
<text top="304" left="202" width="519" height="14" font="1">we did not consider what is inside the &lt;noscript&gt; tag in policy recommendation.</text>
<text top="322" left="202" width="519" height="13" font="1">Despite these limitations, we believe that our study is a signiﬁcant step forward</text>
<text top="340" left="202" width="519" height="13" font="1">in aiding web sites administrators for migration from SOP to CSP and hope it</text>
<text top="358" left="202" width="132" height="13" font="1">will raise awareness.</text>
<text top="400" left="202" width="10" height="16" font="3">5</text>
<text top="400" left="232" width="123" height="16" font="3">Related Work</text>
<text top="434" left="202" width="519" height="13" font="1">To the best of our knowledge, only one ’WordPress CSP Plugin’ <a href="pdfxml.html#10">[12] </a>exist for the</text>
<text top="451" left="202" width="519" height="13" font="1">recommendation of content security policies. The content security policy plugin</text>
<text top="469" left="202" width="519" height="13" font="1">facilitates WordPress administrators with a mechanism to specify a custom pol-</text>
<text top="487" left="202" width="519" height="13" font="1">icy, or adopt a recommended policy based on the types and sources of content</text>
<text top="505" left="202" width="206" height="13" font="1">present in their site. W<a href="pdfxml.html#9">ordPress</a></text>
<text top="503" left="408" width="6" height="9" font="4"><a href="pdfxml.html#9">4</a></text>
<text top="505" left="420" width="301" height="13" font="1">is an open source content management system</text>
<text top="523" left="202" width="519" height="13" font="1">(CMS) and often used as a blog publishing application. In comparison to the</text>
<text top="541" left="202" width="519" height="13" font="1">work we present in this paper, to the best of our knowledge, no large-scale study</text>
<text top="559" left="202" width="519" height="13" font="1">has been performed to date for the construction of CSPs and its importance for</text>
<text top="577" left="202" width="151" height="13" font="1">the security of content.</text>
<text top="619" left="202" width="10" height="16" font="3">6</text>
<text top="619" left="232" width="97" height="16" font="3">Conclusion</text>
<text top="653" left="202" width="519" height="13" font="1">In this paper, we have presented the ﬁrst automated approach for the construc-</text>
<text top="671" left="202" width="519" height="14" font="1">tion of CSPs in web applications. Our prototype implementation called CSP</text>
<text top="690" left="202" width="519" height="12" font="1">AiDer was able to crawl websites and recommend CSP. In order to determine</text>
<text top="707" left="202" width="519" height="13" font="1">the feasibility of our approach, we analyzed more than 10000 popular websites</text>
<text top="725" left="202" width="519" height="13" font="1">and have contributed in the recommendation of their CSPs. We informed the</text>
<text top="743" left="202" width="519" height="13" font="1">sites for which we could obtain contact information, and some of these sites</text>
<text top="761" left="202" width="519" height="13" font="1">wrote back to us and conﬁrmed our ﬁndings. We hope that this paper will raise</text>
<text top="778" left="202" width="144" height="13" font="1">awareness about CSP.</text>
<text top="814" left="225" width="501" height="13" font="1">Acknowledgements: We thank Dieter Gollmann, Collin Jackson, Martin Johns,</text>
<text top="832" left="202" width="519" height="13" font="1">and the anonymous reviewers for their comments on this paper. This work is sup-</text>
<text top="850" left="202" width="519" height="13" font="1">ported by Higher Education Commission (HEC), Pakistan and DAAD Germany</text>
<text top="868" left="202" width="193" height="13" font="1">under PhD scholarship grant.</text>
<text top="910" left="202" width="94" height="16" font="3">References</text>
<text top="943" left="202" width="519" height="12" font="2">1. S. Cook. A web developer’s guide to cross-site scripting, January 2003. <a href="http://www.giac.org/practical/GSEC/Steve_Cook_GSEC">http://www.</a></text>
<text top="960" left="220" width="279" height="11" font="2"><a href="http://www.giac.org/practical/GSEC/Steve_Cook_GSEC">giac.org/practical/GSEC/Steve_Cook_GSEC.</a></text>
<text top="982" left="206" width="5" height="8" font="5">4</text>
<text top="986" left="217" width="148" height="11" font="2"><a href="http://wordpress.com/">http://wordpress.com/</a></text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1188" width="918">
<text top="179" left="202" width="519" height="12" font="2">2. WhiteHat Website Security Statistics Report 2011.: <a href="https://www.whitehatsec.com/home/resource/stats.html">https://www.whitehatsec.</a></text>
<text top="197" left="220" width="198" height="11" font="2"><a href="https://www.whitehatsec.com/home/resource/stats.html">com/home/resource/stats.html</a></text>
<text top="212" left="202" width="519" height="12" font="2">3. OWASP Top 10.: <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">https://www.owasp.org/index.php/Category:OWASP_Top_Ten_</a></text>
<text top="230" left="220" width="49" height="11" font="2"><a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">Project</a></text>
<text top="245" left="202" width="519" height="12" font="2">4. Jesse Ruderman. The same origin policy.: <a href="http://www.mozilla.org/projects/security/components/same-origin.html">http://www.mozilla.org/projects/</a></text>
<text top="263" left="220" width="339" height="11" font="2"><a href="http://www.mozilla.org/projects/security/components/same-origin.html">security/components/same-origin.html, </a>August 2001</text>
<text top="278" left="202" width="519" height="12" font="2">5. Sid Stamm, Brandon Sterne and Gervase Markham.: Reining in the Web with Con-</text>
<text top="294" left="220" width="219" height="12" font="2">tent Security Policy. In WWW 2010</text>
<text top="311" left="202" width="519" height="12" font="2">6. Content Security Policy. <a href="https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html">https://dvcs.w3.org/hg/content-security-policy/</a></text>
<text top="328" left="220" width="347" height="11" font="2"><a href="https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html">raw-file/tip/csp-specification.dev.html, </a>July 2011.</text>
<text top="344" left="202" width="89" height="12" font="2">7. Introducing</text>
<text top="344" left="306" width="48" height="12" font="2">Content</text>
<text top="344" left="370" width="49" height="12" font="2">Security</text>
<text top="344" left="435" width="37" height="12" font="2">Policy</text>
<text top="345" left="488" width="233" height="11" font="2"><a href="https://developer.mozilla.org/en/Introducing_Content_Security_Policy">https://developer.mozilla.org/en/</a></text>
<text top="361" left="220" width="247" height="11" font="2"><a href="https://developer.mozilla.org/en/Introducing_Content_Security_Policy">Introducing_Content_Security_Policy</a></text>
<text top="377" left="202" width="372" height="12" font="2">8. Twitter Engineering.: <a href="http://engineering.twitter.com/">http://engineering.twitter.com/</a></text>
<text top="393" left="202" width="410" height="12" font="2">9. Alexa The Web Information Company.: <a href="http://www.alexa.com/">http://www.alexa.com/</a></text>
<text top="410" left="202" width="516" height="12" font="2">10. Steven Levithan’s Blog.: <a href="http://blog.stevenlevithan.com/archives/parseuri">http://blog.stevenlevithan.com/archives/parseuri</a></text>
<text top="426" left="202" width="325" height="12" font="2">11. Heritrix Project.: <a href="http://crawler.archive.org/">http://crawler.archive.org/</a></text>
<text top="442" left="202" width="90" height="12" font="2">12. WordPress</text>
<text top="442" left="316" width="39" height="12" font="2">Plugin</text>
<text top="442" left="379" width="64" height="12" font="2">Directory.:</text>
<text top="443" left="467" width="254" height="11" font="2"><a href="http://wordpress.org/extend/plugins/content-security-policy/">http://wordpress.org/extend/plugins/</a></text>
<text top="460" left="220" width="171" height="11" font="2"><a href="http://wordpress.org/extend/plugins/content-security-policy/">content-security-policy/</a></text>
</page>
</pdf2xml>
