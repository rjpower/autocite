<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="0" size="15" family="Times" color="#000000"/>
	<fontspec id="1" size="19" family="Times" color="#000000"/>
<text top="152" left="330" width="288" height="23" font="0">Czech Technical University in Prague</text>
<text top="173" left="349" width="252" height="23" font="0">Faculty of Electrical Engineering</text>
<text top="194" left="281" width="387" height="23" font="0">Department of Computer Science and Engineering</text>
<text top="550" left="415" width="120" height="23" font="0">Master's Thesis</text>
<text top="585" left="256" width="436" height="28" font="1">Java implementation for Smalltalk/X VM</text>
<text top="642" left="390" width="168" height="28" font="1">Bc. Marcel Hlopko</text>
<text top="883" left="337" width="266" height="23" font="0">Supervisor: Ing. Jan Vran√Ω, PhD.</text>
<text top="967" left="202" width="545" height="23" font="0">Study Programme: Electrical Engineering and Information Technology</text>
<text top="1006" left="278" width="392" height="23" font="0">Field of Study: Computer Science and Engineering</text>
<text top="1045" left="402" width="145" height="23" font="0">December 21, 2011</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="2" size="14" family="Times" color="#000000"/>
<text top="92" left="93" width="13" height="21" font="2">iv</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="3" size="28" family="Times" color="#000000"/>
<text top="92" left="791" width="9" height="21" font="2">v</text>
<text top="969" left="149" width="259" height="40" font="3">Aknowledgements</text>
<text top="1024" left="149" width="651" height="21" font="2">This thesis would not be possible without the help and leading of my supervisor, Jan Vran√Ω.</text>
<text top="1044" left="149" width="651" height="21" font="2">Also, I would like to thank my parents for support and friends for patience and understanding,</text>
<text top="1065" left="149" width="514" height="21" font="2">when they had to listen to me talking about the problems in this thesis.</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="13" height="21" font="2">vi</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="4" size="6" family="Times" color="#000000"/>
<text top="92" left="782" width="18" height="21" font="2">vii</text>
<text top="844" left="149" width="167" height="40" font="3">Declaration</text>
<text top="899" left="149" width="651" height="21" font="2">I hereby declare that I have completed this thesis independently and that I have listed all</text>
<text top="920" left="149" width="259" height="21" font="2">the literature and publications used.</text>
<text top="940" left="149" width="651" height="21" font="2">I have no objection to usage of this work in compliance with the act ¬ü60 Z√°kon ¬£. 121/2000Sb.</text>
<text top="960" left="149" width="651" height="21" font="2">(copyright law), and with the rights connected with the copyright act including the changes</text>
<text top="981" left="149" width="73" height="21" font="2">in the act.</text>
<text top="1065" left="149" width="131" height="21" font="2">Prague, 1. 12. 2011</text>
<text top="1072" left="499" width="292" height="12" font="4">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="22" height="21" font="2">viii</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="787" width="13" height="21" font="2">ix</text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="9" height="21" font="2">x</text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="5" size="35" family="Times" color="#000000"/>
<text top="253" left="149" width="149" height="48" font="5">Abstract</text>
<text top="353" left="149" width="651" height="21" font="2">A possibility to compose program of multiple dierent programming languages is becoming of</text>
<text top="373" left="149" width="651" height="21" font="2">great importance nowadays. For example, programmers can reuse existing software libraries</text>
<text top="394" left="149" width="651" height="21" font="2">even if they are written in a dierent language, which brings code use one level further.</text>
<text top="414" left="149" width="651" height="21" font="2">Recently, a lot of eort has been spent on supporting multiple languages on both major</text>
<text top="434" left="149" width="282" height="21" font="2">runtime environments  Java and CLR.</text>
<text top="455" left="175" width="625" height="21" font="2">In this thesis, we will describe an implementation of libjava, a Java language implemen-</text>
<text top="475" left="149" width="651" height="21" font="2">tation running on top of Smalltalk/X virtual machine. Contrary to Java or CLR, libjava</text>
<text top="495" left="149" width="651" height="21" font="2">is not translating Java programs into Smalltalk bytecode. Instead, the virtual machine was</text>
<text top="516" left="149" width="651" height="21" font="2">modied so it can run both Smalltalk and Java bytecode. We have validated our imple-</text>
<text top="536" left="149" width="651" height="21" font="2">mentation on several large Java applications - JUnit testing framework, Groovy compiler,</text>
<text top="556" left="149" width="441" height="21" font="2">Eclipse Java Compiler and Apache Tomcat Servlet Container.</text>
<text top="694" left="149" width="149" height="48" font="5">Abstract</text>
<text top="790" left="175" width="625" height="21" font="2">Une possibilit√© de composer le programme des langage di√©rents multiples de program-</text>
<text top="811" left="149" width="651" height="21" font="2">mation est de plus en plus grande importance de nos jours. Par exemple, les programmeurs</text>
<text top="831" left="149" width="651" height="21" font="2">peuvent r√©utiliser les biblioth√®ques logicielles existants m√™me si elles sont √©crites dans un</text>
<text top="851" left="149" width="651" height="21" font="2">langage di√©rent, ce qui apporte l'utilisation du code de niveau plus haut. R√©cemment,</text>
<text top="872" left="149" width="651" height="21" font="2">beaucoup d'eort a √©t√© d√©pens√© sur le soutien des langages multiples sur les deux grandes</text>
<text top="892" left="149" width="394" height="21" font="2">runtime environnements Java Virtual Machine et CLR.</text>
<text top="912" left="175" width="625" height="21" font="2">Dans cette th√®se, nous allons d√©crire une mise en √∑uvre de libjava, une implementation</text>
<text top="933" left="149" width="651" height="21" font="2">du langage Java qui s'ex√©cute au dessus de Smalltalk/X machine virtuelle. Au contraire</text>
<text top="953" left="149" width="651" height="21" font="2">de langages fonctionnant sur JVM ou CLR, libjava ne traduit pas des programmes de</text>
<text top="973" left="149" width="651" height="21" font="2">Java au bytecode de Smalltalk. Au lieu de cela, la machine virtuelle a √©t√© modi√© de</text>
<text top="994" left="149" width="651" height="21" font="2">sorte qu'il peut fonctionner aussi bien Smalltalk que Java. Nous avons valid√© notre mise en</text>
<text top="1014" left="149" width="651" height="21" font="2">√∑uvre sur plusieurs applications Java grands - JUnit test framework, Groovy compilateur,</text>
<text top="1034" left="149" width="482" height="21" font="2">le compilateur Java Eclipse et le serveur de servlet Apache Tomcat.</text>
<text top="1129" left="468" width="13" height="21" font="2">xi</text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="18" height="21" font="2">xii</text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="6" size="14" family="Times" color="#0000ff"/>
<text top="254" left="149" width="152" height="48" font="5">Contents</text>
<text top="372" left="149" width="127" height="21" font="6"><a href="pdfxml.html#19">1 Introduction</a></text>
<text top="372" left="791" width="9" height="21" font="2">1</text>
<text top="393" left="174" width="120" height="21" font="6"><a href="pdfxml.html#20">1.1 Initial state</a></text>
<text top="393" left="306" width="462" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="393" left="792" width="8" height="21" font="2">2</text>
<text top="415" left="174" width="124" height="21" font="6"><a href="pdfxml.html#21">1.2 Conventions</a></text>
<text top="415" left="306" width="462" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="415" left="792" width="8" height="21" font="2">3</text>
<text top="453" left="149" width="128" height="21" font="6"><a href="pdfxml.html#23">2 Architecture</a></text>
<text top="453" left="791" width="9" height="21" font="2">5</text>
<text top="474" left="174" width="165" height="21" font="6"><a href="pdfxml.html#23">2.1 General Structure</a></text>
<text top="474" left="344" width="424" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="474" left="792" width="8" height="21" font="2">5</text>
<text top="496" left="174" width="127" height="21" font="6"><a href="pdfxml.html#24">2.2 VM Support</a></text>
<text top="496" left="306" width="462" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="496" left="792" width="8" height="21" font="2">6</text>
<text top="517" left="211" width="200" height="21" font="6"><a href="pdfxml.html#24">2.2.1 Bytecode Interpreter</a></text>
<text top="517" left="420" width="348" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="517" left="792" width="8" height="21" font="2">6</text>
<text top="538" left="211" width="246" height="21" font="6"><a href="pdfxml.html#24">2.2.2 Java Frame Representation</a></text>
<text top="538" left="471" width="297" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="538" left="792" width="8" height="21" font="2">6</text>
<text top="560" left="211" width="236" height="21" font="6"><a href="pdfxml.html#25">2.2.3 Native method invocation</a></text>
<text top="560" left="458" width="309" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="560" left="792" width="8" height="21" font="2">7</text>
<text top="581" left="211" width="264" height="21" font="6"><a href="pdfxml.html#26">2.2.4 Implementing native methods</a></text>
<text top="581" left="483" width="284" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="581" left="792" width="8" height="21" font="2">8</text>
<text top="602" left="211" width="311" height="21" font="6"><a href="pdfxml.html#27">2.2.5 Instructions with complex semantics</a></text>
<text top="602" left="534" width="233" height="21" font="2">. . . . . . . . . . . . . . . . . . .</text>
<text top="602" left="792" width="8" height="21" font="2">9</text>
<text top="624" left="211" width="370" height="21" font="6"><a href="pdfxml.html#28">2.2.6 Supporting more than 16 method arguments</a></text>
<text top="624" left="585" width="215" height="21" font="2">. . . . . . . . . . . . . . . 10</text>
<text top="645" left="174" width="162" height="21" font="6"><a href="pdfxml.html#28">2.3 Java Class Model</a></text>
<text top="645" left="344" width="456" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10</text>
<text top="667" left="211" width="223" height="21" font="6"><a href="pdfxml.html#28">2.3.1 Smalltalk Object Model</a></text>
<text top="667" left="445" width="355" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . 10</text>
<text top="688" left="211" width="187" height="21" font="6"><a href="pdfxml.html#28">2.3.2 Java Object Model</a></text>
<text top="688" left="407" width="393" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10</text>
<text top="709" left="211" width="218" height="21" font="6"><a href="pdfxml.html#29">2.3.3 Object Model Mapping</a></text>
<text top="709" left="445" width="355" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . 11</text>
<text top="731" left="174" width="161" height="21" font="6"><a href="pdfxml.html#30">2.4 Runtime Support</a></text>
<text top="731" left="344" width="456" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12</text>
<text top="752" left="211" width="84" height="21" font="6"><a href="pdfxml.html#30">2.4.1 Java</a></text>
<text top="752" left="306" width="494" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12</text>
<text top="773" left="211" width="111" height="21" font="6"><a href="pdfxml.html#31">2.4.2 JavaVM</a></text>
<text top="773" left="331" width="469" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13</text>
<text top="795" left="263" width="195" height="21" font="6"><a href="pdfxml.html#32">2.4.2.1 JavaClassRegistry</a></text>
<text top="795" left="471" width="329" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . 14</text>
<text top="816" left="263" width="169" height="21" font="6"><a href="pdfxml.html#32">2.4.2.2 JavaReection</a></text>
<text top="816" left="445" width="355" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . 14</text>
<text top="837" left="211" width="318" height="21" font="6"><a href="pdfxml.html#32">2.4.3 JavaResolver, JavaRef and subclasses</a></text>
<text top="837" left="534" width="266" height="21" font="2">. . . . . . . . . . . . . . . . . . . 14</text>
<text top="876" left="149" width="132" height="21" font="6"><a href="pdfxml.html#33">3 Class loading</a></text>
<text top="876" left="781" width="19" height="21" font="2">15</text>
<text top="897" left="174" width="95" height="21" font="6"><a href="pdfxml.html#33">3.1 Classle</a></text>
<text top="897" left="280" width="520" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15</text>
<text top="918" left="174" width="340" height="21" font="6"><a href="pdfxml.html#33">3.2 JavaBehavior, JavaClass and their content</a></text>
<text top="918" left="522" width="278" height="21" font="2">. . . . . . . . . . . . . . . . . . . . 15</text>
<text top="940" left="174" width="196" height="21" font="6"><a href="pdfxml.html#34">3.3 Constant pool content</a></text>
<text top="940" left="382" width="418" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16</text>
<text top="961" left="174" width="130" height="21" font="6"><a href="pdfxml.html#34">3.4 Class loaders</a></text>
<text top="961" left="318" width="482" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16</text>
<text top="983" left="211" width="270" height="21" font="6"><a href="pdfxml.html#35">3.4.1 JVM startup and class loaders</a></text>
<text top="983" left="496" width="304" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . 17</text>
<text top="1004" left="263" width="225" height="21" font="6"><a href="pdfxml.html#36">3.4.1.1 Bootstrap class loader</a></text>
<text top="1004" left="496" width="304" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . 18</text>
<text top="1025" left="263" width="224" height="21" font="6"><a href="pdfxml.html#36">3.4.1.2 Extension class loader</a></text>
<text top="1025" left="496" width="304" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . 18</text>
<text top="1047" left="263" width="205" height="21" font="6"><a href="pdfxml.html#37">3.4.1.3 System class loader</a></text>
<text top="1047" left="483" width="316" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . 19</text>
<text top="1068" left="263" width="248" height="21" font="6"><a href="pdfxml.html#37">3.4.1.4 User-dened class loaders</a></text>
<text top="1068" left="522" width="278" height="21" font="2">. . . . . . . . . . . . . . . . . . . . 19</text>
<text top="1129" left="463" width="22" height="21" font="2">xiii</text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="22" height="21" font="2">xiv</text>
<text top="92" left="651" width="92" height="21" font="2">CONTENTS</text>
<text top="153" left="93" width="104" height="21" font="6"><a href="pdfxml.html#39">4 Resolving</a></text>
<text top="153" left="725" width="19" height="21" font="2">21</text>
<text top="174" left="117" width="352" height="21" font="6"><a href="pdfxml.html#39">4.1 Resolving, loading, linking and initialization</a></text>
<text top="174" left="478" width="266" height="21" font="2">. . . . . . . . . . . . . . . . . . . 21</text>
<text top="194" left="117" width="147" height="21" font="6"><a href="pdfxml.html#39">4.2 Eager resolving</a></text>
<text top="194" left="275" width="469" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21</text>
<text top="214" left="117" width="140" height="21" font="6"><a href="pdfxml.html#40">4.3 Lazy resolving</a></text>
<text top="214" left="262" width="482" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22</text>
<text top="235" left="117" width="239" height="21" font="6"><a href="pdfxml.html#40">4.4 Initial resolving architecture</a></text>
<text top="235" left="364" width="380" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . 22</text>
<text top="255" left="117" width="129" height="21" font="6"><a href="pdfxml.html#41">4.5 JavaResolver</a></text>
<text top="255" left="262" width="482" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23</text>
<text top="275" left="155" width="172" height="21" font="6"><a href="pdfxml.html#41">4.5.1 Resolving classes</a></text>
<text top="275" left="339" width="405" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23</text>
<text top="296" left="155" width="186" height="21" font="6"><a href="pdfxml.html#43">4.5.2 Resolving methods</a></text>
<text top="296" left="351" width="393" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25</text>
<text top="316" left="155" width="162" height="21" font="6"><a href="pdfxml.html#44">4.5.3 Resolving elds</a></text>
<text top="316" left="326" width="418" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26</text>
<text top="336" left="117" width="188" height="21" font="6"><a href="pdfxml.html#45">4.6 Invalidation proposal</a></text>
<text top="336" left="313" width="431" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27</text>
<text top="357" left="155" width="243" height="21" font="6"><a href="pdfxml.html#45">4.6.1 Constant Pool invalidation</a></text>
<text top="357" left="402" width="342" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . 27</text>
<text top="377" left="155" width="210" height="21" font="6"><a href="pdfxml.html#46">4.6.2 Incremental compiling</a></text>
<text top="377" left="377" width="367" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . 28</text>
<text top="414" left="93" width="243" height="21" font="6"><a href="pdfxml.html#47">5 Concurrency and monitors</a></text>
<text top="414" left="725" width="19" height="21" font="2">29</text>
<text top="434" left="117" width="101" height="21" font="6"><a href="pdfxml.html#47">5.1 Monitors</a></text>
<text top="434" left="224" width="520" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29</text>
<text top="454" left="155" width="141" height="21" font="6"><a href="pdfxml.html#48">5.1.1 JavaMonitor</a></text>
<text top="454" left="300" width="443" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30</text>
<text top="475" left="117" width="276" height="21" font="6"><a href="pdfxml.html#48">5.2 Exceptions in Java and Smalltalk</a></text>
<text top="475" left="402" width="342" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . 30</text>
<text top="511" left="93" width="363" height="21" font="6"><a href="pdfxml.html#51">6 Just-in-time and incremental compilation</a></text>
<text top="511" left="725" width="19" height="21" font="2">33</text>
<text top="531" left="117" width="209" height="21" font="6"><a href="pdfxml.html#51">6.1 Current implementation</a></text>
<text top="531" left="339" width="405" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33</text>
<text top="552" left="117" width="355" height="21" font="6"><a href="pdfxml.html#51">6.2 Changes to the current Java implementation</a></text>
<text top="552" left="478" width="266" height="21" font="2">. . . . . . . . . . . . . . . . . . . 33</text>
<text top="572" left="155" width="121" height="21" font="6"><a href="pdfxml.html#51">6.2.1 Resolving</a></text>
<text top="572" left="288" width="456" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33</text>
<text top="592" left="207" width="285" height="21" font="6"><a href="pdfxml.html#52">6.2.1.1 Safe resolving during link-time</a></text>
<text top="592" left="504" width="240" height="21" font="2">. . . . . . . . . . . . . . . . . 34</text>
<text top="613" left="207" width="269" height="21" font="6"><a href="pdfxml.html#52">6.2.1.2 Bytecode Interpreter change</a></text>
<text top="613" left="491" width="253" height="21" font="2">. . . . . . . . . . . . . . . . . . 34</text>
<text top="633" left="117" width="296" height="21" font="6"><a href="pdfxml.html#52">6.3 Changes needed in the JIT compiler</a></text>
<text top="633" left="427" width="316" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . 34</text>
<text top="653" left="117" width="218" height="21" font="6"><a href="pdfxml.html#53">6.4 JIT compilation proposal</a></text>
<text top="653" left="351" width="393" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35</text>
<text top="690" left="93" width="84" height="21" font="6"><a href="pdfxml.html#55">7 Testing</a></text>
<text top="690" left="725" width="19" height="21" font="2">37</text>
<text top="710" left="117" width="209" height="21" font="6"><a href="pdfxml.html#55">7.1 Test Runner integration</a></text>
<text top="710" left="339" width="405" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37</text>
<text top="731" left="117" width="123" height="21" font="6"><a href="pdfxml.html#56">7.2 Mauve tests</a></text>
<text top="731" left="250" width="494" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38</text>
<text top="767" left="93" width="108" height="21" font="6"><a href="pdfxml.html#57">8 Validation</a></text>
<text top="767" left="725" width="19" height="21" font="2">39</text>
<text top="788" left="117" width="162" height="21" font="6"><a href="pdfxml.html#57">8.1 JUnit and Mauve</a></text>
<text top="788" left="288" width="456" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39</text>
<text top="808" left="117" width="90" height="21" font="6"><a href="pdfxml.html#57">8.2 Groovy</a></text>
<text top="808" left="224" width="520" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39</text>
<text top="828" left="117" width="69" height="21" font="6"><a href="pdfxml.html#59">8.3 ECJ</a></text>
<text top="828" left="199" width="545" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41</text>
<text top="849" left="117" width="91" height="21" font="6"><a href="pdfxml.html#60">8.4 Tomcat</a></text>
<text top="849" left="224" width="520" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42</text>
<text top="885" left="93" width="103" height="21" font="6"><a href="pdfxml.html#61">9 Summary</a></text>
<text top="885" left="725" width="19" height="21" font="2">43</text>
<text top="922" left="93" width="236" height="21" font="6"><a href="pdfxml.html#65">A List of used abbreviations</a></text>
<text top="922" left="725" width="19" height="21" font="2">47</text>
<text top="958" left="93" width="221" height="21" font="6"><a href="pdfxml.html#67">B Content of attached CD</a></text>
<text top="958" left="725" width="19" height="21" font="2">49</text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1262" width="892">
<text top="253" left="149" width="247" height="48" font="5">List of Figures</text>
<text top="368" left="174" width="243" height="21" font="6"><a href="pdfxml.html#23">2.1 General structure of libjava</a></text>
<text top="368" left="433" width="335" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="368" left="792" width="8" height="21" font="2">5</text>
<text top="388" left="174" width="208" height="21" font="6"><a href="pdfxml.html#29">2.2 Smalltalk Object Model</a></text>
<text top="388" left="395" width="405" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11</text>
<text top="409" left="174" width="173" height="21" font="6"><a href="pdfxml.html#30">2.3 Java Object Model</a></text>
<text top="409" left="356" width="443" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12</text>
<text top="429" left="174" width="334" height="21" font="6"><a href="pdfxml.html#31">2.4 Java to Smalltalk Object Model Mapping</a></text>
<text top="429" left="522" width="278" height="21" font="2">. . . . . . . . . . . . . . . . . . . . 13</text>
<text top="464" left="174" width="107" height="21" font="6"><a href="pdfxml.html#35">3.1 JavaClass</a></text>
<text top="464" left="293" width="507" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17</text>
<text top="485" left="174" width="196" height="21" font="6"><a href="pdfxml.html#36">3.2 Constant pool content</a></text>
<text top="485" left="382" width="418" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18</text>
<text top="520" left="174" width="284" height="21" font="6"><a href="pdfxml.html#58">8.1 TestRunner with Java tests loaded</a></text>
<text top="520" left="471" width="329" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . 40</text>
<text top="540" left="174" width="307" height="21" font="6"><a href="pdfxml.html#59">8.2 Integration of Groovy into Workspace</a></text>
<text top="540" left="496" width="304" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . 41</text>
<text top="560" left="174" width="365" height="21" font="6"><a href="pdfxml.html#60">8.3 Screenshot of Tomcat running on the libjava</a></text>
<text top="560" left="547" width="253" height="21" font="2">. . . . . . . . . . . . . . . . . . 42</text>
<text top="1129" left="466" width="17" height="21" font="2">xv</text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="22" height="21" font="2">xvi</text>
<text top="92" left="599" width="144" height="21" font="2">LIST OF FIGURES</text>
</page>
<page number="15" position="absolute" top="0" left="0" height="1262" width="892">
<text top="253" left="149" width="386" height="48" font="5">List of Code Examples</text>
<text top="353" left="174" width="402" height="21" font="6"><a href="pdfxml.html#25">2.1 Checking for and invocation of Java native method</a></text>
<text top="353" left="585" width="182" height="21" font="2">. . . . . . . . . . . . . . .</text>
<text top="353" left="792" width="8" height="21" font="2">7</text>
<text top="373" left="174" width="296" height="21" font="6"><a href="pdfxml.html#25">2.2 nativeMethodInvokation ST method</a></text>
<text top="373" left="483" width="284" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="373" left="792" width="8" height="21" font="2">7</text>
<text top="394" left="174" width="325" height="21" font="6"><a href="pdfxml.html#25">2.3 searchNativeImplementation ST method</a></text>
<text top="394" left="509" width="259" height="21" font="2">. . . . . . . . . . . . . . . . . . . . .</text>
<text top="394" left="792" width="8" height="21" font="2">7</text>
<text top="414" left="174" width="380" height="21" font="6"><a href="pdfxml.html#26">2.4 Example of Java native method implementation</a></text>
<text top="414" left="560" width="208" height="21" font="2">. . . . . . . . . . . . . . . . .</text>
<text top="414" left="792" width="8" height="21" font="2">8</text>
<text top="434" left="174" width="249" height="21" font="6"><a href="pdfxml.html#27">2.5 ARRAYLENGTH instruction</a></text>
<text top="434" left="433" width="335" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="434" left="792" width="8" height="21" font="2">9</text>
<text top="470" left="174" width="250" height="21" font="6"><a href="pdfxml.html#40">4.1 Initial resolving logic example</a></text>
<text top="470" left="433" width="367" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . 22</text>
<text top="490" left="174" width="211" height="21" font="6"><a href="pdfxml.html#42">4.2 Class reference resolving</a></text>
<text top="490" left="395" width="405" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24</text>
<text top="510" left="174" width="366" height="21" font="6"><a href="pdfxml.html#42">4.3 Resolving example shown in NEW instruction</a></text>
<text top="510" left="547" width="253" height="21" font="2">. . . . . . . . . . . . . . . . . . 24</text>
<text top="531" left="174" width="382" height="21" font="6"><a href="pdfxml.html#43">4.4 RESOLVE_REF_IF_NOT_ALREADY macro</a></text>
<text top="531" left="560" width="240" height="21" font="2">. . . . . . . . . . . . . . . . . 25</text>
<text top="551" left="174" width="201" height="21" font="6"><a href="pdfxml.html#44">4.5 Field lookup algorithm</a></text>
<text top="551" left="382" width="418" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26</text>
<text top="586" left="174" width="337" height="21" font="6"><a href="pdfxml.html#59">8.1 Java code executed by Groovy Workspace</a></text>
<text top="586" left="522" width="278" height="21" font="2">. . . . . . . . . . . . . . . . . . . . 41</text>
<text top="1129" left="461" width="26" height="21" font="2">xvii</text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="31" height="21" font="2">xviii</text>
<text top="92" left="528" width="216" height="21" font="2">LIST OF CODE EXAMPLES</text>
</page>
<page number="17" position="absolute" top="0" left="0" height="1262" width="892">
<text top="253" left="149" width="231" height="48" font="5">List of Tables</text>
<text top="368" left="174" width="176" height="21" font="6"><a href="pdfxml.html#21">1.1 Typing conventions</a></text>
<text top="368" left="356" width="411" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</text>
<text top="368" left="792" width="8" height="21" font="2">3</text>
<text top="403" left="174" width="165" height="21" font="6"><a href="pdfxml.html#34">3.1 Classle structure</a></text>
<text top="403" left="344" width="456" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16</text>
<text top="424" left="174" width="229" height="21" font="6"><a href="pdfxml.html#37">3.2 Java constant pool content</a></text>
<text top="424" left="407" width="393" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19</text>
<text top="459" left="174" width="241" height="21" font="6"><a href="pdfxml.html#48">5.1 JavaMonitor public interface</a></text>
<text top="459" left="420" width="380" height="21" font="2">. . . . . . . . . . . . . . . . . . . . . . . . . . . . 30</text>
<text top="1129" left="464" width="22" height="21" font="2">xix</text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="17" height="21" font="2">xx</text>
<text top="92" left="609" width="135" height="21" font="2">LIST OF TABLES</text>
</page>
<page number="19" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="7" size="9" family="Times" color="#0000ff"/>
	<fontspec id="8" size="11" family="Times" color="#000000"/>
<text top="259" left="149" width="145" height="40" font="3">Chapter 1</text>
<text top="336" left="149" width="214" height="48" font="5">Introduction</text>
<text top="443" left="149" width="651" height="21" font="2">A number of programming languages has been developed in the past and new ones are being</text>
<text top="463" left="149" width="651" height="21" font="2">developed. Although all general-purpose programming languages are in theory equivalent, in</text>
<text top="484" left="149" width="651" height="21" font="2">practice some languages better t particular problem than another. Moreover, there is a lot</text>
<text top="504" left="149" width="651" height="21" font="2">of software libraries already written and possibility to reuse existing library greatly increases</text>
<text top="524" left="149" width="194" height="21" font="2">programmer's productivity.</text>
<text top="552" left="175" width="625" height="21" font="2">Recently, lot of eort has been done to support multiple languages. There is more than</text>
<text top="572" left="149" width="310" height="21" font="2">300 languages implemented on top of <a href="pdfxml.html#63">JVM[</a></text>
<text top="572" left="459" width="8" height="21" font="6"><a href="pdfxml.html#63">8</a></text>
<text top="572" left="468" width="9" height="21" font="2"><a href="pdfxml.html#63">].</a></text>
<text top="600" left="175" width="625" height="21" font="2">libjava is an implementation of Java language for Smalltalk/X environment. libjava</text>
<text top="621" left="149" width="651" height="21" font="2">allows Java programs to run within Smalltalk/X environment. Smalltalk code can run Java</text>
<text top="641" left="149" width="651" height="21" font="2">code, which can in turn call back Smalltalk code. There were two main reasons for imple-</text>
<text top="661" left="149" width="211" height="21" font="2">menting Java in Smalltalk/X:</text>
<text top="712" left="174" width="454" height="21" font="2">¬à reusing existing Java code in software written in Smalltalk/X</text>
<text top="751" left="174" width="626" height="21" font="2">¬à being able to run Java code together with Smalltalk and other languages already sup-</text>
<text top="772" left="190" width="610" height="21" font="2">ported by Smalltalk/X provides great vehicle for further research on language interop-</text>
<text top="792" left="190" width="62" height="21" font="2">erability.</text>
<text top="843" left="175" width="389" height="21" font="2">A common approach chosen by both JVM and <a href="pdfxml.html#19">CLR</a></text>
<text top="841" left="564" width="6" height="16" font="7"><a href="pdfxml.html#19">1</a></text>
<text top="843" left="578" width="222" height="21" font="2">is to compile hosted languages</text>
<text top="863" left="149" width="651" height="21" font="2">into one intermediate language (Java bytecode in case of JVM or CIL in case of CLR).</text>
<text top="883" left="149" width="651" height="21" font="2">The virtual machine understands and interprets this common intermediate representation.</text>
<text top="904" left="149" width="651" height="21" font="2">However, such approach has few drawbacks. The main one is fact that the all features not</text>
<text top="924" left="149" width="651" height="21" font="2">directly supported by the common intermediate language must be emulated on top of it,</text>
<text top="944" left="149" width="289" height="21" font="2">which may be bit cumbersome and slow.</text>
<text top="972" left="175" width="625" height="21" font="2">On contrary to this traditional implementation, libjava took dierent approach. Instead</text>
<text top="993" left="149" width="651" height="21" font="2">of translating Java code into Smalltalk/X bytecode, the virtual machine has been modied</text>
<text top="1013" left="149" width="651" height="21" font="2">so it can execute both Java and Smalltalk bytecodes. In other words, the virtual machine</text>
<text top="1033" left="149" width="608" height="21" font="2">contains interpreter and compiler for both, Java and Smalltalk bytecode instructions.</text>
<text top="1069" left="168" width="5" height="12" font="4">1</text>
<text top="1071" left="174" width="338" height="17" font="8">http://msdn.microsoft.com/en-us/library/8bs2ecf4.aspx</text>
<text top="1129" left="470" width="8" height="21" font="2">1</text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="8" height="21" font="2">2</text>
<text top="92" left="498" width="246" height="21" font="2">CHAPTER 1. INTRODUCTION</text>
<text top="149" left="93" width="175" height="28" font="1">1.1 Initial state</text>
<text top="194" left="93" width="651" height="21" font="2">We must say, that a lot of work has been done in past. Development of libjava has been</text>
<text top="215" left="93" width="651" height="21" font="2">started by Claus Gittinger in 1996 and almost stopped in 1999, leaving libjava being able</text>
<text top="235" left="93" width="651" height="21" font="2">to run Java applets using 1.1 runtime library. The basic architecture has been laid out by</text>
<text top="255" left="93" width="138" height="21" font="2">the original author.</text>
<text top="280" left="118" width="625" height="21" font="2">At the time, when we started working on libjava, current version of Java was 1.6.</text>
<text top="300" left="93" width="651" height="21" font="2">libjava was not able to start and run java programs using 1.6 runtime library. Many</text>
<text top="321" left="93" width="651" height="21" font="2">native method implementations were missing,some instruction semantic changed since then.</text>
<text top="341" left="93" width="651" height="21" font="2">Therefore, we had to implement missing features and x some parts of the codebase that</text>
<text top="361" left="93" width="651" height="21" font="2">did not t expected behavior. Following list summarizes changes and improvements we did:</text>
<text top="405" left="113" width="334" height="21" font="2">1. Changed native method binding mechanism</text>
<text top="439" left="113" width="272" height="21" font="2">2. Many native methods implemented</text>
<text top="473" left="113" width="164" height="21" font="2">3. Fixes in class loader</text>
<text top="507" left="113" width="368" height="21" font="2">4. Fixes in Java bytecode processor and decompiler</text>
<text top="542" left="113" width="171" height="21" font="2">5. Integration of <a href="pdfxml.html#20">JUnit</a></text>
<text top="540" left="285" width="6" height="16" font="7"><a href="pdfxml.html#20">2</a></text>
<text top="542" left="297" width="87" height="21" font="2">and Mauv<a href="pdfxml.html#20">e</a></text>
<text top="540" left="384" width="6" height="16" font="7"><a href="pdfxml.html#20">3</a></text>
<text top="542" left="396" width="134" height="21" font="2">testing frameworks</text>
<text top="576" left="113" width="266" height="21" font="2">6. Redesigned Constant Pool content</text>
<text top="610" left="113" width="275" height="21" font="2">7. Reimplemented class resolving logic</text>
<text top="644" left="113" width="279" height="21" font="2">8. Implemented notion of Class Loader</text>
<text top="679" left="113" width="251" height="21" font="2">9. Class Space (JavaClassRegistry)</text>
<text top="713" left="105" width="363" height="21" font="2">10. Reimplemented synchronization (JavaMonitor)</text>
<text top="747" left="105" width="245" height="21" font="2">11. Java support for stack unwind</text>
<text top="781" left="105" width="310" height="21" font="2">12. Constant Pool invalidation (unnished)</text>
<text top="816" left="105" width="249" height="21" font="2">13. Java JIT compiler (unnished)</text>
<text top="859" left="118" width="625" height="21" font="2">In following chapters, we will talk about how we designed and implemented new features,</text>
<text top="879" left="93" width="651" height="21" font="2">reasons, why we had to reimplement existing features and how we validated our result. In</text>
<text top="899" left="93" width="53" height="21" font="2">chapter</text>
<text top="899" left="150" width="8" height="21" font="6"><a href="pdfxml.html#23">2</a></text>
<text top="899" left="162" width="457" height="21" font="2">we will familiarize the reader with general architecture, in chapter</text>
<text top="899" left="623" width="8" height="21" font="6"><a href="pdfxml.html#33">3</a></text>
<text top="899" left="635" width="109" height="21" font="2">we will describe</text>
<text top="920" left="93" width="282" height="21" font="2">our class loading mechanism, in chapter</text>
<text top="920" left="380" width="8" height="21" font="6"><a href="pdfxml.html#39">4</a></text>
<text top="920" left="393" width="350" height="21" font="2">we will talk about new constant pool content and</text>
<text top="940" left="93" width="232" height="21" font="2">new resolving scheme. In chapter</text>
<text top="940" left="329" width="8" height="21" font="6"><a href="pdfxml.html#47">5</a></text>
<text top="940" left="337" width="407" height="21" font="2"><a href="pdfxml.html#47">, </a>we describe how we achieved synchronization and locking</text>
<text top="960" left="93" width="295" height="21" font="2">across both Java and Smalltalk. Chapter</text>
<text top="960" left="394" width="8" height="21" font="6"><a href="pdfxml.html#51">6</a></text>
<text top="960" left="408" width="336" height="21" font="2">deals with Just-in-Time compiler, our proposal</text>
<text top="981" left="93" width="651" height="21" font="2">on its behavior and review of current, not working implementation. Our testing approach</text>
<text top="1001" left="93" width="179" height="21" font="2">is summarized in chapter</text>
<text top="1001" left="278" width="8" height="21" font="6"><a href="pdfxml.html#55">7</a></text>
<text top="1001" left="292" width="270" height="21" font="2">and we validate the results in chapter</text>
<text top="1001" left="567" width="8" height="21" font="6"><a href="pdfxml.html#57">8</a></text>
<text top="1001" left="575" width="168" height="21" font="2"><a href="pdfxml.html#57">. </a>We summarize gained</text>
<text top="1021" left="93" width="151" height="21" font="2">experience in chapter</text>
<text top="1021" left="250" width="8" height="21" font="6"><a href="pdfxml.html#61">9</a></text>
<text top="1021" left="258" width="5" height="21" font="2"><a href="pdfxml.html#61">.</a></text>
<text top="1053" left="112" width="5" height="12" font="4">2</text>
<text top="1054" left="118" width="136" height="17" font="8">http://www.junit.org/</text>
<text top="1069" left="112" width="5" height="12" font="4">3</text>
<text top="1071" left="118" width="185" height="17" font="8">http://sourceware.org/mauve/</text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="162" height="21" font="2">1.2. CONVENTIONS</text>
<text top="92" left="792" width="8" height="21" font="2">3</text>
<text top="149" left="149" width="180" height="28" font="1">1.2 Conventions</text>
<text top="194" left="149" width="447" height="21" font="2">Throughout the thesis, we will use conventions shown in Table</text>
<text top="194" left="601" width="21" height="21" font="6"><a href="pdfxml.html#21">1.1</a></text>
<text top="194" left="622" width="5" height="21" font="2"><a href="pdfxml.html#21">.</a></text>
<text top="248" left="165" width="62" height="21" font="2">Example</text>
<text top="248" left="487" width="81" height="21" font="2">Description</text>
<text top="277" left="165" width="157" height="13" font="2">java.lang.Object</text>
<text top="272" left="487" width="182" height="21" font="2">Class names, inlined code</text>
<text top="298" left="165" width="304" height="13" font="2">JavaClassRegistry¬ªclassForName:</text>
<text top="293" left="487" width="298" height="21" font="2">instance method classForName: of Java-</text>
<text top="313" left="487" width="135" height="21" font="2">ClassRegistry class</text>
<text top="339" left="165" width="275" height="13" font="2">JavaVM class¬ªthrowException:</text>
<text top="334" left="487" width="298" height="21" font="2">class method throwException: of JavaVM</text>
<text top="354" left="487" width="33" height="21" font="2">class</text>
<text top="381" left="165" width="167" height="13" font="2">Object#toString()</text>
<text top="375" left="487" width="298" height="21" font="2">instance method toString() of Object class</text>
<text top="396" left="487" width="284" height="21" font="2">(notation for Java classes and methods)</text>
<text top="422" left="165" width="255" height="13" font="2">Double.parseDouble(String)</text>
<text top="416" left="487" width="298" height="21" font="2">static method parseDouble with one ar-</text>
<text top="437" left="487" width="298" height="21" font="2">gument of type java.lang.String dened in</text>
<text top="457" left="487" width="156" height="21" font="2">class java.lang.Double</text>
<text top="492" left="367" width="216" height="21" font="2">Table 1.1: Typing conventions</text>
</page>
<page number="22" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="8" height="21" font="2">4</text>
<text top="92" left="498" width="246" height="21" font="2">CHAPTER 1. INTRODUCTION</text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1262" width="892">
<text top="256" left="149" width="145" height="40" font="3">Chapter 2</text>
<text top="330" left="149" width="214" height="48" font="5">Architecture</text>
<text top="435" left="149" width="651" height="21" font="2">libjava itself consists of two parts: VM support consisting mainly of Bytecode in-</text>
<text top="455" left="149" width="651" height="21" font="2">terpreter, internally called Jinterpret, and ST Runtime, written in Smalltalk. In this</text>
<text top="475" left="149" width="651" height="21" font="2">chapter we will describe most important parts of libjava and we will give the reader general</text>
<text top="496" left="149" width="646" height="21" font="2">understanding of how things work together and where a particular feature is implemented.</text>
<text top="548" left="149" width="241" height="28" font="1">2.1 General Structure</text>
<text top="985" left="330" width="290" height="21" font="2">Figure 2.1: General structure of libjava</text>
<text top="1027" left="175" width="46" height="21" font="2">Figure</text>
<text top="1027" left="227" width="21" height="21" font="6"><a href="pdfxml.html#23">2.1</a></text>
<text top="1027" left="248" width="552" height="21" font="2"><a href="pdfxml.html#23">, </a>as mentioned, shows two parts. On the left side, virtual machine, on the</text>
<text top="1048" left="149" width="651" height="21" font="2">right side, Smalltalk environment. Bytecode Interpreter is written in C language as a</text>
<text top="1068" left="149" width="651" height="21" font="2">part of ST/X virtual machine and the rest of libjava is written in Smalltalk. Smalltalk</text>
<text top="1129" left="470" width="8" height="21" font="2">5</text>
</page>
<page number="24" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="9" size="11" family="Times" color="#0000ff"/>
<text top="92" left="93" width="8" height="21" font="2">6</text>
<text top="92" left="496" width="248" height="21" font="2">CHAPTER 2. ARCHITECTURE</text>
<text top="153" left="93" width="651" height="21" font="2">part can be divided into Model, containing classes describing entities of Java language,</text>
<text top="174" left="93" width="651" height="21" font="2">such as JavaClass and JavaMethod. Mentioning these classes, it is important to note,</text>
<text top="194" left="93" width="651" height="21" font="2">that both Java class and Smalltalk class are rst class citizens, they are both subclasses of</text>
<text top="214" left="93" width="651" height="21" font="2">common parent and they behave identically. Similarly, Smalltalk and Java methods are both</text>
<text top="235" left="93" width="651" height="21" font="2">executable code, there is not an emulation involved. Runtime Support consists of classes</text>
<text top="255" left="93" width="299" height="21" font="2">implementing logic livening up the model.</text>
<text top="312" left="93" width="186" height="28" font="1">2.2 VM Support</text>
<text top="361" left="93" width="651" height="21" font="2">libjavais not Java bytecode to Smalltalk bytecode compiler, it directly interprets Java byte-</text>
<text top="381" left="93" width="591" height="21" font="2">code. Because of that, virtual machine support is needed, for performance reasons.</text>
<text top="435" left="93" width="248" height="23" font="0">2.2.1 Bytecode Interpreter</text>
<text top="474" left="93" width="651" height="21" font="2">Initial version of libjava used Java interpreter written in C language. This interpreter is</text>
<text top="495" left="93" width="651" height="21" font="2">part of Smalltalk/X virtual machine. Interpreting Java in compiled C code is more eective</text>
<text top="515" left="93" width="193" height="21" font="2">than doing so in Smalltalk.</text>
<text top="542" left="118" width="625" height="21" font="2">In order to support Bytecode Interpreter, ST/X virtual machine has been changed, so</text>
<text top="562" left="93" width="208" height="21" font="2">it is aware of Java metho<a href="pdfxml.html#24">ds.</a></text>
<text top="560" left="301" width="6" height="16" font="7"><a href="pdfxml.html#24">1</a></text>
<text top="562" left="321" width="423" height="21" font="2">When a method is executed, VM checks if the method is</text>
<text top="582" left="93" width="651" height="21" font="2">dened in Smalltalk or Java, and handles the method appropriately. In case of Java method,</text>
<text top="603" left="93" width="651" height="21" font="2">interpretation is passed to Bytecode Interpreter. Bytecode Interpreter then creates instance</text>
<text top="623" left="93" width="651" height="21" font="2">of JavaContext, object representation of stack frames in Smalltalk, available to the</text>
<text top="643" left="93" width="651" height="21" font="2">running Smalltalk code and programmer. Bytecode Interpreter initializes context and starts</text>
<text top="664" left="93" width="210" height="21" font="2">executing method's bytecode.</text>
<text top="717" left="93" width="302" height="23" font="0">2.2.2 Java Frame Representation</text>
<text top="756" left="93" width="651" height="21" font="2">Instances of class JavaContext represent activation records for all Java methods being</text>
<text top="777" left="93" width="651" height="21" font="2">executed within Smalltalk/X VM. Java contexts are created by the Bytecode Interpreter</text>
<text top="797" left="93" width="651" height="21" font="2">for each invoked method. JavaContext extends Context (stack frame representation for</text>
<text top="817" left="93" width="651" height="21" font="2">Smalltalk methods) and adds some instance elds and methods to support Java language,</text>
<text top="838" left="93" width="56" height="21" font="2">namely:</text>
<text top="886" left="118" width="134" height="21" font="2">¬à Monitor support</text>
<text top="923" left="118" width="316" height="21" font="2">¬à More than 16 method parameters support</text>
<text top="961" left="118" width="154" height="21" font="2">¬à Exception handling</text>
<text top="998" left="118" width="610" height="21" font="2">¬à Correct cleanup after unexpected termination (for example after thrown exception)</text>
<text top="1035" left="118" width="231" height="21" font="2">¬à Execution of finally blocks</text>
<text top="1069" left="112" width="5" height="12" font="4">1</text>
<text top="1071" left="118" width="295" height="17" font="8">More about Java methods can be seen in section</text>
<text top="1071" left="417" width="18" height="17" font="9"><a href="pdfxml.html#33">3.2</a></text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="10" size="14" family="Times" color="#000000"/>
<text top="92" left="149" width="149" height="21" font="2">2.2. VM SUPPORT</text>
<text top="92" left="792" width="8" height="21" font="2">7</text>
<text top="152" left="149" width="291" height="23" font="0">2.2.3 Native method invocation</text>
<text top="190" left="149" width="651" height="21" font="2">Java native methods are methods written in native code in the JVM itself or in a library</text>
<text top="210" left="149" width="651" height="21" font="2">linked to the JVM. Via native methods, Java code can access JVM internal state, hook</text>
<text top="231" left="149" width="651" height="21" font="2">and modify JVM behavior, access facilities outside the Java environment (such as operating</text>
<text top="251" left="149" width="651" height="21" font="2">system services) or prot from faster implementation. All native methods are marked as</text>
<text top="271" left="149" width="651" height="21" font="2">so using ACC_NATIVE bit. When a Java native method is to be executed, Bytecode</text>
<text top="292" left="149" width="651" height="21" font="2">Interpreter recognizes it and sends nativeMethodInvokation to the method, as shown</text>
<text top="312" left="149" width="17" height="21" font="2">on</text>
<text top="312" left="172" width="21" height="21" font="6"><a href="pdfxml.html#25">2.1</a></text>
<text top="312" left="192" width="5" height="21" font="2"><a href="pdfxml.html#25">.</a></text>
<text top="350" left="162" width="5" height="12" font="4">1</text>
<text top="348" left="175" width="20" height="12" font="10"><b>if</b></text>
<text top="348" left="204" width="452" height="13" font="2">(accessFlags &amp; __MASKSMALLINT(__ACC_NATIVE)) {</text>
<text top="370" left="162" width="5" height="12" font="4">2</text>
<text top="368" left="214" width="295" height="13" font="2">result = _SEND0(__aJavaMethod,</text>
<text top="390" left="162" width="5" height="12" font="4">3</text>
<text top="389" left="253" width="461" height="13" font="2">MKSYMBOL(&#34;nativeMethodInvokation&#34;), nil, &amp;nmi);</text>
<text top="411" left="162" width="5" height="12" font="4">4</text>
<text top="409" left="175" width="10" height="13" font="2">}</text>
<text top="441" left="221" width="506" height="21" font="2">Code Example 2.1: Checking for and invocation of Java native method</text>
<text top="482" left="175" width="625" height="21" font="2">On the line 2, if condition is true if method has particular ag set. Return value of</text>
<text top="507" left="149" width="324" height="13" font="2">JavaMethod¬ªnativeMethodInvokation</text>
<text top="502" left="478" width="322" height="21" font="2">is stored in result variable (line 3), which is</text>
<text top="522" left="149" width="651" height="21" font="2">later on returned as a return value of the native method. nativeMethodInvokation</text>
<text top="543" left="149" width="651" height="21" font="2">method is responsible for looking up an implementation and execution of given native</text>
<text top="563" left="149" width="326" height="21" font="2">method. Its principal code is shown at Figure</text>
<text top="563" left="481" width="21" height="21" font="6"><a href="pdfxml.html#25">2.2</a></text>
<text top="563" left="502" width="5" height="21" font="2"><a href="pdfxml.html#25">.</a></text>
<text top="601" left="162" width="5" height="12" font="4">1</text>
<text top="599" left="175" width="216" height="13" font="2">nativeMethodInvokation</text>
<text top="621" left="162" width="5" height="12" font="4">2</text>
<text top="619" left="214" width="49" height="13" font="2">| sel</text>
<text top="619" left="283" width="39" height="13" font="2">mthd</text>
<text top="619" left="341" width="79" height="13" font="2">sender |</text>
<text top="641" left="162" width="5" height="12" font="4">3</text>
<text top="640" left="214" width="29" height="13" font="2">sel</text>
<text top="638" left="250" width="337" height="15" font="2">‚Üê <b>self </b>searchNativeImplementation.</text>
<text top="662" left="162" width="5" height="12" font="4">4</text>
<text top="660" left="214" width="39" height="13" font="2">mthd</text>
<text top="658" left="260" width="386" height="15" font="2">‚Üê (JavaVM class compiledMethodAt: sel).</text>
<text top="682" left="162" width="5" height="12" font="4">5</text>
<text top="680" left="214" width="59" height="13" font="2">sender</text>
<text top="678" left="279" width="209" height="15" font="2">‚Üê thisContext sender.</text>
<text top="702" left="162" width="5" height="12" font="4">6</text>
<text top="698" left="215" width="343" height="15" font="2">‚Üë JavaVM perform: sel with: sender.</text>
<text top="733" left="274" width="401" height="21" font="2">Code Example 2.2: nativeMethodInvokation ST method</text>
<text top="773" left="175" width="625" height="21" font="2">First, using method's selector, we search for corresponding method on JavaVM class</text>
<text top="793" left="149" width="396" height="21" font="2">(line 3). Details of this method are shown at Figure</text>
<text top="793" left="553" width="21" height="21" font="6"><a href="pdfxml.html#25">2.3</a></text>
<text top="793" left="573" width="226" height="21" font="2"><a href="pdfxml.html#25">. </a>On line 4, method object is</text>
<text top="814" left="149" width="651" height="21" font="2">retrieved from JavaVM. On line 5, Java context, from which the method was invoked, is</text>
<text top="834" left="149" width="651" height="21" font="2">stored in sender variable. Finally, on the line 5, method is performed, with current Java</text>
<text top="854" left="149" width="155" height="21" font="2">context as parameter.</text>
<text top="892" left="162" width="5" height="12" font="4">1</text>
<text top="890" left="175" width="255" height="13" font="2">searchNativeImplementation</text>
<text top="912" left="162" width="5" height="12" font="4">2</text>
<text top="911" left="214" width="59" height="13" font="2">| name</text>
<text top="911" left="292" width="98" height="13" font="2">selector |</text>
<text top="933" left="162" width="5" height="12" font="4">3</text>
<text top="931" left="214" width="39" height="13" font="2">name</text>
<text top="929" left="260" width="200" height="15" font="2">‚Üê selector upTo: $(.</text>
<text top="953" left="162" width="5" height="12" font="4">4</text>
<text top="951" left="214" width="79" height="13" font="2">selector</text>
<text top="949" left="299" width="33" height="15" font="2">‚Üê (</text>
<text top="973" left="162" width="5" height="12" font="4">5</text>
<text top="972" left="253" width="49" height="13" font="2">‚Äô_‚Äô ,</text>
<text top="994" left="162" width="5" height="12" font="4">6</text>
<text top="992" left="253" width="442" height="13" font="2">((javaClass name copyReplaceAll: $/ with: $_)</text>
<text top="1012" left="283" width="255" height="13" font="2">replaceAll: $$ with: $_) ,</text>
<text top="1034" left="162" width="5" height="12" font="4">7</text>
<text top="1033" left="253" width="157" height="13" font="2">‚Äô_‚Äô , name , ‚Äô:‚Äô</text>
<text top="1055" left="162" width="5" height="12" font="4">8</text>
<text top="1053" left="332" width="108" height="13" font="2">) asSymbol.</text>
<text top="1075" left="162" width="5" height="12" font="4">9</text>
<text top="1073" left="214" width="471" height="13" font="2">(JavaVM class canUnderstand: selector) <b>ifTrue</b>: [</text>
</page>
<page number="26" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="8" height="21" font="2">8</text>
<text top="92" left="496" width="248" height="21" font="2">CHAPTER 2. ARCHITECTURE</text>
<text top="160" left="100" width="11" height="12" font="4">10</text>
<text top="157" left="198" width="97" height="15" font="2">‚Üë selector</text>
<text top="181" left="100" width="11" height="12" font="4">11</text>
<text top="179" left="158" width="20" height="13" font="2">].</text>
<text top="201" left="100" width="11" height="12" font="4">12</text>
<text top="199" left="158" width="39" height="12" font="10"><b>self</b></text>
<text top="199" left="207" width="412" height="13" font="2">compileNativeImplementationStub: selector.</text>
<text top="221" left="100" width="11" height="12" font="4">13</text>
<text top="218" left="159" width="97" height="15" font="2">‚Üëselector.</text>
<text top="251" left="203" width="430" height="21" font="2">Code Example 2.3: searchNativeImplementation ST method</text>
<text top="286" left="118" width="79" height="21" font="2">On Listing</text>
<text top="286" left="205" width="21" height="21" font="6"><a href="pdfxml.html#25">2.3</a></text>
<text top="286" left="226" width="518" height="21" font="2"><a href="pdfxml.html#25">, </a>implementation of JavaMethod¬ªsearchNativeImplementation</text>
<text top="306" left="93" width="651" height="21" font="2">method is shown. On line 2, methods name (without parentheses), is stored in name vari-</text>
<text top="327" left="93" width="651" height="21" font="2">able. In selector variable, fully qualied Java method's name is transformed into valid</text>
<text top="347" left="93" width="651" height="21" font="2">ST selector (line 4). For example, Smalltalk selector for java.lang.Object#wait() is</text>
<text top="373" left="93" width="216" height="13" font="2">_java_lang_Object_wait</text>
<text top="367" left="309" width="435" height="21" font="2">. If computed selector is already present in JavaVM, it's re-</text>
<text top="388" left="93" width="651" height="21" font="2">turned. If not, a stub (method which just throws an exception) is compiled into JavaVM,</text>
<text top="408" left="93" width="282" height="21" font="2">and selector is returned (line 9 and 10).</text>
<text top="432" left="118" width="422" height="21" font="2">There is roughly 900 shared native methods in Op<a href="pdfxml.html#26">enJDK</a></text>
<text top="430" left="541" width="6" height="16" font="7"><a href="pdfxml.html#26">2</a></text>
<text top="432" left="548" width="196" height="21" font="2"><a href="pdfxml.html#26">, </a>plus around 700 unix spe-</text>
<text top="452" left="93" width="651" height="21" font="2">cic. Altogether (shared, Linux, Solaris and Windows native methods), there is 2034 native</text>
<text top="472" left="93" width="651" height="21" font="2">methods, which should be implemented to have fully compliant implementation given that</text>
<text top="493" left="93" width="651" height="21" font="2">all features are implemented correctly. At the time of writing this thesis, there were 705</text>
<text top="513" left="93" width="651" height="21" font="2">already implemented in libjava. Writing native method implementations is time consum-</text>
<text top="533" left="93" width="651" height="21" font="2">ing, but rather straightforward task. Due to the time and resources constraints, we limit</text>
<text top="554" left="93" width="631" height="21" font="2">ourselves to implement only those needed by application or library we would like to run.</text>
<text top="599" left="93" width="325" height="23" font="0">2.2.4 Implementing native methods</text>
<text top="634" left="93" width="651" height="21" font="2">If someone wanted to use native method in his Java program interpreted by libjava, he can</text>
<text top="655" left="93" width="651" height="21" font="2">just execute the program. When a native method is invoked, the debugger window will be</text>
<text top="675" left="93" width="651" height="21" font="2">opened, and the behavior of the method can be implemented there. To each native method</text>
<text top="695" left="93" width="651" height="21" font="2">implementation in the JavaVM class, an instance of JavaContext is passed as argument,</text>
<text top="716" left="93" width="651" height="21" font="2">holding all arguments passed to the native function. Example of implemented native method</text>
<text top="736" left="93" width="137" height="21" font="2">is shown on Listing</text>
<text top="736" left="236" width="21" height="21" font="6"><a href="pdfxml.html#26">2.4</a></text>
<text top="736" left="257" width="5" height="21" font="2"><a href="pdfxml.html#26">.</a></text>
<text top="772" left="106" width="5" height="12" font="4">1</text>
<text top="770" left="118" width="422" height="13" font="2">_java_lang_Thread_interrupt0: nativeContext</text>
<text top="792" left="106" width="5" height="12" font="4">2</text>
<text top="790" left="158" width="88" height="13" font="2">| jThread</text>
<text top="790" left="266" width="108" height="13" font="2">stProcess |</text>
<text top="812" left="106" width="5" height="12" font="4">3</text>
<text top="833" left="106" width="5" height="12" font="4">4</text>
<text top="831" left="158" width="69" height="13" font="2">jThread</text>
<text top="829" left="233" width="249" height="15" font="2">‚Üê nativeContext receiver.</text>
<text top="853" left="106" width="5" height="12" font="4">5</text>
<text top="851" left="158" width="88" height="13" font="2">stProcess</text>
<text top="849" left="253" width="386" height="15" font="2">‚Üê <b>self </b>stProcessForJavaThread: jThread.</text>
<text top="873" left="106" width="5" height="12" font="4">6</text>
<text top="872" left="158" width="236" height="13" font="2">stProcess javaInterrupt.</text>
<text top="903" left="176" width="484" height="21" font="2">Code Example 2.4: Example of Java native method implementation</text>
<text top="938" left="118" width="101" height="21" font="2">On the Listing</text>
<text top="938" left="223" width="21" height="21" font="6"><a href="pdfxml.html#26">2.4</a></text>
<text top="938" left="244" width="525" height="21" font="2"><a href="pdfxml.html#26">, </a>we can see implementation of the java.lang.Thread#interrupt0()</text>
<text top="958" left="93" width="651" height="21" font="2">native method. On the line 1, transformed selector can be seen. Receiver of the method</text>
<text top="979" left="93" width="651" height="21" font="2">(object, on which method was called) is assigned into jThread variable (line 4). Next,</text>
<text top="999" left="93" width="651" height="21" font="2">corresponding instance of Process (Smalltalk class that represents a thread) is looked</text>
<text top="1019" left="93" width="651" height="21" font="2">up and stored in stProcess variable. Finally, javaInterrupt message is sent to the</text>
<text top="1045" left="93" width="88" height="13" font="2">stProcess</text>
<text top="1040" left="187" width="228" height="21" font="2">resulting in process interruption</text>
<text top="1069" left="112" width="5" height="12" font="4">2</text>
<text top="1071" left="118" width="149" height="17" font="8">http://openjdk.java.net/</text>
</page>
<page number="27" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="149" height="21" font="2">2.2. VM SUPPORT</text>
<text top="92" left="792" width="8" height="21" font="2">9</text>
<text top="152" left="149" width="384" height="23" font="0">2.2.5 Instructions with complex semantics</text>
<text top="188" left="149" width="652" height="21" font="2">Vast majority of bytecode instructions are quite simple, such as xCONST, xLOAD, xSTORE,</text>
<text top="209" left="149" width="651" height="21" font="2">which just manipulate primitive data types, but there are few instructions, whose semantics</text>
<text top="229" left="149" width="651" height="21" font="2">is rather complex - MONENTER, MONEXIT, ATHROW or CHECKCAST for instance. When a</text>
<text top="249" left="149" width="651" height="21" font="2">more complex instruction is interpreted, Bytecode Interpreter can fall back to the Smalltalk</text>
<text top="270" left="149" width="651" height="21" font="2">code (in other words, call Smalltalk method, in most cases, on the JavaVM class). Calling</text>
<text top="290" left="149" width="651" height="21" font="2">Smalltalk method from Bytecode Interpreter during interpretation brings certain overhead,</text>
<text top="310" left="149" width="651" height="21" font="2">but greatly eases implementation, debugging and testing and coding complex logic is time-</text>
<text top="330" left="149" width="196" height="21" font="2">consuming and error-prone.</text>
<text top="355" left="175" width="625" height="21" font="2">For most of such complex instructions, Smalltalk methods serve only as a trampoline for</text>
<text top="375" left="149" width="553" height="21" font="2">unhandled cases so the Smalltalk method is actually executed rarely. Figure</text>
<text top="375" left="708" width="21" height="21" font="6"><a href="pdfxml.html#27">2.5</a></text>
<text top="375" left="735" width="65" height="21" font="2">shows an</text>
<text top="395" left="149" width="504" height="21" font="2">excerpt of Jinterpret implementation of an ARRAYLENGTH instruction.</text>
<text top="432" left="162" width="5" height="12" font="4">1</text>
<text top="430" left="214" width="39" height="12" font="10"><b>case</b></text>
<text top="430" left="263" width="137" height="13" font="2">J_ARRAYLENGTH:</text>
<text top="452" left="162" width="5" height="12" font="4">2</text>
<text top="451" left="214" width="10" height="13" font="2">{</text>
<text top="473" left="162" width="5" height="12" font="4">3</text>
<text top="471" left="253" width="59" height="13" font="2">OBJ v;</text>
<text top="493" left="162" width="5" height="12" font="4">4</text>
<text top="513" left="162" width="5" height="12" font="4">5</text>
<text top="511" left="253" width="108" height="13" font="2">v = sp[-1];</text>
<text top="511" left="420" width="108" height="15" font="2">/* array */</text>
<text top="534" left="162" width="5" height="12" font="4">6</text>
<text top="532" left="253" width="20" height="12" font="10"><b>if</b></text>
<text top="532" left="283" width="157" height="13" font="2">(__isArray(v)) {</text>
<text top="554" left="162" width="5" height="12" font="4">7</text>
<text top="552" left="292" width="373" height="13" font="2">sp[-1] = __MKSMALLINT(__arraySize(v));</text>
<text top="574" left="162" width="5" height="12" font="4">8</text>
<text top="572" left="292" width="49" height="12" font="10"><b>break</b></text>
<text top="572" left="341" width="10" height="13" font="2">;</text>
<text top="594" left="162" width="5" height="12" font="4">9</text>
<text top="593" left="253" width="10" height="13" font="2">}</text>
<text top="615" left="156" width="11" height="12" font="4">10</text>
<text top="613" left="253" width="20" height="12" font="10"><b>if</b></text>
<text top="613" left="283" width="206" height="13" font="2">(__isStringLike(v)) {</text>
<text top="635" left="156" width="11" height="12" font="4">11</text>
<text top="633" left="292" width="383" height="13" font="2">sp[-1] = __MKSMALLINT(__stringSize(v));</text>
<text top="655" left="156" width="11" height="12" font="4">12</text>
<text top="654" left="292" width="49" height="12" font="10"><b>break</b></text>
<text top="654" left="341" width="10" height="13" font="2">;</text>
<text top="676" left="156" width="11" height="12" font="4">13</text>
<text top="674" left="253" width="10" height="13" font="2">}</text>
<text top="696" left="156" width="11" height="12" font="4">14</text>
<text top="694" left="253" width="20" height="12" font="10"><b>if</b></text>
<text top="694" left="283" width="196" height="13" font="2">(__isByteArray(v)) {</text>
<text top="716" left="156" width="11" height="12" font="4">15</text>
<text top="715" left="292" width="412" height="13" font="2">sp[-1] = __MKSMALLINT(__byteArraySize(v));</text>
<text top="737" left="156" width="11" height="12" font="4">16</text>
<text top="735" left="292" width="49" height="12" font="10"><b>break</b></text>
<text top="735" left="341" width="10" height="13" font="2">;</text>
<text top="757" left="156" width="11" height="12" font="4">17</text>
<text top="755" left="253" width="10" height="13" font="2">}</text>
<text top="777" left="156" width="11" height="12" font="4">18</text>
<text top="776" left="253" width="20" height="12" font="10"><b>if</b></text>
<text top="776" left="283" width="285" height="13" font="2">(__isSignedIntegerArray(v)) {</text>
<text top="798" left="156" width="11" height="12" font="4">19</text>
<text top="796" left="292" width="442" height="13" font="2">sp[-1] = __MKSMALLINT(__integerArraySize(v));</text>
<text top="818" left="156" width="11" height="12" font="4">20</text>
<text top="816" left="292" width="49" height="12" font="10"><b>break</b></text>
<text top="816" left="341" width="10" height="13" font="2">;</text>
<text top="838" left="156" width="11" height="12" font="4">21</text>
<text top="837" left="253" width="10" height="13" font="2">}</text>
<text top="859" left="156" width="11" height="12" font="4">22</text>
<text top="857" left="253" width="29" height="13" font="2">...</text>
<text top="879" left="156" width="11" height="12" font="4">23</text>
<text top="877" left="253" width="540" height="13" font="2">sp[-1] = _SEND1(JavaVM, MKSYMBOL(&#34;_ARRAYLENGTH:&#34;), nil,</text>
<text top="898" left="293" width="118" height="13" font="2">&amp;dummy1, v);</text>
<text top="920" left="156" width="11" height="12" font="4">24</text>
<text top="918" left="253" width="29" height="13" font="2">...</text>
<text top="940" left="156" width="11" height="12" font="4">25</text>
<text top="938" left="214" width="10" height="13" font="2">}</text>
<text top="960" left="156" width="11" height="12" font="4">26</text>
<text top="959" left="214" width="49" height="12" font="10"><b>break</b></text>
<text top="959" left="263" width="10" height="13" font="2">;</text>
<text top="990" left="298" width="354" height="21" font="2">Code Example 2.5: ARRAYLENGTH instruction</text>
<text top="1033" left="175" width="20" height="13" font="2">If</text>
<text top="1027" left="199" width="601" height="21" font="2">branches on lines 6, 10, 14, 18 are handling cases for a particular argument passed to</text>
<text top="1053" left="149" width="108" height="13" font="2">ARRAYLENGTH</text>
<text top="1048" left="257" width="543" height="21" font="2">. If one of these cases occur, return value is pushed onto the stack, Smalltalk</text>
<text top="1068" left="149" width="651" height="21" font="2">method is not invoked. But if argument passed to ARRAYLENGTH does not fall into any of</text>
</page>
<page number="28" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">10</text>
<text top="92" left="496" width="248" height="21" font="2">CHAPTER 2. ARCHITECTURE</text>
<text top="153" left="93" width="651" height="21" font="2">these cases, handling is delegated to JavaVM class¬ª_ARRAYLENGTH: method (line 23).</text>
<text top="179" left="93" width="59" height="13" font="2">_SEND1</text>
<text top="174" left="157" width="479" height="21" font="2">macro is used, which represents a method send with one argument.</text>
<text top="222" left="93" width="457" height="23" font="0">2.2.6 Supporting more than 16 method arguments</text>
<text top="259" left="93" width="651" height="21" font="2">Current Smalltalk/X VM supports up to 16 method arguments, i.e., it cannot handle</text>
<text top="280" left="93" width="651" height="21" font="2">method with more than 16 arguments. However, JLS denes, that Java can have up to 255</text>
<text top="300" left="93" width="83" height="21" font="2">argumen<a href="pdfxml.html#63">ts.[</a></text>
<text top="300" left="176" width="8" height="21" font="6"><a href="pdfxml.html#63">4</a></text>
<text top="300" left="184" width="560" height="21" font="2"><a href="pdfxml.html#63">, </a>section 4.3.3] To support methods with too many arguments, Java method</text>
<text top="320" left="93" width="651" height="21" font="2">with too many arguments is marked by a ag. When a Java method is executed, the ag</text>
<text top="341" left="93" width="651" height="21" font="2">is checked. If it is set, Bytecode Interpreter expects arguments to be passed in as array.</text>
<text top="361" left="93" width="636" height="21" font="2">Bytecode Interpreter then unpacks the array and stores arguments into the Java context.</text>
<text top="414" left="93" width="236" height="28" font="1">2.3 Java Class Model</text>
<text top="460" left="93" width="651" height="21" font="2">Smalltalk and Java are both falling into category Class-based, Object-Oriented languages.</text>
<text top="480" left="93" width="514" height="21" font="2">However, both embrace Object Orientation from slightly dierent angle.</text>
<text top="529" left="93" width="273" height="23" font="0">2.3.1 Smalltalk Object Model</text>
<text top="566" left="93" width="671" height="21" font="2">Smalltalk/X, as every smalltalk system following heritage of Smalltalk-80 dened by Smalltalk-</text>
<text top="587" left="93" width="350" height="21" font="2">80: Language and its implementation bo<a href="pdfxml.html#63">ok[</a></text>
<text top="587" left="443" width="8" height="21" font="6"><a href="pdfxml.html#63">3</a></text>
<text top="587" left="451" width="254" height="21" font="2"><a href="pdfxml.html#63">], </a>has uniform object model (Figure</text>
<text top="587" left="711" width="21" height="21" font="6"><a href="pdfxml.html#29">2.2</a></text>
<text top="587" left="732" width="11" height="21" font="2"><a href="pdfxml.html#29">).</a></text>
<text top="631" left="113" width="187" height="21" font="2">1. Everything is an object</text>
<text top="665" left="113" width="442" height="21" font="2">2. Every object is instance of a class, which is also and object</text>
<text top="700" left="113" width="448" height="21" font="2">3. Each class is inheriting its behavior from a single superclass</text>
<text top="735" left="113" width="392" height="21" font="2">4. Objects only communicate only via message passing</text>
<text top="779" left="118" width="625" height="21" font="2">One object can access state of another object only via messages, accessing other object's</text>
<text top="799" left="93" width="651" height="21" font="2">data is not possible. Because every object is instance of a class, even the class itself, method</text>
<text top="820" left="93" width="651" height="21" font="2">lookup algorithm is straightforward - when an object receives a message, corresponding</text>
<text top="840" left="93" width="651" height="21" font="2">method is looked up in object's class. If method is not found, searching continues in class'</text>
<text top="860" left="93" width="559" height="21" font="2">superclass. Lookup ends, when nil is searched, nil is superclass of Object.</text>
<text top="909" left="93" width="230" height="23" font="0">2.3.2 Java Object Model</text>
<text top="946" left="93" width="272" height="21" font="2">Java Object model is shown on Figure</text>
<text top="946" left="370" width="21" height="21" font="6"><a href="pdfxml.html#30">2.3</a></text>
<text top="946" left="391" width="353" height="21" font="2"><a href="pdfxml.html#30">. </a>It's necessary to say that not everything in Java</text>
<text top="966" left="93" width="651" height="21" font="2">is an object, Java has primitive types such as int and char, a special constant null, and</text>
<text top="987" left="93" width="651" height="21" font="2">one built-in type - String, which is an object type, but language syntax allows for literal</text>
<text top="1007" left="93" width="651" height="21" font="2">representation of strings. Special place has null, which is, on contrary to Smalltalk, not an</text>
<text top="1027" left="93" width="651" height="21" font="2">object. Java classes are not rst class objects, they live in JVM in a separate memory area.</text>
<text top="1048" left="93" width="651" height="21" font="2">Class can be accessed via getClass() method, which returns a mirror to the internal class</text>
<text top="1068" left="93" width="110" height="21" font="2">representation<a href="pdfxml.html#63">.[</a></text>
<text top="1068" left="203" width="8" height="21" font="6"><a href="pdfxml.html#63">1</a></text>
<text top="1068" left="211" width="533" height="21" font="2"><a href="pdfxml.html#63">] </a>A root of a class hierarchy in Java is java.lang.Object. Every object</text>
</page>
<page number="29" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="204" height="21" font="2">2.3. JAVA CLASS MODEL</text>
<text top="92" left="784" width="16" height="21" font="2">11</text>
<text top="507" left="347" width="255" height="21" font="2">Figure 2.2: Smalltalk Object Model</text>
<text top="561" left="149" width="651" height="21" font="2">in Java is instance of a class. Every class has superclass, except of java.lang.Object</text>
<text top="581" left="149" width="214" height="21" font="2">class whose superclass is null.</text>
<text top="607" left="175" width="625" height="21" font="2">Java introduces notion of static elds and methods. Static eld or method is shared</text>
<text top="627" left="149" width="651" height="21" font="2">among all instances of given class. Smalltalk alternatives are class elds and methods, but</text>
<text top="647" left="149" width="232" height="21" font="2">they have a dierent seman<a href="pdfxml.html#29">tics.</a></text>
<text top="646" left="381" width="6" height="16" font="7"><a href="pdfxml.html#29">3</a></text>
<text top="647" left="400" width="400" height="21" font="2">As an example of consequences of this design, method</text>
<text top="668" left="149" width="390" height="21" font="2">lookup algorithm for static and normal methods dier.</text>
<text top="693" left="175" width="625" height="21" font="2">To avoid ambiguity, there cannot be two methods or elds with the same name in one</text>
<text top="713" left="149" width="651" height="21" font="2">class. Subclass can override method or eld, and it does not matter whether the overridden</text>
<text top="733" left="149" width="109" height="21" font="2">is static or not.</text>
<text top="759" left="175" width="625" height="21" font="2">If the receiver is Java class, static method or eld is looked up. If the current class does</text>
<text top="779" left="149" width="651" height="21" font="2">not have method (or eld) with given name, search continues in a superclass. Lookup ends</text>
<text top="799" left="149" width="265" height="21" font="2">after reaching java.lang.Object.</text>
<text top="824" left="175" width="625" height="21" font="2">If the receiver is instance, method or eld is looked up in instance and static methods (or</text>
<text top="845" left="149" width="643" height="21" font="2">elds). If not found, the same happens in superclass until reaching java.lang.Object.</text>
<text top="893" left="149" width="269" height="23" font="0">2.3.3 Object Model Mapping</text>
<text top="931" left="149" width="651" height="21" font="2">Since libjava is shares VM mechanism to execute Java code with Smalltalk, it must map</text>
<text top="951" left="149" width="651" height="21" font="2">Java code to Smalltalk classes. Java classes have to be mapped to Smalltalk classes, Java</text>
<text top="971" left="149" width="395" height="21" font="2">methods have to be mapped to Smalltalk methods, etc.</text>
<text top="997" left="175" width="465" height="21" font="2">Mapping of Java object model to Smalltalk is shown on Figure</text>
<text top="997" left="646" width="21" height="21" font="6"><a href="pdfxml.html#31">2.4</a></text>
<text top="997" left="667" width="133" height="21" font="2"><a href="pdfxml.html#31">. </a>JavaObject is</text>
<text top="1017" left="149" width="651" height="21" font="2">root of Java hierarchy, with java.lang.Object being subclass of it. We introduced</text>
<text top="1043" left="149" width="88" height="13" font="2">JavaClass</text>
<text top="1037" left="243" width="557" height="21" font="2">as superclass of all Java classes. Each Java object is instance of JavaObject</text>
<text top="1069" left="168" width="5" height="12" font="4">3</text>
<text top="1071" left="174" width="447" height="17" font="8">Class methods in Smalltalk are inherited by subclasses (if not overridden)</text>
</page>
<page number="30" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">12</text>
<text top="92" left="496" width="248" height="21" font="2">CHAPTER 2. ARCHITECTURE</text>
<text top="439" left="309" width="219" height="21" font="2">Figure 2.3: Java Object Model</text>
<text top="493" left="93" width="651" height="21" font="2">and has one instance of JavaClass associated with it as its javaClass. Each Java Class</text>
<text top="513" left="93" width="651" height="21" font="2">is instance of JavaClass and has one instance of JavaClass associated with it as its</text>
<text top="533" left="93" width="76" height="21" font="2">superclass.</text>
<text top="584" left="93" width="235" height="28" font="1">2.4 Runtime Support</text>
<text top="630" left="93" width="651" height="21" font="2">In this section we will describe the most important classes forming the libjava runtime</text>
<text top="650" left="93" width="651" height="21" font="2">support. Runtime support classes in many ways simulate a work, which is normally done by</text>
<text top="670" left="93" width="651" height="21" font="2">JVM, some of them provide services to the programmer (such as Java class), some of them</text>
<text top="691" left="93" width="651" height="21" font="2">are important in connecting Java model classes together (such as JavaClassReader), etc.</text>
<text top="737" left="93" width="101" height="23" font="0">2.4.1 Java</text>
<text top="779" left="93" width="39" height="13" font="2">Java</text>
<text top="774" left="140" width="604" height="21" font="2">class is facade to the Java world inside Smalltalk. Java class provides following</text>
<text top="794" left="93" width="58" height="21" font="2">services:</text>
<text top="836" left="118" width="228" height="21" font="2">¬à Class loading and class access</text>
<text top="870" left="118" width="149" height="21" font="2">¬à Java release access</text>
<text top="904" left="118" width="144" height="21" font="2">¬à System properties</text>
<text top="938" left="118" width="170" height="21" font="2">¬à Threads management</text>
<text top="971" left="118" width="246" height="21" font="2">¬à Java initialization and teardown</text>
<text top="1005" left="118" width="259" height="21" font="2">¬à Java/Smalltalk object conversions</text>
<text top="1048" left="118" width="625" height="21" font="2">Two most important methods in Java class are Java class¬ª initializeJava,</text>
<text top="1068" left="93" width="651" height="21" font="2">which starts whole Java system, and Java class¬ªflushAllJavaResources, which</text>
</page>
<page number="31" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="201" height="21" font="2">2.4. RUNTIME SUPPORT</text>
<text top="92" left="784" width="16" height="21" font="2">13</text>
<text top="632" left="284" width="380" height="21" font="2">Figure 2.4: Java to Smalltalk Object Model Mapping</text>
<text top="685" left="149" width="651" height="21" font="2">will stop and clean up after running Java system. Another interesting methods are Java</text>
<text top="711" left="149" width="167" height="13" font="2">class¬ªclassNamed:</text>
<text top="706" left="329" width="471" height="21" font="2">and Java class¬ªclassForName:. First method will return</text>
<text top="726" left="149" width="651" height="21" font="2">already loaded Java class, or nil. Second method will in case of not loaded class search</text>
<text top="746" left="149" width="217" height="21" font="2">classpath and load given class.</text>
<text top="793" left="149" width="135" height="23" font="0">2.4.2 JavaVM</text>
<text top="829" left="149" width="651" height="21" font="2">Runtime support and environment for Java. End user should not need to communicate</text>
<text top="850" left="149" width="651" height="21" font="2">with JavaVM directly, Java class should be used instead. JavaVM is layer between the</text>
<text top="870" left="149" width="651" height="21" font="2">native interpret and the rest of the system. JavaVM implements native methods invoked by</text>
<text top="890" left="149" width="316" height="21" font="2">interpret. A list of services provided follows:</text>
<text top="933" left="174" width="161" height="21" font="2">¬à Class registry access</text>
<text top="966" left="174" width="87" height="21" font="2">¬à Reection</text>
<text top="1000" left="174" width="276" height="21" font="2">¬à Setting up default system properties</text>
<text top="1034" left="174" width="433" height="21" font="2">¬à Bytecode Interpreter complex instructions implementation</text>
<text top="1068" left="174" width="94" height="21" font="2">¬à Exceptions</text>
</page>
<page number="32" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">14</text>
<text top="92" left="496" width="248" height="21" font="2">CHAPTER 2. ARCHITECTURE</text>
<text top="153" left="118" width="203" height="21" font="2">¬à Synchronization, monitors</text>
<text top="187" left="118" width="245" height="21" font="2">¬à Native methods implementation</text>
<text top="234" left="93" width="220" height="21" font="2">2.4.2.1 JavaClassRegistry</text>
<text top="269" left="93" width="651" height="21" font="2">JVM supports dynamic class loading using ClassLoaders. Basic principles and design</text>
<text top="290" left="93" width="175" height="21" font="2">reasons are pursued in <a href="pdfxml.html#63">[</a></text>
<text top="290" left="268" width="8" height="21" font="6"><a href="pdfxml.html#63">5</a></text>
<text top="290" left="276" width="468" height="21" font="2"><a href="pdfxml.html#63">]. </a>JavaClassRegistry is class responsible keeping track of classes</text>
<text top="310" left="93" width="651" height="21" font="2">loaded by individual class loaders. Class loading problems are rather subtle and we will oer</text>
<text top="330" left="93" width="266" height="21" font="2">our solutions to the reader in chapter</text>
<text top="330" left="365" width="8" height="21" font="6"><a href="pdfxml.html#33">3</a></text>
<text top="330" left="373" width="5" height="21" font="2"><a href="pdfxml.html#33">.</a></text>
<text top="378" left="93" width="190" height="21" font="2">2.4.2.2 JavaReection</text>
<text top="418" left="93" width="137" height="13" font="2">JavaReflection</text>
<text top="413" left="235" width="509" height="21" font="2">serves as a mirror allowing us to convert Java classes into their Smalltalk</text>
<text top="433" left="93" width="651" height="21" font="2">alternatives and vice-versa. When in Smalltalk, regular instances of JavaClass are used.</text>
<text top="453" left="93" width="651" height="21" font="2">But when a Java code for example calls getClass() or String.class, we need to convert</text>
<text top="474" left="93" width="651" height="21" font="2">Smalltalk class into the instance of java.lang.Class. This is done in JavaReflection</text>
<text top="494" left="93" width="619" height="21" font="2">class, also for arrays, objects, constant pools, methods, constructors, elds and strings.</text>
<text top="540" left="93" width="392" height="23" font="0">2.4.3 JavaResolver, JavaRef and subclasses</text>
<text top="577" left="93" width="651" height="21" font="2">In Java classle, all references outside the classle itself such as references to used classes,</text>
<text top="597" left="93" width="358" height="21" font="2">implemented interfaces and so on, are symb<a href="pdfxml.html#63">olic.[</a></text>
<text top="597" left="451" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="597" left="459" width="285" height="21" font="2"><a href="pdfxml.html#63">, </a>chapter 4] Such symbolic reference is</text>
<text top="617" left="93" width="651" height="21" font="2">represented by the JavaRef class and its subclasses. Symbolic references are stored in the</text>
<text top="638" left="93" width="122" height="21" font="2">Constant Pool.</text>
<text top="662" left="118" width="625" height="21" font="2">Many instructions access constant pool content, for example INVOKEx instructions are</text>
<text top="682" left="93" width="651" height="21" font="2">given an index to the constant pool on which a method reference is stored. This method</text>
<text top="703" left="93" width="350" height="21" font="2">reference is then resolved and method is invoked.</text>
<text top="732" left="118" width="69" height="13" font="2">JavaRef</text>
<text top="727" left="191" width="553" height="21" font="2">is root of the Java reference hierarchy, it denes interface and structure accessed</text>
<text top="747" left="93" width="651" height="21" font="2">by Bytecode Interpreter. Together with primitive constants and JavaNameAndType are</text>
<text top="768" left="93" width="651" height="21" font="2">the only objects fount in JavaConstantPool. JavaRef descendant tree is quite big and</text>
<text top="788" left="93" width="600" height="21" font="2">consists of classes such as JavaStringRef, JavaClassRef or JavaMethodRef.</text>
<text top="813" left="118" width="407" height="21" font="2">We will deal with classle reading and loading in chapter</text>
<text top="813" left="531" width="8" height="21" font="6"><a href="pdfxml.html#33">3</a></text>
<text top="813" left="539" width="5" height="21" font="2"><a href="pdfxml.html#33">.</a></text>
</page>
<page number="33" position="absolute" top="0" left="0" height="1262" width="892">
<text top="256" left="149" width="145" height="40" font="3">Chapter 3</text>
<text top="329" left="149" width="225" height="48" font="5">Class loading</text>
<text top="433" left="149" width="651" height="21" font="2">Class loading is a process of loading new class from an external source, usually le, dynam-</text>
<text top="453" left="149" width="651" height="21" font="2">ically during runtime. In this chapter, we will start with brief introduction into Classle</text>
<text top="474" left="149" width="77" height="21" font="2">structure <a href="pdfxml.html#33">(</a></text>
<text top="474" left="226" width="21" height="21" font="6"><a href="pdfxml.html#33">3.1</a></text>
<text top="474" left="247" width="448" height="21" font="2"><a href="pdfxml.html#33">), </a>followed by a closer look into JavaClass and its content <a href="pdfxml.html#33">(</a></text>
<text top="474" left="694" width="21" height="21" font="6"><a href="pdfxml.html#33">3.2</a></text>
<text top="474" left="715" width="85" height="21" font="2"><a href="pdfxml.html#33">). </a>Constant</text>
<text top="494" left="149" width="206" height="21" font="2">pool content is presented in</text>
<text top="494" left="362" width="21" height="21" font="6"><a href="pdfxml.html#34">3.3</a></text>
<text top="494" left="383" width="417" height="21" font="2"><a href="pdfxml.html#34">. </a>And at the end we present our ndings and solutions</text>
<text top="514" left="149" width="270" height="21" font="2">regarding the Class Loaders issues <a href="pdfxml.html#34">(</a></text>
<text top="514" left="419" width="21" height="21" font="6"><a href="pdfxml.html#34">3.4</a></text>
<text top="514" left="440" width="11" height="21" font="2"><a href="pdfxml.html#34">).</a></text>
<text top="566" left="149" width="139" height="28" font="1">3.1 Classle</text>
<text top="611" left="149" width="651" height="21" font="2">Java classes are compiled by Java compiler into so called Classle. Classle format is</text>
<text top="632" left="149" width="286" height="21" font="2">specied by Java Language <a href="pdfxml.html#63">Reference.[</a></text>
<text top="632" left="435" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="632" left="443" width="357" height="21" font="2"><a href="pdfxml.html#63">, </a>chapter 4] Basic classle structure is shown in</text>
<text top="652" left="149" width="35" height="21" font="2">table</text>
<text top="652" left="190" width="21" height="21" font="6"><a href="pdfxml.html#34">3.1</a></text>
<text top="652" left="211" width="5" height="21" font="2"><a href="pdfxml.html#34">.</a></text>
<text top="677" left="175" width="625" height="21" font="2">We will not describe classle format in more detail and will advise keen reader on the</text>
<text top="697" left="149" width="208" height="21" font="2">Java Language Specication <a href="pdfxml.html#63">[</a></text>
<text top="697" left="357" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="697" left="365" width="435" height="21" font="2"><a href="pdfxml.html#63">]. </a>For our purposes it is enough to know that classle contains</text>
<text top="717" left="149" width="651" height="21" font="2">everything Java class needs to know to be able to be loaded and linked with running sys-</text>
<text top="738" left="149" width="651" height="21" font="2">tem. Constant pool is of great importance, describing references to the outside of the given</text>
<text top="758" left="149" width="651" height="21" font="2">class, which needs to be resolved in order to access runtime class, method, eld or String</text>
<text top="778" left="149" width="171" height="21" font="2">representations of JVM.</text>
<text top="829" left="149" width="495" height="28" font="1">3.2 JavaBehavior, JavaClass and their content</text>
<text top="875" left="149" width="488" height="21" font="2">Java class in our environment is represented by JavaClass class <a href="pdfxml.html#35">(</a></text>
<text top="875" left="637" width="21" height="21" font="6"><a href="pdfxml.html#35">3.1</a></text>
<text top="875" left="657" width="142" height="21" font="2"><a href="pdfxml.html#35">). </a>JavaBehavior,</text>
<text top="895" left="149" width="651" height="21" font="2">its direct superclass, is responsible for handling constant pool, access ags and interfaces. It</text>
<text top="916" left="149" width="651" height="21" font="2">is subclass of Class class (representing Smalltalk class), inheriting for example notion of</text>
<text top="936" left="149" width="651" height="21" font="2">superclass and many more. Bytecode Interpreter is aware of JavaBehavior structure and</text>
<text top="956" left="149" width="136" height="21" font="2">directly accesses <a href="pdfxml.html#33">it.</a></text>
<text top="955" left="285" width="6" height="16" font="7"><a href="pdfxml.html#33">1</a></text>
<text top="986" left="175" width="88" height="13" font="2">JavaClass</text>
<text top="981" left="268" width="532" height="21" font="2">implements the rest of features, which are not directly needed in Bytecode</text>
<text top="1001" left="149" width="651" height="21" font="2">Interpreter and is open for extension. To mention few of features JavaClass implements,</text>
<text top="1022" left="149" width="559" height="21" font="2">there is class loader awareness, annotations, static elds or protection domain.</text>
<text top="1053" left="168" width="5" height="12" font="4">1</text>
<text top="1054" left="174" width="626" height="17" font="8">Which means user can add elds to the JavaClass, but not to the JavaBehavior, without changing</text>
<text top="1071" left="149" width="27" height="17" font="8">VM.</text>
<text top="1129" left="466" width="16" height="21" font="2">15</text>
</page>
<page number="34" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">16</text>
<text top="92" left="496" width="248" height="21" font="2">CHAPTER 3. CLASS LOADING</text>
<text top="148" left="123" width="52" height="21" font="2">Section</text>
<text top="148" left="246" width="81" height="21" font="2">Description</text>
<text top="172" left="123" width="514" height="21" font="2">Magic Number Each classle has to start with bytes 0xCAFEBABE</text>
<text top="193" left="123" width="53" height="21" font="2">Version</text>
<text top="193" left="246" width="468" height="21" font="2">Major and Minor version numbers of the classle. Java 6 has 50.0.</text>
<text top="214" left="123" width="102" height="21" font="2">Constant Pool</text>
<text top="214" left="246" width="306" height="21" font="2">Pool of constants referenced in the classle</text>
<text top="235" left="123" width="90" height="21" font="2">Access Flags</text>
<text top="235" left="246" width="364" height="21" font="2">Denotes whether given class is public, abstract etc.</text>
<text top="256" left="123" width="74" height="21" font="2">This Class</text>
<text top="256" left="246" width="130" height="21" font="2">Name of this class</text>
<text top="276" left="123" width="84" height="21" font="2">Super Class</text>
<text top="276" left="246" width="253" height="21" font="2">Name of the superclass of this class</text>
<text top="297" left="123" width="68" height="21" font="2">Interfaces</text>
<text top="297" left="246" width="372" height="21" font="2">Enumeration of interfaces implemented by this class</text>
<text top="318" left="123" width="42" height="21" font="2">Fields</text>
<text top="318" left="246" width="399" height="21" font="2">Enumeration of all static and instance elds in the class</text>
<text top="339" left="123" width="62" height="21" font="2">Methods</text>
<text top="339" left="246" width="423" height="21" font="2">Enumeration of all static and instance methods in the class</text>
<text top="360" left="123" width="73" height="21" font="2">Attributes</text>
<text top="360" left="246" width="468" height="21" font="2">Supplementary attributes of the class, for example source le, an-</text>
<text top="380" left="246" width="97" height="21" font="2">notations etc.</text>
<text top="415" left="316" width="205" height="21" font="2">Table 3.1: Classle structure</text>
<text top="466" left="118" width="625" height="21" font="2">Instance and static elds are represented by JavaField. Instances of JavaField know</text>
<text top="486" left="93" width="326" height="21" font="2">their index into instVars array of Java object.</text>
<text top="516" left="118" width="98" height="13" font="2">JavaMethod</text>
<text top="511" left="222" width="522" height="21" font="2">represents a Java method. Each class has its methods stored in the meth-</text>
<text top="531" left="93" width="651" height="21" font="2">ods eld. JavaMethod is subclass of CompiledCode, which is direct parent of Smalltalk</text>
<text top="552" left="93" width="651" height="21" font="2">blocks and methods. This allows us to use Java methods like any other Smalltalk method,</text>
<text top="572" left="93" width="651" height="21" font="2">and eases integration of Java methods into development tools. JavaMethod has three</text>
<text top="592" left="93" width="651" height="21" font="2">subclasses, JavaMethodWithException, representing any Java method, which declares</text>
<text top="613" left="93" width="651" height="21" font="2">throws clause, JavaMethodWithHandler, representing Java method, which has catch</text>
<text top="633" left="93" width="651" height="21" font="2">block in its body, and JavaNativeMethod, which represents method written in native</text>
<text top="653" left="93" width="37" height="21" font="2">code.</text>
<text top="706" left="93" width="285" height="28" font="1">3.3 Constant pool content</text>
<text top="753" left="93" width="651" height="21" font="2">Constant pool is a structure where all constants from classle are stored - integers or UTF8</text>
<text top="773" left="93" width="651" height="21" font="2">literals, but also class references, method references, or eld references. Because runtime</text>
<text top="794" left="93" width="651" height="21" font="2">system during compilation can dier from the system used to load class le and execute the</text>
<text top="814" left="93" width="651" height="21" font="2">code, all references to the outside of the class must be symbolic and must be resolved in run</text>
<text top="834" left="93" width="36" height="21" font="2"><a href="pdfxml.html#34">time.</a></text>
<text top="832" left="129" width="6" height="16" font="7"><a href="pdfxml.html#34">2</a></text>
<text top="834" left="143" width="49" height="21" font="2">On the</text>
<text top="834" left="197" width="21" height="21" font="6"><a href="pdfxml.html#36">3.2</a></text>
<text top="834" left="222" width="522" height="21" font="2">we see classes, instances of which can be found in runtime constant pool of</text>
<text top="855" left="93" width="650" height="21" font="2">Java class. Besides them, there are only primitive values, such as integers or UTF8 literals.</text>
<text top="880" left="118" width="381" height="21" font="2">We shortly describe each of these classes in the Table</text>
<text top="880" left="505" width="21" height="21" font="6"><a href="pdfxml.html#37">3.2</a></text>
<text top="880" left="525" width="5" height="21" font="2"><a href="pdfxml.html#37">.</a></text>
<text top="933" left="93" width="189" height="28" font="1">3.4 Class loaders</text>
<text top="979" left="93" width="651" height="21" font="2">In JVM, ClassLoader is a way of dynamic, type-safe class loading allowing Java programmer</text>
<text top="1000" left="93" width="545" height="21" font="2">to load classes in runtime, and allowing him to alter class loading mec<a href="pdfxml.html#34">hanism.</a></text>
<text top="998" left="638" width="6" height="16" font="7"><a href="pdfxml.html#34">3</a></text>
<text top="1000" left="652" width="92" height="21" font="2">Class loaders</text>
<text top="1020" left="93" width="423" height="21" font="2">can be used for namespacing, or sandboxing loaded classes<a href="pdfxml.html#63">.[</a></text>
<text top="1020" left="516" width="8" height="21" font="6"><a href="pdfxml.html#63">5</a></text>
<text top="1020" left="524" width="220" height="21" font="2"><a href="pdfxml.html#63">] </a>In fact, a Java class is dened</text>
<text top="1053" left="112" width="5" height="12" font="4">2</text>
<text top="1054" left="118" width="466" height="17" font="8">Or at load time, we will talk about reasons for rst or second way in chapter</text>
<text top="1054" left="588" width="7" height="17" font="9"><a href="pdfxml.html#39">4</a></text>
<text top="1069" left="112" width="5" height="12" font="4">3</text>
<text top="1071" left="118" width="427" height="17" font="8">For example altering loaded class, generating extra code, proxying etc.</text>
</page>
<page number="35" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="175" height="21" font="2">3.4. CLASS LOADERS</text>
<text top="92" left="784" width="16" height="21" font="2">17</text>
<text top="624" left="398" width="153" height="21" font="2">Figure 3.1: JavaClass</text>
<text top="680" left="149" width="289" height="21" font="2">by its name and its loading class <a href="pdfxml.html#63">loader.[</a></text>
<text top="680" left="438" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="680" left="446" width="354" height="21" font="2"><a href="pdfxml.html#63">, </a>section 5.3] There was no class loader support in</text>
<text top="700" left="149" width="651" height="21" font="2">initial libjava implementation. However, lot of modern libraries and applications nowadays</text>
<text top="720" left="149" width="417" height="21" font="2">make use of it - Groovy or Tomcat to name some of them.</text>
<text top="748" left="175" width="625" height="21" font="2">To properly support class loaders, we have designed a JavaClassRegistry that keeps</text>
<text top="768" left="149" width="651" height="21" font="2">track of all loaded classes and class loaders. An instance of Java class can be reclaimed,</text>
<text top="788" left="149" width="638" height="21" font="2">when there is no reference to it and when there is no reference to its loading class loader <a href="pdfxml.html#63">[</a></text>
<text top="788" left="787" width="8" height="21" font="6"><a href="pdfxml.html#63">4</a></text>
<text top="788" left="795" width="5" height="21" font="2"><a href="pdfxml.html#63">,</a></text>
<text top="809" left="149" width="644" height="21" font="2">section 12.7]. Class registry holds every used class loader instance in the weak <a href="pdfxml.html#35">dictionary</a></text>
<text top="807" left="793" width="6" height="16" font="7"><a href="pdfxml.html#35">4</a></text>
<text top="829" left="149" width="378" height="21" font="2">together with all classes loaded by given class loader.</text>
<text top="857" left="175" width="625" height="21" font="2">Dierent class loaders are used in dierent phases of VM startup. In following section</text>
<text top="877" left="149" width="190" height="21" font="2">we will present the details.</text>
<text top="932" left="149" width="332" height="23" font="0">3.4.1 JVM startup and class loaders</text>
<text top="972" left="149" width="651" height="21" font="2">JVM specication denes three class loaders. Bootstrap class loader (also called pri-</text>
<text top="992" left="149" width="78" height="21" font="2">mordial<a href="pdfxml.html#63">),[</a></text>
<text top="992" left="227" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="992" left="235" width="565" height="21" font="2"><a href="pdfxml.html#63">, </a>section 5.3.1] is used during JVM startup, Extension class loader, is used</text>
<text top="1013" left="149" width="651" height="21" font="2">to load extension classes to JVM, and System class loader, which takes over after JVM</text>
<text top="1033" left="149" width="386" height="21" font="2">startup and is parent to all user-dened class <a href="pdfxml.html#63">loaders.[</a></text>
<text top="1033" left="535" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="1033" left="543" width="102" height="21" font="2"><a href="pdfxml.html#63">, </a>section 5.3.2]</text>
<text top="1069" left="168" width="5" height="12" font="4">4</text>
<text top="1071" left="174" width="518" height="17" font="8">References in weak collection do not prevent garbage collector in collecting an object.</text>
</page>
<page number="36" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">18</text>
<text top="92" left="496" width="248" height="21" font="2">CHAPTER 3. CLASS LOADING</text>
<text top="645" left="297" width="243" height="21" font="2">Figure 3.2: Constant pool content</text>
<text top="698" left="93" width="253" height="21" font="2">3.4.1.1 Bootstrap class loader</text>
<text top="734" left="93" width="638" height="21" font="2">Bootstrap class loader loads all classes dened in sun.boot.class.path Java property<a href="pdfxml.html#63">.[</a></text>
<text top="734" left="731" width="8" height="21" font="6"><a href="pdfxml.html#63">7</a></text>
<text top="734" left="739" width="5" height="21" font="2"><a href="pdfxml.html#63">]</a></text>
<text top="754" left="93" width="651" height="21" font="2">Classes included in these JARs cannot be loaded by any other class loader, they cannot be</text>
<text top="774" left="93" width="253" height="21" font="2">overridden, unloaded or <a href="pdfxml.html#36">reclaimed.</a></text>
<text top="773" left="346" width="6" height="16" font="7"><a href="pdfxml.html#36">5</a></text>
<text top="774" left="366" width="378" height="21" font="2">If user-dened class loader attempts to load such a</text>
<text top="795" left="93" width="466" height="21" font="2">bootstrap class, an instance of SecurityException is thrown.</text>
<text top="820" left="118" width="625" height="21" font="2">Most of the behavior of Bootstrap class loader is implemented by JavaClassReader,</text>
<text top="840" left="93" width="651" height="21" font="2">so it can be shared with relevant native methods. This loader also loads extension class</text>
<text top="860" left="93" width="545" height="21" font="2">loader. Classes loaded by this loader have their classLoader eld set to null.</text>
<text top="909" left="93" width="252" height="21" font="2">3.4.1.2 Extension class loader</text>
<text top="944" left="93" width="651" height="21" font="2">Extension class loader is instance of sun.misc.Launcher$ExtClassLoader. During</text>
<text top="964" left="93" width="651" height="21" font="2">JVM startup, singleton of this class is instantiated. It has two responsibilities: it loads all</text>
<text top="985" left="93" width="651" height="21" font="2">classes dened in java.ext.dirs Java property and it loads a system class loader. After</text>
<text top="1005" left="93" width="651" height="21" font="2">loading system class loader, the system considers itself booted, as it is possible to continue</text>
<text top="1036" left="112" width="5" height="12" font="4">5</text>
<text top="1038" left="118" width="626" height="17" font="8">There is small inconsistency in java.lang.ClassLoader#resolveClass0(java.lang.Class) na-</text>
<text top="1054" left="93" width="651" height="17" font="8">tive method, which ignores sun.boot.class.path and only checks, whether class name does not start</text>
<text top="1071" left="93" width="399" height="17" font="8">(package is part of fully qualied domain class name) with java.</text>
</page>
<page number="37" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="175" height="21" font="2">3.4. CLASS LOADERS</text>
<text top="92" left="784" width="16" height="21" font="2">19</text>
<text top="148" left="160" width="37" height="21" font="2">Class</text>
<text top="148" left="364" width="81" height="21" font="2">Description</text>
<text top="177" left="160" width="69" height="13" font="2">JavaRef</text>
<text top="172" left="364" width="359" height="21" font="2">Root class dening interface with no functionality.</text>
<text top="198" left="160" width="118" height="13" font="2">JavaClassRef</text>
<text top="193" left="364" width="425" height="21" font="2">Represents reference to the Java class. It is specied by</text>
<text top="213" left="364" width="425" height="21" font="2">fully qualied domain name of referenced class. Resolving</text>
<text top="239" left="364" width="88" height="13" font="2">JavaClass</text>
<text top="233" left="458" width="146" height="21" font="2">is pursued in section</text>
<text top="233" left="609" width="33" height="21" font="6"><a href="pdfxml.html#41">4.5.1</a></text>
<text top="233" left="643" width="5" height="21" font="2"><a href="pdfxml.html#41">.</a></text>
<text top="260" left="160" width="128" height="13" font="2">JavaStringRef</text>
<text top="254" left="364" width="425" height="21" font="2">String literals in constant pool are encoded in UTF8.</text>
<text top="280" left="364" width="128" height="13" font="2">JavaStringRef</text>
<text top="275" left="496" width="293" height="21" font="2">represents String object with given UTF8</text>
<text top="295" left="364" width="41" height="21" font="2">value.</text>
<text top="321" left="160" width="187" height="13" font="2">JavaClassContentRef</text>
<text top="316" left="364" width="425" height="21" font="2">Denes common operations of JavaMethodRef and</text>
<text top="342" left="364" width="118" height="13" font="2">JavaFieldRef</text>
<text top="362" left="160" width="128" height="13" font="2">JavaMethodRef</text>
<text top="357" left="364" width="425" height="21" font="2">Together with JavaInterfaceMethodRef represent ref-</text>
<text top="377" left="364" width="425" height="21" font="2">erence to the Java method. Resolving JavaMethodRef is</text>
<text top="398" left="364" width="140" height="21" font="2">described in section</text>
<text top="398" left="509" width="33" height="21" font="6"><a href="pdfxml.html#43">4.5.2</a></text>
<text top="398" left="543" width="5" height="21" font="2"><a href="pdfxml.html#43">.</a></text>
<text top="424" left="160" width="118" height="13" font="2">JavaFieldRef</text>
<text top="419" left="364" width="425" height="21" font="2">Represents Java instance or static eld. Resolving is de-</text>
<text top="439" left="364" width="124" height="21" font="2">scribed in section</text>
<text top="439" left="493" width="33" height="21" font="6"><a href="pdfxml.html#44">4.5.3</a></text>
<text top="439" left="527" width="5" height="21" font="2"><a href="pdfxml.html#44">.</a></text>
<text top="465" left="160" width="147" height="13" font="2">JavaNameAndType</text>
<text top="465" left="364" width="147" height="13" font="2">JavaNameAndType</text>
<text top="460" left="519" width="270" height="21" font="2">is basic property both Java methods</text>
<text top="480" left="364" width="339" height="21" font="2">and elds describing their name and their type.</text>
<text top="515" left="340" width="269" height="21" font="2">Table 3.2: Java constant pool content</text>
<text top="567" left="149" width="651" height="21" font="2">loading classes without help of bootstrap class loader (which does not mean bootstrap class</text>
<text top="588" left="149" width="651" height="21" font="2">loader is not used anymore, it is just not used to load everything). Time between load of</text>
<text top="608" left="149" width="651" height="21" font="2">this class loader and load of system class loader can be called post-boot phase, core classes</text>
<text top="628" left="149" width="452" height="21" font="2">are loaded, but it is not possible to use user-dened classes yet.</text>
<text top="675" left="149" width="231" height="21" font="2">3.4.1.3 System class loader</text>
<text top="710" left="149" width="651" height="21" font="2">Is instance of sun.misc.Launcher$AppClassLoader. Post-boot phase ends with load</text>
<text top="730" left="149" width="651" height="21" font="2">of this class, as it is possible to use custom, user-dened class loaders and load user dened</text>
<text top="750" left="149" width="651" height="21" font="2">classes. The system class loader is parent of all user-dened class loaders. It oers methods</text>
<text top="771" left="149" width="651" height="21" font="2">using which classes can be found, loaded, registered, resolved and initialized. Every class</text>
<text top="791" left="149" width="651" height="21" font="2">outside of responsibility of bootstrap and extension class loader, (and not loaded by user-</text>
<text top="811" left="149" width="651" height="21" font="2">dened class loader) is loaded by system class loader. In our implementation, native methods</text>
<text top="832" left="149" width="651" height="21" font="2">supporting system class loader behavior are dened in JavaVM along other native methods.</text>
<text top="878" left="149" width="282" height="21" font="2">3.4.1.4 User-dened class loaders</text>
<text top="913" left="149" width="651" height="21" font="2">Class loaders were designed to use delegation. User-dened class loader should delegate</text>
<text top="933" left="149" width="651" height="21" font="2">request for loading a class to its superclass rst, and if the class could not be found, then it</text>
<text top="954" left="149" width="651" height="21" font="2">can try to load given class. Delegation ends in system class loader. This way, integrity of</text>
<text top="974" left="149" width="419" height="21" font="2">class registry and correct responsibility ranges are fullled.</text>
<text top="998" left="175" width="614" height="21" font="2">There are use cases, where delegation model is not desired. For example in T<a href="pdfxml.html#37">omcat</a></text>
<text top="996" left="788" width="6" height="16" font="7"><a href="pdfxml.html#37">6</a></text>
<text top="998" left="795" width="5" height="21" font="2"><a href="pdfxml.html#37">,</a></text>
<text top="1018" left="149" width="651" height="21" font="2">an open source implementation of the Java Servlet and Java Server Pages technologies, each</text>
<text top="1039" left="149" width="651" height="21" font="2">web application has its own class loader, so two web applications cannot see each other's</text>
<text top="1069" left="168" width="5" height="12" font="4">6</text>
<text top="1071" left="174" width="154" height="17" font="8">http://tomcat.apache.org</text>
</page>
<page number="38" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">20</text>
<text top="92" left="496" width="248" height="21" font="2">CHAPTER 3. CLASS LOADING</text>
<text top="153" left="93" width="651" height="21" font="2">classes. If delegation would be used, web applications would have been sharing some classes.</text>
<text top="174" left="93" width="651" height="21" font="2">This is a security vulnerability, one application can modify a class and other applications</text>
<text top="194" left="93" width="91" height="21" font="2">would use it.</text>
<text top="218" left="118" width="625" height="21" font="2">Solution to this problem is simple, JVM performs many checks during various times (class</text>
<text top="239" left="93" width="651" height="21" font="2">reading and loading, reference resolving, method invocation etc.) and ensures everything is</text>
<text top="259" left="93" width="226" height="21" font="2">following rules imposed by JLS.</text>
<text top="283" left="118" width="625" height="21" font="2">Of course, classes loaded by bootstrap class loader are shared, as they cannot be reloaded.</text>
</page>
<page number="39" position="absolute" top="0" left="0" height="1262" width="892">
<text top="257" left="149" width="145" height="40" font="3">Chapter 4</text>
<text top="332" left="149" width="164" height="48" font="5">Resolving</text>
<text top="438" left="149" width="651" height="21" font="2">In this chapter, we begin with discussion about eager and lazy resolving, then initial imple-</text>
<text top="458" left="149" width="571" height="21" font="2">mentation of libjava will be shown, and then we present new resolving scheme.</text>
<text top="484" left="175" width="625" height="21" font="2">Resolving is a process of loading and linking referenced class (and its elds and methods)</text>
<text top="504" left="149" width="651" height="21" font="2">into the running system. Each reference has an information (fully specied domain class</text>
<text top="525" left="149" width="42" height="21" font="2"><a href="pdfxml.html#63">name[</a></text>
<text top="525" left="192" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="525" left="200" width="482" height="21" font="2"><a href="pdfxml.html#63">, </a>section 4.3.1], and in the case of method or eld, name and typ<a href="pdfxml.html#63">e[</a></text>
<text top="525" left="682" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="525" left="690" width="110" height="21" font="2"><a href="pdfxml.html#63">, </a>section 4.5.6])</text>
<text top="545" left="149" width="352" height="21" font="2">using which a reference can be correctly resolved.</text>
<text top="601" left="149" width="512" height="28" font="1">4.1 Resolving, loading, linking and initialization</text>
<text top="648" left="149" width="651" height="21" font="2">There are 4 terms used: resolving, loading, linking and initialization. As they can have</text>
<text top="669" left="149" width="651" height="21" font="2">various meanings (for example ClassLoader#resolveClass actually does not resolve,</text>
<text top="689" left="149" width="576" height="21" font="2">but links), we will use them carefully with the meaning described in this section.</text>
<text top="715" left="175" width="625" height="21" font="2">Resolving is done on reference, and it describes a process, when a referenced entity is</text>
<text top="735" left="149" width="651" height="21" font="2">searched (and if needed loaded and linked) in running system. Linking is done on class,</text>
<text top="756" left="149" width="651" height="21" font="2">and means plugging the class into the running system. Loading is a process from which a</text>
<text top="776" left="149" width="651" height="21" font="2">new class is returned. New class can be loaded from classle, or using class loaders. To be</text>
<text top="796" left="149" width="651" height="21" font="2">able to use loaded class, it has to be linked. To be able to reference loaded class, a reference</text>
<text top="817" left="149" width="651" height="21" font="2">has to be resolved. Initialization of the class is in fact calling class initialization method.</text>
<text top="837" left="149" width="299" height="21" font="2">In Java, this method is called &lt;clinit&gt;.</text>
<text top="863" left="175" width="625" height="21" font="2">There are two ways how to implement resolving logic, or more accurately, when to perform</text>
<text top="883" left="149" width="219" height="21" font="2">resolving. JVM specication <a href="pdfxml.html#63">[</a></text>
<text top="883" left="368" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="883" left="376" width="424" height="21" font="2"><a href="pdfxml.html#63">] </a>does not enforce nor prefer neither of them. However, it</text>
<text top="904" left="149" width="651" height="21" font="2">denes, when class initialization must be performed, and as it turns out, this plays important</text>
<text top="924" left="149" width="337" height="21" font="2">role in deciding, which resolving scheme to use.</text>
<text top="980" left="149" width="214" height="28" font="1">4.2 Eager resolving</text>
<text top="1027" left="149" width="651" height="21" font="2">Eager alternative resolves all references during or directly after loading of the class. Advan-</text>
<text top="1048" left="149" width="651" height="21" font="2">tages are, that there is no runtime overhead connected with resolving (because everything</text>
<text top="1068" left="149" width="651" height="21" font="2">is already prepared). Also, we can directly store resolved objects into the runtime constant</text>
<text top="1129" left="466" width="16" height="21" font="2">21</text>
</page>
<page number="40" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">22</text>
<text top="92" left="535" width="209" height="21" font="2">CHAPTER 4. RESOLVING</text>
<text top="153" left="93" width="651" height="21" font="2">pool and therefore remove overhead connected with indirection. Disadvantage is, that is</text>
<text top="174" left="93" width="360" height="21" font="2">would be very dicult to invalidate constant po<a href="pdfxml.html#40">ol.</a></text>
<text top="172" left="453" width="6" height="16" font="7"><a href="pdfxml.html#40">1</a></text>
<text top="199" left="118" width="625" height="21" font="2">As mentioned before, class initialization must be taken into account. JVM is precise</text>
<text top="219" left="93" width="432" height="21" font="2">in stating that class initialization must be performed lazily<a href="pdfxml.html#63">[</a></text>
<text top="219" left="525" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="219" left="533" width="211" height="21" font="2"><a href="pdfxml.html#63">, </a>section 2.17.4]. Using eager</text>
<text top="239" left="93" width="651" height="21" font="2">resolving can then result in resolved references pointing at the not-yet initialized class. Static</text>
<text top="259" left="93" width="651" height="21" font="2">eld accessing instructions (PUTSTATIC, GETSTATIC) would need to check, whether a</text>
<text top="280" left="93" width="651" height="21" font="2">class is initialized. In our implementation, it would mean to just check one ag on Java</text>
<text top="300" left="93" width="184" height="21" font="2">class, which is acceptable.</text>
<text top="325" left="118" width="625" height="21" font="2">Big disadvantage of eager resolving is big increase in load time. Every single reference in</text>
<text top="345" left="93" width="651" height="21" font="2">the constant pool is resolved. Many more classes are loaded, and they may not be used at</text>
<text top="366" left="93" width="22" height="21" font="2">all.</text>
<text top="417" left="93" width="203" height="28" font="1">4.3 Lazy resolving</text>
<text top="463" left="93" width="651" height="21" font="2">Lazy resolving leaves resolving of the reference for the time, when the reference is accessed.</text>
<text top="484" left="93" width="651" height="21" font="2">Disadvantage is runtime overhead, reference has to be resolved, but it happens only once for</text>
<text top="504" left="93" width="651" height="21" font="2">each reference. After so called VM warm-up phase, when most of the references are already</text>
<text top="524" left="93" width="651" height="21" font="2">resolved, dierence is much smaller and performance is almost the same as in eager resolving.</text>
<text top="545" left="93" width="140" height="21" font="2">JVM specication <a href="pdfxml.html#63">[</a></text>
<text top="545" left="233" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="545" left="241" width="503" height="21" font="2"><a href="pdfxml.html#63">, </a>section 2.17] advises to replace resolved object with the reference in</text>
<text top="565" left="93" width="651" height="21" font="2">the constant pool. This way, once the resolving happened, there is no dierence between</text>
<text top="585" left="93" width="651" height="21" font="2">eager and lazy resolving. Using this approach, constant pool invalidation becomes dicult.</text>
<text top="606" left="93" width="651" height="21" font="2">Class invalidation is important feature allowing us to dynamically change loaded classes and</text>
<text top="626" left="93" width="510" height="21" font="2">it makes incremental compiling easier to implement and more powerful.</text>
<text top="651" left="118" width="625" height="21" font="2">Because of that, we decided not to replace references, and store resolved object into the</text>
<text top="671" left="93" width="651" height="21" font="2">instance eld of the reference as a simple caching mechanism. This way runtime overhead</text>
<text top="691" left="93" width="651" height="21" font="2">after warm-up phase equals to one access into struct and null check. If the cache is empty</text>
<text top="712" left="93" width="290" height="21" font="2">(nil), resolve method has to be called.</text>
<text top="763" left="93" width="349" height="28" font="1">4.4 Initial resolving architecture</text>
<text top="809" left="93" width="651" height="21" font="2">Original version libjava used resolving scheme suggested in the JVM specication, it lazily</text>
<text top="830" left="93" width="651" height="21" font="2">replaced references in constant pool with resolved classes and methods. We found this</text>
<text top="850" left="93" width="651" height="21" font="2">implementation confusing, as the constant pool could contain instances of 3 dierent classes,</text>
<text top="870" left="93" width="651" height="21" font="2">and object at the certain index could change into an instance of completely dierent class</text>
<text top="891" left="93" width="651" height="21" font="2">in time. This had to be checked in the code at many places including Bytecode Interpreter.</text>
<text top="911" left="93" width="219" height="21" font="2">For example, method shown in</text>
<text top="911" left="318" width="21" height="21" font="6"><a href="pdfxml.html#40">4.1</a></text>
<text top="911" left="344" width="400" height="21" font="2">answers true, if name given as a parameter refers to any</text>
<text top="931" left="93" width="207" height="21" font="2">method in the constant pool.</text>
<text top="968" left="106" width="5" height="12" font="4">1</text>
<text top="967" left="118" width="344" height="13" font="2">refersToMethodNamed:aJavaMethodName</text>
<text top="989" left="106" width="5" height="12" font="4">2</text>
<text top="987" left="158" width="69" height="12" font="10"><b>self do</b></text>
<text top="987" left="226" width="137" height="13" font="2">:[:constItem |</text>
<text top="1009" left="106" width="5" height="12" font="4">3</text>
<text top="1007" left="197" width="393" height="13" font="2">(constItem isKindOf:JavaMethod) <b>ifTrue</b>:[</text>
<text top="1036" left="112" width="5" height="12" font="4">1</text>
<text top="1038" left="118" width="278" height="17" font="8">Invalidation importance is pursued in section</text>
<text top="1038" left="402" width="18" height="17" font="9"><a href="pdfxml.html#45">4.6</a></text>
<text top="1038" left="425" width="319" height="17" font="8">For example when we would like to replace class in</text>
<text top="1054" left="93" width="651" height="17" font="8">runtime, we would have to update all references to that class. This feature is not present in JVM, but is</text>
<text top="1071" left="93" width="267" height="17" font="8">very common in Smalltalk implementations.</text>
</page>
<page number="41" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="168" height="21" font="2">4.5. JAVARESOLVER</text>
<text top="92" left="784" width="16" height="21" font="2">23</text>
<text top="160" left="162" width="5" height="12" font="4">4</text>
<text top="159" left="292" width="403" height="13" font="2">constItem name = aJavaMethodName <b>ifTrue</b>:[</text>
<text top="157" left="696" width="78" height="15" font="2">‚Üë <b>true</b>].</text>
<text top="181" left="162" width="5" height="12" font="4">5</text>
<text top="179" left="253" width="108" height="13" font="2">] <b>ifFalse</b>:[</text>
<text top="201" left="162" width="5" height="12" font="4">6</text>
<text top="199" left="292" width="442" height="13" font="2">(constItem isMemberOf:JavaMethodref) <b>ifTrue</b>:[</text>
<text top="221" left="162" width="5" height="12" font="4">7</text>
<text top="220" left="332" width="403" height="13" font="2">constItem name = aJavaMethodName <b>ifTrue</b>:[</text>
<text top="218" left="735" width="58" height="15" font="2">‚Üë <b>true</b></text>
<text top="240" left="361" width="20" height="13" font="2">].</text>
<text top="262" left="162" width="5" height="12" font="4">8</text>
<text top="260" left="292" width="20" height="13" font="2">].</text>
<text top="282" left="162" width="5" height="12" font="4">9</text>
<text top="281" left="292" width="216" height="13" font="2">(constItem isMemberOf:</text>
<text top="301" left="322" width="403" height="13" font="2">JavaUnresolvedMethodrefConstant) <b>ifTrue</b>:[</text>
<text top="323" left="156" width="11" height="12" font="4">10</text>
<text top="321" left="332" width="39" height="12" font="10"><b>self</b></text>
<text top="321" left="381" width="59" height="13" font="2">error.</text>
<text top="343" left="156" width="11" height="12" font="4">11</text>
<text top="342" left="292" width="10" height="13" font="2">]</text>
<text top="364" left="156" width="11" height="12" font="4">12</text>
<text top="362" left="253" width="10" height="13" font="2">]</text>
<text top="384" left="156" width="11" height="12" font="4">13</text>
<text top="382" left="214" width="20" height="13" font="2">].</text>
<text top="404" left="156" width="11" height="12" font="4">14</text>
<text top="401" left="175" width="68" height="15" font="2">‚Üë <b>false</b></text>
<text top="434" left="297" width="355" height="21" font="2">Code Example 4.1: Initial resolving logic example</text>
<text top="472" left="175" width="557" height="21" font="2">This approach made code very dicult to manage. Code similar to the Listing</text>
<text top="472" left="736" width="21" height="21" font="6"><a href="pdfxml.html#40">4.1</a></text>
<text top="472" left="762" width="38" height="21" font="2">could</text>
<text top="492" left="149" width="651" height="21" font="2">be found in many places around the system. Also, there were particular bugs, which were very</text>
<text top="513" left="149" width="120" height="21" font="2">dicult to trac<a href="pdfxml.html#41">k.</a></text>
<text top="511" left="269" width="6" height="16" font="7"><a href="pdfxml.html#41">2</a></text>
<text top="513" left="283" width="517" height="21" font="2">Because of these reasons, we decided to rewrite whole resolving logic and</text>
<text top="533" left="149" width="651" height="21" font="2">constant pool content. Secondary reason was, that new approach is much more exible and</text>
<text top="553" left="149" width="651" height="21" font="2">constant pool invalidation or reference sharing will be easier to design and implement. Final</text>
<text top="574" left="149" width="651" height="21" font="2">reason was that resolving logic was spread among the code a did not follow the specication</text>
<text top="594" left="149" width="298" height="21" font="2">regarding the access ags or class loaders.</text>
<text top="645" left="149" width="189" height="28" font="1">4.5 JavaResolver</text>
<text top="691" left="149" width="651" height="21" font="2">All new resolving logic is encapsulated in JavaResolver class. A decision has been made</text>
<text top="711" left="149" width="651" height="21" font="2">to start with lazy resolving, as it is the most straightforward and allows faster startup. As</text>
<text top="731" left="149" width="651" height="21" font="2">turned up later, there is more eager approach which is more performant but does not loose</text>
<text top="752" left="149" width="651" height="21" font="2">any of benets of the lazy approach. Deeper explanation of this topic can be found in section</text>
<text top="772" left="149" width="33" height="21" font="6"><a href="pdfxml.html#51">6.2.1</a></text>
<text top="772" left="183" width="5" height="21" font="2"><a href="pdfxml.html#51">.</a></text>
<text top="796" left="175" width="625" height="21" font="2">During the resolving, resolved value is cached in the reference object itself and next time</text>
<text top="817" left="149" width="651" height="21" font="2">a reference is accessed, cached value is returned. In Bytecode Interpreter, this overhead is</text>
<text top="837" left="149" width="651" height="21" font="2">even smaller, as Bytecode Interpreter directly accesses instance eld without method call.</text>
<text top="857" left="149" width="651" height="21" font="2">Cache invalidation is means only nilling out the cache slot in the reference object. So far,</text>
<text top="878" left="149" width="501" height="21" font="2">cache invalidation is not used, but it will be important in future work.</text>
<text top="902" left="175" width="591" height="21" font="2">In following sections, we will describe resolving logic of classes, methods and elds.</text>
<text top="949" left="149" width="211" height="23" font="0">4.5.1 Resolving classes</text>
<text top="985" left="149" width="651" height="21" font="2">Class reference is identied by a fully qualied name of the referenced class. Simplied</text>
<text top="1005" left="149" width="292" height="21" font="2">resolving class reference logic is shown in</text>
<text top="1005" left="447" width="21" height="21" font="6"><a href="pdfxml.html#42">4.2</a></text>
<text top="1005" left="467" width="5" height="21" font="2"><a href="pdfxml.html#42">.</a></text>
<text top="1036" left="168" width="5" height="12" font="4">2</text>
<text top="1038" left="174" width="626" height="17" font="8">In some places in the code, a reference was replaced with wrong object, also possibly in the Bytecode</text>
<text top="1054" left="149" width="651" height="17" font="8">Interpreter. This invalid object stayed in the constant pool and program crashed only when constant pool</text>
<text top="1071" left="149" width="481" height="17" font="8">on this index was accessed, which was often many instruction or methods later.</text>
</page>
<page number="42" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">24</text>
<text top="92" left="535" width="209" height="21" font="2">CHAPTER 4. RESOLVING</text>
<text top="175" left="106" width="5" height="12" font="4">1</text>
<text top="173" left="118" width="422" height="13" font="2">resolveClassIndentifiedByRef: aJavaClassRef</text>
<text top="195" left="106" width="5" height="12" font="4">2</text>
<text top="193" left="158" width="98" height="13" font="2">| result |</text>
<text top="215" left="106" width="5" height="12" font="4">3</text>
<text top="214" left="158" width="39" height="12" font="10"><b>self</b></text>
<text top="214" left="207" width="314" height="13" font="2">validateClassRef: aJavaClassRef.</text>
<text top="236" left="106" width="5" height="12" font="4">4</text>
<text top="234" left="158" width="471" height="13" font="2">JavaClassReader classLoaderQuerySignal answer: (</text>
<text top="254" left="188" width="255" height="13" font="2">aJavaClassRef classLoader)</text>
<text top="276" left="106" width="5" height="12" font="4">5</text>
<text top="275" left="197" width="20" height="12" font="10"><b>do</b></text>
<text top="275" left="217" width="29" height="13" font="2">: [</text>
<text top="297" left="106" width="5" height="12" font="4">6</text>
<text top="295" left="236" width="59" height="13" font="2">result</text>
<text top="293" left="302" width="357" height="15" font="2">‚Üê <b>self </b>lookupClassIfAlreadyResolved:</text>
<text top="315" left="266" width="275" height="13" font="2">aJavaClassRef javaClassName.</text>
<text top="337" left="106" width="5" height="12" font="4">7</text>
<text top="336" left="236" width="216" height="13" font="2">result isNil <b>ifTrue</b>: [</text>
<text top="358" left="106" width="5" height="12" font="4">8</text>
<text top="356" left="276" width="59" height="13" font="2">result</text>
<text top="354" left="341" width="268" height="15" font="2">‚Üê <b>self </b>loadUnresolvedClass:</text>
<text top="376" left="305" width="137" height="13" font="2">aJavaClassRef.</text>
<text top="398" left="106" width="5" height="12" font="4">9</text>
<text top="397" left="236" width="10" height="13" font="2">]</text>
<text top="419" left="100" width="11" height="12" font="4">10</text>
<text top="417" left="168" width="569" height="13" font="2">(<b>self </b>checkPermissionsFrom: aJavaClassRef owner to: result</text>
<text top="437" left="197" width="10" height="13" font="2">)</text>
<text top="459" left="100" width="11" height="12" font="4">11</text>
<text top="458" left="197" width="59" height="12" font="10"><b>ifTrue</b></text>
<text top="458" left="256" width="29" height="13" font="2">: [</text>
<text top="455" left="296" width="97" height="15" font="2">‚Üë result ]</text>
<text top="480" left="100" width="11" height="12" font="4">12</text>
<text top="478" left="197" width="69" height="12" font="10"><b>ifFalse</b></text>
<text top="478" left="266" width="344" height="13" font="2">: [ <b>self </b>throwIllegalAccessError ].</text>
<text top="509" left="260" width="316" height="21" font="2">Code Example 4.2: Class reference resolving</text>
<text top="547" left="118" width="625" height="21" font="2">First, method checks whether a given reference is valid (line 3). This is just an assertion</text>
<text top="567" left="93" width="651" height="21" font="2">of correct type and does nothing in production build. Interesting code on the line 4 causes</text>
<text top="587" left="93" width="651" height="21" font="2">correct class loader to be used in surrounded code. Then if the referenced class is not</text>
<text top="608" left="93" width="651" height="21" font="2">already loaded (line 6), it is loaded now. Finally, method veries whether a reference owner,</text>
<text top="628" left="93" width="651" height="21" font="2">a class accessing the referenced one, can access the referenced class (line 10). If everything</text>
<text top="648" left="93" width="651" height="21" font="2">went without errors, resolved class is returned (line 11) and stored in instance variable (as</text>
<text top="669" left="93" width="651" height="21" font="2">cache). Interpretation then continues. If given class does not have permissions to access the</text>
<text top="689" left="93" width="414" height="21" font="2">reference, an IllegalAccessError is thrown (line 12).</text>
<text top="713" left="118" width="100" height="21" font="2">Code example</text>
<text top="713" left="224" width="21" height="21" font="6"><a href="pdfxml.html#42">4.3</a></text>
<text top="713" left="250" width="468" height="21" font="2">demonstrates new resolving process in from Bytecode Interpreter.</text>
<text top="750" left="106" width="5" height="12" font="4">1</text>
<text top="748" left="118" width="39" height="12" font="10"><b>case</b></text>
<text top="748" left="168" width="39" height="13" font="2">NEW:</text>
<text top="770" left="106" width="5" height="12" font="4">2</text>
<text top="768" left="118" width="10" height="13" font="2">{</text>
<text top="790" left="106" width="5" height="12" font="4">3</text>
<text top="789" left="158" width="137" height="12" font="10"><b>unsigned short</b></text>
<text top="789" left="305" width="59" height="13" font="2">index;</text>
<text top="811" left="106" width="5" height="12" font="4">4</text>
<text top="809" left="158" width="128" height="13" font="2">OBJ classRef;</text>
<text top="831" left="106" width="5" height="12" font="4">5</text>
<text top="829" left="158" width="118" height="13" font="2">OBJ newInst;</text>
<text top="851" left="106" width="5" height="12" font="4">6</text>
<text top="850" left="158" width="177" height="13" font="2">OBJ resolvedClass;</text>
<text top="872" left="106" width="5" height="12" font="4">7</text>
<text top="892" left="106" width="5" height="12" font="4">8</text>
<text top="890" left="158" width="216" height="13" font="2">index = FETCH_INDEX_2;</text>
<text top="912" left="106" width="5" height="12" font="4">9</text>
<text top="911" left="158" width="334" height="13" font="2">classRef = CONSTANTPOOL_AT(index);</text>
<text top="933" left="100" width="11" height="12" font="4">10</text>
<text top="931" left="158" width="422" height="13" font="2">VALIDATE_REFERENCE(classRef,&#34;ClassRef&#34;, 2);</text>
<text top="953" left="100" width="11" height="12" font="4">11</text>
<text top="951" left="158" width="560" height="13" font="2">RESOLVE_REFERENCE_IF_NOT_ALREADY(classRef, &#34;ClassRef&#34;, 2,</text>
<text top="972" left="188" width="29" height="13" font="2">0);</text>
<text top="994" left="100" width="11" height="12" font="4">12</text>
<text top="992" left="158" width="128" height="13" font="2">resolvedClass</text>
<text top="992" left="305" width="265" height="13" font="2">= RESOLVED_VALUE(classRef);</text>
<text top="1014" left="100" width="11" height="12" font="4">13</text>
<text top="1012" left="158" width="20" height="12" font="10"><b>if</b></text>
<text top="1012" left="187" width="236" height="13" font="2">(resolvedClass == nil) {</text>
<text top="1034" left="100" width="11" height="12" font="4">14</text>
<text top="1033" left="197" width="39" height="12" font="10"><b>goto</b></text>
<text top="1033" left="246" width="98" height="13" font="2">returnNIL;</text>
<text top="1055" left="100" width="11" height="12" font="4">15</text>
<text top="1053" left="158" width="10" height="13" font="2">}</text>
<text top="1075" left="100" width="11" height="12" font="4">16</text>
<text top="1073" left="158" width="304" height="13" font="2">newInst = _SEND0(resolvedClass,</text>
</page>
<page number="43" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="168" height="21" font="2">4.5. JAVARESOLVER</text>
<text top="92" left="784" width="16" height="21" font="2">25</text>
<text top="160" left="156" width="11" height="12" font="4">17</text>
<text top="159" left="253" width="412" height="13" font="2">MKSYMBOL(&#34;newCleared&#34;), nil, &amp;newCleared);</text>
<text top="181" left="156" width="11" height="12" font="4">18</text>
<text top="182" left="214" width="157" height="13" font="2">*sp++ = newInst;</text>
<text top="201" left="156" width="11" height="12" font="4">19</text>
<text top="221" left="156" width="11" height="12" font="4">20</text>
<text top="220" left="214" width="49" height="12" font="10"><b>break</b></text>
<text top="220" left="263" width="10" height="13" font="2">;</text>
<text top="242" left="156" width="11" height="12" font="4">21</text>
<text top="240" left="175" width="10" height="13" font="2">}</text>
<text top="272" left="239" width="471" height="21" font="2">Code Example 4.3: Resolving example shown in NEW instruction</text>
<text top="310" left="175" width="46" height="21" font="2">Figure</text>
<text top="310" left="225" width="21" height="21" font="6"><a href="pdfxml.html#42">4.3</a></text>
<text top="310" left="250" width="550" height="21" font="2">shows an excerpt of bytecode interpreter responsible for execution of NEW in-</text>
<text top="330" left="149" width="651" height="21" font="2">struction. Index into constant pool is popped from the instruction stream (line 9), class refer-</text>
<text top="351" left="149" width="684" height="21" font="2">ence object is fetched from the constant pool (line 10). Macro RESOLVE_REF_IF_NOT_ALREADY</text>
<text top="371" left="149" width="122" height="21" font="2">(shown at Figure</text>
<text top="371" left="277" width="21" height="21" font="6"><a href="pdfxml.html#43">4.4</a></text>
<text top="371" left="298" width="502" height="21" font="2"><a href="pdfxml.html#43">) </a>actually does the resolving. If resolved class exists, it is pushed onto</text>
<text top="391" left="149" width="411" height="21" font="2">the stack (line 19), if it does not, nil is returned (line <a href="pdfxml.html#43">15).</a></text>
<text top="390" left="560" width="6" height="16" font="7"><a href="pdfxml.html#43">3</a></text>
<text top="428" left="162" width="5" height="12" font="4">1</text>
<text top="427" left="175" width="69" height="12" font="10"><b>#define</b></text>
<text top="427" left="253" width="187" height="13" font="2">RESOLVED_VALUE(ref)</text>
<text top="427" left="557" width="10" height="13" font="2">\</text>
<text top="449" left="162" width="5" height="12" font="4">2</text>
<text top="447" left="214" width="304" height="13" font="2">(__InstPtr(ref)-&gt;i_instvars[0])</text>
<text top="469" left="162" width="5" height="12" font="4">3</text>
<text top="489" left="162" width="5" height="12" font="4">4</text>
<text top="488" left="175" width="69" height="12" font="10"><b>#define</b></text>
<text top="488" left="253" width="491" height="13" font="2">RESOLVE_REF_IF_NOT_ALREADY(ref, type, delta, stat)</text>
<text top="488" left="783" width="10" height="13" font="2">\</text>
<text top="510" left="162" width="5" height="12" font="4">5</text>
<text top="508" left="214" width="20" height="12" font="10"><b>if</b></text>
<text top="508" left="243" width="295" height="13" font="2">(RESOLVED_VALUE(ref) == nil) {</text>
<text top="508" left="783" width="10" height="13" font="2">\</text>
<text top="530" left="162" width="5" height="12" font="4">6</text>
<text top="528" left="253" width="461" height="13" font="2">_SEND0(ref, MKSYMBOL(&#34;resolve&#34;), nil, &amp;dummy0);</text>
<text top="528" left="783" width="10" height="13" font="2">\</text>
<text top="550" left="162" width="5" height="12" font="4">7</text>
<text top="549" left="214" width="10" height="13" font="2">}</text>
<text top="580" left="231" width="486" height="21" font="2">Code Example 4.4: RESOLVE_REF_IF_NOT_ALREADY macro</text>
<text top="619" left="175" width="92" height="21" font="2">In the macro</text>
<text top="619" left="272" width="21" height="21" font="6"><a href="pdfxml.html#43">4.4</a></text>
<text top="619" left="293" width="507" height="21" font="2"><a href="pdfxml.html#43">, </a>we start with checking, whether instance eld in ref (our cache) is nil</text>
<text top="639" left="149" width="651" height="21" font="2">(line 2). If yes, it means that the reference has to be resolved. In that case, resolve is sent</text>
<text top="659" left="149" width="221" height="21" font="2">to the reference object (line 3).</text>
<text top="684" left="175" width="625" height="21" font="2">This is the reason why there are classes like JavaBehavior or JavaRef. They dene</text>
<text top="704" left="149" width="651" height="21" font="2">exact and expected structure, VM expects particular instance variable at certain index,</text>
<text top="725" left="149" width="315" height="21" font="2">currently, at index 0, there is valueCache.</text>
<text top="749" left="175" width="625" height="21" font="2">Another important note is, that code in RESOLVED_VALUE macro is executed very often.</text>
<text top="770" left="149" width="651" height="21" font="2">Accessing instance variable of the object is acceptable, anything more complex would be a</text>
<text top="790" left="149" width="153" height="21" font="2">big performance aw.</text>
<text top="837" left="149" width="229" height="23" font="0">4.5.2 Resolving methods</text>
<text top="874" left="149" width="651" height="21" font="2">Resolving method diers from resolving a class in one issue. We can resolve instance method</text>
<text top="894" left="149" width="651" height="21" font="2">or static method. In the constant pool, there is no information about whether a method</text>
<text top="915" left="149" width="651" height="21" font="2">is static or instance. But because there cannot be two methods with the same name, it is</text>
<text top="935" left="149" width="651" height="21" font="2">safe to nd rst method with given name. As it turns out, this is exactly how it is done</text>
<text top="955" left="149" width="175" height="21" font="2">internally in openJDK.</text>
<text top="980" left="175" width="625" height="21" font="2">During the writing of this thesis, resolving has been greatly simplied. Before, we used</text>
<text top="1000" left="149" width="651" height="21" font="2">two separate resolving methods: resolve and resolveStatic. Depending on used in-</text>
<text top="1021" left="149" width="651" height="21" font="2">struction, one of these two methods was used. For example, GETSTATIC instruction used</text>
<text top="1046" left="149" width="128" height="13" font="2">resolveStatic</text>
<text top="1041" left="282" width="58" height="21" font="2">method.</text>
<text top="1069" left="168" width="5" height="12" font="4">3</text>
<text top="1071" left="174" width="626" height="17" font="8">In fact, nil is never returned, because in case of not existing class, an exception is thrown during resolving.</text>
</page>
<page number="44" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">26</text>
<text top="92" left="535" width="209" height="21" font="2">CHAPTER 4. RESOLVING</text>
<text top="153" left="118" width="625" height="21" font="2">This is not needed, and in fact, our implementation was overly cautious. Our expectations</text>
<text top="174" left="93" width="651" height="21" font="2">were, that it is not possible to override instance eld in superclass with static eld in subclass</text>
<text top="194" left="93" width="651" height="21" font="2">(and methods too, but the correct way diers slightly). In other words, all instance elds in</text>
<text top="214" left="93" width="651" height="21" font="2">the whole inheritance tree are searched, and then all static and interface elds are searched.</text>
<text top="235" left="93" width="651" height="21" font="2">This turned up to be incorrect, all instance elds are searched, than all static, and if nothing</text>
<text top="255" left="93" width="286" height="21" font="2">is found, lookup continues in superclass.</text>
<text top="282" left="118" width="625" height="21" font="2">As there can not be two eld with the same name in one class, it turned up that normal</text>
<text top="303" left="93" width="293" height="21" font="2">and static resolving can be unied safely.</text>
<text top="330" left="118" width="625" height="21" font="2">Interesting fact is, that compiler does not allow static method in the subclass to override</text>
<text top="350" left="93" width="486" height="21" font="2">instance method in the superclass, but it does allow it for the elds.</text>
<text top="378" left="118" width="473" height="21" font="2">Currently, there is only resolve method which handles all cases.</text>
<text top="432" left="93" width="199" height="23" font="0">4.5.3 Resolving elds</text>
<text top="473" left="93" width="651" height="21" font="2">To resolve a eld, we have very similar approach compared to resolving methods. The</text>
<text top="493" left="93" width="651" height="21" font="2">purpose of resolving a eld is to nd index into instance (or class for in case of static elds)</text>
<text top="513" left="93" width="651" height="21" font="2">where the requested datum is physically stored.. Index is then accessed in the Bytecode</text>
<text top="534" left="93" width="397" height="21" font="2">Interpreter, which then manipulates a eld respectively.</text>
<text top="561" left="118" width="625" height="21" font="2">As mentioned in previous section, resolving has been simplied and new scheme is pre-</text>
<text top="581" left="93" width="85" height="21" font="2">sented here.</text>
<text top="609" left="118" width="49" height="21" font="2">Listing</text>
<text top="609" left="173" width="21" height="21" font="6"><a href="pdfxml.html#44">4.5</a></text>
<text top="609" left="199" width="219" height="21" font="2">shows the eld lookup routine.</text>
<text top="648" left="106" width="5" height="12" font="4">1</text>
<text top="646" left="118" width="412" height="13" font="2">lookupFieldByNameAndType: aJavaNameAndType</text>
<text top="668" left="106" width="5" height="12" font="4">2</text>
<text top="666" left="158" width="69" height="13" font="2">| field</text>
<text top="666" left="246" width="49" height="13" font="2">cls |</text>
<text top="688" left="106" width="5" height="12" font="4">3</text>
<text top="686" left="158" width="29" height="13" font="2">cls</text>
<text top="684" left="194" width="72" height="15" font="2">‚Üê <b>self</b>.</text>
<text top="708" left="106" width="5" height="12" font="4">4</text>
<text top="707" left="158" width="334" height="13" font="2">[ cls ~~ JavaObject ] whileTrue: [</text>
<text top="729" left="106" width="5" height="12" font="4">5</text>
<text top="727" left="197" width="49" height="13" font="2">field</text>
<text top="725" left="253" width="484" height="15" font="2">‚Üê cls findInstFieldByName: aJavaNameAndType name.</text>
<text top="749" left="106" width="5" height="12" font="4">6</text>
<text top="747" left="197" width="167" height="13" font="2">field <b>ifNotNil</b>: [</text>
<text top="745" left="375" width="97" height="15" font="2">‚Üë field ].</text>
<text top="769" left="106" width="5" height="12" font="4">7</text>
<text top="768" left="197" width="49" height="13" font="2">field</text>
<text top="766" left="253" width="445" height="15" font="2">‚Üê cls findStaticFieldByName: aJavaNameAndType</text>
<text top="788" left="227" width="49" height="13" font="2">name.</text>
<text top="810" left="106" width="5" height="12" font="4">8</text>
<text top="808" left="197" width="167" height="13" font="2">field <b>ifNotNil</b>: [</text>
<text top="806" left="375" width="97" height="15" font="2">‚Üë field ].</text>
<text top="830" left="106" width="5" height="12" font="4">9</text>
<text top="829" left="197" width="49" height="13" font="2">field</text>
<text top="827" left="253" width="475" height="15" font="2">‚Üê cls findInterfaceFieldByName: aJavaNameAndType</text>
<text top="849" left="227" width="49" height="13" font="2">name.</text>
<text top="871" left="100" width="11" height="12" font="4">10</text>
<text top="869" left="197" width="167" height="13" font="2">field <b>ifNotNil</b>: [</text>
<text top="867" left="375" width="97" height="15" font="2">‚Üë field ].</text>
<text top="891" left="100" width="11" height="12" font="4">11</text>
<text top="890" left="197" width="29" height="13" font="2">cls</text>
<text top="888" left="233" width="170" height="15" font="2">‚Üê cls superclass.</text>
<text top="912" left="100" width="11" height="12" font="4">12</text>
<text top="910" left="158" width="20" height="13" font="2">].</text>
<text top="932" left="100" width="11" height="12" font="4">13</text>
<text top="928" left="159" width="38" height="15" font="2">‚Üë<b>nil</b></text>
<text top="963" left="266" width="306" height="21" font="2">Code Example 4.5: Field lookup algorithm</text>
<text top="1007" left="118" width="625" height="21" font="2">Lookup starts in the current class (line 3), and then it searches instance elds (line 5),</text>
<text top="1027" left="93" width="651" height="21" font="2">static elds (line 7) and interface static elds (line 9). If the eld is found, it is returned,</text>
<text top="1048" left="93" width="651" height="21" font="2">otherwise the lookup continues in the classes superclass (line 11). Lookup ends after reaching</text>
<text top="1073" left="93" width="98" height="13" font="2">JavaObject</text>
<text top="1068" left="197" width="56" height="21" font="2">(line 4).</text>
</page>
<page number="45" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="256" height="21" font="2">4.6. INVALIDATION PROPOSAL</text>
<text top="92" left="784" width="16" height="21" font="2">27</text>
<text top="149" left="149" width="273" height="28" font="1">4.6 Invalidation proposal</text>
<text top="197" left="149" width="651" height="21" font="2">Class invalidation is a feature which allows classes and methods to be modied and replaced</text>
<text top="218" left="149" width="651" height="21" font="2">in runtime. When such change happens, classes that use or otherwise refer to the modied</text>
<text top="238" left="149" width="651" height="21" font="2">class must be informed as the modied class may be invalid (for example, required method</text>
<text top="258" left="149" width="651" height="21" font="2">is missing and an exception has to be thrown). This feature is very interesting in conjunc-</text>
<text top="279" left="149" width="544" height="21" font="2">tion with incremental compiler (currently a research is being made on <a href="pdfxml.html#45">ECJ</a></text>
<text top="277" left="693" width="6" height="16" font="7"><a href="pdfxml.html#45">4</a></text>
<text top="279" left="706" width="94" height="21" font="2">- incremental</text>
<text top="299" left="149" width="179" height="21" font="2">compiler used in <a href="pdfxml.html#45">Eclipse</a></text>
<text top="297" left="329" width="6" height="16" font="7"><a href="pdfxml.html#45">5</a></text>
<text top="299" left="336" width="11" height="21" font="2"><a href="pdfxml.html#45">).</a></text>
<text top="326" left="175" width="625" height="21" font="2">New resolving scheme was designed with invalidation in mind, so implementation will</text>
<text top="346" left="149" width="651" height="21" font="2">not be complex. First, a minimal working invalidation will be created, integrated with</text>
<text top="367" left="149" width="651" height="21" font="2">development tools and will use third party incremental compiler, probably ECJ. Later, when</text>
<text top="387" left="149" width="533" height="21" font="2">all corner cases are discovered and tuned, we can reimplement it for speed.</text>
<text top="440" left="149" width="297" height="23" font="0">4.6.1 Constant Pool invalidation</text>
<text top="480" left="149" width="651" height="21" font="2">Because we use references, and we do not replace them with resolved items, we can easily</text>
<text top="501" left="149" width="651" height="21" font="2">invalidate constant pool and then, when reference is accessed next, it will has to be resolved.</text>
<text top="521" left="149" width="503" height="21" font="2">After resolving, new or modied class (method, eld . . . ) will be used.</text>
<text top="548" left="175" width="625" height="21" font="2">Currently, all constant pool instances are stored in collection. When a class is made</text>
<text top="568" left="149" width="651" height="21" font="2">invalid, a invalidateForClass: method will be sent to every constant pool, which will</text>
<text top="588" left="149" width="651" height="21" font="2">then traverse whole constant pool and mark relevant references invalid (forcing resolving in</text>
<text top="609" left="149" width="90" height="21" font="2">next access).</text>
<text top="636" left="175" width="625" height="21" font="2">This approach is very slow, as every class and every reference must be asked and marked.</text>
<text top="656" left="149" width="651" height="21" font="2">Small improvement can be to hold a collection of dependent classes in every Java class, so</text>
<text top="676" left="149" width="651" height="21" font="2">when asked, Java class can say quickly, without having to traverse whole constant pool,</text>
<text top="697" left="149" width="651" height="21" font="2">whether class invalidation is relevant to it. Disadvantage is, that new eld in JavaClass</text>
<text top="717" left="149" width="215" height="21" font="2">will make instance size bigger.</text>
<text top="744" left="175" width="625" height="21" font="2">Another possible solution is that each Java class will hold a collection of all references</text>
<text top="764" left="149" width="651" height="21" font="2">pointing to it, and then, when invalidated, only relevant references are notied. References</text>
<text top="785" left="149" width="389" height="21" font="2">dependent on the class reference must be notied also.</text>
<text top="812" left="175" width="625" height="21" font="2">Big speedup in invalidation performance would be adding one more indirection. For</text>
<text top="832" left="149" width="651" height="21" font="2">every Java class, only one real reference is created, and in every constant pool only yweight</text>
<text top="852" left="149" width="651" height="21" font="2">reference would be stored, knowing its index in the constant pool, resolved item, and real</text>
<text top="872" left="149" width="651" height="21" font="2">reference instance. Then when class is invalidated, only real reference is notied, and thus</text>
<text top="893" left="149" width="273" height="21" font="2">invalidation happens in constant time.</text>
<text top="920" left="175" width="625" height="21" font="2">Class invalidation is a feature useful during development, but it is rarely used in produc-</text>
<text top="940" left="149" width="651" height="21" font="2">tion. Having to traverse whole class space is acceptable, as it will not happen often. Adding</text>
<text top="960" left="149" width="651" height="21" font="2">another level of indirection brings runtime overhead, which will dramatically slow down</text>
<text top="981" left="149" width="651" height="21" font="2">whole system. However, using smart JIT compiler, which can eliminate these jumps, run-</text>
<text top="1001" left="149" width="651" height="21" font="2">time overhead can be lowered. As the JIT compiler is not nished yet, we delay decisioning</text>
<text top="1021" left="149" width="132" height="21" font="2">about this feature.</text>
<text top="1053" left="168" width="5" height="12" font="4">4</text>
<text top="1054" left="174" width="202" height="17" font="8">http://www.eclipse.org/jdt/core/</text>
<text top="1069" left="168" width="5" height="12" font="4">5</text>
<text top="1071" left="174" width="139" height="17" font="8">http://www.eclipse.org</text>
</page>
<page number="46" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">28</text>
<text top="92" left="535" width="209" height="21" font="2">CHAPTER 4. RESOLVING</text>
<text top="152" left="93" width="259" height="23" font="0">4.6.2 Incremental compiling</text>
<text top="188" left="93" width="651" height="21" font="2">With working class invalidation, the incremental compiling of Java classes will be possible. A</text>
<text top="209" left="93" width="340" height="21" font="2">lot of work has been done in this area by <a href="pdfxml.html#46">Eclipse</a></text>
<text top="207" left="433" width="6" height="16" font="7"><a href="pdfxml.html#46">6</a></text>
<text top="209" left="444" width="202" height="21" font="2">project, which contains <a href="pdfxml.html#46">ECJ</a></text>
<text top="207" left="646" width="6" height="16" font="7"><a href="pdfxml.html#46">7</a></text>
<text top="209" left="653" width="91" height="21" font="2"><a href="pdfxml.html#46">, </a>incremental</text>
<text top="229" left="93" width="240" height="21" font="2">compiler for Java written in Java.</text>
<text top="253" left="118" width="625" height="21" font="2">ECJ will be integrated with development tools, and accepting a method from standard</text>
<text top="274" left="93" width="219" height="21" font="2">Class Browser will be possible.</text>
<text top="298" left="118" width="625" height="21" font="2">When a class is modied, it will replace the old version in class registry. All references will</text>
<text top="318" left="93" width="651" height="21" font="2">be invalidated, together with JIT compiled code for relevant methods. Next time a reference</text>
<text top="339" left="93" width="651" height="21" font="2">is resolved, it will nd new modied class. Part of the resolving logic is verication, so in</text>
<text top="359" left="93" width="370" height="21" font="2">case of incompatible change an exception is thrown.</text>
<text top="383" left="118" width="625" height="21" font="2">Code still using old class will not break, old class is removed from class registry, but it</text>
<text top="404" left="93" width="651" height="21" font="2">still exists in the object space. When there are no more references to it, it will be reclaimed</text>
<text top="424" left="93" width="185" height="21" font="2">by the Garbage Collector.</text>
<text top="1053" left="112" width="5" height="12" font="4">6</text>
<text top="1054" left="118" width="139" height="17" font="8">http://www.eclipse.org</text>
<text top="1069" left="112" width="5" height="12" font="4">7</text>
<text top="1071" left="118" width="137" height="17" font="8">http://eclipse.org/jdt/</text>
</page>
<page number="47" position="absolute" top="0" left="0" height="1262" width="892">
<text top="255" left="149" width="145" height="40" font="3">Chapter 5</text>
<text top="326" left="149" width="455" height="48" font="5">Concurrency and monitors</text>
<text top="429" left="149" width="651" height="21" font="2">In this chapter we will talk about our implementation of threads and locking mechanism used,</text>
<text top="450" left="149" width="651" height="21" font="2">monitors. We will start with presentation of our design, then we will dive into the dierence</text>
<text top="470" left="149" width="651" height="21" font="2">between Java and Smalltalk exceptions, and why this is an issue regarding synchronization.</text>
<text top="490" left="149" width="232" height="21" font="2">Then we will propose a solution.</text>
<text top="539" left="149" width="148" height="28" font="1">5.1 Monitors</text>
<text top="584" left="149" width="651" height="21" font="2">JVM is known to be multithreaded, and supports native, OS level threads. This is one</text>
<text top="604" left="149" width="651" height="21" font="2">of its strongest feature, it can run on multiple processors. Like all Smalltalk environments,</text>
<text top="624" left="149" width="651" height="21" font="2">Smalltalk/X support threads (called processes in Smalltalk). Contrary to JVM, Smalltalk/X</text>
<text top="645" left="149" width="449" height="21" font="2">runs in a single OS process and does not support native <a href="pdfxml.html#47">threads</a></text>
<text top="643" left="598" width="6" height="16" font="7"><a href="pdfxml.html#47">1</a></text>
<text top="645" left="610" width="190" height="21" font="2">In other words two threads</text>
<text top="665" left="149" width="651" height="21" font="2">will not run at the same time on two CPUs or CPU cores. Since Smalltalk/X scheduler is</text>
<text top="685" left="149" width="651" height="21" font="2">preemptive, a thread can be interrupted at any time, another thread is scheduled. Later on,</text>
<text top="706" left="149" width="414" height="21" font="2">the interrupted thread may be rescheduled and run again.</text>
<text top="729" left="175" width="625" height="21" font="2">In JVM, fundamental locking mechanism used is called Monitor. Only one thread can</text>
<text top="749" left="149" width="651" height="21" font="2">own the monitor, there can be many threads waiting a queue to own the monitor, and many</text>
<text top="770" left="149" width="651" height="21" font="2">threads can sleep on monitor, being notied by other threads or waken up after some timeout.</text>
<text top="790" left="149" width="651" height="21" font="2">On language level, there is synchronized keyword, which can be dened on a block and</text>
<text top="810" left="149" width="651" height="21" font="2">on a method. Java compiler is responsible for inserting MONITORENTER and MONITOREXIT</text>
<text top="831" left="149" width="651" height="21" font="2">instructions, when dealing with synchronized blocks. JVM is responsible for entering and</text>
<text top="851" left="149" width="433" height="21" font="2">exiting monitor when whole method is marked synchronized.</text>
<text top="874" left="175" width="633" height="21" font="2">Initial version of libjava used three dictionaries in the JavaVM, LockTable, WaitTable</text>
<text top="895" left="149" width="651" height="21" font="2">and EnteredMonitorsPerProcess. The rst one holds waiting set for each monitor,</text>
<text top="915" left="149" width="651" height="21" font="2">second one maps objects to their associated monitor, and the third holds every monitor</text>
<text top="935" left="149" width="651" height="21" font="2">particular process entered. These dictionaries were manipulated using many methods in the</text>
<text top="961" left="149" width="59" height="13" font="2">JavaVM</text>
<text top="956" left="208" width="592" height="21" font="2">. A monitor was represented by Monitor class, which is core class of ST/X VM,</text>
<text top="976" left="149" width="323" height="21" font="2">but has no support for waiting and notifying.</text>
<text top="999" left="175" width="625" height="21" font="2">Original implementation worked ne, however, it did not follow the semantics as spec-</text>
<text top="1020" left="149" width="60" height="21" font="2">ied in <a href="pdfxml.html#63">[</a></text>
<text top="1020" left="209" width="8" height="21" font="6"><a href="pdfxml.html#63">6</a></text>
<text top="1020" left="217" width="583" height="21" font="2"><a href="pdfxml.html#63">, </a>section 8.14]. Therefore, we decided to reimplement Monitors from scratch and</text>
<text top="1040" left="149" width="189" height="21" font="2">according to the VM spec.</text>
<text top="1069" left="168" width="5" height="12" font="4">1</text>
<text top="1071" left="174" width="578" height="17" font="8">Actually, Smalltalk/X uses native threads on Windows, but only one thread is running at time.</text>
<text top="1129" left="466" width="16" height="21" font="2">29</text>
</page>
<page number="48" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">30</text>
<text top="92" left="361" width="383" height="21" font="2">CHAPTER 5. CONCURRENCY AND MONITORS</text>
<text top="148" left="193" width="47" height="21" font="2">Action</text>
<text top="148" left="262" width="81" height="21" font="2">Description</text>
<text top="172" left="193" width="36" height="21" font="2">enter</text>
<text top="172" left="262" width="260" height="21" font="2">enter the monitor and try to acquire</text>
<text top="193" left="193" width="271" height="21" font="2">acquire wait and gain the ownership</text>
<text top="214" left="193" width="47" height="21" font="2">release</text>
<text top="214" left="262" width="333" height="21" font="2">give up the ownership, but stay in the monitor</text>
<text top="235" left="193" width="27" height="21" font="2">exit</text>
<text top="235" left="262" width="225" height="21" font="2">release the monitor and leave it</text>
<text top="269" left="278" width="281" height="21" font="2">Table 5.1: JavaMonitor public interface</text>
<text top="321" left="93" width="173" height="23" font="0">5.1.1 JavaMonitor</text>
<text top="363" left="93" width="108" height="13" font="2">JavaMonitor</text>
<text top="357" left="205" width="554" height="21" font="2">is basic class that represents Java monitor. It uses existing Smalltalk semaphore</text>
<text top="378" left="93" width="281" height="21" font="2">support to implement desired behavior.</text>
<text top="402" left="118" width="625" height="21" font="2">Instances of JavaMonitor remember their waiting and sleeping processes, know who</text>
<text top="423" left="93" width="651" height="21" font="2">and when to notify. They also correctly handle waiting on dead threads (threads that already</text>
<text top="443" left="93" width="651" height="21" font="2">nished their work). JavaMonitor oers 4 actions a process can take, they are shown in</text>
<text top="463" left="93" width="35" height="21" font="2">table</text>
<text top="463" left="134" width="21" height="21" font="6"><a href="pdfxml.html#48">5.1</a></text>
<text top="463" left="155" width="5" height="21" font="2"><a href="pdfxml.html#48">.</a></text>
<text top="493" left="118" width="118" height="13" font="2">JavaMonitors</text>
<text top="488" left="242" width="501" height="21" font="2">also handles cases, when a process recursively enters the monitor and</text>
<text top="508" left="93" width="651" height="21" font="2">goes to sleep then. Current monitor is released and after notifying the process, monitor is</text>
<text top="528" left="93" width="651" height="21" font="2">acquired again (it has to win the usual competition in the waiting set), it has to own exactly</text>
<text top="549" left="93" width="364" height="21" font="2">the number of locks it owned before going to sleep.</text>
<text top="599" left="93" width="400" height="28" font="1">5.2 Exceptions in Java and Smalltalk</text>
<text top="645" left="93" width="651" height="21" font="2">In Java, when instance of java.lang.Throwable is thrown, JVM searches the stack for</text>
<text top="665" left="93" width="651" height="21" font="2">exception handler (dened by keyword catch), and on the way it immediately destroys the</text>
<text top="686" left="93" width="651" height="21" font="2">method stack and executes finally blocks. When the handler is found, it is executed.</text>
<text top="706" left="93" width="651" height="21" font="2">Method with handler then returns and execution continues. Every context between the one</text>
<text top="726" left="93" width="544" height="21" font="2">throwing an exception and the one handling it, is unconditionally destroyed.</text>
<text top="751" left="118" width="625" height="21" font="2">Contrary to Java, in Smalltalk when an exception is thrown, a user code in exception</text>
<text top="771" left="93" width="651" height="21" font="2">classes searches the stack for a handler (similarly to JVM). When a handler in context is</text>
<text top="791" left="93" width="651" height="21" font="2">found, its asked for a handler block (kind of anonymous function) that is then executed on top</text>
<text top="812" left="93" width="651" height="21" font="2">of the throwing context. The handler may then decide whether to unwind all intermediate</text>
<text top="832" left="93" width="651" height="21" font="2">contexts up to the one that dened the handler or just proceed. Such an implementation is</text>
<text top="852" left="93" width="466" height="21" font="2">more powerful but also bit more dicult to implement eciently.</text>
<text top="877" left="118" width="625" height="21" font="2">Because in Smalltalk, throwing an exception does not automatically mean stopping the</text>
<text top="897" left="93" width="651" height="21" font="2">execution and continuing elsewhere, we had to carefully implement monitor releasing and</text>
<text top="917" left="93" width="164" height="21" font="2">nally block execution.</text>
<text top="942" left="118" width="542" height="21" font="2">A Java thread owning few monitors, executes a Java native method (Figure</text>
<text top="942" left="666" width="21" height="21" font="6"><a href="pdfxml.html#43">4.4</a></text>
<text top="942" left="687" width="57" height="21" font="2"><a href="pdfxml.html#43">), </a>and a</text>
<text top="962" left="93" width="651" height="21" font="2">Smalltalk exception is thrown. Without any additional handling, all monitors owned by the</text>
<text top="983" left="93" width="449" height="21" font="2">thread, would be locked forever, which is not what is expected.</text>
<text top="1007" left="118" width="625" height="21" font="2">There is a lot of things a care has to be taken of. First, we have to nd a Smalltalk</text>
<text top="1027" left="93" width="651" height="21" font="2">handler, and see, whether it is going to resume execution in the source context. If yes, there</text>
<text top="1048" left="93" width="651" height="21" font="2">is nothing more to be done. If no, we have to walk the stack again and nd the handler</text>
<text top="1068" left="93" width="651" height="21" font="2">block. On the second run, nally blocks on all relevant Java contexts must be executed, then</text>
</page>
<page number="49" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="365" height="21" font="2">5.2. EXCEPTIONS IN JAVA AND SMALLTALK</text>
<text top="92" left="784" width="16" height="21" font="2">31</text>
<text top="153" left="149" width="651" height="21" font="2">all acquired monitors have to be exited, and process is removed from the monitor waiting</text>
<text top="174" left="149" width="298" height="21" font="2">set, in case it was waiting for notication.</text>
<text top="198" left="175" width="625" height="21" font="2">Our solution is to mark every Java context, in which a monitor is entered and make Java</text>
<text top="218" left="149" width="651" height="21" font="2">context to remember all monitors entered in it. Similarly, nally blocks are marked. Then,</text>
<text top="239" left="149" width="651" height="21" font="2">during stack unwind, we release every monitor owned by the thread, unregister the thread</text>
<text top="259" left="149" width="368" height="21" font="2">from the waiting sets and execute finally blocks.</text>
<text top="283" left="175" width="625" height="21" font="2">To achieve this we had to change JavaContext class, update corresponding code in</text>
<text top="304" left="149" width="420" height="21" font="2">Bytecode Interpreter. JIT compiler has to be updated too.</text>
</page>
<page number="50" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">32</text>
<text top="92" left="361" width="383" height="21" font="2">CHAPTER 5. CONCURRENCY AND MONITORS</text>
</page>
<page number="51" position="absolute" top="0" left="0" height="1262" width="892">
<text top="254" left="149" width="145" height="40" font="3">Chapter 6</text>
<text top="325" left="149" width="494" height="48" font="5">Just-in-time and incremental</text>
<text top="370" left="149" width="199" height="48" font="5">compilation</text>
<text top="472" left="149" width="651" height="21" font="2">In this chapter we will describe initial JIT compiler present in libjava, then we will propose</text>
<text top="493" left="149" width="651" height="21" font="2">changes needed in the libjava, to make JIT implementation easier. At the end, we will</text>
<text top="513" left="149" width="651" height="21" font="2">describe changes needed to the old JIT compiler and ways how to deal with certain added</text>
<text top="533" left="149" width="60" height="21" font="2">features.</text>
<text top="556" left="175" width="625" height="21" font="2">Just In Time compiler is special compiler used in virtual machines and its goal is to</text>
<text top="576" left="149" width="651" height="21" font="2">compile bytecode in runtime, when it has more information about environment and code</text>
<text top="597" left="149" width="570" height="21" font="2">itself. Based on this knowledge, it can compile bytecode to ecient native code.</text>
<text top="644" left="149" width="305" height="28" font="1">6.1 Current implementation</text>
<text top="688" left="149" width="651" height="21" font="2">Current JIT compiler present in libjava is not working with Java version 6. The original</text>
<text top="709" left="149" width="651" height="21" font="2">implementation of JIT compiler is written in C. It supports several architectures including</text>
<text top="729" left="149" width="651" height="21" font="2">i386, SPARC and few others. As the reader may imagine, this code is bit complex and hard</text>
<text top="749" left="149" width="651" height="21" font="2">to modify. We decided not to deal with it during the early development as all the APIs were</text>
<text top="770" left="149" width="651" height="21" font="2">changing too often and it did not make sense to spent time by updating JIT compiler after</text>
<text top="790" left="149" width="497" height="21" font="2">every change when we were not completely sure the change is correct.</text>
<text top="838" left="149" width="518" height="28" font="1">6.2 Changes to the current Java implementation</text>
<text top="881" left="149" width="651" height="21" font="2">To make JIT compiler easier to implement and JIT compiled code faster, there are areas</text>
<text top="902" left="149" width="426" height="21" font="2">which can be improved in our current Java implementation.</text>
<text top="945" left="149" width="147" height="23" font="0">6.2.1 Resolving</text>
<text top="980" left="149" width="289" height="21" font="2">Resolving scheme is described in chapter</text>
<text top="980" left="444" width="8" height="21" font="6"><a href="pdfxml.html#39">4</a></text>
<text top="980" left="452" width="348" height="21" font="2"><a href="pdfxml.html#39">. </a>Our very lazy implementation can be improved</text>
<text top="1000" left="149" width="93" height="21" font="2">by two steps:</text>
<text top="1034" left="169" width="384" height="21" font="2">1. Safely transfer resolving references to the link-time</text>
<text top="1065" left="169" width="392" height="21" font="2">2. Update Bytecode Interpreter to support this change</text>
<text top="1129" left="466" width="16" height="21" font="2">33</text>
</page>
<page number="52" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">34</text>
<text top="92" left="221" width="523" height="21" font="2">CHAPTER 6. JUST-IN-TIME AND INCREMENTAL COMPILATION</text>
<text top="153" left="93" width="324" height="21" font="2">6.2.1.1 Safe resolving during link-time</text>
<text top="187" left="93" width="651" height="21" font="2">Our proposal is to resolve whole constant pool during link time, or less eager alternative, to</text>
<text top="208" left="93" width="651" height="21" font="2">resolve whole constant pool of class, which is accessed often. A problem is that there can be</text>
<text top="228" left="93" width="651" height="21" font="2">references referencing classes, which are not yet loaded. As said already, JVM specication</text>
<text top="248" left="93" width="651" height="21" font="2">is strict in dening when class initialization method must be called, but does not dictate</text>
<text top="269" left="93" width="651" height="21" font="2">when class can be loaded. The solution is to load classes into the VM without initialization,</text>
<text top="289" left="93" width="485" height="21" font="2">and when class is accessed, class initialization method is called rst.</text>
<text top="313" left="118" width="194" height="21" font="2">Class is accessed in 3 ways:</text>
<text top="350" left="118" width="228" height="21" font="2">¬à When new instance is created</text>
<text top="382" left="118" width="224" height="21" font="2">¬à When static method is called</text>
<text top="415" left="118" width="219" height="21" font="2">¬à When static eld is accessed</text>
<text top="452" left="118" width="625" height="21" font="2">First two cases will not cause problems, as we already check, if the class is initialized</text>
<text top="472" left="93" width="503" height="21" font="2">there. Last case needs small change made in the Bytecode Interpreter.</text>
<text top="518" left="93" width="306" height="21" font="2">6.2.1.2 Bytecode Interpreter change</text>
<text top="552" left="93" width="651" height="21" font="2">When static eld of Java class is accessed, compiler generates PUT/GETSTATIC instruction.</text>
<text top="572" left="93" width="651" height="21" font="2">These instructions are relatively simple and they have to be fast, as they are used very often.</text>
<text top="596" left="118" width="625" height="21" font="2">In scenario, when references are resolved during link time, but Bytecode Interpreter is not</text>
<text top="616" left="93" width="651" height="21" font="2">changed, situation can happen, when static eld of uninitialized class is accessed and later,</text>
<text top="642" left="93" width="196" height="13" font="2">NullPointerException</text>
<text top="637" left="295" width="449" height="21" font="2">can be thrown. Bytecode Interpreter has to check, whether the</text>
<text top="657" left="93" width="651" height="21" font="2">class is initialized, and if not, it has to initialize it. This check must be as fast as possible,</text>
<text top="677" left="93" width="651" height="21" font="2">so Java class has to have ACC_INITIALIZED ag. During the runtime, this ag is checked</text>
<text top="698" left="93" width="651" height="21" font="2">(which is fast, only one access to the array and null check) and in case of uninitialized class,</text>
<text top="723" left="93" width="88" height="13" font="2">classInit</text>
<text top="718" left="187" width="109" height="21" font="2">method is sent.</text>
<text top="741" left="118" width="625" height="21" font="2">Another benet is that instead of testing and resolving many references during run-time,</text>
<text top="762" left="93" width="651" height="21" font="2">references will be resolved in link-time. Therefore, this change will make warm-up phase</text>
<text top="782" left="93" width="512" height="21" font="2">much shorter (and startup phase much longer, as mentioned in Chapter</text>
<text top="782" left="610" width="8" height="21" font="6"><a href="pdfxml.html#39">4</a></text>
<text top="782" left="618" width="11" height="21" font="2"><a href="pdfxml.html#39">).</a></text>
<text top="831" left="93" width="431" height="28" font="1">6.3 Changes needed in the JIT compiler</text>
<text top="876" left="93" width="521" height="21" font="2">Following enumeration summarizes changes relevant to the JIT compiler.</text>
<text top="913" left="118" width="236" height="21" font="2">¬à New resolving scheme (chapter</text>
<text top="913" left="359" width="8" height="21" font="6"><a href="pdfxml.html#39">4</a></text>
<text top="913" left="367" width="6" height="21" font="2"><a href="pdfxml.html#39">)</a></text>
<text top="945" left="118" width="192" height="21" font="2">¬à Added Java Annotations</text>
<text top="978" left="118" width="386" height="21" font="2">¬à Changed layout of JavaContext object (added eld)</text>
<text top="1010" left="118" width="355" height="21" font="2">¬à Methods with more than 16 arguments (section</text>
<text top="1010" left="478" width="33" height="21" font="6"><a href="pdfxml.html#28">2.2.6</a></text>
<text top="1010" left="512" width="6" height="21" font="2"><a href="pdfxml.html#28">)</a></text>
<text top="1048" left="118" width="625" height="21" font="2">All remaining features (for example Bytecode Interpreter trampoline methods) were not</text>
<text top="1068" left="93" width="514" height="21" font="2">modied (their implementation is dierent, but API stayed unchanged).</text>
</page>
<page number="53" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="285" height="21" font="2">6.4. JIT COMPILATION PROPOSAL</text>
<text top="92" left="784" width="16" height="21" font="2">35</text>
<text top="149" left="149" width="316" height="28" font="1">6.4 JIT compilation proposal</text>
<text top="194" left="149" width="651" height="21" font="2">It is common for JIT compilers to fall back to the interpreted code, when the method being</text>
<text top="214" left="149" width="651" height="21" font="2">compiled is too complicated. Such case can be for example accessing unresolved reference</text>
<text top="235" left="149" width="259" height="21" font="2">(or with changes proposed in section</text>
<text top="235" left="414" width="33" height="21" font="6"><a href="pdfxml.html#51">6.2.1</a></text>
<text top="235" left="447" width="353" height="21" font="2"><a href="pdfxml.html#51">, </a>uninitialized class). With updated resolving JIT</text>
<text top="255" left="149" width="651" height="21" font="2">compiler does not have to insert message send into the native code in case of unresolved</text>
<text top="275" left="149" width="651" height="21" font="2">reference (which is quite complex issue), failing and interpreting code in case of unresolved</text>
<text top="296" left="149" width="651" height="21" font="2">class is acceptable, and in next invocation, class will be initialized and JIT compiler can try</text>
<text top="316" left="149" width="42" height="21" font="2">again.</text>
<text top="340" left="175" width="625" height="21" font="2">To make JIT compiled code really fast, as many runtime check as possible must be</text>
<text top="361" left="149" width="651" height="21" font="2">omitted (after checking in JIT compile-time that class is initialized, this check can be omitted.</text>
<text top="381" left="149" width="651" height="21" font="2">Of course, later, when class will be invalidated, JIT compiled code must be invalidated as</text>
<text top="401" left="149" width="651" height="21" font="2">well.). Also, checking whether the reference itself is valid and of correct type can be omitted.</text>
<text top="426" left="175" width="625" height="21" font="2">Another bottleneck in current implementation are monitors. Situation, when two threads</text>
<text top="446" left="149" width="651" height="21" font="2">compete to acquire the monitor is very uncommon, usually, monitor acquired by running</text>
<text top="466" left="149" width="651" height="21" font="2">thread is free. An obvious solution to deer a full monitor instantiation to the time when</text>
<text top="487" left="149" width="639" height="21" font="2">there are actually multiple threads accessing the object, is protected by patent <a href="pdfxml.html#53">6735760</a></text>
<text top="485" left="788" width="6" height="16" font="7"><a href="pdfxml.html#53">1</a></text>
<text top="487" left="795" width="5" height="21" font="2"><a href="pdfxml.html#53">.</a></text>
<text top="507" left="149" width="590" height="21" font="2">A patent-free solution to this problem with similar performance is yet to be found.</text>
<text top="531" left="175" width="625" height="21" font="2">Also, very often, the monitor exited is the same as the last monitor entered. This</text>
<text top="552" left="149" width="651" height="21" font="2">can be improved greatly by an optimization, which was already present in old monitor</text>
<text top="572" left="149" width="651" height="21" font="2">implementation (which was removed as it made debugging almost impossible). Last monitor</text>
<text top="592" left="149" width="651" height="21" font="2">used can be saved in the global variable by Bytecode Interpreter. When MONITORENTER</text>
<text top="613" left="149" width="651" height="21" font="2">and MONITOREXIT instructions are interpreted, they can compare their object with cached</text>
<text top="633" left="149" width="651" height="21" font="2">one, and in case of hit, whole monitor lookup time is saved. In other case, cache is cleared</text>
<text top="653" left="149" width="217" height="21" font="2">and new monitor is looked up.</text>
<text top="678" left="175" width="625" height="21" font="2">Monitor lookup time can be reduced by creating new instance variable in JavaObject</text>
<text top="698" left="149" width="651" height="21" font="2">and lazily storing monitor for given object there. This change would make each Java object</text>
<text top="718" left="149" width="305" height="21" font="2">bigger, which can also hinder performance.</text>
<text top="743" left="175" width="625" height="21" font="2">All these changes are only proposals and in the time of writing this thesis, they are</text>
<text top="763" left="149" width="651" height="21" font="2">still being evaluated. More complex optimizations such as method inlining and object space</text>
<text top="783" left="149" width="651" height="21" font="2">monitoring are far beyond the research aim of the whole libjava. The biggest expected</text>
<text top="804" left="149" width="651" height="21" font="2">performance gain is use of inline caches, which should increase raw performance by roughly</text>
<text top="824" left="149" width="46" height="21" font="2">10% <a href="pdfxml.html#63">([</a></text>
<text top="824" left="195" width="8" height="21" font="6"><a href="pdfxml.html#63">2</a></text>
<text top="824" left="203" width="597" height="21" font="2"><a href="pdfxml.html#63">]), </a>which is still very pessimistic expectation. In our case, when reference indirection</text>
<text top="844" left="149" width="481" height="21" font="2">and runtime checks would be eliminated, speedup should be bigger.</text>
<text top="1069" left="168" width="5" height="12" font="4">1</text>
<text top="1071" left="174" width="268" height="17" font="8">http://www.google.com/patents/US6735760</text>
</page>
<page number="54" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">36</text>
<text top="92" left="221" width="523" height="21" font="2">CHAPTER 6. JUST-IN-TIME AND INCREMENTAL COMPILATION</text>
</page>
<page number="55" position="absolute" top="0" left="0" height="1262" width="892">
<text top="258" left="149" width="145" height="40" font="3">Chapter 7</text>
<text top="333" left="149" width="124" height="48" font="5">Testing</text>
<text top="439" left="149" width="651" height="21" font="2">Developing an application like libjava, testing is particularly important part of the process.</text>
<text top="466" left="175" width="625" height="21" font="2">Although there is Java Language Specication and JVM specication, there are many</text>
<text top="486" left="149" width="651" height="21" font="2">areas, where specication is not dictating exactly, how a particular feature should be imple-</text>
<text top="506" left="149" width="56" height="21" font="2">men<a href="pdfxml.html#55">ted.</a></text>
<text top="505" left="206" width="6" height="16" font="7"><a href="pdfxml.html#55">1</a></text>
<text top="506" left="220" width="580" height="21" font="2">There are also places, where specication is not exact and does not provide enough</text>
<text top="527" left="149" width="87" height="21" font="2"><a href="pdfxml.html#55">information.</a></text>
<text top="525" left="236" width="6" height="16" font="7"><a href="pdfxml.html#55">2</a></text>
<text top="553" left="175" width="402" height="21" font="2">Because of these reasons, basic unit testing using <a href="pdfxml.html#55">SUnit</a></text>
<text top="551" left="576" width="6" height="16" font="7"><a href="pdfxml.html#55">3</a></text>
<text top="553" left="589" width="211" height="21" font="2">was not sucient. We needed</text>
<text top="574" left="149" width="651" height="21" font="2">to test our Smalltalk code that it does what we expect it to do, and we also needed to test,</text>
<text top="594" left="149" width="651" height="21" font="2">that our implementation behaves the same way as original JVM does. SUnit brings us only</text>
<text top="614" left="149" width="651" height="21" font="2">half way there, as it is just testing that we implemented our assumptions correctly, not that</text>
<text top="634" left="149" width="212" height="21" font="2">our assumptions were correct.</text>
<text top="661" left="175" width="625" height="21" font="2">An obvious solution to this problem was to write tests in Java, and execute them on both</text>
<text top="681" left="149" width="651" height="21" font="2">original JVM and our implementation, and assert same test results. Being able to execute</text>
<text top="702" left="149" width="651" height="21" font="2">JUnit tests, Java alternative to SUnit, was one of the rst milestones on our roadmap. We</text>
<text top="722" left="149" width="651" height="21" font="2">reached this goal, and wrote many JUnit tests in Java, which we were then executed on our</text>
<text top="742" left="149" width="651" height="21" font="2">Java implementation. This approach has proven to be very valuable, especially when we</text>
<text top="763" left="149" width="651" height="21" font="2">were dealing with class loading diculties, but also during normal development, for example</text>
<text top="783" left="149" width="212" height="21" font="2">when developing new <a href="pdfxml.html#55">features</a></text>
<text top="781" left="361" width="6" height="16" font="7"><a href="pdfxml.html#55">4</a></text>
<text top="783" left="374" width="360" height="21" font="2">or when we needed to reproduce specic <a href="pdfxml.html#55">situation.</a></text>
<text top="781" left="733" width="6" height="16" font="7"><a href="pdfxml.html#55">5</a></text>
<text top="840" left="149" width="304" height="28" font="1">7.1 Test Runner integration</text>
<text top="888" left="149" width="651" height="21" font="2">TestRunner is part of ST/X IDE, greatly simplies running and debugging SUnit tests.</text>
<text top="908" left="149" width="651" height="21" font="2">Any class inheriting from TestCase loaded in the system, was automatically visible in</text>
<text top="929" left="149" width="651" height="21" font="2">TestRunner. Another improvement, which has been done, was proxying JUnit classes and</text>
<text top="949" left="149" width="651" height="21" font="2">allowing JUnit tests to be run using TestRunner. TestRunner completely hides the fact, that</text>
<text top="969" left="149" width="651" height="21" font="2">JUnit tests are not written in Smalltalk. This way, one can run Java JUnit tests just like</text>
<text top="1004" left="168" width="5" height="12" font="4">1</text>
<text top="1005" left="174" width="112" height="17" font="8">Such as resolving <a href="pdfxml.html#63">[</a></text>
<text top="1005" left="286" width="7" height="17" font="9"><a href="pdfxml.html#63">6</a></text>
<text top="1005" left="293" width="94" height="17" font="8"><a href="pdfxml.html#63">, </a>section 2.17.1]</text>
<text top="1020" left="168" width="5" height="12" font="4">2</text>
<text top="1021" left="174" width="335" height="17" font="8">Behavior of class loaders during the vm startup phase <a href="pdfxml.html#63">[</a></text>
<text top="1021" left="509" width="7" height="17" font="9"><a href="pdfxml.html#63">6</a></text>
<text top="1021" left="516" width="87" height="17" font="8"><a href="pdfxml.html#63">, </a>section 5.3.1]</text>
<text top="1036" left="168" width="5" height="12" font="4">3</text>
<text top="1038" left="174" width="175" height="17" font="8">http://sunit.sourceforge.net/</text>
<text top="1053" left="168" width="5" height="12" font="4">4</text>
<text top="1054" left="174" width="101" height="17" font="8">e.g. Annotations</text>
<text top="1069" left="168" width="5" height="12" font="4">5</text>
<text top="1071" left="174" width="318" height="17" font="8">e.g. executing method with more than 16 arguments</text>
<text top="1129" left="466" width="16" height="21" font="2">37</text>
</page>
<page number="56" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">38</text>
<text top="92" left="557" width="187" height="21" font="2">CHAPTER 7. TESTING</text>
<text top="153" left="93" width="651" height="21" font="2">SUnit test right from the Smalltalk development environment, using the same tools. This</text>
<text top="174" left="93" width="647" height="21" font="2">greatly simplied testing process and consequently speeded up whole development process.</text>
<text top="198" left="118" width="625" height="21" font="2">Proxying of JUnit Java Classes is done dynamically, during registration. System recog-</text>
<text top="218" left="93" width="391" height="21" font="2">nizes, that a class resembling JUnit is being <a href="pdfxml.html#56">registered,</a></text>
<text top="217" left="484" width="6" height="16" font="7"><a href="pdfxml.html#56">6</a></text>
<text top="218" left="497" width="247" height="21" font="2">and dynamically creates a proxy, a</text>
<text top="239" left="93" width="651" height="21" font="2">subclass of JUnitTestCaseProxy, which implements protocol needed by TestRunner, and</text>
<text top="259" left="93" width="660" height="21" font="2">delegates every other method call to the Java class. Every subclass of JUnitTestCaseProxy</text>
<text top="279" left="93" width="338" height="21" font="2">is automatically recognized in TestRunner tool.</text>
<text top="330" left="93" width="180" height="28" font="1">7.2 Mauve tests</text>
<text top="376" left="93" width="651" height="21" font="2">What dramatically boosted development process, was discovery of Mauve Test Suite. The</text>
<text top="396" left="93" width="55" height="21" font="2">Mauv<a href="pdfxml.html#56">e</a></text>
<text top="394" left="148" width="6" height="16" font="7"><a href="pdfxml.html#56">7</a></text>
<text top="396" left="160" width="584" height="21" font="2">Project is a collaborative eort to write a free test suite for the Java class libraries.</text>
<text top="416" left="93" width="346" height="21" font="2">The current collaborators come from the <a href="pdfxml.html#56">Kae</a></text>
<text top="415" left="439" width="6" height="16" font="7"><a href="pdfxml.html#56">8</a></text>
<text top="416" left="453" width="222" height="21" font="2">project, the GNU <a href="pdfxml.html#56">Classpath</a></text>
<text top="415" left="675" width="6" height="16" font="7"><a href="pdfxml.html#56">9</a></text>
<text top="416" left="689" width="55" height="21" font="2">project,</text>
<text top="437" left="93" width="99" height="21" font="2">and the <a href="pdfxml.html#56">GCJ</a></text>
<text top="435" left="192" width="13" height="16" font="7"><a href="pdfxml.html#56">10</a></text>
<text top="437" left="211" width="533" height="21" font="2">project. At the time of writing this thesis, it consisted of more than 5000</text>
<text top="457" left="93" width="651" height="21" font="2">test classes, covering standard Java library, AWT, Swing, CORBA etc. We used only a part</text>
<text top="477" left="93" width="651" height="21" font="2">covering mainly java.*, javax.* packages, resulting in 1418 tests being run nightly, out</text>
<text top="498" left="93" width="651" height="21" font="2">of which, 561 were still failing. Most of these tests fail because of missing native methods or</text>
<text top="518" left="93" width="426" height="21" font="2">because of bugs in existing native method implementations.</text>
<text top="542" left="118" width="625" height="21" font="2">Mauve tests are also integrated into the ST/X IDE, there is TestletTestCaseProxy.</text>
<text top="563" left="93" width="651" height="21" font="2">Testlet is xUnit's TestCase alternative, Mauve Test Suite implements it's own lightweight</text>
<text top="583" left="93" width="651" height="21" font="2">testing framework, so it is not dependent on any existing Java code. Proxy is implemented</text>
<text top="603" left="93" width="651" height="21" font="2">using same system hooks and dynamic subclass creation pattern as JUnitTestCaseProxy.</text>
<text top="987" left="112" width="5" height="12" font="4">6</text>
<text top="989" left="118" width="626" height="17" font="8">Class resembles JUnit, if it has org.junit.TestCase as a parent - that's the case of JUnit3, or has</text>
<text top="1005" left="93" width="452" height="17" font="8">methods annotated with org.junit.Test annotation - in case of JUnit4</text>
<text top="1020" left="112" width="5" height="12" font="4">7</text>
<text top="1021" left="118" width="185" height="17" font="8">http://sourceware.org/mauve/</text>
<text top="1036" left="112" width="5" height="12" font="4">8</text>
<text top="1038" left="118" width="185" height="17" font="8">https://github.com/kae/kae</text>
<text top="1053" left="112" width="5" height="12" font="4">9</text>
<text top="1054" left="118" width="248" height="17" font="8">http://www.gnu.org/software/classpath/</text>
<text top="1069" left="106" width="11" height="12" font="4">10</text>
<text top="1071" left="118" width="149" height="17" font="8">http://gcc.gnu.org/java/</text>
</page>
<page number="57" position="absolute" top="0" left="0" height="1262" width="892">
<text top="256" left="149" width="145" height="40" font="3">Chapter 8</text>
<text top="330" left="149" width="175" height="48" font="5">Validation</text>
<text top="435" left="149" width="651" height="21" font="2">To validate our implementation, we tried to run several mid-scale to large-scale projects</text>
<text top="455" left="149" width="651" height="21" font="2">written in Java, namely JUnit, Groovy, ECJ and Tomcat. Each of these projects was big</text>
<text top="476" left="149" width="651" height="21" font="2">milestone and required a lot of eort, especially in implementing native methods. In this</text>
<text top="496" left="149" width="651" height="21" font="2">chapter we talk about why we have chosen particular project, what problems we had and</text>
<text top="516" left="149" width="291" height="21" font="2">what is the current state of each project.</text>
<text top="569" left="149" width="237" height="28" font="1">8.1 JUnit and Mauve</text>
<text top="616" left="149" width="651" height="21" font="2">Integration of JUnit and Mauve test frameworks already mentioned. libjava can run both</text>
<text top="636" left="149" width="447" height="21" font="2">JUnit 3.x and JUnit 4.x testcases, as well as Mauves's testlets.</text>
<text top="661" left="175" width="100" height="21" font="2">On the Figure</text>
<text top="661" left="280" width="21" height="21" font="6"><a href="pdfxml.html#58">8.1</a></text>
<text top="661" left="306" width="494" height="21" font="2">we see TestRunner window with one of our Java Tests project loaded.</text>
<text top="686" left="175" width="625" height="21" font="2">On the left side there are loaded packages, in the middle classes present in currently</text>
<text top="707" left="149" width="531" height="21" font="2">selected package, and on the right test methods in currently selected class.</text>
<text top="732" left="175" width="625" height="21" font="2">JUnit4 test case class is selected, so test methods on the right side does not have to</text>
<text top="752" left="149" width="651" height="21" font="2">have their name starting with 'test', they are picked, because they have been annotated with</text>
<text top="778" left="149" width="137" height="13" font="2">org.junit.Test</text>
<text top="772" left="287" width="5" height="21" font="2">.</text>
<text top="798" left="175" width="592" height="21" font="2">Every method is executed and an icon telling whether the test passed or not is set.</text>
<text top="823" left="175" width="476" height="21" font="2">This is achieved by catching all exceptions thrown in JUnit <a href="pdfxml.html#57">test,</a></text>
<text top="821" left="651" width="6" height="16" font="7"><a href="pdfxml.html#57">1</a></text>
<text top="823" left="666" width="134" height="21" font="2">and mapping it to</text>
<text top="848" left="149" width="98" height="13" font="2">TestResult</text>
<text top="843" left="253" width="58" height="21" font="2"><a href="pdfxml.html#57">instance</a></text>
<text top="841" left="311" width="6" height="16" font="7"><a href="pdfxml.html#57">2</a></text>
<text top="843" left="318" width="5" height="21" font="2"><a href="pdfxml.html#57">.</a></text>
<text top="868" left="175" width="625" height="21" font="2">JUnit helped us during implementation of more complex features. It is integrated into</text>
<text top="889" left="149" width="372" height="21" font="2">development tools and is well tested and often used.</text>
<text top="941" left="149" width="131" height="28" font="1">8.2 Groovy</text>
<text top="988" left="149" width="61" height="21" font="2">Groo<a href="pdfxml.html#57">vy</a></text>
<text top="986" left="210" width="6" height="16" font="7"><a href="pdfxml.html#57">3</a></text>
<text top="988" left="223" width="317" height="21" font="2">is dynamic language written on top of JVM.</text>
<text top="1020" left="168" width="5" height="12" font="4">1</text>
<text top="1021" left="174" width="626" height="17" font="8">Instances of org.junit.framework.AssertionFailedError are also exceptions, so at the end, a</text>
<text top="1038" left="149" width="453" height="17" font="8">test method passes when there is no exception thrown during its execution</text>
<text top="1053" left="168" width="5" height="12" font="4">2</text>
<text top="1054" left="174" width="577" height="17" font="8">TestResult is object returned by Test executor encapsulating result, failures, error messages etc</text>
<text top="1069" left="168" width="5" height="12" font="4">3</text>
<text top="1071" left="174" width="172" height="17" font="8">http://groovy.codehaus.org/</text>
<text top="1129" left="466" width="16" height="21" font="2">39</text>
</page>
<page number="58" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">40</text>
<text top="92" left="527" width="217" height="21" font="2">CHAPTER 8. VALIDATION</text>
<text top="471" left="253" width="331" height="21" font="2">Figure 8.1: TestRunner with Java tests loaded</text>
<text top="526" left="118" width="625" height="21" font="2">Its goal is to build upon strength of Java, but also to add dynamic features known from</text>
<text top="546" left="93" width="328" height="21" font="2">languages such as Python, Ruby or Smalltalk.</text>
<text top="573" left="118" width="625" height="21" font="2">One of its advantages is, that Java syntax is valid also in Groovy. That means that all</text>
<text top="593" left="93" width="297" height="21" font="2">existing Java code is runnable by Groovy.</text>
<text top="620" left="118" width="625" height="21" font="2">Groovy introduces many interesting features such as Multiple Dispatch or Closures.</text>
<text top="647" left="118" width="625" height="21" font="2">Groovy is able to compile Groovy code to standard classle. This classle is then exe-</text>
<text top="667" left="93" width="175" height="21" font="2">cutable by normal JVM.</text>
<text top="694" left="118" width="625" height="21" font="2">Our motivation to have Groovy running on libjava was based on idea of using Groovy's</text>
<text top="714" left="93" width="651" height="21" font="2">dynamic features to ll in dynamic nature of Smalltalk/X environment and using Groovy to</text>
<text top="735" left="93" width="315" height="21" font="2">interpret Java during the Java development.</text>
<text top="762" left="118" width="625" height="21" font="2">Workspace in ST/X is a place, where developer can write arbitrary Smalltalk code and</text>
<text top="782" left="93" width="79" height="21" font="2">evaluate it.</text>
<text top="809" left="118" width="625" height="21" font="2">He can inspect the result of computation, he can just print it or he can just evaluate</text>
<text top="829" left="93" width="216" height="21" font="2">code and discard return value.</text>
<text top="856" left="118" width="625" height="21" font="2">Because when in IDE, Smalltalk VM is running and one can operate on live objects,</text>
<text top="876" left="93" width="313" height="21" font="2">workspace is often used during developmen<a href="pdfxml.html#58">t</a></text>
<text top="874" left="406" width="6" height="16" font="7"><a href="pdfxml.html#58">4</a></text>
<text top="876" left="413" width="5" height="21" font="2"><a href="pdfxml.html#58">.</a></text>
<text top="903" left="118" width="625" height="21" font="2">Workspace is just a normal window with text area, it's the design of Smalltalk, which</text>
<text top="923" left="93" width="363" height="21" font="2">allows runtime parsing, compilation and execution.</text>
<text top="950" left="118" width="625" height="21" font="2">Groovy has similar possibilities, so Groovy evaluator has been integrated into workspace</text>
<text top="970" left="93" width="21" height="21" font="6"><a href="pdfxml.html#59">8.2</a></text>
<text top="970" left="114" width="5" height="21" font="2"><a href="pdfxml.html#59">.</a></text>
<text top="997" left="118" width="550" height="21" font="2">It's possible to enter arbitrary Java code, and it gets evaluated. On the Figure</text>
<text top="997" left="673" width="21" height="21" font="6"><a href="pdfxml.html#59">8.2</a></text>
<text top="997" left="699" width="45" height="21" font="2">simple</text>
<text top="1017" left="93" width="147" height="21" font="2">code (seen in Listing</text>
<text top="1017" left="246" width="21" height="21" font="6"><a href="pdfxml.html#59">8.1</a></text>
<text top="1017" left="267" width="11" height="21" font="2"><a href="pdfxml.html#59">).</a></text>
<text top="1053" left="112" width="5" height="12" font="4">4</text>
<text top="1054" left="118" width="626" height="17" font="8">For example calling class methods, setting class variables, testing code, or just tweaking runtime envi-</text>
<text top="1071" left="93" width="487" height="17" font="8">ronment by enabling break points, programmatically changing conguration etc.</text>
</page>
<page number="59" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="149" width="69" height="21" font="2">8.3. ECJ</text>
<text top="92" left="784" width="16" height="21" font="2">41</text>
<text top="590" left="298" width="354" height="21" font="2">Figure 8.2: Integration of Groovy into Workspace</text>
<text top="665" left="162" width="5" height="12" font="4">1</text>
<text top="664" left="175" width="20" height="12" font="10"><b>if</b></text>
<text top="664" left="204" width="128" height="13" font="2">(2 % 2 = 0) {</text>
<text top="686" left="162" width="5" height="12" font="4">2</text>
<text top="684" left="214" width="344" height="13" font="2">System.out.println(‚Äò‚ÄòHello Java‚Äô‚Äô);</text>
<text top="706" left="162" width="5" height="12" font="4">3</text>
<text top="704" left="175" width="10" height="13" font="2">}</text>
<text top="736" left="254" width="441" height="21" font="2">Code Example 8.1: Java code executed by Groovy Workspace</text>
<text top="776" left="175" width="625" height="21" font="2">Groovy uses various Java features thoroughly, especially reection and class loaders and</text>
<text top="796" left="149" width="651" height="21" font="2">helped us to x many bugs and misunderstandings. Arbitrary Java (Groovy) code can</text>
<text top="817" left="149" width="651" height="21" font="2">be executed in workspace, and this is the rst step of having Smalltalk-like development</text>
<text top="837" left="149" width="155" height="21" font="2">environment for Java.</text>
<text top="862" left="175" width="625" height="21" font="2">Work to be done in integration of Groovy into ST/X is for example extending System-</text>
<text top="883" left="149" width="651" height="21" font="2">Browser to be able to accept Java code. ECJ is probably better suited for this goal though.</text>
<text top="936" left="149" width="99" height="28" font="1">8.3 ECJ</text>
<text top="983" left="149" width="35" height="21" font="2"><a href="pdfxml.html#59">ECJ</a></text>
<text top="981" left="185" width="6" height="16" font="7"><a href="pdfxml.html#59">5</a></text>
<text top="983" left="196" width="313" height="21" font="2">is part of development tools used in <a href="pdfxml.html#59">Eclipse</a></text>
<text top="981" left="510" width="6" height="16" font="7"><a href="pdfxml.html#59">6</a></text>
<text top="983" left="521" width="279" height="21" font="2">IDE. We are able to compile Java class,</text>
<text top="1003" left="149" width="651" height="21" font="2">and it is currently evaluated for use as a part of incremental compiler infrastructure for</text>
<text top="1024" left="149" width="61" height="21" font="2">libjava.</text>
<text top="1053" left="168" width="5" height="12" font="4">5</text>
<text top="1054" left="174" width="137" height="17" font="8">http://eclipse.org/jdt/</text>
<text top="1069" left="168" width="5" height="12" font="4">6</text>
<text top="1071" left="174" width="96" height="17" font="8">www.eclipse.org</text>
</page>
<page number="60" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">42</text>
<text top="92" left="527" width="217" height="21" font="2">CHAPTER 8. VALIDATION</text>
<text top="149" left="93" width="131" height="28" font="1">8.4 Tomcat</text>
<text top="194" left="93" width="61" height="21" font="2">T<a href="pdfxml.html#60">omcat</a></text>
<text top="192" left="154" width="6" height="16" font="7"><a href="pdfxml.html#60">7</a></text>
<text top="194" left="166" width="578" height="21" font="2">is open source implementation of Java Servlet and JavaServer Pages technologies.</text>
<text top="214" left="93" width="651" height="21" font="2">We are able to start the server, we can deploy web applications to it and access them in the</text>
<text top="235" left="93" width="92" height="21" font="2">web browser.</text>
<text top="599" left="213" width="411" height="21" font="2">Figure 8.3: Screenshot of Tomcat running on the libjava</text>
<text top="640" left="118" width="102" height="21" font="2">On the Figure</text>
<text top="640" left="226" width="21" height="21" font="6"><a href="pdfxml.html#60">8.3</a></text>
<text top="640" left="247" width="497" height="21" font="2"><a href="pdfxml.html#60">, </a>a slightly modied web application distributed with Tomcat, is run-</text>
<text top="661" left="93" width="651" height="21" font="2">ning. This page is accessible from the Internet and a crawler visits links on the website, to</text>
<text top="681" left="93" width="651" height="21" font="2">test, if our virtual machine is stable enough. Tomcat is big success as it uses every feature</text>
<text top="701" left="93" width="651" height="21" font="2">Java language has, it heavily depends on threads and synchronization, it uses class loaders to</text>
<text top="722" left="93" width="651" height="21" font="2">sandbox web applications, it uses reection for hot deploy (adding a web application without</text>
<text top="742" left="93" width="651" height="21" font="2">having to restart the server). It is even possible to deploy a web application using manager</text>
<text top="762" left="93" width="651" height="21" font="2">web application (another web application distributed with Tomcat, which serves as remote</text>
<text top="783" left="93" width="148" height="21" font="2">administration tool).</text>
<text top="807" left="118" width="625" height="21" font="2">Making Tomcat work was very demanding, many native methods had to be implemented,</text>
<text top="827" left="93" width="481" height="21" font="2">various bugs in monitors or class loading were discovered and xed.</text>
<text top="1069" left="112" width="5" height="12" font="4">7</text>
<text top="1071" left="118" width="160" height="17" font="8">http://tomcat.apache.org/</text>
</page>
<page number="61" position="absolute" top="0" left="0" height="1262" width="892">
<text top="256" left="149" width="145" height="40" font="3">Chapter 9</text>
<text top="329" left="149" width="164" height="48" font="5">Summary</text>
<text top="433" left="149" width="651" height="21" font="2">In this thesis we presented libjava after o year of development. Initial version was analyzed</text>
<text top="453" left="149" width="651" height="21" font="2">and in many parts xed or completelly rewritten. All essential features required to run Java</text>
<text top="473" left="149" width="136" height="21" font="2">6 code were added.</text>
<text top="498" left="175" width="625" height="21" font="2">Currently, libjava is able to run Java 6 code, and it has been tested against various Java</text>
<text top="518" left="149" width="651" height="21" font="2">projects, namely JUnit (a testing framework for Java), Groovy (a dynamic programming</text>
<text top="538" left="149" width="651" height="21" font="2">language that compiles to Java bytecode), ECJ (a Java compiler) and Tomcat (Servlet and</text>
<text top="559" left="149" width="110" height="21" font="2">JSP container).</text>
<text top="583" left="175" width="405" height="21" font="2">From features added or changed the most important are:</text>
<text top="625" left="174" width="154" height="21" font="2">¬à xes in class loader</text>
<text top="659" left="174" width="374" height="21" font="2">¬à redesign of Java Constant pool and resolving logic</text>
<text top="693" left="174" width="273" height="21" font="2">¬à implemented notion of Class Loader</text>
<text top="727" left="174" width="179" height="21" font="2">¬à redesigned Class Space</text>
<text top="760" left="174" width="347" height="21" font="2">¬à reimplemented synchronization, Java monitors</text>
<text top="794" left="174" width="324" height="21" font="2">¬à changed native method binding mechanism</text>
<text top="828" left="174" width="266" height="21" font="2">¬à many native methods implemented</text>
<text top="870" left="175" width="625" height="21" font="2">To incrementally compile Java classes, Groovy was explored and integrated into the tools</text>
<text top="891" left="149" width="651" height="21" font="2">(namely Workspace, part of Smalltalk/X IDE, used to execute arbitrary Smalltalk, and now</text>
<text top="911" left="149" width="651" height="21" font="2">Java code too). Arbitrary Java and Groovy (superset of Java) code can be executed from</text>
<text top="931" left="149" width="41" height="21" font="2">there.</text>
<text top="956" left="175" width="625" height="21" font="2">A tool that allows programmers to use Eclipse compiler for Java from Smalltalk IDE is</text>
<text top="976" left="149" width="209" height="21" font="2">currently under development.</text>
<text top="1000" left="175" width="614" height="21" font="2">Future work embodies integration of incremental compiler and Just In Time compiler.</text>
<text top="1129" left="466" width="16" height="21" font="2">43</text>
</page>
<page number="62" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">44</text>
<text top="92" left="545" width="199" height="21" font="2">CHAPTER 9. SUMMARY</text>
</page>
<page number="63" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="11" size="14" family="Times" color="#ff0000"/>
<text top="257" left="149" width="218" height="48" font="5">Bibliography</text>
<text top="357" left="149" width="651" height="21" font="2">[1] BRACHA, G.  UNGAR, D. Mirrors: design principles for meta-level facilities of object-</text>
<text top="377" left="174" width="625" height="21" font="2">oriented programming languages. SIGPLAN Not. October 2004, 39, s. 331344. ISSN</text>
<text top="398" left="174" width="576" height="21" font="2">0362-1340. doi: http://doi.acm.org/10.1145/1035292.1029004. Accessible at: <a href="http://doi.acm.org/10.1145/1035292.1029004">&lt;</a></text>
<text top="403" left="751" width="49" height="13" font="11"><a href="http://doi.acm.org/10.1145/1035292.1029004">http:</a></text>
<text top="423" left="174" width="363" height="13" font="11"><a href="http://doi.acm.org/10.1145/1035292.1029004">//doi.acm.org/10.1145/1035292.1029004</a></text>
<text top="418" left="538" width="17" height="21" font="2"><a href="http://doi.acm.org/10.1145/1035292.1029004">&gt;.</a></text>
<text top="452" left="149" width="651" height="21" font="2">[2] DEUTSCH, L. P.  SCHIFFMAN, A. M. Ecient implementation of the smalltalk-80</text>
<text top="472" left="174" width="625" height="21" font="2">system. In Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles</text>
<text top="493" left="174" width="625" height="21" font="2">of programming languages, POPL '84, s. 297302, New York, NY, USA, 1984. ACM. doi:</text>
<text top="513" left="174" width="439" height="21" font="2">http://doi.acm.org/10.1145/800017.800542. Accessible at: <a href="http://doi.acm.org/10.1145/800017.800542">&lt;</a></text>
<text top="518" left="613" width="187" height="13" font="11"><a href="http://doi.acm.org/10.1145/800017.800542">http://doi.acm.org/</a></text>
<text top="538" left="174" width="206" height="13" font="11"><a href="http://doi.acm.org/10.1145/800017.800542">10.1145/800017.800542</a></text>
<text top="533" left="381" width="171" height="21" font="2"><a href="http://doi.acm.org/10.1145/800017.800542">&gt;. </a>ISBN 0-89791-125-3.</text>
<text top="567" left="149" width="651" height="21" font="2">[3] GOLDBERG, A.  ROBSON, D. Smalltalk-80: the language and its implementation.</text>
<text top="587" left="174" width="625" height="21" font="2">Boston, MA, USA : Addison-Wesley Longman Publishing Co., Inc., 1983. ISBN 0-201-</text>
<text top="608" left="174" width="59" height="21" font="2">11371-6.</text>
<text top="641" left="149" width="651" height="21" font="2">[4] GOSLING, J. et al. Java¬ó Language Specication, The (3rd Edition). Santa Clara,</text>
<text top="662" left="174" width="576" height="21" font="2">California 95054, U.S.A : Addison Wesley, 3 edition, 6 2005. Accessible at: <a href="http://java.sun.com/docs/books/jls/">&lt;</a></text>
<text top="667" left="751" width="49" height="13" font="11"><a href="http://java.sun.com/docs/books/jls/">http:</a></text>
<text top="687" left="174" width="295" height="13" font="11"><a href="http://java.sun.com/docs/books/jls/">//java.sun.com/docs/books/jls/</a></text>
<text top="682" left="469" width="179" height="21" font="2"><a href="http://java.sun.com/docs/books/jls/">&gt;. </a>ISBN 9780321246783.</text>
<text top="716" left="149" width="651" height="21" font="2">[5] LIANG, S.  BRACHA, G. Dynamic class loading in the Java virtual machine. SIG-</text>
<text top="736" left="174" width="625" height="21" font="2">PLAN Not. October 1998, 33, s. 3644. ISSN 0362-1340. doi: http://doi.acm.org/</text>
<text top="756" left="174" width="292" height="21" font="2">10.1145/286942.286945. Accessible at: <a href="http://doi.acm.org/10.1145/286942.286945">&lt;</a></text>
<text top="762" left="466" width="334" height="13" font="11"><a href="http://doi.acm.org/10.1145/286942.286945">http://doi.acm.org/10.1145/286942.</a></text>
<text top="782" left="174" width="59" height="13" font="11"><a href="http://doi.acm.org/10.1145/286942.286945">286945</a></text>
<text top="777" left="233" width="17" height="21" font="2"><a href="http://doi.acm.org/10.1145/286942.286945">&gt;.</a></text>
<text top="811" left="149" width="651" height="21" font="2">[6] LINDHOLM, T.  YELLIN, F. Java¬ó Virtual Machine Specication, The (2nd Edition).</text>
<text top="831" left="174" width="625" height="21" font="2">Santa Clara, California 95054 U.S.A : Prentice Hall, 2 edition, 4 1999. Accessible at:</text>
<text top="851" left="174" width="13" height="21" font="2"><a href="http://java.sun.com/docs/books/jvms/">&lt;</a></text>
<text top="857" left="187" width="353" height="13" font="11"><a href="http://java.sun.com/docs/books/jvms/">http://java.sun.com/docs/books/jvms/</a></text>
<text top="851" left="541" width="179" height="21" font="2"><a href="http://java.sun.com/docs/books/jvms/">&gt;. </a>ISBN 9780201432947.</text>
<text top="885" left="149" width="533" height="21" font="2">[7] Oracle Java SE Technical Documentation: How Classes are Found. <a href="http://docs.oracle.com/javase/1.4.2/docs/tooldocs/findingclasses.html">&lt;</a></text>
<text top="890" left="682" width="118" height="13" font="11"><a href="http://docs.oracle.com/javase/1.4.2/docs/tooldocs/findingclasses.html">http://docs.</a></text>
<text top="911" left="174" width="560" height="13" font="11"><a href="http://docs.oracle.com/javase/1.4.2/docs/tooldocs/findingclasses.html">oracle.com/javase/1.4.2/docs/tooldocs/findingclasses.html</a></text>
<text top="905" left="734" width="17" height="21" font="2"><a href="http://docs.oracle.com/javase/1.4.2/docs/tooldocs/findingclasses.html">&gt;.</a></text>
<text top="905" left="776" width="24" height="21" font="2">Ac-</text>
<text top="926" left="174" width="141" height="21" font="2">cessed: 23/11/2011.</text>
<text top="959" left="149" width="651" height="21" font="2">[8] TOLKSDORF, R. Programming languages for the Java Virtual Machine, August 2010.</text>
<text top="980" left="174" width="116" height="21" font="2">Accessible at: <a href="http://www.is-research.de/info/vmlanguages/">&lt;</a></text>
<text top="985" left="290" width="423" height="13" font="11"><a href="http://www.is-research.de/info/vmlanguages/">http://www.is-research.de/info/vmlanguages/</a></text>
<text top="980" left="713" width="17" height="21" font="2"><a href="http://www.is-research.de/info/vmlanguages/">&gt;.</a></text>
<text top="1000" left="174" width="13" height="21" font="2"><a href="http://www.is-research.de/info/vmlanguages/">&lt;</a></text>
<text top="1005" left="187" width="423" height="13" font="11"><a href="http://www.is-research.de/info/vmlanguages/">http://www.is-research.de/info/vmlanguages/</a></text>
<text top="1000" left="610" width="17" height="21" font="2"><a href="http://www.is-research.de/info/vmlanguages/">&gt;.</a></text>
<text top="1129" left="466" width="16" height="21" font="2">45</text>
</page>
<page number="64" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">46</text>
<text top="92" left="614" width="130" height="21" font="2">BIBLIOGRAPHY</text>
</page>
<page number="65" position="absolute" top="0" left="0" height="1262" width="892">
<text top="256" left="149" width="176" height="40" font="3">Appendix A</text>
<text top="329" left="149" width="440" height="48" font="5">List of used abbreviations</text>
<text top="433" left="149" width="203" height="21" font="2">JVM Java Virtual Machine</text>
<text top="466" left="149" width="143" height="21" font="2">ST/X Smalltalk/X</text>
<text top="500" left="149" width="190" height="21" font="2">JIT Just-in-time compiler</text>
<text top="534" left="149" width="402" height="21" font="2">JAR Java Archive, standardized zip-like archive format</text>
<text top="568" left="149" width="310" height="21" font="2">IDE Integrated Development Environment</text>
<text top="601" left="149" width="240" height="21" font="2">JLS Java Language Specication</text>
<text top="635" left="149" width="5" height="33" font="2">...</text>
<text top="1129" left="466" width="16" height="21" font="2">47</text>
</page>
<page number="66" position="absolute" top="0" left="0" height="1262" width="892">
<text top="92" left="93" width="16" height="21" font="2">48</text>
<text top="92" left="363" width="381" height="21" font="2">APPENDIX A. LIST OF USED ABBREVIATIONS</text>
</page>
<page number="67" position="absolute" top="0" left="0" height="1262" width="892">
<text top="256" left="149" width="175" height="40" font="3">Appendix B</text>
<text top="329" left="149" width="411" height="48" font="5">Content of attached CD</text>
<text top="433" left="149" width="651" height="21" font="2">Smalltalk/X development environment, prepared for use with Libjava, is attached on a CD.</text>
<text top="453" left="149" width="651" height="21" font="2">To start Smalltalk/X, a shell script is attached as well. After start up, tutorial.st, interactive</text>
<text top="473" left="149" width="253" height="21" font="2">tutorial for Libjava, can be opened.</text>
<text top="498" left="175" width="266" height="21" font="2">Attached CD has following structure:</text>
<text top="545" left="149" width="10" height="13" font="2">.</text>
<text top="566" left="149" width="137" height="13" font="2">+-- README.txt</text>
<text top="586" left="149" width="157" height="13" font="2">+-- start_stx.sh</text>
<text top="606" left="149" width="69" height="13" font="2">+-- stx</text>
<text top="626" left="149" width="10" height="13" font="2">|</text>
<text top="626" left="188" width="69" height="13" font="2">+-- bin</text>
<text top="647" left="149" width="10" height="13" font="2">|</text>
<text top="647" left="188" width="10" height="13" font="2">|</text>
<text top="647" left="228" width="69" height="13" font="2">+-- stx</text>
<text top="667" left="149" width="10" height="13" font="2">|</text>
<text top="667" left="188" width="10" height="13" font="2">|</text>
<text top="667" left="228" width="69" height="13" font="2">+-- stc</text>
<text top="687" left="149" width="10" height="13" font="2">|</text>
<text top="687" left="188" width="69" height="13" font="2">+-- lib</text>
<text top="708" left="149" width="147" height="13" font="2">+-- stx.tar.bz2</text>
<text top="728" left="149" width="147" height="13" font="2">+-- tutorial.st</text>
<text top="1129" left="466" width="16" height="21" font="2">49</text>
</page>
</pdf2xml>
